

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Feb 21 15:25:05 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    80                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    83                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           	psect	idataCOMRAM
    86  004304                     __pidataCOMRAM:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _goffset
    90  004304  60                 	db	96
    91  004305  0B                 	db	11
    92  004306  44                 	db	68
    93                           
    94                           ;initializer for _gscale
    95  004307  CD                 	db	205
    96  004308  8C                 	db	140
    97  004309  3F                 	db	63
    98                           
    99                           ;initializer for _NewDay
   100  00430A  0001               	dw	1
   101                           
   102                           ;initializer for _Nlong
   103  00430C  0032               	dw	50
   104                           
   105                           ;initializer for _Nshort
   106  00430E  000A               	dw	10
   107                           
   108                           ;initializer for _Pumping
   109  004310  0001               	dw	1
   110                           
   111                           ;initializer for _day
   112  004312  0001               	dw	1
   113                           
   114                           ;initializer for _month
   115  004314  0001               	dw	1
   116                           
   117                           ;initializer for _offcountmax
   118  004316  07D0               	dw	2000
   119                           
   120                           ;initializer for _onthresh
   121  004318  07D0               	dw	2000
   122                           
   123                           ;initializer for _year
   124  00431A  07DF               	dw	2015
   125                           
   126                           	psect	idataBANK1
   127  003FA8                     __pidataBANK1:
   128                           	opt stack 0
   129                           
   130                           ;initializer for _MsgFromPIC
   131  003FA8  0D                 	db	13
   132  003FA9  0A                 	db	10
   133  003FAA  59                 	db	89
   134  003FAB  6F                 	db	111
   135  003FAC  75                 	db	117
   136  003FAD  20                 	db	32
   137  003FAE  74                 	db	116
   138  003FAF  79                 	db	121
   139  003FB0  70                 	db	112
   140  003FB1  65                 	db	101
   141  003FB2  64                 	db	100
   142  003FB3  20                 	db	32
   143  003FB4  3A                 	db	58
   144  003FB5  00                 	db	0
   145                           
   146                           ;initializer for cmFilterHighPassUsingLowPass@F4482
   147  003FB6  0001               	dw	1
   148  003FB8  0001               	dw	1
   149  003FBA  0001               	dw	1
   150  003FBC  0001               	dw	1
   151                           
   152                           ;initializer for _NewMonth
   153  003FBE  0001               	dw	1
   154                           
   155                           ;initializer for _cmWeightVector
   156  003FC0  D981               	dw	55681
   157  003FC2  FFEB               	dw	65515
   158  003FC4  0009               	dw	9
   159  003FC6  0028               	dw	40
   160  003FC8  0005               	dw	5
   161  003FCA  FFFD               	dw	65533
   162  003FCC  0002               	dw	2
   163  003FCE  0005               	dw	5
   164  003FD0  0003               	dw	3
   165  003FD2  0002               	dw	2
   166  003FD4  0002               	dw	2
   167  003FD6  FFFE               	dw	65534
   168  003FD8  FFFE               	dw	65534
   169  003FDA  FFFE               	dw	65534
   170  003FDC  FFFD               	dw	65533
   171  003FDE  0000               	dw	0
   172  003FE0  0002               	dw	2
   173  003FE2  FFFF               	dw	65535
   174  003FE4  FFFE               	dw	65534
   175  003FE6  0001               	dw	1
   176  003FE8  FFFD               	dw	65533
   177                           
   178                           ;initializer for _ConfigWord
   179  003FEA  43                 	db	67
   180  003FEB  4F                 	db	79
   181  003FEC  4E                 	db	78
   182  003FED  46                 	db	70
   183  003FEE  49                 	db	73
   184  003FEF  47                 	db	71
   185  003FF0  0D                 	db	13
   186  003FF1  00                 	db	0
   187  003FF2  00                 	db	0
   188  003FF3  00                 	db	0
   189  003FF4  00                 	db	0
   190  003FF5  00                 	db	0
   191  003FF6  00                 	db	0
   192  003FF7  00                 	db	0
   193  003FF8  00                 	db	0
   194  003FF9  00                 	db	0
   195  003FFA  00                 	db	0
   196  003FFB  00                 	db	0
   197  003FFC  00                 	db	0
   198  003FFD  00                 	db	0
   199                           
   200                           	psect	mediumconst
   201  007754                     __pmediumconst:
   202                           	opt stack 0
   203  007754  00                 	db	0
   204  007755                     _Sinewave:
   205                           	opt stack 0
   206  007755  0000               	dw	0
   207  007757  00C9               	dw	201
   208  007759  0192               	dw	402
   209  00775B  025B               	dw	603
   210  00775D  0324               	dw	804
   211  00775F  03ED               	dw	1005
   212  007761  04B6               	dw	1206
   213  007763  057E               	dw	1406
   214  007765  0647               	dw	1607
   215  007767  0710               	dw	1808
   216  007769  07D9               	dw	2009
   217  00776B  08A1               	dw	2209
   218  00776D  096A               	dw	2410
   219  00776F  0A32               	dw	2610
   220  007771  0AFB               	dw	2811
   221  007773  0BC3               	dw	3011
   222  007775  0C8B               	dw	3211
   223  007777  0D53               	dw	3411
   224  007779  0E1B               	dw	3611
   225  00777B  0EE3               	dw	3811
   226  00777D  0FAB               	dw	4011
   227  00777F  1072               	dw	4210
   228  007781  1139               	dw	4409
   229  007783  1200               	dw	4608
   230  007785  12C7               	dw	4807
   231  007787  138E               	dw	5006
   232  007789  1455               	dw	5205
   233  00778B  151B               	dw	5403
   234  00778D  15E1               	dw	5601
   235  00778F  16A7               	dw	5799
   236  007791  176D               	dw	5997
   237  007793  1833               	dw	6195
   238  007795  18F8               	dw	6392
   239  007797  19BD               	dw	6589
   240  007799  1A82               	dw	6786
   241  00779B  1B46               	dw	6982
   242  00779D  1C0B               	dw	7179
   243  00779F  1CCF               	dw	7375
   244  0077A1  1D93               	dw	7571
   245  0077A3  1E56               	dw	7766
   246  0077A5  1F19               	dw	7961
   247  0077A7  1FDC               	dw	8156
   248  0077A9  209F               	dw	8351
   249  0077AB  2161               	dw	8545
   250  0077AD  2223               	dw	8739
   251  0077AF  22E4               	dw	8932
   252  0077B1  23A6               	dw	9126
   253  0077B3  2467               	dw	9319
   254  0077B5  2527               	dw	9511
   255  0077B7  25E7               	dw	9703
   256  0077B9  26A7               	dw	9895
   257  0077BB  2767               	dw	10087
   258  0077BD  2826               	dw	10278
   259  0077BF  28E5               	dw	10469
   260  0077C1  29A3               	dw	10659
   261  0077C3  2A61               	dw	10849
   262  0077C5  2B1E               	dw	11038
   263  0077C7  2BDB               	dw	11227
   264  0077C9  2C98               	dw	11416
   265  0077CB  2D54               	dw	11604
   266  0077CD  2E10               	dw	11792
   267  0077CF  2ECC               	dw	11980
   268  0077D1  2F86               	dw	12166
   269  0077D3  3041               	dw	12353
   270  0077D5  30FB               	dw	12539
   271  0077D7  31B4               	dw	12724
   272  0077D9  326D               	dw	12909
   273  0077DB  3326               	dw	13094
   274  0077DD  33DE               	dw	13278
   275  0077DF  3496               	dw	13462
   276  0077E1  354D               	dw	13645
   277  0077E3  3603               	dw	13827
   278  0077E5  36B9               	dw	14009
   279  0077E7  376F               	dw	14191
   280  0077E9  3824               	dw	14372
   281  0077EB  38D8               	dw	14552
   282  0077ED  398C               	dw	14732
   283  0077EF  3A3F               	dw	14911
   284  0077F1  3AF2               	dw	15090
   285  0077F3  3BA4               	dw	15268
   286  0077F5  3C56               	dw	15446
   287  0077F7  3D07               	dw	15623
   288  0077F9  3DB7               	dw	15799
   289  0077FB  3E67               	dw	15975
   290  0077FD  3F16               	dw	16150
   291  0077FF  3FC5               	dw	16325
   292  007801  4073               	dw	16499
   293  007803  4120               	dw	16672
   294  007805  41CD               	dw	16845
   295  007807  4279               	dw	17017
   296  007809  4325               	dw	17189
   297  00780B  43D0               	dw	17360
   298  00780D  447A               	dw	17530
   299  00780F  4523               	dw	17699
   300  007811  45CC               	dw	17868
   301  007813  4674               	dw	18036
   302  007815  471C               	dw	18204
   303  007817  47C3               	dw	18371
   304  007819  4869               	dw	18537
   305  00781B  490E               	dw	18702
   306  00781D  49B3               	dw	18867
   307  00781F  4A57               	dw	19031
   308  007821  4AFA               	dw	19194
   309  007823  4B9D               	dw	19357
   310  007825  4C3F               	dw	19519
   311  007827  4CE0               	dw	19680
   312  007829  4D80               	dw	19840
   313  00782B  4E20               	dw	20000
   314  00782D  4EBF               	dw	20159
   315  00782F  4F5D               	dw	20317
   316  007831  4FFA               	dw	20474
   317  007833  5097               	dw	20631
   318  007835  5133               	dw	20787
   319  007837  51CE               	dw	20942
   320  007839  5268               	dw	21096
   321  00783B  5301               	dw	21249
   322  00783D  539A               	dw	21402
   323  00783F  5432               	dw	21554
   324  007841  54C9               	dw	21705
   325  007843  555F               	dw	21855
   326  007845  55F4               	dw	22004
   327  007847  5689               	dw	22153
   328  007849  571D               	dw	22301
   329  00784B  57B0               	dw	22448
   330  00784D  5842               	dw	22594
   331  00784F  58D3               	dw	22739
   332  007851  5963               	dw	22883
   333  007853  59F3               	dw	23027
   334  007855  5A81               	dw	23169
   335  007857  5B0F               	dw	23311
   336  007859  5B9C               	dw	23452
   337  00785B  5C28               	dw	23592
   338  00785D  5CB3               	dw	23731
   339  00785F  5D3D               	dw	23869
   340  007861  5DC6               	dw	24006
   341  007863  5E4F               	dw	24143
   342  007865  5ED6               	dw	24278
   343  007867  5F5D               	dw	24413
   344  007869  5FE2               	dw	24546
   345  00786B  6067               	dw	24679
   346  00786D  60EB               	dw	24811
   347  00786F  616E               	dw	24942
   348  007871  61F0               	dw	25072
   349  007873  6271               	dw	25201
   350  007875  62F1               	dw	25329
   351  007877  6370               	dw	25456
   352  007879  63EE               	dw	25582
   353  00787B  646B               	dw	25707
   354  00787D  64E7               	dw	25831
   355  00787F  6562               	dw	25954
   356  007881  65DD               	dw	26077
   357  007883  6656               	dw	26198
   358  007885  66CE               	dw	26318
   359  007887  6745               	dw	26437
   360  007889  67BC               	dw	26556
   361  00788B  6831               	dw	26673
   362  00788D  68A5               	dw	26789
   363  00788F  6919               	dw	26905
   364  007891  698B               	dw	27019
   365  007893  69FC               	dw	27132
   366  007895  6A6C               	dw	27244
   367  007897  6ADB               	dw	27355
   368  007899  6B4A               	dw	27466
   369  00789B  6BB7               	dw	27575
   370  00789D  6C23               	dw	27683
   371  00789F  6C8E               	dw	27790
   372  0078A1  6CF8               	dw	27896
   373  0078A3  6D61               	dw	28001
   374  0078A5  6DC9               	dw	28105
   375  0078A7  6E30               	dw	28208
   376  0078A9  6E95               	dw	28309
   377  0078AB  6EFA               	dw	28410
   378  0078AD  6F5E               	dw	28510
   379  0078AF  6FC0               	dw	28608
   380  0078B1  7022               	dw	28706
   381  0078B3  7082               	dw	28802
   382  0078B5  70E1               	dw	28897
   383  0078B7  7140               	dw	28992
   384  0078B9  719D               	dw	29085
   385  0078BB  71F9               	dw	29177
   386  0078BD  7254               	dw	29268
   387  0078BF  72AE               	dw	29358
   388  0078C1  7306               	dw	29446
   389  0078C3  735E               	dw	29534
   390  0078C5  73B5               	dw	29621
   391  0078C7  740A               	dw	29706
   392  0078C9  745E               	dw	29790
   393  0078CB  74B1               	dw	29873
   394  0078CD  7503               	dw	29955
   395  0078CF  7554               	dw	30036
   396  0078D1  75A4               	dw	30116
   397  0078D3  75F3               	dw	30195
   398  0078D5  7640               	dw	30272
   399  0078D7  768D               	dw	30349
   400  0078D9  76D8               	dw	30424
   401  0078DB  7722               	dw	30498
   402  0078DD  776B               	dw	30571
   403  0078DF  77B3               	dw	30643
   404  0078E1  77F9               	dw	30713
   405  0078E3  783F               	dw	30783
   406  0078E5  7883               	dw	30851
   407  0078E7  78C6               	dw	30918
   408  0078E9  7908               	dw	30984
   409  0078EB  7949               	dw	31049
   410  0078ED  7989               	dw	31113
   411  0078EF  79C7               	dw	31175
   412  0078F1  7A04               	dw	31236
   413  0078F3  7A41               	dw	31297
   414  0078F5  7A7C               	dw	31356
   415  0078F7  7AB5               	dw	31413
   416  0078F9  7AEE               	dw	31470
   417  0078FB  7B25               	dw	31525
   418  0078FD  7B5C               	dw	31580
   419  0078FF  7B91               	dw	31633
   420  007901  7BC4               	dw	31684
   421  007903  7BF7               	dw	31735
   422  007905  7C29               	dw	31785
   423  007907  7C59               	dw	31833
   424  007909  7C88               	dw	31880
   425  00790B  7CB6               	dw	31926
   426  00790D  7CE2               	dw	31970
   427  00790F  7D0E               	dw	32014
   428  007911  7D38               	dw	32056
   429  007913  7D61               	dw	32097
   430  007915  7D89               	dw	32137
   431  007917  7DB0               	dw	32176
   432  007919  7DD5               	dw	32213
   433  00791B  7DF9               	dw	32249
   434  00791D  7E1C               	dw	32284
   435  00791F  7E3E               	dw	32318
   436  007921  7E5E               	dw	32350
   437  007923  7E7E               	dw	32382
   438  007925  7E9C               	dw	32412
   439  007927  7EB9               	dw	32441
   440  007929  7ED4               	dw	32468
   441  00792B  7EEF               	dw	32495
   442  00792D  7F08               	dw	32520
   443  00792F  7F20               	dw	32544
   444  007931  7F37               	dw	32567
   445  007933  7F4C               	dw	32588
   446  007935  7F61               	dw	32609
   447  007937  7F74               	dw	32628
   448  007939  7F86               	dw	32646
   449  00793B  7F96               	dw	32662
   450  00793D  7FA6               	dw	32678
   451  00793F  7FB4               	dw	32692
   452  007941  7FC1               	dw	32705
   453  007943  7FCD               	dw	32717
   454  007945  7FD7               	dw	32727
   455  007947  7FE0               	dw	32736
   456  007949  7FE8               	dw	32744
   457  00794B  7FEF               	dw	32751
   458  00794D  7FF5               	dw	32757
   459  00794F  7FF9               	dw	32761
   460  007951  7FFC               	dw	32764
   461  007953  7FFE               	dw	32766
   462  007955  7FFF               	dw	32767
   463  007957  7FFE               	dw	32766
   464  007959  7FFC               	dw	32764
   465  00795B  7FF9               	dw	32761
   466  00795D  7FF5               	dw	32757
   467  00795F  7FEF               	dw	32751
   468  007961  7FE8               	dw	32744
   469  007963  7FE0               	dw	32736
   470  007965  7FD7               	dw	32727
   471  007967  7FCD               	dw	32717
   472  007969  7FC1               	dw	32705
   473  00796B  7FB4               	dw	32692
   474  00796D  7FA6               	dw	32678
   475  00796F  7F96               	dw	32662
   476  007971  7F86               	dw	32646
   477  007973  7F74               	dw	32628
   478  007975  7F61               	dw	32609
   479  007977  7F4C               	dw	32588
   480  007979  7F37               	dw	32567
   481  00797B  7F20               	dw	32544
   482  00797D  7F08               	dw	32520
   483  00797F  7EEF               	dw	32495
   484  007981  7ED4               	dw	32468
   485  007983  7EB9               	dw	32441
   486  007985  7E9C               	dw	32412
   487  007987  7E7E               	dw	32382
   488  007989  7E5E               	dw	32350
   489  00798B  7E3E               	dw	32318
   490  00798D  7E1C               	dw	32284
   491  00798F  7DF9               	dw	32249
   492  007991  7DD5               	dw	32213
   493  007993  7DB0               	dw	32176
   494  007995  7D89               	dw	32137
   495  007997  7D61               	dw	32097
   496  007999  7D38               	dw	32056
   497  00799B  7D0E               	dw	32014
   498  00799D  7CE2               	dw	31970
   499  00799F  7CB6               	dw	31926
   500  0079A1  7C88               	dw	31880
   501  0079A3  7C59               	dw	31833
   502  0079A5  7C29               	dw	31785
   503  0079A7  7BF7               	dw	31735
   504  0079A9  7BC4               	dw	31684
   505  0079AB  7B91               	dw	31633
   506  0079AD  7B5C               	dw	31580
   507  0079AF  7B25               	dw	31525
   508  0079B1  7AEE               	dw	31470
   509  0079B3  7AB5               	dw	31413
   510  0079B5  7A7C               	dw	31356
   511  0079B7  7A41               	dw	31297
   512  0079B9  7A04               	dw	31236
   513  0079BB  79C7               	dw	31175
   514  0079BD  7989               	dw	31113
   515  0079BF  7949               	dw	31049
   516  0079C1  7908               	dw	30984
   517  0079C3  78C6               	dw	30918
   518  0079C5  7883               	dw	30851
   519  0079C7  783F               	dw	30783
   520  0079C9  77F9               	dw	30713
   521  0079CB  77B3               	dw	30643
   522  0079CD  776B               	dw	30571
   523  0079CF  7722               	dw	30498
   524  0079D1  76D8               	dw	30424
   525  0079D3  768D               	dw	30349
   526  0079D5  7640               	dw	30272
   527  0079D7  75F3               	dw	30195
   528  0079D9  75A4               	dw	30116
   529  0079DB  7554               	dw	30036
   530  0079DD  7503               	dw	29955
   531  0079DF  74B1               	dw	29873
   532  0079E1  745E               	dw	29790
   533  0079E3  740A               	dw	29706
   534  0079E5  73B5               	dw	29621
   535  0079E7  735E               	dw	29534
   536  0079E9  7306               	dw	29446
   537  0079EB  72AE               	dw	29358
   538  0079ED  7254               	dw	29268
   539  0079EF  71F9               	dw	29177
   540  0079F1  719D               	dw	29085
   541  0079F3  7140               	dw	28992
   542  0079F5  70E1               	dw	28897
   543  0079F7  7082               	dw	28802
   544  0079F9  7022               	dw	28706
   545  0079FB  6FC0               	dw	28608
   546  0079FD  6F5E               	dw	28510
   547  0079FF  6EFA               	dw	28410
   548  007A01  6E95               	dw	28309
   549  007A03  6E30               	dw	28208
   550  007A05  6DC9               	dw	28105
   551  007A07  6D61               	dw	28001
   552  007A09  6CF8               	dw	27896
   553  007A0B  6C8E               	dw	27790
   554  007A0D  6C23               	dw	27683
   555  007A0F  6BB7               	dw	27575
   556  007A11  6B4A               	dw	27466
   557  007A13  6ADB               	dw	27355
   558  007A15  6A6C               	dw	27244
   559  007A17  69FC               	dw	27132
   560  007A19  698B               	dw	27019
   561  007A1B  6919               	dw	26905
   562  007A1D  68A5               	dw	26789
   563  007A1F  6831               	dw	26673
   564  007A21  67BC               	dw	26556
   565  007A23  6745               	dw	26437
   566  007A25  66CE               	dw	26318
   567  007A27  6656               	dw	26198
   568  007A29  65DD               	dw	26077
   569  007A2B  6562               	dw	25954
   570  007A2D  64E7               	dw	25831
   571  007A2F  646B               	dw	25707
   572  007A31  63EE               	dw	25582
   573  007A33  6370               	dw	25456
   574  007A35  62F1               	dw	25329
   575  007A37  6271               	dw	25201
   576  007A39  61F0               	dw	25072
   577  007A3B  616E               	dw	24942
   578  007A3D  60EB               	dw	24811
   579  007A3F  6067               	dw	24679
   580  007A41  5FE2               	dw	24546
   581  007A43  5F5D               	dw	24413
   582  007A45  5ED6               	dw	24278
   583  007A47  5E4F               	dw	24143
   584  007A49  5DC6               	dw	24006
   585  007A4B  5D3D               	dw	23869
   586  007A4D  5CB3               	dw	23731
   587  007A4F  5C28               	dw	23592
   588  007A51  5B9C               	dw	23452
   589  007A53  5B0F               	dw	23311
   590  007A55  5A81               	dw	23169
   591  007A57  59F3               	dw	23027
   592  007A59  5963               	dw	22883
   593  007A5B  58D3               	dw	22739
   594  007A5D  5842               	dw	22594
   595  007A5F  57B0               	dw	22448
   596  007A61  571D               	dw	22301
   597  007A63  5689               	dw	22153
   598  007A65  55F4               	dw	22004
   599  007A67  555F               	dw	21855
   600  007A69  54C9               	dw	21705
   601  007A6B  5432               	dw	21554
   602  007A6D  539A               	dw	21402
   603  007A6F  5301               	dw	21249
   604  007A71  5268               	dw	21096
   605  007A73  51CE               	dw	20942
   606  007A75  5133               	dw	20787
   607  007A77  5097               	dw	20631
   608  007A79  4FFA               	dw	20474
   609  007A7B  4F5D               	dw	20317
   610  007A7D  4EBF               	dw	20159
   611  007A7F  4E20               	dw	20000
   612  007A81  4D80               	dw	19840
   613  007A83  4CE0               	dw	19680
   614  007A85  4C3F               	dw	19519
   615  007A87  4B9D               	dw	19357
   616  007A89  4AFA               	dw	19194
   617  007A8B  4A57               	dw	19031
   618  007A8D  49B3               	dw	18867
   619  007A8F  490E               	dw	18702
   620  007A91  4869               	dw	18537
   621  007A93  47C3               	dw	18371
   622  007A95  471C               	dw	18204
   623  007A97  4674               	dw	18036
   624  007A99  45CC               	dw	17868
   625  007A9B  4523               	dw	17699
   626  007A9D  447A               	dw	17530
   627  007A9F  43D0               	dw	17360
   628  007AA1  4325               	dw	17189
   629  007AA3  4279               	dw	17017
   630  007AA5  41CD               	dw	16845
   631  007AA7  4120               	dw	16672
   632  007AA9  4073               	dw	16499
   633  007AAB  3FC5               	dw	16325
   634  007AAD  3F16               	dw	16150
   635  007AAF  3E67               	dw	15975
   636  007AB1  3DB7               	dw	15799
   637  007AB3  3D07               	dw	15623
   638  007AB5  3C56               	dw	15446
   639  007AB7  3BA4               	dw	15268
   640  007AB9  3AF2               	dw	15090
   641  007ABB  3A3F               	dw	14911
   642  007ABD  398C               	dw	14732
   643  007ABF  38D8               	dw	14552
   644  007AC1  3824               	dw	14372
   645  007AC3  376F               	dw	14191
   646  007AC5  36B9               	dw	14009
   647  007AC7  3603               	dw	13827
   648  007AC9  354D               	dw	13645
   649  007ACB  3496               	dw	13462
   650  007ACD  33DE               	dw	13278
   651  007ACF  3326               	dw	13094
   652  007AD1  326D               	dw	12909
   653  007AD3  31B4               	dw	12724
   654  007AD5  30FB               	dw	12539
   655  007AD7  3041               	dw	12353
   656  007AD9  2F86               	dw	12166
   657  007ADB  2ECC               	dw	11980
   658  007ADD  2E10               	dw	11792
   659  007ADF  2D54               	dw	11604
   660  007AE1  2C98               	dw	11416
   661  007AE3  2BDB               	dw	11227
   662  007AE5  2B1E               	dw	11038
   663  007AE7  2A61               	dw	10849
   664  007AE9  29A3               	dw	10659
   665  007AEB  28E5               	dw	10469
   666  007AED  2826               	dw	10278
   667  007AEF  2767               	dw	10087
   668  007AF1  26A7               	dw	9895
   669  007AF3  25E7               	dw	9703
   670  007AF5  2527               	dw	9511
   671  007AF7  2467               	dw	9319
   672  007AF9  23A6               	dw	9126
   673  007AFB  22E4               	dw	8932
   674  007AFD  2223               	dw	8739
   675  007AFF  2161               	dw	8545
   676  007B01  209F               	dw	8351
   677  007B03  1FDC               	dw	8156
   678  007B05  1F19               	dw	7961
   679  007B07  1E56               	dw	7766
   680  007B09  1D93               	dw	7571
   681  007B0B  1CCF               	dw	7375
   682  007B0D  1C0B               	dw	7179
   683  007B0F  1B46               	dw	6982
   684  007B11  1A82               	dw	6786
   685  007B13  19BD               	dw	6589
   686  007B15  18F8               	dw	6392
   687  007B17  1833               	dw	6195
   688  007B19  176D               	dw	5997
   689  007B1B  16A7               	dw	5799
   690  007B1D  15E1               	dw	5601
   691  007B1F  151B               	dw	5403
   692  007B21  1455               	dw	5205
   693  007B23  138E               	dw	5006
   694  007B25  12C7               	dw	4807
   695  007B27  1200               	dw	4608
   696  007B29  1139               	dw	4409
   697  007B2B  1072               	dw	4210
   698  007B2D  0FAB               	dw	4011
   699  007B2F  0EE3               	dw	3811
   700  007B31  0E1B               	dw	3611
   701  007B33  0D53               	dw	3411
   702  007B35  0C8B               	dw	3211
   703  007B37  0BC3               	dw	3011
   704  007B39  0AFB               	dw	2811
   705  007B3B  0A32               	dw	2610
   706  007B3D  096A               	dw	2410
   707  007B3F  08A1               	dw	2209
   708  007B41  07D9               	dw	2009
   709  007B43  0710               	dw	1808
   710  007B45  0647               	dw	1607
   711  007B47  057E               	dw	1406
   712  007B49  04B6               	dw	1206
   713  007B4B  03ED               	dw	1005
   714  007B4D  0324               	dw	804
   715  007B4F  025B               	dw	603
   716  007B51  0192               	dw	402
   717  007B53  00C9               	dw	201
   718  007B55  0000               	dw	0
   719  007B57  FF37               	dw	65335
   720  007B59  FE6E               	dw	65134
   721  007B5B  FDA5               	dw	64933
   722  007B5D  FCDC               	dw	64732
   723  007B5F  FC13               	dw	64531
   724  007B61  FB4A               	dw	64330
   725  007B63  FA82               	dw	64130
   726  007B65  F9B9               	dw	63929
   727  007B67  F8F0               	dw	63728
   728  007B69  F827               	dw	63527
   729  007B6B  F75F               	dw	63327
   730  007B6D  F696               	dw	63126
   731  007B6F  F5CE               	dw	62926
   732  007B71  F505               	dw	62725
   733  007B73  F43D               	dw	62525
   734  007B75  F375               	dw	62325
   735  007B77  F2AD               	dw	62125
   736  007B79  F1E5               	dw	61925
   737  007B7B  F11D               	dw	61725
   738  007B7D  F055               	dw	61525
   739  007B7F  EF8E               	dw	61326
   740  007B81  EEC7               	dw	61127
   741  007B83  EE00               	dw	60928
   742  007B85  ED39               	dw	60729
   743  007B87  EC72               	dw	60530
   744  007B89  EBAB               	dw	60331
   745  007B8B  EAE5               	dw	60133
   746  007B8D  EA1F               	dw	59935
   747  007B8F  E959               	dw	59737
   748  007B91  E893               	dw	59539
   749  007B93  E7CD               	dw	59341
   750  007B95  E708               	dw	59144
   751  007B97  E643               	dw	58947
   752  007B99  E57E               	dw	58750
   753  007B9B  E4BA               	dw	58554
   754  007B9D  E3F5               	dw	58357
   755  007B9F  E331               	dw	58161
   756  007BA1  E26D               	dw	57965
   757  007BA3  E1AA               	dw	57770
   758  007BA5  E0E7               	dw	57575
   759  007BA7  E024               	dw	57380
   760  007BA9  DF61               	dw	57185
   761  007BAB  DE9F               	dw	56991
   762  007BAD  DDDD               	dw	56797
   763  007BAF  DD1C               	dw	56604
   764  007BB1  DC5A               	dw	56410
   765  007BB3  DB99               	dw	56217
   766  007BB5  DAD9               	dw	56025
   767  007BB7  DA19               	dw	55833
   768  007BB9  D959               	dw	55641
   769  007BBB  D899               	dw	55449
   770  007BBD  D7DA               	dw	55258
   771  007BBF  D71B               	dw	55067
   772  007BC1  D65D               	dw	54877
   773  007BC3  D59F               	dw	54687
   774  007BC5  D4E2               	dw	54498
   775  007BC7  D425               	dw	54309
   776  007BC9  D368               	dw	54120
   777  007BCB  D2AC               	dw	53932
   778  007BCD  D1F0               	dw	53744
   779  007BCF  D134               	dw	53556
   780  007BD1  D07A               	dw	53370
   781  007BD3  CFBF               	dw	53183
   782  007BD5  CF05               	dw	52997
   783  007BD7  CE4C               	dw	52812
   784  007BD9  CD93               	dw	52627
   785  007BDB  CCDA               	dw	52442
   786  007BDD  CC22               	dw	52258
   787  007BDF  CB6A               	dw	52074
   788  007BE1  CAB3               	dw	51891
   789  007BE3  C9FD               	dw	51709
   790  007BE5  C947               	dw	51527
   791  007BE7  C891               	dw	51345
   792  007BE9  C7DC               	dw	51164
   793  007BEB  C728               	dw	50984
   794  007BED  C674               	dw	50804
   795  007BEF  C5C1               	dw	50625
   796  007BF1  C50E               	dw	50446
   797  007BF3  C45C               	dw	50268
   798  007BF5  C3AA               	dw	50090
   799  007BF7  C2F9               	dw	49913
   800  007BF9  C249               	dw	49737
   801  007BFB  C199               	dw	49561
   802  007BFD  C0EA               	dw	49386
   803  007BFF  C03B               	dw	49211
   804  007C01  BF8D               	dw	49037
   805  007C03  BEE0               	dw	48864
   806  007C05  BE33               	dw	48691
   807  007C07  BD87               	dw	48519
   808  007C09  BCDB               	dw	48347
   809  007C0B  BC30               	dw	48176
   810  007C0D  BB86               	dw	48006
   811  007C0F  BADD               	dw	47837
   812  007C11  BA34               	dw	47668
   813  007C13  B98C               	dw	47500
   814  007C15  B8E4               	dw	47332
   815  007C17  B83D               	dw	47165
   816  007C19  B797               	dw	46999
   817  007C1B  B6F2               	dw	46834
   818  007C1D  B64D               	dw	46669
   819  007C1F  B5A9               	dw	46505
   820  007C21  B506               	dw	46342
   821  007C23  B463               	dw	46179
   822  007C25  B3C1               	dw	46017
   823  007C27  B320               	dw	45856
   824  007C29  B280               	dw	45696
   825  007C2B  B1E0               	dw	45536
   826  007C2D  B141               	dw	45377
   827  007C2F  B0A3               	dw	45219
   828  007C31  B006               	dw	45062
   829  007C33  AF69               	dw	44905
   830  007C35  AECD               	dw	44749
   831  007C37  AE32               	dw	44594
   832  007C39  AD98               	dw	44440
   833  007C3B  ACFF               	dw	44287
   834  007C3D  AC66               	dw	44134
   835  007C3F  ABCE               	dw	43982
   836  007C41  AB37               	dw	43831
   837  007C43  AAA1               	dw	43681
   838  007C45  AA0C               	dw	43532
   839  007C47  A977               	dw	43383
   840  007C49  A8E3               	dw	43235
   841  007C4B  A850               	dw	43088
   842  007C4D  A7BE               	dw	42942
   843  007C4F  A72D               	dw	42797
   844  007C51  A69D               	dw	42653
   845  007C53  A60D               	dw	42509
   846  007C55  A57F               	dw	42367
   847  007C57  A4F1               	dw	42225
   848  007C59  A464               	dw	42084
   849  007C5B  A3D8               	dw	41944
   850  007C5D  A34D               	dw	41805
   851  007C5F  A2C3               	dw	41667
   852  007C61  A23A               	dw	41530
   853  007C63  A1B1               	dw	41393
   854  007C65  A12A               	dw	41258
   855  007C67  A0A3               	dw	41123
   856  007C69  A01E               	dw	40990
   857  007C6B  9F99               	dw	40857
   858  007C6D  9F15               	dw	40725
   859  007C6F  9E92               	dw	40594
   860  007C71  9E10               	dw	40464
   861  007C73  9D8F               	dw	40335
   862  007C75  9D0F               	dw	40207
   863  007C77  9C90               	dw	40080
   864  007C79  9C12               	dw	39954
   865  007C7B  9B95               	dw	39829
   866  007C7D  9B19               	dw	39705
   867  007C7F  9A9E               	dw	39582
   868  007C81  9A23               	dw	39459
   869  007C83  99AA               	dw	39338
   870  007C85  9932               	dw	39218
   871  007C87  98BB               	dw	39099
   872  007C89  9844               	dw	38980
   873  007C8B  97CF               	dw	38863
   874  007C8D  975B               	dw	38747
   875  007C8F  96E7               	dw	38631
   876  007C91  9675               	dw	38517
   877  007C93  9604               	dw	38404
   878  007C95  9594               	dw	38292
   879  007C97  9525               	dw	38181
   880  007C99  94B6               	dw	38070
   881  007C9B  9449               	dw	37961
   882  007C9D  93DD               	dw	37853
   883  007C9F  9372               	dw	37746
   884  007CA1  9308               	dw	37640
   885  007CA3  929F               	dw	37535
   886  007CA5  9237               	dw	37431
   887  007CA7  91D0               	dw	37328
   888  007CA9  916B               	dw	37227
   889  007CAB  9106               	dw	37126
   890  007CAD  90A2               	dw	37026
   891  007CAF  9040               	dw	36928
   892  007CB1  8FDE               	dw	36830
   893  007CB3  8F7E               	dw	36734
   894  007CB5  8F1F               	dw	36639
   895  007CB7  8EC0               	dw	36544
   896  007CB9  8E63               	dw	36451
   897  007CBB  8E07               	dw	36359
   898  007CBD  8DAC               	dw	36268
   899  007CBF  8D52               	dw	36178
   900  007CC1  8CFA               	dw	36090
   901  007CC3  8CA2               	dw	36002
   902  007CC5  8C4B               	dw	35915
   903  007CC7  8BF6               	dw	35830
   904  007CC9  8BA2               	dw	35746
   905  007CCB  8B4F               	dw	35663
   906  007CCD  8AFD               	dw	35581
   907  007CCF  8AAC               	dw	35500
   908  007CD1  8A5C               	dw	35420
   909  007CD3  8A0D               	dw	35341
   910  007CD5  89C0               	dw	35264
   911  007CD7  8973               	dw	35187
   912  007CD9  8928               	dw	35112
   913  007CDB  88DE               	dw	35038
   914  007CDD  8895               	dw	34965
   915  007CDF  884D               	dw	34893
   916  007CE1  8807               	dw	34823
   917  007CE3  87C1               	dw	34753
   918  007CE5  877D               	dw	34685
   919  007CE7  873A               	dw	34618
   920  007CE9  86F8               	dw	34552
   921  007CEB  86B7               	dw	34487
   922  007CED  8677               	dw	34423
   923  007CEF  8639               	dw	34361
   924  007CF1  85FC               	dw	34300
   925  007CF3  85BF               	dw	34239
   926  007CF5  8584               	dw	34180
   927  007CF7  854B               	dw	34123
   928  007CF9  8512               	dw	34066
   929  007CFB  84DB               	dw	34011
   930  007CFD  84A4               	dw	33956
   931  007CFF  846F               	dw	33903
   932  007D01  843C               	dw	33852
   933  007D03  8409               	dw	33801
   934  007D05  83D7               	dw	33751
   935  007D07  83A7               	dw	33703
   936  007D09  8378               	dw	33656
   937  007D0B  834A               	dw	33610
   938  007D0D  831E               	dw	33566
   939  007D0F  82F2               	dw	33522
   940  007D11  82C8               	dw	33480
   941  007D13  829F               	dw	33439
   942  007D15  8277               	dw	33399
   943  007D17  8250               	dw	33360
   944  007D19  822B               	dw	33323
   945  007D1B  8207               	dw	33287
   946  007D1D  81E4               	dw	33252
   947  007D1F  81C2               	dw	33218
   948  007D21  81A2               	dw	33186
   949  007D23  8182               	dw	33154
   950  007D25  8164               	dw	33124
   951  007D27  8147               	dw	33095
   952  007D29  812C               	dw	33068
   953  007D2B  8111               	dw	33041
   954  007D2D  80F8               	dw	33016
   955  007D2F  80E0               	dw	32992
   956  007D31  80C9               	dw	32969
   957  007D33  80B4               	dw	32948
   958  007D35  809F               	dw	32927
   959  007D37  808C               	dw	32908
   960  007D39  807A               	dw	32890
   961  007D3B  806A               	dw	32874
   962  007D3D  805A               	dw	32858
   963  007D3F  804C               	dw	32844
   964  007D41  803F               	dw	32831
   965  007D43  8033               	dw	32819
   966  007D45  8029               	dw	32809
   967  007D47  8020               	dw	32800
   968  007D49  8018               	dw	32792
   969  007D4B  8011               	dw	32785
   970  007D4D  800B               	dw	32779
   971  007D4F  8007               	dw	32775
   972  007D51  8004               	dw	32772
   973  007D53  8002               	dw	32770
   974  007D55                     __end_of_Sinewave:
   975                           	opt stack 0
   976  007D55                     _dpowers:
   977                           	opt stack 0
   978  007D55  0001               	dw	1
   979  007D57  000A               	dw	10
   980  007D59  0064               	dw	100
   981  007D5B  03E8               	dw	1000
   982  007D5D  2710               	dw	10000
   983  007D5F                     __end_of_dpowers:
   984                           	opt stack 0
   985  007D5F                     log@coeff:
   986                           	opt stack 0
   987  007D5F  00                 	db	0
   988  007D60  00                 	db	0
   989  007D61  00                 	db	0
   990  007D62  00                 	db	0
   991  007D63  80                 	db	128
   992  007D64  3F                 	db	63
   993  007D65  F0                 	db	240
   994  007D66  FF                 	db	255
   995  007D67  BE                 	db	190
   996  007D68  E2                 	db	226
   997  007D69  A9                 	db	169
   998  007D6A  3E                 	db	62
   999  007D6B  83                 	db	131
  1000  007D6C  76                 	db	118
  1001  007D6D  BE                 	db	190
  1002  007D6E  AE                 	db	174
  1003  007D6F  2B                 	db	43
  1004  007D70  3E                 	db	62
  1005  007D71  3C                 	db	60
  1006  007D72  C3                 	db	195
  1007  007D73  BD                 	db	189
  1008  007D74  D2                 	db	210
  1009  007D75  13                 	db	19
  1010  007D76  3D                 	db	61
  1011  007D77  78                 	db	120
  1012  007D78  D3                 	db	211
  1013  007D79  BB                 	db	187
  1014  007D7A                     __end_oflog@coeff:
  1015                           	opt stack 0
  1016  007D7A                     STR_48:
  1017  007D7A  53                 	db	83	;'S'
  1018  007D7B  77                 	db	119	;'w'
  1019  007D7C  69                 	db	105	;'i'
  1020  007D7D  74                 	db	116	;'t'
  1021  007D7E  63                 	db	99	;'c'
  1022  007D7F  68                 	db	104	;'h'
  1023  007D80  69                 	db	105	;'i'
  1024  007D81  6E                 	db	110	;'n'
  1025  007D82  67                 	db	103	;'g'
  1026  007D83  20                 	db	32
  1027  007D84  6F                 	db	111	;'o'
  1028  007D85  76                 	db	118	;'v'
  1029  007D86  65                 	db	101	;'e'
  1030  007D87  72                 	db	114	;'r'
  1031  007D88  20                 	db	32
  1032  007D89  74                 	db	116	;'t'
  1033  007D8A  6F                 	db	111	;'o'
  1034  007D8B  20                 	db	32
  1035  007D8C  44                 	db	68	;'D'
  1036  007D8D  61                 	db	97	;'a'
  1037  007D8E  74                 	db	116	;'t'
  1038  007D8F  61                 	db	97	;'a'
  1039  007D90  20                 	db	32
  1040  007D91  4C                 	db	76	;'L'
  1041  007D92  6F                 	db	111	;'o'
  1042  007D93  67                 	db	103	;'g'
  1043  007D94  67                 	db	103	;'g'
  1044  007D95  69                 	db	105	;'i'
  1045  007D96  6E                 	db	110	;'n'
  1046  007D97  67                 	db	103	;'g'
  1047  007D98  2E                 	db	46
  1048  007D99  0D                 	db	13
  1049  007D9A  0A                 	db	10
  1050  007D9B  54                 	db	84	;'T'
  1051  007D9C  6F                 	db	111	;'o'
  1052  007D9D  20                 	db	32
  1053  007D9E  72                 	db	114	;'r'
  1054  007D9F  65                 	db	101	;'e'
  1055  007DA0  63                 	db	99	;'c'
  1056  007DA1  6F                 	db	111	;'o'
  1057  007DA2  6E                 	db	110	;'n'
  1058  007DA3  6E                 	db	110	;'n'
  1059  007DA4  65                 	db	101	;'e'
  1060  007DA5  63                 	db	99	;'c'
  1061  007DA6  74                 	db	116	;'t'
  1062  007DA7  20                 	db	32
  1063  007DA8  76                 	db	118	;'v'
  1064  007DA9  69                 	db	105	;'i'
  1065  007DAA  61                 	db	97	;'a'
  1066  007DAB  20                 	db	32
  1067  007DAC  62                 	db	98	;'b'
  1068  007DAD  6C                 	db	108	;'l'
  1069  007DAE  75                 	db	117	;'u'
  1070  007DAF  65                 	db	101	;'e'
  1071  007DB0  74                 	db	116	;'t'
  1072  007DB1  6F                 	db	111	;'o'
  1073  007DB2  6F                 	db	111	;'o'
  1074  007DB3  74                 	db	116	;'t'
  1075  007DB4  68                 	db	104	;'h'
  1076  007DB5  2C                 	db	44
  1077  007DB6  20                 	db	32
  1078  007DB7  74                 	db	116	;'t'
  1079  007DB8  68                 	db	104	;'h'
  1080  007DB9  65                 	db	101	;'e'
  1081  007DBA  20                 	db	32
  1082  007DBB  6C                 	db	108	;'l'
  1083  007DBC  6F                 	db	111	;'o'
  1084  007DBD  67                 	db	103	;'g'
  1085  007DBE  67                 	db	103	;'g'
  1086  007DBF  65                 	db	101	;'e'
  1087  007DC0  72                 	db	114	;'r'
  1088  007DC1  20                 	db	32
  1089  007DC2  6D                 	db	109	;'m'
  1090  007DC3  75                 	db	117	;'u'
  1091  007DC4  73                 	db	115	;'s'
  1092  007DC5  74                 	db	116	;'t'
  1093  007DC6  20                 	db	32
  1094  007DC7  62                 	db	98	;'b'
  1095  007DC8  65                 	db	101	;'e'
  1096  007DC9  20                 	db	32
  1097  007DCA  70                 	db	112	;'p'
  1098  007DCB  6F                 	db	111	;'o'
  1099  007DCC  77                 	db	119	;'w'
  1100  007DCD  65                 	db	101	;'e'
  1101  007DCE  72                 	db	114	;'r'
  1102  007DCF  20                 	db	32
  1103  007DD0  63                 	db	99	;'c'
  1104  007DD1  79                 	db	121	;'y'
  1105  007DD2  63                 	db	99	;'c'
  1106  007DD3  6C                 	db	108	;'l'
  1107  007DD4  65                 	db	101	;'e'
  1108  007DD5  64                 	db	100	;'d'
  1109  007DD6  2E                 	db	46
  1110  007DD7  0D                 	db	13
  1111  007DD8  0A                 	db	10
  1112  007DD9  42                 	db	66	;'B'
  1113  007DDA  6C                 	db	108	;'l'
  1114  007DDB  75                 	db	117	;'u'
  1115  007DDC  65                 	db	101	;'e'
  1116  007DDD  74                 	db	116	;'t'
  1117  007DDE  6F                 	db	111	;'o'
  1118  007DDF  6F                 	db	111	;'o'
  1119  007DE0  74                 	db	116	;'t'
  1120  007DE1  68                 	db	104	;'h'
  1121  007DE2  20                 	db	32
  1122  007DE3  6D                 	db	109	;'m'
  1123  007DE4  6F                 	db	111	;'o'
  1124  007DE5  64                 	db	100	;'d'
  1125  007DE6  75                 	db	117	;'u'
  1126  007DE7  6C                 	db	108	;'l'
  1127  007DE8  65                 	db	101	;'e'
  1128  007DE9  20                 	db	32
  1129  007DEA  77                 	db	119	;'w'
  1130  007DEB  69                 	db	105	;'i'
  1131  007DEC  6C                 	db	108	;'l'
  1132  007DED  6C                 	db	108	;'l'
  1133  007DEE  20                 	db	32
  1134  007DEF  62                 	db	98	;'b'
  1135  007DF0  65                 	db	101	;'e'
  1136  007DF1  20                 	db	32
  1137  007DF2  70                 	db	112	;'p'
  1138  007DF3  6F                 	db	111	;'o'
  1139  007DF4  77                 	db	119	;'w'
  1140  007DF5  65                 	db	101	;'e'
  1141  007DF6  72                 	db	114	;'r'
  1142  007DF7  65                 	db	101	;'e'
  1143  007DF8  64                 	db	100	;'d'
  1144  007DF9  20                 	db	32
  1145  007DFA  64                 	db	100	;'d'
  1146  007DFB  6F                 	db	111	;'o'
  1147  007DFC  77                 	db	119	;'w'
  1148  007DFD  6E                 	db	110	;'n'
  1149  007DFE  20                 	db	32
  1150  007DFF  6E                 	db	110	;'n'
  1151  007E00  6F                 	db	111	;'o'
  1152  007E01  77                 	db	119	;'w'
  1153  007E02  2E                 	db	46
  1154  007E03  0D                 	db	13
  1155  007E04  0A                 	db	10
  1156  007E05  00                 	db	0
  1157  007E06                     STR_32:
  1158  007E06  53                 	db	83	;'S'
  1159  007E07  65                 	db	101	;'e'
  1160  007E08  74                 	db	116	;'t'
  1161  007E09  20                 	db	32
  1162  007E0A  6F                 	db	111	;'o'
  1163  007E0B  66                 	db	102	;'f'
  1164  007E0C  66                 	db	102	;'f'
  1165  007E0D  63                 	db	99	;'c'
  1166  007E0E  6F                 	db	111	;'o'
  1167  007E0F  75                 	db	117	;'u'
  1168  007E10  6E                 	db	110	;'n'
  1169  007E11  74                 	db	116	;'t'
  1170  007E12  6D                 	db	109	;'m'
  1171  007E13  61                 	db	97	;'a'
  1172  007E14  78                 	db	120	;'x'
  1173  007E15  20                 	db	32
  1174  007E16  28                 	db	40
  1175  007E17  64                 	db	100	;'d'
  1176  007E18  65                 	db	101	;'e'
  1177  007E19  66                 	db	102	;'f'
  1178  007E1A  61                 	db	97	;'a'
  1179  007E1B  75                 	db	117	;'u'
  1180  007E1C  6C                 	db	108	;'l'
  1181  007E1D  74                 	db	116	;'t'
  1182  007E1E  20                 	db	32
  1183  007E1F  32                 	db	50	;'2'
  1184  007E20  30                 	db	48	;'0'
  1185  007E21  30                 	db	48	;'0'
  1186  007E22  30                 	db	48	;'0'
  1187  007E23  29                 	db	41
  1188  007E24  3A                 	db	58	;':'
  1189  007E25  0D                 	db	13
  1190  007E26  0A                 	db	10
  1191  007E27  00                 	db	0
  1192  007E28                     STR_38:
  1193  007E28  53                 	db	83	;'S'
  1194  007E29  65                 	db	101	;'e'
  1195  007E2A  74                 	db	116	;'t'
  1196  007E2B  20                 	db	32
  1197  007E2C  6F                 	db	111	;'o'
  1198  007E2D  6E                 	db	110	;'n'
  1199  007E2E  74                 	db	116	;'t'
  1200  007E2F  68                 	db	104	;'h'
  1201  007E30  72                 	db	114	;'r'
  1202  007E31  65                 	db	101	;'e'
  1203  007E32  73                 	db	115	;'s'
  1204  007E33  68                 	db	104	;'h'
  1205  007E34  20                 	db	32
  1206  007E35  28                 	db	40
  1207  007E36  64                 	db	100	;'d'
  1208  007E37  65                 	db	101	;'e'
  1209  007E38  66                 	db	102	;'f'
  1210  007E39  61                 	db	97	;'a'
  1211  007E3A  75                 	db	117	;'u'
  1212  007E3B  6C                 	db	108	;'l'
  1213  007E3C  74                 	db	116	;'t'
  1214  007E3D  20                 	db	32
  1215  007E3E  32                 	db	50	;'2'
  1216  007E3F  30                 	db	48	;'0'
  1217  007E40  30                 	db	48	;'0'
  1218  007E41  30                 	db	48	;'0'
  1219  007E42  29                 	db	41
  1220  007E43  3A                 	db	58	;':'
  1221  007E44  0D                 	db	13
  1222  007E45  0A                 	db	10
  1223  007E46  00                 	db	0
  1224  007E47                     STR_36:
  1225  007E47  53                 	db	83	;'S'
  1226  007E48  65                 	db	101	;'e'
  1227  007E49  74                 	db	116	;'t'
  1228  007E4A  20                 	db	32
  1229  007E4B  4E                 	db	78	;'N'
  1230  007E4C  73                 	db	115	;'s'
  1231  007E4D  68                 	db	104	;'h'
  1232  007E4E  6F                 	db	111	;'o'
  1233  007E4F  72                 	db	114	;'r'
  1234  007E50  74                 	db	116	;'t'
  1235  007E51  20                 	db	32
  1236  007E52  28                 	db	40
  1237  007E53  64                 	db	100	;'d'
  1238  007E54  65                 	db	101	;'e'
  1239  007E55  66                 	db	102	;'f'
  1240  007E56  61                 	db	97	;'a'
  1241  007E57  75                 	db	117	;'u'
  1242  007E58  6C                 	db	108	;'l'
  1243  007E59  74                 	db	116	;'t'
  1244  007E5A  20                 	db	32
  1245  007E5B  31                 	db	49	;'1'
  1246  007E5C  30                 	db	48	;'0'
  1247  007E5D  29                 	db	41
  1248  007E5E  3A                 	db	58	;':'
  1249  007E5F  0D                 	db	13
  1250  007E60  0A                 	db	10
  1251  007E61  00                 	db	0
  1252  007E62                     STR_34:
  1253  007E62  53                 	db	83	;'S'
  1254  007E63  65                 	db	101	;'e'
  1255  007E64  74                 	db	116	;'t'
  1256  007E65  20                 	db	32
  1257  007E66  4E                 	db	78	;'N'
  1258  007E67  6C                 	db	108	;'l'
  1259  007E68  6F                 	db	111	;'o'
  1260  007E69  6E                 	db	110	;'n'
  1261  007E6A  67                 	db	103	;'g'
  1262  007E6B  20                 	db	32
  1263  007E6C  28                 	db	40
  1264  007E6D  64                 	db	100	;'d'
  1265  007E6E  65                 	db	101	;'e'
  1266  007E6F  66                 	db	102	;'f'
  1267  007E70  61                 	db	97	;'a'
  1268  007E71  75                 	db	117	;'u'
  1269  007E72  6C                 	db	108	;'l'
  1270  007E73  74                 	db	116	;'t'
  1271  007E74  20                 	db	32
  1272  007E75  35                 	db	53	;'5'
  1273  007E76  30                 	db	48	;'0'
  1274  007E77  29                 	db	41
  1275  007E78  3A                 	db	58	;':'
  1276  007E79  0D                 	db	13
  1277  007E7A  0A                 	db	10
  1278  007E7B  00                 	db	0
  1279  007E7C                     STR_27:
  1280  007E7C  44                 	db	68	;'D'
  1281  007E7D  61                 	db	97	;'a'
  1282  007E7E  74                 	db	116	;'t'
  1283  007E7F  65                 	db	101	;'e'
  1284  007E80  20                 	db	32
  1285  007E81  61                 	db	97	;'a'
  1286  007E82  6E                 	db	110	;'n'
  1287  007E83  64                 	db	100	;'d'
  1288  007E84  20                 	db	32
  1289  007E85  54                 	db	84	;'T'
  1290  007E86  69                 	db	105	;'i'
  1291  007E87  6D                 	db	109	;'m'
  1292  007E88  65                 	db	101	;'e'
  1293  007E89  20                 	db	32
  1294  007E8A  53                 	db	83	;'S'
  1295  007E8B  65                 	db	101	;'e'
  1296  007E8C  74                 	db	116	;'t'
  1297  007E8D  21                 	db	33
  1298  007E8E  0D                 	db	13
  1299  007E8F  0A                 	db	10
  1300  007E90  00                 	db	0
  1301  007E91                     STR_16:
  1302  007E91  25                 	db	37
  1303  007E92  36                 	db	54	;'6'
  1304  007E93  69                 	db	105	;'i'
  1305  007E94  2C                 	db	44
  1306  007E95  25                 	db	37
  1307  007E96  36                 	db	54	;'6'
  1308  007E97  69                 	db	105	;'i'
  1309  007E98  2C                 	db	44
  1310  007E99  25                 	db	37
  1311  007E9A  36                 	db	54	;'6'
  1312  007E9B  69                 	db	105	;'i'
  1313  007E9C  2C                 	db	44
  1314  007E9D  25                 	db	37
  1315  007E9E  35                 	db	53	;'5'
  1316  007E9F  75                 	db	117	;'u'
  1317  007EA0  2C                 	db	44
  1318  007EA1  25                 	db	37
  1319  007EA2  69                 	db	105	;'i'
  1320  007EA3  0D                 	db	13
  1321  007EA4  0A                 	db	10
  1322  007EA5  00                 	db	0
  1323  007EA6                     STR_2:
  1324  007EA6  61                 	db	97	;'a'
  1325  007EA7  70                 	db	112	;'p'
  1326  007EA8  70                 	db	112	;'p'
  1327  007EA9  65                 	db	101	;'e'
  1328  007EAA  6E                 	db	110	;'n'
  1329  007EAB  64                 	db	100	;'d'
  1330  007EAC  20                 	db	32
  1331  007EAD  46                 	db	70	;'F'
  1332  007EAE  49                 	db	73	;'I'
  1333  007EAF  4C                 	db	76	;'L'
  1334  007EB0  45                 	db	69	;'E'
  1335  007EB1  25                 	db	37
  1336  007EB2  31                 	db	49	;'1'
  1337  007EB3  69                 	db	105	;'i'
  1338  007EB4  2E                 	db	46
  1339  007EB5  74                 	db	116	;'t'
  1340  007EB6  78                 	db	120	;'x'
  1341  007EB7  74                 	db	116	;'t'
  1342  007EB8  0D                 	db	13
  1343  007EB9  0A                 	db	10
  1344  007EBA  00                 	db	0
  1345  007EBB                     STR_4:
  1346  007EBB  61                 	db	97	;'a'
  1347  007EBC  70                 	db	112	;'p'
  1348  007EBD  70                 	db	112	;'p'
  1349  007EBE  65                 	db	101	;'e'
  1350  007EBF  6E                 	db	110	;'n'
  1351  007EC0  64                 	db	100	;'d'
  1352  007EC1  20                 	db	32
  1353  007EC2  46                 	db	70	;'F'
  1354  007EC3  49                 	db	73	;'I'
  1355  007EC4  4C                 	db	76	;'L'
  1356  007EC5  45                 	db	69	;'E'
  1357  007EC6  25                 	db	37
  1358  007EC7  32                 	db	50	;'2'
  1359  007EC8  69                 	db	105	;'i'
  1360  007EC9  2E                 	db	46
  1361  007ECA  74                 	db	116	;'t'
  1362  007ECB  78                 	db	120	;'x'
  1363  007ECC  74                 	db	116	;'t'
  1364  007ECD  0D                 	db	13
  1365  007ECE  0A                 	db	10
  1366  007ECF  00                 	db	0
  1367  007ED0                     STR_6:
  1368  007ED0  61                 	db	97	;'a'
  1369  007ED1  70                 	db	112	;'p'
  1370  007ED2  70                 	db	112	;'p'
  1371  007ED3  65                 	db	101	;'e'
  1372  007ED4  6E                 	db	110	;'n'
  1373  007ED5  64                 	db	100	;'d'
  1374  007ED6  20                 	db	32
  1375  007ED7  46                 	db	70	;'F'
  1376  007ED8  49                 	db	73	;'I'
  1377  007ED9  4C                 	db	76	;'L'
  1378  007EDA  45                 	db	69	;'E'
  1379  007EDB  25                 	db	37
  1380  007EDC  33                 	db	51	;'3'
  1381  007EDD  69                 	db	105	;'i'
  1382  007EDE  2E                 	db	46
  1383  007EDF  74                 	db	116	;'t'
  1384  007EE0  78                 	db	120	;'x'
  1385  007EE1  74                 	db	116	;'t'
  1386  007EE2  0D                 	db	13
  1387  007EE3  0A                 	db	10
  1388  007EE4  00                 	db	0
  1389  007EE5                     STR_40:
  1390  007EE5  53                 	db	83	;'S'
  1391  007EE6  65                 	db	101	;'e'
  1392  007EE7  74                 	db	116	;'t'
  1393  007EE8  74                 	db	116	;'t'
  1394  007EE9  69                 	db	105	;'i'
  1395  007EEA  6E                 	db	110	;'n'
  1396  007EEB  67                 	db	103	;'g'
  1397  007EEC  20                 	db	32
  1398  007EED  43                 	db	67	;'C'
  1399  007EEE  6F                 	db	111	;'o'
  1400  007EEF  6D                 	db	109	;'m'
  1401  007EF0  70                 	db	112	;'p'
  1402  007EF1  6C                 	db	108	;'l'
  1403  007EF2  65                 	db	101	;'e'
  1404  007EF3  74                 	db	116	;'t'
  1405  007EF4  65                 	db	101	;'e'
  1406  007EF5  21                 	db	33
  1407  007EF6  0D                 	db	13
  1408  007EF7  0A                 	db	10
  1409  007EF8  00                 	db	0
  1410  007EF9                     STR_29:
  1411  007EF9  54                 	db	84	;'T'
  1412  007EFA  69                 	db	105	;'i'
  1413  007EFB  6D                 	db	109	;'m'
  1414  007EFC  65                 	db	101	;'e'
  1415  007EFD  3A                 	db	58	;':'
  1416  007EFE  20                 	db	32
  1417  007EFF  25                 	db	37
  1418  007F00  32                 	db	50	;'2'
  1419  007F01  69                 	db	105	;'i'
  1420  007F02  3A                 	db	58	;':'
  1421  007F03  25                 	db	37
  1422  007F04  32                 	db	50	;'2'
  1423  007F05  69                 	db	105	;'i'
  1424  007F06  3A                 	db	58	;':'
  1425  007F07  25                 	db	37
  1426  007F08  32                 	db	50	;'2'
  1427  007F09  69                 	db	105	;'i'
  1428  007F0A  0D                 	db	13
  1429  007F0B  0A                 	db	10
  1430  007F0C  00                 	db	0
  1431  007F0D                     STR_28:
  1432  007F0D  44                 	db	68	;'D'
  1433  007F0E  61                 	db	97	;'a'
  1434  007F0F  74                 	db	116	;'t'
  1435  007F10  65                 	db	101	;'e'
  1436  007F11  3A                 	db	58	;':'
  1437  007F12  20                 	db	32
  1438  007F13  25                 	db	37
  1439  007F14  32                 	db	50	;'2'
  1440  007F15  69                 	db	105	;'i'
  1441  007F16  2F                 	db	47
  1442  007F17  25                 	db	37
  1443  007F18  32                 	db	50	;'2'
  1444  007F19  69                 	db	105	;'i'
  1445  007F1A  2F                 	db	47
  1446  007F1B  25                 	db	37
  1447  007F1C  34                 	db	52	;'4'
  1448  007F1D  69                 	db	105	;'i'
  1449  007F1E  0D                 	db	13
  1450  007F1F  0A                 	db	10
  1451  007F20  00                 	db	0
  1452  007F21                     STR_10:
  1453  007F21  50                 	db	80	;'P'
  1454  007F22  75                 	db	117	;'u'
  1455  007F23  6D                 	db	109	;'m'
  1456  007F24  70                 	db	112	;'p'
  1457  007F25  69                 	db	105	;'i'
  1458  007F26  6E                 	db	110	;'n'
  1459  007F27  67                 	db	103	;'g'
  1460  007F28  20                 	db	32
  1461  007F29  53                 	db	83	;'S'
  1462  007F2A  74                 	db	116	;'t'
  1463  007F2B  6F                 	db	111	;'o'
  1464  007F2C  70                 	db	112	;'p'
  1465  007F2D  70                 	db	112	;'p'
  1466  007F2E  65                 	db	101	;'e'
  1467  007F2F  64                 	db	100	;'d'
  1468  007F30  2E                 	db	46
  1469  007F31  0D                 	db	13
  1470  007F32  0A                 	db	10
  1471  007F33  00                 	db	0
  1472  007F34                     STR_7:
  1473  007F34  0D                 	db	13
  1474  007F35  0D                 	db	13
  1475  007F36  0A                 	db	10
  1476  007F37  4C                 	db	76	;'L'
  1477  007F38  6F                 	db	111	;'o'
  1478  007F39  67                 	db	103	;'g'
  1479  007F3A  20                 	db	32
  1480  007F3B  73                 	db	115	;'s'
  1481  007F3C  74                 	db	116	;'t'
  1482  007F3D  61                 	db	97	;'a'
  1483  007F3E  72                 	db	114	;'r'
  1484  007F3F  74                 	db	116	;'t'
  1485  007F40  65                 	db	101	;'e'
  1486  007F41  64                 	db	100	;'d'
  1487  007F42  21                 	db	33
  1488  007F43  0D                 	db	13
  1489  007F44  0A                 	db	10
  1490  007F45  00                 	db	0
  1491  007F46                     STR_1:
  1492  007F46  6E                 	db	110	;'n'
  1493  007F47  65                 	db	101	;'e'
  1494  007F48  77                 	db	119	;'w'
  1495  007F49  20                 	db	32
  1496  007F4A  46                 	db	70	;'F'
  1497  007F4B  49                 	db	73	;'I'
  1498  007F4C  4C                 	db	76	;'L'
  1499  007F4D  45                 	db	69	;'E'
  1500  007F4E  25                 	db	37
  1501  007F4F  31                 	db	49	;'1'
  1502  007F50  69                 	db	105	;'i'
  1503  007F51  2E                 	db	46
  1504  007F52  74                 	db	116	;'t'
  1505  007F53  78                 	db	120	;'x'
  1506  007F54  74                 	db	116	;'t'
  1507  007F55  0D                 	db	13
  1508  007F56  0A                 	db	10
  1509  007F57  00                 	db	0
  1510  007F58                     STR_3:
  1511  007F58  6E                 	db	110	;'n'
  1512  007F59  65                 	db	101	;'e'
  1513  007F5A  77                 	db	119	;'w'
  1514  007F5B  20                 	db	32
  1515  007F5C  46                 	db	70	;'F'
  1516  007F5D  49                 	db	73	;'I'
  1517  007F5E  4C                 	db	76	;'L'
  1518  007F5F  45                 	db	69	;'E'
  1519  007F60  25                 	db	37
  1520  007F61  32                 	db	50	;'2'
  1521  007F62  69                 	db	105	;'i'
  1522  007F63  2E                 	db	46
  1523  007F64  74                 	db	116	;'t'
  1524  007F65  78                 	db	120	;'x'
  1525  007F66  74                 	db	116	;'t'
  1526  007F67  0D                 	db	13
  1527  007F68  0A                 	db	10
  1528  007F69  00                 	db	0
  1529  007F6A                     STR_5:
  1530  007F6A  6E                 	db	110	;'n'
  1531  007F6B  65                 	db	101	;'e'
  1532  007F6C  77                 	db	119	;'w'
  1533  007F6D  20                 	db	32
  1534  007F6E  46                 	db	70	;'F'
  1535  007F6F  49                 	db	73	;'I'
  1536  007F70  4C                 	db	76	;'L'
  1537  007F71  45                 	db	69	;'E'
  1538  007F72  25                 	db	37
  1539  007F73  33                 	db	51	;'3'
  1540  007F74  69                 	db	105	;'i'
  1541  007F75  2E                 	db	46
  1542  007F76  74                 	db	116	;'t'
  1543  007F77  78                 	db	120	;'x'
  1544  007F78  74                 	db	116	;'t'
  1545  007F79  0D                 	db	13
  1546  007F7A  0A                 	db	10
  1547  007F7B  00                 	db	0
  1548  007F7C                     STR_14:
  1549  007F7C  25                 	db	37
  1550  007F7D  36                 	db	54	;'6'
  1551  007F7E  69                 	db	105	;'i'
  1552  007F7F  2C                 	db	44
  1553  007F80  25                 	db	37
  1554  007F81  36                 	db	54	;'6'
  1555  007F82  69                 	db	105	;'i'
  1556  007F83  2C                 	db	44
  1557  007F84  25                 	db	37
  1558  007F85  36                 	db	54	;'6'
  1559  007F86  69                 	db	105	;'i'
  1560  007F87  2C                 	db	44
  1561  007F88  25                 	db	37
  1562  007F89  35                 	db	53	;'5'
  1563  007F8A  75                 	db	117	;'u'
  1564  007F8B  0D                 	db	13
  1565  007F8C  0A                 	db	10
  1566  007F8D  00                 	db	0
  1567  007F8E                     STR_9:
  1568  007F8E  25                 	db	37
  1569  007F8F  32                 	db	50	;'2'
  1570  007F90  69                 	db	105	;'i'
  1571  007F91  2F                 	db	47
  1572  007F92  25                 	db	37
  1573  007F93  32                 	db	50	;'2'
  1574  007F94  69                 	db	105	;'i'
  1575  007F95  2F                 	db	47
  1576  007F96  25                 	db	37
  1577  007F97  34                 	db	52	;'4'
  1578  007F98  69                 	db	105	;'i'
  1579  007F99  0D                 	db	13
  1580  007F9A  0A                 	db	10
  1581  007F9B  0A                 	db	10
  1582  007F9C  00                 	db	0
  1583  007F9D                     STR_25:
  1584  007F9D  53                 	db	83	;'S'
  1585  007F9E  65                 	db	101	;'e'
  1586  007F9F  74                 	db	116	;'t'
  1587  007FA0  20                 	db	32
  1588  007FA1  4D                 	db	77	;'M'
  1589  007FA2  69                 	db	105	;'i'
  1590  007FA3  6E                 	db	110	;'n'
  1591  007FA4  75                 	db	117	;'u'
  1592  007FA5  74                 	db	116	;'t'
  1593  007FA6  65                 	db	101	;'e'
  1594  007FA7  73                 	db	115	;'s'
  1595  007FA8  3A                 	db	58	;':'
  1596  007FA9  20                 	db	32
  1597  007FAA  00                 	db	0
  1598  007FAB                     STR_19:
  1599  007FAB  53                 	db	83	;'S'
  1600  007FAC  65                 	db	101	;'e'
  1601  007FAD  74                 	db	116	;'t'
  1602  007FAE  20                 	db	32
  1603  007FAF  4D                 	db	77	;'M'
  1604  007FB0  6F                 	db	111	;'o'
  1605  007FB1  6E                 	db	110	;'n'
  1606  007FB2  74                 	db	116	;'t'
  1607  007FB3  68                 	db	104	;'h'
  1608  007FB4  3A                 	db	58	;':'
  1609  007FB5  20                 	db	32
  1610  007FB6  00                 	db	0
  1611  007FB7                     STR_23:
  1612  007FB7  53                 	db	83	;'S'
  1613  007FB8  65                 	db	101	;'e'
  1614  007FB9  74                 	db	116	;'t'
  1615  007FBA  20                 	db	32
  1616  007FBB  48                 	db	72	;'H'
  1617  007FBC  6F                 	db	111	;'o'
  1618  007FBD  75                 	db	117	;'u'
  1619  007FBE  72                 	db	114	;'r'
  1620  007FBF  73                 	db	115	;'s'
  1621  007FC0  3A                 	db	58	;':'
  1622  007FC1  20                 	db	32
  1623  007FC2  00                 	db	0
  1624  007FC3                     STR_17:
  1625  007FC3  53                 	db	83	;'S'
  1626  007FC4  65                 	db	101	;'e'
  1627  007FC5  74                 	db	116	;'t'
  1628  007FC6  20                 	db	32
  1629  007FC7  59                 	db	89	;'Y'
  1630  007FC8  65                 	db	101	;'e'
  1631  007FC9  61                 	db	97	;'a'
  1632  007FCA  72                 	db	114	;'r'
  1633  007FCB  3A                 	db	58	;':'
  1634  007FCC  20                 	db	32
  1635  007FCD  00                 	db	0
  1636  007FCE                     STR_15:
  1637  007FCE  09                 	db	9
  1638  007FCF  25                 	db	37
  1639  007FD0  69                 	db	105	;'i'
  1640  007FD1  20                 	db	32
  1641  007FD2  25                 	db	37
  1642  007FD3  69                 	db	105	;'i'
  1643  007FD4  20                 	db	32
  1644  007FD5  25                 	db	37
  1645  007FD6  69                 	db	105	;'i'
  1646  007FD7  0A                 	db	10
  1647  007FD8  00                 	db	0
  1648  007FD9                     STR_21:
  1649  007FD9  53                 	db	83	;'S'
  1650  007FDA  65                 	db	101	;'e'
  1651  007FDB  74                 	db	116	;'t'
  1652  007FDC  20                 	db	32
  1653  007FDD  44                 	db	68	;'D'
  1654  007FDE  61                 	db	97	;'a'
  1655  007FDF  79                 	db	121	;'y'
  1656  007FE0  3A                 	db	58	;':'
  1657  007FE1  20                 	db	32
  1658  007FE2  00                 	db	0
  1659  007FE3                     STR_41:
  1660  007FE3  54                 	db	84	;'T'
  1661  007FE4  69                 	db	105	;'i'
  1662  007FE5  6D                 	db	109	;'m'
  1663  007FE6  65                 	db	101	;'e'
  1664  007FE7  3F                 	db	63	;'?'
  1665  007FE8  0D                 	db	13
  1666  007FE9  00                 	db	0
  1667  007FEA                     STR_44:
  1668  007FEA  44                 	db	68	;'D'
  1669  007FEB  61                 	db	97	;'a'
  1670  007FEC  74                 	db	116	;'t'
  1671  007FED  65                 	db	101	;'e'
  1672  007FEE  3F                 	db	63	;'?'
  1673  007FEF  0D                 	db	13
  1674  007FF0  00                 	db	0
  1675  007FF1                     STR_47:
  1676  007FF1  4C                 	db	76	;'L'
  1677  007FF2  4F                 	db	79	;'O'
  1678  007FF3  47                 	db	71	;'G'
  1679  007FF4  0D                 	db	13
  1680  007FF5  00                 	db	0
  1681  007FF6                     STR_30:
  1682  007FF6  53                 	db	83	;'S'
  1683  007FF7  45                 	db	69	;'E'
  1684  007FF8  54                 	db	84	;'T'
  1685  007FF9  0D                 	db	13
  1686  007FFA  00                 	db	0
  1687  007FFB                     STR_13:
  1688  007FFB  7E                 	db	126
  1689  007FFC  7E                 	db	126
  1690  007FFD  7E                 	db	126
  1691  007FFE  00                 	db	0
  1692  0000                     
  1693                           ; #config settings
  1694  007FFF  00                 	db	0	; dummy byte at the end
  1695  0000                     
  1696                           	psect	nvCOMRAM
  1697  000060                     __pnvCOMRAM:
  1698                           	opt stack 0
  1699  000060                     _baud:
  1700                           	opt stack 0
  1701  000060                     	ds	1
  1702                           
  1703                           	psect	nvBANK0
  1704  0000E0                     __pnvBANK0:
  1705                           	opt stack 0
  1706  0000E0                     _UART1Config:
  1707                           	opt stack 0
  1708  0000E0                     	ds	1
  1709  0000                     _ADCON0	set	4034
  1710  0000                     _ADCON0bits	set	4034
  1711  0000                     _ADCON1	set	4033
  1712  0000                     _ADCON2	set	4032
  1713  0000                     _ADRESH	set	4036
  1714  0000                     _ADRESL	set	4035
  1715  0000                     _BAUDCONbits	set	4024
  1716  0000                     _INTCON2bits	set	4081
  1717  0000                     _INTCONbits	set	4082
  1718  0000                     _IPR1bits	set	3999
  1719  0000                     _LATBbits	set	3978
  1720  0000                     _LATCbits	set	3979
  1721  0000                     _PIE1bits	set	3997
  1722  0000                     _PIR1bits	set	3998
  1723  0000                     _RCONbits	set	4048
  1724  0000                     _RCREG	set	4014
  1725  0000                     _RCSTA	set	4011
  1726  0000                     _RCSTAbits	set	4011
  1727  0000                     _SPBRG	set	4015
  1728  0000                     _SPBRGH	set	4016
  1729  0000                     _T0CON	set	4053
  1730  0000                     _T0CONbits	set	4053
  1731  0000                     _T1CONbits	set	4045
  1732  0000                     _TMR0H	set	4055
  1733  0000                     _TMR0L	set	4054
  1734  0000                     _TRISA	set	3986
  1735  0000                     _TRISBbits	set	3987
  1736  0000                     _TRISCbits	set	3988
  1737  0000                     _TXREG	set	4013
  1738  0000                     _TXSTA	set	4012
  1739  0000                     _TXSTAbits	set	4012
  1740  0000                     _TMR0IF	set	32658
  1741  0000                     _TXIF	set	31988
  1742                           
  1743                           	psect	cinit
  1744  003BEE                     __pcinit:
  1745                           	opt stack 0
  1746  003BEE                     start_initialization:
  1747                           	opt stack 0
  1748  003BEE                     __initialization:
  1749                           	opt stack 0
  1750                           
  1751                           ; Clear objects allocated to BANK3 (256 bytes)
  1752  003BEE  EE03  F000         	lfsr	0,__pbssBANK3
  1753  003BF2  EE11 F000          	lfsr	1,256
  1754  003BF6                     clear_0:
  1755  003BF6  6AEE               	clrf	postinc0,c
  1756  003BF8  50E5               	movf	postdec1,w,c
  1757  003BFA  50E1               	movf	fsr1l,w,c
  1758  003BFC  E1FC               	bnz	clear_0
  1759  003BFE  50E2               	movf	fsr1h,w,c
  1760  003C00  E1FA               	bnz	clear_0
  1761                           
  1762                           ; Clear objects allocated to BANK2 (256 bytes)
  1763  003C02  EE02  F000         	lfsr	0,__pbssBANK2
  1764  003C06  EE11 F000          	lfsr	1,256
  1765  003C0A                     clear_1:
  1766  003C0A  6AEE               	clrf	postinc0,c
  1767  003C0C  50E5               	movf	postdec1,w,c
  1768  003C0E  50E1               	movf	fsr1l,w,c
  1769  003C10  E1FC               	bnz	clear_1
  1770  003C12  50E2               	movf	fsr1h,w,c
  1771  003C14  E1FA               	bnz	clear_1
  1772                           
  1773                           ; Clear objects allocated to BANK1 (80 bytes)
  1774  003C16  EE01  F0AC         	lfsr	0,__pbssBANK1
  1775  003C1A  0E50               	movlw	80
  1776  003C1C                     clear_2:
  1777  003C1C  6AEE               	clrf	postinc0,c
  1778  003C1E  06E8               	decf	wreg,f,c
  1779  003C20  E1FD               	bnz	clear_2
  1780                           
  1781                           ; Clear objects allocated to COMRAM (32 bytes)
  1782  003C22  EE00  F028         	lfsr	0,__pbssCOMRAM
  1783  003C26  0E20               	movlw	32
  1784  003C28                     clear_3:
  1785  003C28  6AEE               	clrf	postinc0,c
  1786  003C2A  06E8               	decf	wreg,f,c
  1787  003C2C  E1FD               	bnz	clear_3
  1788                           
  1789                           ; Initialize objects allocated to BANK1 (86 bytes)
  1790                           ; load TBLPTR registers with __pidataBANK1
  1791  003C2E  0EA8               	movlw	low __pidataBANK1
  1792  003C30  6EF6               	movwf	tblptrl,c
  1793  003C32  0E3F               	movlw	high __pidataBANK1
  1794  003C34  6EF7               	movwf	tblptrh,c
  1795  003C36  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1796  003C38  6EF8               	movwf	tblptru,c
  1797  003C3A  EE01  F000         	lfsr	0,__pdataBANK1
  1798  003C3E  EE10 F056          	lfsr	1,86
  1799  003C42                     copy_data0:
  1800  003C42  0009               	tblrd		*+
  1801  003C44  CFF5 FFEE          	movff	tablat,postinc0
  1802  003C48  50E5               	movf	postdec1,w,c
  1803  003C4A  50E1               	movf	fsr1l,w,c
  1804  003C4C  E1FA               	bnz	copy_data0
  1805                           
  1806                           ; Initialize objects allocated to COMRAM (24 bytes)
  1807                           ; load TBLPTR registers with __pidataCOMRAM
  1808  003C4E  0E04               	movlw	low __pidataCOMRAM
  1809  003C50  6EF6               	movwf	tblptrl,c
  1810  003C52  0E43               	movlw	high __pidataCOMRAM
  1811  003C54  6EF7               	movwf	tblptrh,c
  1812  003C56  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1813  003C58  6EF8               	movwf	tblptru,c
  1814  003C5A  EE00  F048         	lfsr	0,__pdataCOMRAM
  1815  003C5E  EE10 F018          	lfsr	1,24
  1816  003C62                     copy_data1:
  1817  003C62  0009               	tblrd		*+
  1818  003C64  CFF5 FFEE          	movff	tablat,postinc0
  1819  003C68  50E5               	movf	postdec1,w,c
  1820  003C6A  50E1               	movf	fsr1l,w,c
  1821  003C6C  E1FA               	bnz	copy_data1
  1822  003C6E                     end_of_initialization:
  1823                           	opt stack 0
  1824  003C6E                     __end_of__initialization:
  1825                           	opt stack 0
  1826  003C6E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1827  003C70  6EF8               	movwf	tblptru,c
  1828  003C72  0100               	movlb	0
  1829  003C74  EF9D  F00F         	goto	_main	;jump to C main() function
  1830                           tblptru	equ	0xFF8
  1831                           tblptrh	equ	0xFF7
  1832                           tblptrl	equ	0xFF6
  1833                           tablat	equ	0xFF5
  1834                           postinc0	equ	0xFEE
  1835                           wreg	equ	0xFE8
  1836                           postdec1	equ	0xFE5
  1837                           fsr1h	equ	0xFE2
  1838                           fsr1l	equ	0xFE1
  1839                           
  1840                           	psect	bssCOMRAM
  1841  000028                     __pbssCOMRAM:
  1842                           	opt stack 0
  1843  000028                     _BTcount:
  1844                           	opt stack 0
  1845  000028                     	ds	2
  1846  00002A                     _DayCount:
  1847                           	opt stack 0
  1848  00002A                     	ds	2
  1849  00002C                     _NewMessage:
  1850                           	opt stack 0
  1851  00002C                     	ds	2
  1852  00002E                     _cmWinLen:
  1853                           	opt stack 0
  1854  00002E                     	ds	2
  1855  000030                     _cmYout:
  1856                           	opt stack 0
  1857  000030                     	ds	2
  1858  000032                     _hours:
  1859                           	opt stack 0
  1860  000032                     	ds	2
  1861  000034                     _i:
  1862                           	opt stack 0
  1863  000034                     	ds	2
  1864  000036                     _minutes:
  1865                           	opt stack 0
  1866  000036                     	ds	2
  1867  000038                     _seconds:
  1868                           	opt stack 0
  1869  000038                     	ds	2
  1870  00003A                     _tl:
  1871                           	opt stack 0
  1872  00003A                     	ds	2
  1873  00003C                     _tr:
  1874                           	opt stack 0
  1875  00003C                     	ds	2
  1876  00003E                     _x:
  1877                           	opt stack 0
  1878  00003E                     	ds	2
  1879  000040                     _y:
  1880                           	opt stack 0
  1881  000040                     	ds	2
  1882  000042                     _z:
  1883                           	opt stack 0
  1884  000042                     	ds	2
  1885  000044                     _Timer0Config:
  1886                           	opt stack 0
  1887  000044                     	ds	1
  1888  000045                     _Timer1Config:
  1889                           	opt stack 0
  1890  000045                     	ds	1
  1891  000046                     _USART_Status:
  1892                           	opt stack 0
  1893  000046                     	ds	1
  1894  000047                     _rx:
  1895                           	opt stack 0
  1896  000047                     	ds	1
  1897                           tblptru	equ	0xFF8
  1898                           tblptrh	equ	0xFF7
  1899                           tblptrl	equ	0xFF6
  1900                           tablat	equ	0xFF5
  1901                           postinc0	equ	0xFEE
  1902                           wreg	equ	0xFE8
  1903                           postdec1	equ	0xFE5
  1904                           fsr1h	equ	0xFE2
  1905                           fsr1l	equ	0xFE1
  1906                           
  1907                           	psect	dataCOMRAM
  1908  000048                     __pdataCOMRAM:
  1909                           	opt stack 0
  1910  000048                     _goffset:
  1911                           	opt stack 0
  1912  000048                     	ds	3
  1913  00004B                     _gscale:
  1914                           	opt stack 0
  1915  00004B                     	ds	3
  1916  00004E                     _NewDay:
  1917                           	opt stack 0
  1918  00004E                     	ds	2
  1919  000050                     _Nlong:
  1920                           	opt stack 0
  1921  000050                     	ds	2
  1922  000052                     _Nshort:
  1923                           	opt stack 0
  1924  000052                     	ds	2
  1925  000054                     _Pumping:
  1926                           	opt stack 0
  1927  000054                     	ds	2
  1928  000056                     _day:
  1929                           	opt stack 0
  1930  000056                     	ds	2
  1931  000058                     _month:
  1932                           	opt stack 0
  1933  000058                     	ds	2
  1934  00005A                     _offcountmax:
  1935                           	opt stack 0
  1936  00005A                     	ds	2
  1937  00005C                     _onthresh:
  1938                           	opt stack 0
  1939  00005C                     	ds	2
  1940  00005E                     _year:
  1941                           	opt stack 0
  1942  00005E                     	ds	2
  1943                           tblptru	equ	0xFF8
  1944                           tblptrh	equ	0xFF7
  1945                           tblptrl	equ	0xFF6
  1946                           tablat	equ	0xFF5
  1947                           postinc0	equ	0xFEE
  1948                           wreg	equ	0xFE8
  1949                           postdec1	equ	0xFE5
  1950                           fsr1h	equ	0xFE2
  1951                           fsr1l	equ	0xFE1
  1952                           
  1953                           	psect	bssBANK1
  1954  0001AC                     __pbssBANK1:
  1955                           	opt stack 0
  1956  0001AC                     _offcount:
  1957                           	opt stack 0
  1958  0001AC                     	ds	4
  1959  0001B0                     _xlongavg:
  1960                           	opt stack 0
  1961  0001B0                     	ds	4
  1962  0001B4                     _xshortavg:
  1963                           	opt stack 0
  1964  0001B4                     	ds	4
  1965  0001B8                     _ylongavg:
  1966                           	opt stack 0
  1967  0001B8                     	ds	4
  1968  0001BC                     _yshortavg:
  1969                           	opt stack 0
  1970  0001BC                     	ds	4
  1971  0001C0                     _zlongavg:
  1972                           	opt stack 0
  1973  0001C0                     	ds	4
  1974  0001C4                     _zshortavg:
  1975                           	opt stack 0
  1976  0001C4                     	ds	4
  1977  0001C8                     _BTcountdown:
  1978                           	opt stack 0
  1979  0001C8                     	ds	2
  1980  0001CA                     _BTpower:
  1981                           	opt stack 0
  1982  0001CA                     	ds	2
  1983  0001CC                     _counter:
  1984                           	opt stack 0
  1985  0001CC                     	ds	2
  1986  0001CE                     _errno:
  1987                           	opt stack 0
  1988  0001CE                     	ds	2
  1989  0001D0                     _overflow:
  1990                           	opt stack 0
  1991  0001D0                     	ds	2
  1992  0001D2                     _tt:
  1993                           	opt stack 0
  1994  0001D2                     	ds	2
  1995  0001D4                     _LastMessage:
  1996                           	opt stack 0
  1997  0001D4                     	ds	20
  1998  0001E8                     _MessageBuffer:
  1999                           	opt stack 0
  2000  0001E8                     	ds	20
  2001                           tblptru	equ	0xFF8
  2002                           tblptrh	equ	0xFF7
  2003                           tblptrl	equ	0xFF6
  2004                           tablat	equ	0xFF5
  2005                           postinc0	equ	0xFEE
  2006                           wreg	equ	0xFE8
  2007                           postdec1	equ	0xFE5
  2008                           fsr1h	equ	0xFE2
  2009                           fsr1l	equ	0xFE1
  2010                           
  2011                           	psect	dataBANK1
  2012  000100                     __pdataBANK1:
  2013                           	opt stack 0
  2014  000100                     _MsgFromPIC:
  2015                           	opt stack 0
  2016  000100                     	ds	14
  2017  00010E                     cmFilterHighPassUsingLowPass@F4482:
  2018                           	opt stack 0
  2019  00010E                     	ds	8
  2020  000116                     _NewMonth:
  2021                           	opt stack 0
  2022  000116                     	ds	2
  2023  000118                     _cmWeightVector:
  2024                           	opt stack 0
  2025  000118                     	ds	42
  2026  000142                     _ConfigWord:
  2027                           	opt stack 0
  2028  000142                     	ds	20
  2029                           tblptru	equ	0xFF8
  2030                           tblptrh	equ	0xFF7
  2031                           tblptrl	equ	0xFF6
  2032                           tablat	equ	0xFF5
  2033                           postinc0	equ	0xFEE
  2034                           wreg	equ	0xFE8
  2035                           postdec1	equ	0xFE5
  2036                           fsr1h	equ	0xFE2
  2037                           fsr1l	equ	0xFE1
  2038                           
  2039                           	psect	bssBANK2
  2040  000200                     __pbssBANK2:
  2041                           	opt stack 0
  2042  000200                     _cmYreal:
  2043                           	opt stack 0
  2044  000200                     	ds	256
  2045                           tblptru	equ	0xFF8
  2046                           tblptrh	equ	0xFF7
  2047                           tblptrl	equ	0xFF6
  2048                           tablat	equ	0xFF5
  2049                           postinc0	equ	0xFEE
  2050                           wreg	equ	0xFE8
  2051                           postdec1	equ	0xFE5
  2052                           fsr1h	equ	0xFE2
  2053                           fsr1l	equ	0xFE1
  2054                           
  2055                           	psect	bssBANK3
  2056  000300                     __pbssBANK3:
  2057                           	opt stack 0
  2058  000300                     _cmYimag:
  2059                           	opt stack 0
  2060  000300                     	ds	256
  2061                           tblptru	equ	0xFF8
  2062                           tblptrh	equ	0xFF7
  2063                           tblptrl	equ	0xFF6
  2064                           tablat	equ	0xFF5
  2065                           postinc0	equ	0xFEE
  2066                           wreg	equ	0xFE8
  2067                           postdec1	equ	0xFE5
  2068                           fsr1h	equ	0xFE2
  2069                           fsr1l	equ	0xFE1
  2070                           
  2071                           	psect	cstackBANK4
  2072  000400                     __pcstackBANK4:
  2073                           	opt stack 0
  2074  000400                     
  2075                           ; 2 bytes @ 0x0
  2076  000400                     	ds	2
  2077  000402                     
  2078                           ; 3 bytes @ 0x2
  2079  000402                     	ds	3
  2080                           tblptru	equ	0xFF8
  2081                           tblptrh	equ	0xFF7
  2082                           tblptrl	equ	0xFF6
  2083                           tablat	equ	0xFF5
  2084                           postinc0	equ	0xFEE
  2085                           wreg	equ	0xFE8
  2086                           postdec1	equ	0xFE5
  2087                           fsr1h	equ	0xFE2
  2088                           fsr1l	equ	0xFE1
  2089                           
  2090                           	psect	cstackBANK1
  2091  000156                     __pcstackBANK1:
  2092                           	opt stack 0
  2093  000156                     ___ftdiv@cntr:
  2094                           	opt stack 0
  2095  000156                     fix_fft@k:
  2096                           	opt stack 0
  2097  000156                     MessageRoutine@str1:
  2098                           	opt stack 0
  2099                           
  2100                           ; 20 bytes @ 0x0
  2101  000156                     	ds	1
  2102  000157                     ___ftdiv@f3:
  2103                           	opt stack 0
  2104                           
  2105                           ; 3 bytes @ 0x1
  2106  000157                     	ds	3
  2107  00015A                     ___ftdiv@exp:
  2108                           	opt stack 0
  2109  00015A                     fix_fft@nn:
  2110                           	opt stack 0
  2111                           
  2112                           ; 4 bytes @ 0x4
  2113  00015A                     	ds	1
  2114  00015B                     ___ftdiv@sign:
  2115                           	opt stack 0
  2116                           
  2117                           ; 1 bytes @ 0x5
  2118  00015B                     	ds	1
  2119  00015C                     ?___fttol:
  2120                           	opt stack 0
  2121  00015C                     ___fttol@f1:
  2122                           	opt stack 0
  2123                           
  2124                           ; 3 bytes @ 0x6
  2125  00015C                     	ds	2
  2126  00015E                     fix_fft@istep:
  2127                           	opt stack 0
  2128                           
  2129                           ; 4 bytes @ 0x8
  2130  00015E                     	ds	2
  2131  000160                     ??___fttol:
  2132                           
  2133                           ; 0 bytes @ 0xA
  2134  000160                     	ds	2
  2135  000162                     fix_fft@qr:
  2136                           	opt stack 0
  2137                           
  2138                           ; 2 bytes @ 0xC
  2139  000162                     	ds	2
  2140  000164                     fix_fft@qi:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0xE
  2144  000164                     	ds	1
  2145  000165                     ___fttol@sign1:
  2146                           	opt stack 0
  2147                           
  2148                           ; 1 bytes @ 0xF
  2149  000165                     	ds	1
  2150  000166                     fix_fft@wr:
  2151                           	opt stack 0
  2152  000166                     ___fttol@lval:
  2153                           	opt stack 0
  2154                           
  2155                           ; 4 bytes @ 0x10
  2156  000166                     	ds	2
  2157  000168                     fix_fft@wi:
  2158                           	opt stack 0
  2159                           
  2160                           ; 2 bytes @ 0x12
  2161  000168                     	ds	2
  2162  00016A                     ___fttol@exp1:
  2163                           	opt stack 0
  2164  00016A                     fix_fft@n:
  2165                           	opt stack 0
  2166  00016A                     MessageRoutine@str2:
  2167                           	opt stack 0
  2168                           
  2169                           ; 20 bytes @ 0x14
  2170  00016A                     	ds	1
  2171  00016B                     ?_Read_X:
  2172                           	opt stack 0
  2173  00016B                     ?_Read_Y:
  2174                           	opt stack 0
  2175  00016B                     ?_Read_Z:
  2176                           	opt stack 0
  2177  00016B                     Read_X@m:
  2178                           	opt stack 0
  2179  00016B                     Read_Y@m:
  2180                           	opt stack 0
  2181  00016B                     Read_Z@m:
  2182                           	opt stack 0
  2183                           
  2184                           ; 3 bytes @ 0x15
  2185  00016B                     	ds	3
  2186  00016E                     fix_fft@tr:
  2187                           	opt stack 0
  2188  00016E                     Read_X@c:
  2189                           	opt stack 0
  2190  00016E                     Read_Y@c:
  2191                           	opt stack 0
  2192  00016E                     Read_Z@c:
  2193                           	opt stack 0
  2194                           
  2195                           ; 3 bytes @ 0x18
  2196  00016E                     	ds	2
  2197  000170                     fix_fft@ti:
  2198                           	opt stack 0
  2199                           
  2200                           ; 2 bytes @ 0x1A
  2201  000170                     	ds	1
  2202  000171                     _Read_X$2562:
  2203                           	opt stack 0
  2204  000171                     _Read_Y$2563:
  2205                           	opt stack 0
  2206  000171                     _Read_Z$2564:
  2207                           	opt stack 0
  2208                           
  2209                           ; 3 bytes @ 0x1B
  2210  000171                     	ds	1
  2211  000172                     fix_fft@b:
  2212                           	opt stack 0
  2213                           
  2214                           ; 2 bytes @ 0x1C
  2215  000172                     	ds	2
  2216  000174                     Read_X@x:
  2217                           	opt stack 0
  2218  000174                     Read_Y@y:
  2219                           	opt stack 0
  2220  000174                     Read_Z@z:
  2221                           	opt stack 0
  2222  000174                     fix_fft@i:
  2223                           	opt stack 0
  2224                           
  2225                           ; 4 bytes @ 0x1E
  2226  000174                     	ds	4
  2227  000178                     fix_fft@mr:
  2228                           	opt stack 0
  2229                           
  2230                           ; 4 bytes @ 0x22
  2231  000178                     	ds	4
  2232  00017C                     fix_fft@l:
  2233                           	opt stack 0
  2234                           
  2235                           ; 4 bytes @ 0x26
  2236  00017C                     	ds	2
  2237  00017E                     MessageRoutine@ret:
  2238                           	opt stack 0
  2239                           
  2240                           ; 2 bytes @ 0x28
  2241  00017E                     	ds	2
  2242  000180                     fix_fft@j:
  2243                           	opt stack 0
  2244                           
  2245                           ; 4 bytes @ 0x2A
  2246  000180                     	ds	4
  2247  000184                     fix_fft@c:
  2248                           	opt stack 0
  2249                           
  2250                           ; 4 bytes @ 0x2E
  2251  000184                     	ds	4
  2252  000188                     ??_cmFftFun:
  2253                           
  2254                           ; 0 bytes @ 0x32
  2255  000188                     	ds	11
  2256  000193                     cmFftFun@sizeData:
  2257                           	opt stack 0
  2258                           
  2259                           ; 2 bytes @ 0x3D
  2260  000193                     	ds	2
  2261  000195                     cmFftFun@root:
  2262                           	opt stack 0
  2263                           
  2264                           ; 4 bytes @ 0x3F
  2265  000195                     	ds	4
  2266  000199                     cmFftFun@place:
  2267                           	opt stack 0
  2268                           
  2269                           ; 4 bytes @ 0x43
  2270  000199                     	ds	4
  2271  00019D                     cmFftFun@k:
  2272                           	opt stack 0
  2273                           
  2274                           ; 2 bytes @ 0x47
  2275  00019D                     	ds	2
  2276  00019F                     _cmStuffsWrapperFun$2559:
  2277                           	opt stack 0
  2278                           
  2279                           ; 3 bytes @ 0x49
  2280  00019F                     	ds	3
  2281  0001A2                     _cmStuffsWrapperFun$2560:
  2282                           	opt stack 0
  2283                           
  2284                           ; 3 bytes @ 0x4C
  2285  0001A2                     	ds	3
  2286  0001A5                     _cmStuffsWrapperFun$2561:
  2287                           	opt stack 0
  2288                           
  2289                           ; 3 bytes @ 0x4F
  2290  0001A5                     	ds	3
  2291  0001A8                     cmStuffsWrapperFun@iTemp:
  2292                           	opt stack 0
  2293                           
  2294                           ; 2 bytes @ 0x52
  2295  0001A8                     	ds	2
  2296  0001AA                     cmStuffsWrapperFun@iW:
  2297                           	opt stack 0
  2298                           
  2299                           ; 2 bytes @ 0x54
  2300  0001AA                     	ds	2
  2301                           tblptru	equ	0xFF8
  2302                           tblptrh	equ	0xFF7
  2303                           tblptrl	equ	0xFF6
  2304                           tablat	equ	0xFF5
  2305                           postinc0	equ	0xFEE
  2306                           wreg	equ	0xFE8
  2307                           postdec1	equ	0xFE5
  2308                           fsr1h	equ	0xFE2
  2309                           fsr1l	equ	0xFE1
  2310                           
  2311                           	psect	cstackBANK0
  2312  000080                     __pcstackBANK0:
  2313                           	opt stack 0
  2314  000080                     i1printf@cp:
  2315                           	opt stack 0
  2316                           
  2317                           ; 2 bytes @ 0x0
  2318  000080                     	ds	2
  2319  000082                     i1printf@prec:
  2320                           	opt stack 0
  2321                           
  2322                           ; 1 bytes @ 0x2
  2323  000082                     	ds	1
  2324  000083                     i1printf@ap:
  2325                           	opt stack 0
  2326                           
  2327                           ; 2 bytes @ 0x3
  2328  000083                     	ds	2
  2329  000085                     i1printf@len:
  2330                           	opt stack 0
  2331                           
  2332                           ; 2 bytes @ 0x5
  2333  000085                     	ds	2
  2334  000087                     i1printf@flag:
  2335                           	opt stack 0
  2336                           
  2337                           ; 1 bytes @ 0x7
  2338  000087                     	ds	1
  2339  000088                     i1printf@val:
  2340                           	opt stack 0
  2341                           
  2342                           ; 2 bytes @ 0x8
  2343  000088                     	ds	2
  2344  00008A                     i1printf@width:
  2345                           	opt stack 0
  2346                           
  2347                           ; 2 bytes @ 0xA
  2348  00008A                     	ds	2
  2349  00008C                     i1printf@c:
  2350                           	opt stack 0
  2351                           
  2352                           ; 1 bytes @ 0xC
  2353  00008C                     	ds	1
  2354  00008D                     ??_SerialRxPinInterrupt:
  2355                           
  2356                           ; 0 bytes @ 0xD
  2357  00008D                     	ds	18
  2358  00009F                     ??_Delay10KTCYx:
  2359  00009F                     ??_isdigit:
  2360  00009F                     ?_strcmp:
  2361                           	opt stack 0
  2362  00009F                     ?_ReadADC:
  2363                           	opt stack 0
  2364  00009F                     ?_abs:
  2365                           	opt stack 0
  2366  00009F                     ?_ReadTimer0:
  2367                           	opt stack 0
  2368  00009F                     ?___wmul:
  2369                           	opt stack 0
  2370  00009F                     ?___lwdiv:
  2371                           	opt stack 0
  2372  00009F                     ?___ftpack:
  2373                           	opt stack 0
  2374  00009F                     ?_frexp:
  2375                           	opt stack 0
  2376  00009F                     ?___ftneg:
  2377                           	opt stack 0
  2378  00009F                     ?___lmul:
  2379                           	opt stack 0
  2380  00009F                     ?___aldiv:
  2381                           	opt stack 0
  2382  00009F                     putch@c:
  2383                           	opt stack 0
  2384  00009F                     OpenTimer0@config:
  2385                           	opt stack 0
  2386  00009F                     Delay10TCYx@unit:
  2387                           	opt stack 0
  2388  00009F                     Delay1KTCYx@unit:
  2389                           	opt stack 0
  2390  00009F                     OpenUSART@spbrg:
  2391                           	opt stack 0
  2392  00009F                     ___wmul@multiplier:
  2393                           	opt stack 0
  2394  00009F                     abs@a:
  2395                           	opt stack 0
  2396  00009F                     ___lwdiv@dividend:
  2397                           	opt stack 0
  2398  00009F                     strcmp@s1:
  2399                           	opt stack 0
  2400  00009F                     strcpy@to:
  2401                           	opt stack 0
  2402  00009F                     ___ftpack@arg:
  2403                           	opt stack 0
  2404  00009F                     ___ftneg@f1:
  2405                           	opt stack 0
  2406  00009F                     frexp@value:
  2407                           	opt stack 0
  2408  00009F                     ___lmul@multiplier:
  2409                           	opt stack 0
  2410  00009F                     ___aldiv@dividend:
  2411                           	opt stack 0
  2412                           
  2413                           ; 4 bytes @ 0x1F
  2414  00009F                     	ds	1
  2415  0000A0                     Delay10KTCYx@unit:
  2416                           	opt stack 0
  2417  0000A0                     _isdigit$2238:
  2418                           	opt stack 0
  2419                           
  2420                           ; 1 bytes @ 0x20
  2421  0000A0                     	ds	1
  2422  0000A1                     ??_ReadADC:
  2423  0000A1                     ??_abs:
  2424  0000A1                     OpenUSART@config:
  2425                           	opt stack 0
  2426  0000A1                     isdigit@c:
  2427                           	opt stack 0
  2428  0000A1                     ReadTimer0@timer:
  2429                           	opt stack 0
  2430  0000A1                     ___wmul@multiplicand:
  2431                           	opt stack 0
  2432  0000A1                     ___lwdiv@divisor:
  2433                           	opt stack 0
  2434  0000A1                     strcmp@s2:
  2435                           	opt stack 0
  2436  0000A1                     strcpy@from:
  2437                           	opt stack 0
  2438                           
  2439                           ; 2 bytes @ 0x21
  2440  0000A1                     	ds	1
  2441  0000A2                     ___ftpack@exp:
  2442                           	opt stack 0
  2443  0000A2                     frexp@eptr:
  2444                           	opt stack 0
  2445                           
  2446                           ; 2 bytes @ 0x22
  2447  0000A2                     	ds	1
  2448  0000A3                     ??_strcmp:
  2449  0000A3                     ??_TimeLoop:
  2450  0000A3                     ?_PumpDetect:
  2451                           	opt stack 0
  2452  0000A3                     ___ftpack@sign:
  2453                           	opt stack 0
  2454  0000A3                     ___lwdiv@counter:
  2455                           	opt stack 0
  2456  0000A3                     ___wmul@product:
  2457                           	opt stack 0
  2458  0000A3                     strcpy@cp:
  2459                           	opt stack 0
  2460  0000A3                     ___lmul@multiplicand:
  2461                           	opt stack 0
  2462  0000A3                     ___aldiv@divisor:
  2463                           	opt stack 0
  2464                           
  2465                           ; 4 bytes @ 0x23
  2466  0000A3                     	ds	1
  2467  0000A4                     ??___ftpack:
  2468  0000A4                     ??_frexp:
  2469  0000A4                     strcmp@r:
  2470                           	opt stack 0
  2471  0000A4                     ___lwdiv@quotient:
  2472                           	opt stack 0
  2473                           
  2474                           ; 2 bytes @ 0x24
  2475  0000A4                     	ds	1
  2476  0000A5                     ??_PumpDetect:
  2477  0000A5                     ??_cmFilterHighPassUsingLowPass:
  2478  0000A5                     ?_atoi:
  2479                           	opt stack 0
  2480  0000A5                     atoi@s:
  2481                           	opt stack 0
  2482                           
  2483                           ; 2 bytes @ 0x25
  2484  0000A5                     	ds	1
  2485  0000A6                     ?___lwmod:
  2486                           	opt stack 0
  2487  0000A6                     ___lwmod@dividend:
  2488                           	opt stack 0
  2489                           
  2490                           ; 2 bytes @ 0x26
  2491  0000A6                     	ds	1
  2492  0000A7                     ??_atoi:
  2493  0000A7                     ?___awtoft:
  2494                           	opt stack 0
  2495  0000A7                     ___aldiv@counter:
  2496                           	opt stack 0
  2497  0000A7                     ___awtoft@c:
  2498                           	opt stack 0
  2499  0000A7                     ___lmul@product:
  2500                           	opt stack 0
  2501                           
  2502                           ; 4 bytes @ 0x27
  2503  0000A7                     	ds	1
  2504  0000A8                     ___aldiv@sign:
  2505                           	opt stack 0
  2506  0000A8                     ___lwmod@divisor:
  2507                           	opt stack 0
  2508                           
  2509                           ; 2 bytes @ 0x28
  2510  0000A8                     	ds	1
  2511  0000A9                     atoi@sign:
  2512                           	opt stack 0
  2513  0000A9                     ___aldiv@quotient:
  2514                           	opt stack 0
  2515                           
  2516                           ; 4 bytes @ 0x29
  2517  0000A9                     	ds	1
  2518  0000AA                     ___awtoft@sign:
  2519                           	opt stack 0
  2520  0000AA                     ___lwmod@counter:
  2521                           	opt stack 0
  2522  0000AA                     atoi@a:
  2523                           	opt stack 0
  2524                           
  2525                           ; 2 bytes @ 0x2A
  2526  0000AA                     	ds	1
  2527  0000AB                     ?_printf:
  2528                           	opt stack 0
  2529  0000AB                     ?___ftmul:
  2530                           	opt stack 0
  2531  0000AB                     fix_fft@fr:
  2532                           	opt stack 0
  2533  0000AB                     printf@f:
  2534                           	opt stack 0
  2535  0000AB                     ___ftmul@f1:
  2536                           	opt stack 0
  2537                           
  2538                           ; 3 bytes @ 0x2B
  2539  0000AB                     	ds	2
  2540  0000AD                     ?_approxRollingAverage:
  2541                           	opt stack 0
  2542  0000AD                     fix_fft@fi:
  2543                           	opt stack 0
  2544  0000AD                     approxRollingAverage@avg:
  2545                           	opt stack 0
  2546                           
  2547                           ; 4 bytes @ 0x2D
  2548  0000AD                     	ds	1
  2549  0000AE                     ___ftmul@f2:
  2550                           	opt stack 0
  2551                           
  2552                           ; 3 bytes @ 0x2E
  2553  0000AE                     	ds	1
  2554  0000AF                     fix_fft@m:
  2555                           	opt stack 0
  2556                           
  2557                           ; 2 bytes @ 0x2F
  2558  0000AF                     	ds	2
  2559  0000B1                     ??_fix_fft:
  2560  0000B1                     ??___ftmul:
  2561  0000B1                     approxRollingAverage@new_sample:
  2562                           	opt stack 0
  2563  0000B1                     cmFilterHighPassUsingLowPass@cmFilterCoeff:
  2564                           	opt stack 0
  2565                           
  2566                           ; 8 bytes @ 0x31
  2567  0000B1                     	ds	3
  2568  0000B4                     ___ftmul@exp:
  2569                           	opt stack 0
  2570                           
  2571                           ; 1 bytes @ 0x34
  2572  0000B4                     	ds	1
  2573  0000B5                     approxRollingAverage@N:
  2574                           	opt stack 0
  2575  0000B5                     ___ftmul@f3_as_product:
  2576                           	opt stack 0
  2577                           
  2578                           ; 3 bytes @ 0x35
  2579  0000B5                     	ds	2
  2580  0000B7                     ??_printf:
  2581  0000B7                     ??_approxRollingAverage:
  2582                           
  2583                           ; 0 bytes @ 0x37
  2584  0000B7                     	ds	1
  2585  0000B8                     ___ftmul@cntr:
  2586                           	opt stack 0
  2587                           
  2588                           ; 1 bytes @ 0x38
  2589  0000B8                     	ds	1
  2590  0000B9                     ___ftmul@sign:
  2591                           	opt stack 0
  2592  0000B9                     cmFilterHighPassUsingLowPass@k:
  2593                           	opt stack 0
  2594                           
  2595                           ; 2 bytes @ 0x39
  2596  0000B9                     	ds	1
  2597  0000BA                     ?___ftadd:
  2598                           	opt stack 0
  2599  0000BA                     ___ftadd@f1:
  2600                           	opt stack 0
  2601                           
  2602                           ; 3 bytes @ 0x3A
  2603  0000BA                     	ds	1
  2604  0000BB                     cmFilterHighPassUsingLowPass@xBuffer:
  2605                           	opt stack 0
  2606  0000BB                     printf@cp:
  2607                           	opt stack 0
  2608                           
  2609                           ; 2 bytes @ 0x3B
  2610  0000BB                     	ds	2
  2611  0000BD                     printf@prec:
  2612                           	opt stack 0
  2613  0000BD                     cmFilterHighPassUsingLowPass@j:
  2614                           	opt stack 0
  2615  0000BD                     ___ftadd@f2:
  2616                           	opt stack 0
  2617                           
  2618                           ; 3 bytes @ 0x3D
  2619  0000BD                     	ds	1
  2620  0000BE                     printf@ap:
  2621                           	opt stack 0
  2622                           
  2623                           ; 2 bytes @ 0x3E
  2624  0000BE                     	ds	1
  2625  0000BF                     cmFilterHighPassUsingLowPass@xLPF:
  2626                           	opt stack 0
  2627                           
  2628                           ; 2 bytes @ 0x3F
  2629  0000BF                     	ds	1
  2630  0000C0                     ??___ftadd:
  2631  0000C0                     printf@len:
  2632                           	opt stack 0
  2633                           
  2634                           ; 2 bytes @ 0x40
  2635  0000C0                     	ds	1
  2636  0000C1                     cmFilterHighPassUsingLowPass@Nsignal:
  2637                           	opt stack 0
  2638                           
  2639                           ; 2 bytes @ 0x41
  2640  0000C1                     	ds	1
  2641  0000C2                     printf@flag:
  2642                           	opt stack 0
  2643                           
  2644                           ; 1 bytes @ 0x42
  2645  0000C2                     	ds	1
  2646  0000C3                     ___ftadd@sign:
  2647                           	opt stack 0
  2648  0000C3                     cmFilterHighPassUsingLowPass@j_428:
  2649                           	opt stack 0
  2650  0000C3                     printf@val:
  2651                           	opt stack 0
  2652                           
  2653                           ; 2 bytes @ 0x43
  2654  0000C3                     	ds	1
  2655  0000C4                     ___ftadd@exp2:
  2656                           	opt stack 0
  2657                           
  2658                           ; 1 bytes @ 0x44
  2659  0000C4                     	ds	1
  2660  0000C5                     ___ftadd@exp1:
  2661                           	opt stack 0
  2662  0000C5                     cmFilterHighPassUsingLowPass@i:
  2663                           	opt stack 0
  2664  0000C5                     printf@width:
  2665                           	opt stack 0
  2666                           
  2667                           ; 2 bytes @ 0x45
  2668  0000C5                     	ds	1
  2669  0000C6                     ?_eval_poly:
  2670                           	opt stack 0
  2671  0000C6                     eval_poly@x:
  2672                           	opt stack 0
  2673                           
  2674                           ; 3 bytes @ 0x46
  2675  0000C6                     	ds	1
  2676  0000C7                     printf@c:
  2677                           	opt stack 0
  2678                           
  2679                           ; 1 bytes @ 0x47
  2680  0000C7                     	ds	1
  2681  0000C8                     
  2682                           ; 0 bytes @ 0x48
  2683  0000C8                     	ds	1
  2684  0000C9                     eval_poly@d:
  2685                           	opt stack 0
  2686                           
  2687                           ; 2 bytes @ 0x49
  2688  0000C9                     	ds	2
  2689  0000CB                     eval_poly@n:
  2690                           	opt stack 0
  2691                           
  2692                           ; 2 bytes @ 0x4B
  2693  0000CB                     	ds	2
  2694  0000CD                     ??_eval_poly:
  2695                           
  2696                           ; 0 bytes @ 0x4D
  2697  0000CD                     	ds	2
  2698  0000CF                     eval_poly@res:
  2699                           	opt stack 0
  2700                           
  2701                           ; 3 bytes @ 0x4F
  2702  0000CF                     	ds	3
  2703  0000D2                     ?_log:
  2704                           	opt stack 0
  2705  0000D2                     log@x:
  2706                           	opt stack 0
  2707                           
  2708                           ; 3 bytes @ 0x52
  2709  0000D2                     	ds	3
  2710  0000D5                     log@exponent:
  2711                           	opt stack 0
  2712                           
  2713                           ; 2 bytes @ 0x55
  2714  0000D5                     	ds	2
  2715  0000D7                     ?___ftdiv:
  2716                           	opt stack 0
  2717  0000D7                     ___ftdiv@f1:
  2718                           	opt stack 0
  2719                           
  2720                           ; 3 bytes @ 0x57
  2721  0000D7                     	ds	3
  2722  0000DA                     ___ftdiv@f2:
  2723                           	opt stack 0
  2724                           
  2725                           ; 3 bytes @ 0x5A
  2726  0000DA                     	ds	3
  2727  0000DD                     ??___ftdiv:
  2728                           
  2729                           ; 0 bytes @ 0x5D
  2730  0000DD                     	ds	3
  2731  0000E0                     tblptru	equ	0xFF8
  2732                           tblptrh	equ	0xFF7
  2733                           tblptrl	equ	0xFF6
  2734                           tablat	equ	0xFF5
  2735                           postinc0	equ	0xFEE
  2736                           wreg	equ	0xFE8
  2737                           postdec1	equ	0xFE5
  2738                           fsr1h	equ	0xFE2
  2739                           fsr1l	equ	0xFE1
  2740                           
  2741                           ; 0 bytes @ 0x60
  2742                           
  2743                           	psect	cstackCOMRAM
  2744  000001                     __pcstackCOMRAM:
  2745                           	opt stack 0
  2746  000001                     ?i2___lwmod:
  2747                           	opt stack 0
  2748  000001                     i2___lwmod@dividend:
  2749                           	opt stack 0
  2750                           
  2751                           ; 2 bytes @ 0x0
  2752  000001                     	ds	2
  2753  000003                     i2___lwmod@divisor:
  2754                           	opt stack 0
  2755                           
  2756                           ; 2 bytes @ 0x2
  2757  000003                     	ds	2
  2758  000005                     i2___lwmod@counter:
  2759                           	opt stack 0
  2760                           
  2761                           ; 1 bytes @ 0x4
  2762  000005                     	ds	1
  2763  000006                     ??_TimingISR:
  2764                           
  2765                           ; 0 bytes @ 0x5
  2766  000006                     	ds	16
  2767  000016                     ??i1_isdigit:
  2768  000016                     ?i1___wmul:
  2769                           	opt stack 0
  2770  000016                     ?i1___lwdiv:
  2771                           	opt stack 0
  2772  000016                     ReadUSART@data:
  2773                           	opt stack 0
  2774  000016                     i1putch@c:
  2775                           	opt stack 0
  2776  000016                     i1___wmul@multiplier:
  2777                           	opt stack 0
  2778  000016                     i1___lwdiv@dividend:
  2779                           	opt stack 0
  2780  000016                     i1strcpy@to:
  2781                           	opt stack 0
  2782                           
  2783                           ; 2 bytes @ 0x15
  2784  000016                     	ds	1
  2785  000017                     i1_isdigit$2238:
  2786                           	opt stack 0
  2787                           
  2788                           ; 1 bytes @ 0x16
  2789  000017                     	ds	1
  2790  000018                     i1isdigit@c:
  2791                           	opt stack 0
  2792  000018                     i1___wmul@multiplicand:
  2793                           	opt stack 0
  2794  000018                     i1___lwdiv@divisor:
  2795                           	opt stack 0
  2796  000018                     i1strcpy@from:
  2797                           	opt stack 0
  2798                           
  2799                           ; 2 bytes @ 0x17
  2800  000018                     	ds	2
  2801  00001A                     i1___lwdiv@counter:
  2802                           	opt stack 0
  2803  00001A                     i1___wmul@product:
  2804                           	opt stack 0
  2805  00001A                     i1strcpy@cp:
  2806                           	opt stack 0
  2807                           
  2808                           ; 2 bytes @ 0x19
  2809  00001A                     	ds	1
  2810  00001B                     i1___lwdiv@quotient:
  2811                           	opt stack 0
  2812                           
  2813                           ; 2 bytes @ 0x1A
  2814  00001B                     	ds	2
  2815  00001D                     ?i1___lwmod:
  2816                           	opt stack 0
  2817  00001D                     i1___lwmod@dividend:
  2818                           	opt stack 0
  2819                           
  2820                           ; 2 bytes @ 0x1C
  2821  00001D                     	ds	2
  2822  00001F                     i1___lwmod@divisor:
  2823                           	opt stack 0
  2824                           
  2825                           ; 2 bytes @ 0x1E
  2826  00001F                     	ds	2
  2827  000021                     i1___lwmod@counter:
  2828                           	opt stack 0
  2829                           
  2830                           ; 1 bytes @ 0x20
  2831  000021                     	ds	1
  2832  000022                     ?i1_printf:
  2833                           	opt stack 0
  2834  000022                     i1printf@f:
  2835                           	opt stack 0
  2836                           
  2837                           ; 2 bytes @ 0x21
  2838  000022                     	ds	2
  2839  000024                     ??i1_printf:
  2840                           
  2841                           ; 0 bytes @ 0x23
  2842  000024                     	ds	4
  2843                           tblptru	equ	0xFF8
  2844                           tblptrh	equ	0xFF7
  2845                           tblptrl	equ	0xFF6
  2846                           tablat	equ	0xFF5
  2847                           postinc0	equ	0xFEE
  2848                           wreg	equ	0xFE8
  2849                           postdec1	equ	0xFE5
  2850                           fsr1h	equ	0xFE2
  2851                           fsr1l	equ	0xFE1
  2852                           
  2853 ;;
  2854 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2855 ;;
  2856 ;; *************** function _main *****************
  2857 ;; Defined at:
  2858 ;;		line 58 in file "serialcomms.c"
  2859 ;; Parameters:    Size  Location     Type
  2860 ;;  argc            2    0[BANK4 ] int 
  2861 ;;  argv            3    2[BANK4 ] PTR PTR unsigned char 
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;		None
  2864 ;; Return value:  Size  Location     Type
  2865 ;;		None               void
  2866 ;; Registers used:
  2867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2873 ;;      Params:         0       0       0       0       0       5       0
  2874 ;;      Locals:         0       0       0       0       0       0       0
  2875 ;;      Temps:          0       0       0       0       0       0       0
  2876 ;;      Totals:         0       0       0       0       0       5       0
  2877 ;;Total ram usage:        5 bytes
  2878 ;; Hardware stack levels required when called:   11
  2879 ;; This function calls:
  2880 ;;		_ConfigADC
  2881 ;;		_Delay10KTCYx
  2882 ;;		_InitInterrupts
  2883 ;;		_InitTimer0
  2884 ;;		_InitUSART
  2885 ;;		_MessageRoutine
  2886 ;;		_PumpDetect
  2887 ;;		_ReadAndTime
  2888 ;;		_cmStuffsWrapperFun
  2889 ;;		_printf
  2890 ;; This function is called by:
  2891 ;;		Startup code after reset
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           	psect	text0
  2896  001F3A                     __ptext0:
  2897                           	opt stack 0
  2898  001F3A                     _main:
  2899                           	opt stack 20
  2900                           
  2901                           ;serialcomms.c: 60: TRISA=0xFC;
  2902                           
  2903                           ;incstack = 0
  2904  001F3A  0EFC               	movlw	252
  2905  001F3C  6E92               	movwf	3986,c	;volatile
  2906                           
  2907                           ;serialcomms.c: 61: TRISBbits.RB3=0;
  2908  001F3E  9693               	bcf	3987,3,c	;volatile
  2909                           
  2910                           ;serialcomms.c: 62: TRISBbits.RB4=0;
  2911  001F40  9893               	bcf	3987,4,c	;volatile
  2912                           
  2913                           ;serialcomms.c: 63: TRISCbits.RC0=0;
  2914  001F42  9094               	bcf	3988,0,c	;volatile
  2915                           
  2916                           ;serialcomms.c: 64: LATCbits.LATC0=0;
  2917  001F44  908B               	bcf	3979,0,c	;volatile
  2918                           
  2919                           ;serialcomms.c: 65: LATBbits.LATB4=1;
  2920  001F46  888A               	bsf	3978,4,c	;volatile
  2921                           
  2922                           ;serialcomms.c: 68: LATBbits.LATB3=1;
  2923  001F48  868A               	bsf	3978,3,c	;volatile
  2924                           
  2925                           ;serialcomms.c: 70: InitUSART();
  2926  001F4A  EC51  F021         	call	_InitUSART	;wreg free
  2927                           
  2928                           ;serialcomms.c: 71: InitInterrupts();
  2929  001F4E  ECB7  F021         	call	_InitInterrupts	;wreg free
  2930                           
  2931                           ;serialcomms.c: 72: InitTimer0();
  2932  001F52  ECDD  F021         	call	_InitTimer0	;wreg free
  2933                           
  2934                           ;serialcomms.c: 73: ConfigADC();
  2935  001F56  ECCF  F021         	call	_ConfigADC	;wreg free
  2936                           
  2937                           ;serialcomms.c: 75: while(Pumping)
  2938  001F5A  D009               	goto	l5958
  2939  001F5C                     l5956:
  2940                           
  2941                           ;serialcomms.c: 76: {
  2942                           ;serialcomms.c: 77: ReadAndTime();
  2943  001F5C  ECB2  F015         	call	_ReadAndTime	;wreg free
  2944                           
  2945                           ;serialcomms.c: 78: Pumping = PumpDetect();
  2946  001F60  ECAB  F016         	call	_PumpDetect	;wreg free
  2947  001F64  C0A3  F054         	movff	?_PumpDetect,_Pumping
  2948  001F68  C0A4  F055         	movff	?_PumpDetect+1,_Pumping+1
  2949  001F6C  D000               	goto	l5958
  2950  001F6E                     l5958:
  2951  001F6E  5054               	movf	_Pumping,w,c
  2952  001F70  1055               	iorwf	_Pumping+1,w,c
  2953  001F72  A4D8               	btfss	status,2,c
  2954  001F74  D7F3               	goto	l5956
  2955  001F76                     l146:
  2956                           
  2957                           ;serialcomms.c: 85: {
  2958                           ;serialcomms.c: 86: if (LATBbits.LATB3==0 && minutes > 10)
  2959  001F76  B68A               	btfsc	3978,3,c	;volatile
  2960  001F78  D009               	goto	l5964
  2961  001F7A  5037               	movf	_minutes+1,w,c
  2962  001F7C  E104               	bnz	u6870
  2963  001F7E  0E0B               	movlw	11
  2964  001F80  5C36               	subwf	_minutes,w,c
  2965  001F82  A0D8               	btfss	status,0,c
  2966  001F84  D003               	goto	l5964
  2967  001F86                     u6870:
  2968                           
  2969                           ;serialcomms.c: 87: {
  2970                           ;serialcomms.c: 88: LATBbits.LATB3=1;
  2971  001F86  868A               	bsf	3978,3,c	;volatile
  2972                           
  2973                           ;serialcomms.c: 89: LATBbits.LATB4 = 0;
  2974  001F88  988A               	bcf	3978,4,c	;volatile
  2975  001F8A  D000               	goto	l5964
  2976  001F8C                     l5964:
  2977                           
  2978                           ;serialcomms.c: 90: }
  2979                           ;serialcomms.c: 91: ReadAndTime();
  2980  001F8C  ECB2  F015         	call	_ReadAndTime	;wreg free
  2981                           
  2982                           ;serialcomms.c: 92: Pumping=PumpDetect();
  2983  001F90  ECAB  F016         	call	_PumpDetect	;wreg free
  2984  001F94  C0A3  F054         	movff	?_PumpDetect,_Pumping
  2985  001F98  C0A4  F055         	movff	?_PumpDetect+1,_Pumping+1
  2986                           
  2987                           ;serialcomms.c: 93: if (Pumping)
  2988  001F9C  5054               	movf	_Pumping,w,c
  2989  001F9E  1055               	iorwf	_Pumping+1,w,c
  2990  001FA0  B4D8               	btfsc	status,2,c
  2991  001FA2  D13A               	goto	l6060
  2992                           
  2993                           ;serialcomms.c: 94: {
  2994                           ;serialcomms.c: 95: if (LATBbits.LATB3==1)
  2995  001FA4  A68A               	btfss	3978,3,c	;volatile
  2996  001FA6  D0B2               	goto	l6034
  2997                           
  2998                           ;serialcomms.c: 96: {
  2999                           ;serialcomms.c: 98: LATCbits.LATC0=1;
  3000  001FA8  808B               	bsf	3979,0,c	;volatile
  3001                           
  3002                           ;serialcomms.c: 100: Delay10KTCYx(200);
  3003  001FAA  0EC8               	movlw	200
  3004  001FAC  EC73  F021         	call	_Delay10KTCYx
  3005                           
  3006                           ;serialcomms.c: 101: Delay10KTCYx(200);
  3007  001FB0  0EC8               	movlw	200
  3008  001FB2  EC73  F021         	call	_Delay10KTCYx
  3009                           
  3010                           ;serialcomms.c: 102: Delay10KTCYx(200);
  3011  001FB6  0EC8               	movlw	200
  3012  001FB8  EC73  F021         	call	_Delay10KTCYx
  3013                           
  3014                           ;serialcomms.c: 108: if(DayCount<10)
  3015  001FBC  BE2B               	btfsc	_DayCount+1,7,c
  3016  001FBE  D006               	goto	l5976
  3017  001FC0  502B               	movf	_DayCount+1,w,c
  3018  001FC2  E134               	bnz	l5994
  3019  001FC4  0E0A               	movlw	10
  3020  001FC6  5C2A               	subwf	_DayCount,w,c
  3021  001FC8  B0D8               	btfsc	status,0,c
  3022  001FCA  D030               	goto	l5994
  3023  001FCC                     l5976:
  3024                           
  3025                           ;serialcomms.c: 109: {
  3026                           ;serialcomms.c: 111: if (NewDay)
  3027  001FCC  504E               	movf	_NewDay,w,c
  3028  001FCE  104F               	iorwf	_NewDay+1,w,c
  3029  001FD0  B4D8               	btfsc	status,2,c
  3030  001FD2  D019               	goto	l5988
  3031                           
  3032                           ;serialcomms.c: 112: {
  3033                           ;serialcomms.c: 113: DayCount++;
  3034  001FD4  4A2A               	infsnz	_DayCount,f,c
  3035  001FD6  2A2B               	incf	_DayCount+1,f,c
  3036                           
  3037                           ;serialcomms.c: 114: NewDay=0;
  3038  001FD8  0E00               	movlw	0
  3039  001FDA  6E4F               	movwf	_NewDay+1,c
  3040  001FDC  0E00               	movlw	0
  3041  001FDE  6E4E               	movwf	_NewDay,c
  3042                           
  3043                           ;serialcomms.c: 115: printf("new FILE%1i.txt\r\n",DayCount);
  3044  001FE0  0E46               	movlw	low STR_1
  3045  001FE2  0100               	movlb	0	; () banked
  3046  001FE4  6FAB               	movwf	printf@f& (0+255),b
  3047  001FE6  0E7F               	movlw	high STR_1
  3048  001FE8  0100               	movlb	0	; () banked
  3049  001FEA  6FAC               	movwf	(printf@f+1)& (0+255),b
  3050  001FEC  C02A  F0AD         	movff	_DayCount,?_printf+2
  3051  001FF0  C02B  F0AE         	movff	_DayCount+1,?_printf+3
  3052  001FF4  ECEA  F009         	call	_printf	;wreg free
  3053                           
  3054                           ;serialcomms.c: 116: Delay10KTCYx(200);
  3055  001FF8  0EC8               	movlw	200
  3056  001FFA  EC73  F021         	call	_Delay10KTCYx
  3057                           
  3058                           ;serialcomms.c: 117: Delay10KTCYx(200);
  3059  001FFE  0EC8               	movlw	200
  3060  002000  EC73  F021         	call	_Delay10KTCYx
  3061  002004  D000               	goto	l5988
  3062  002006                     l5988:
  3063                           
  3064                           ;serialcomms.c: 118: }
  3065                           ;serialcomms.c: 120: printf("append FILE%1i.txt\r\n",DayCount);
  3066  002006  0EA6               	movlw	low STR_2
  3067  002008  0100               	movlb	0	; () banked
  3068  00200A  6FAB               	movwf	printf@f& (0+255),b
  3069  00200C  0E7E               	movlw	high STR_2
  3070  00200E  0100               	movlb	0	; () banked
  3071  002010  6FAC               	movwf	(printf@f+1)& (0+255),b
  3072  002012  C02A  F0AD         	movff	_DayCount,?_printf+2
  3073  002016  C02B  F0AE         	movff	_DayCount+1,?_printf+3
  3074  00201A  ECEA  F009         	call	_printf	;wreg free
  3075                           
  3076                           ;serialcomms.c: 121: Delay10KTCYx(200);
  3077  00201E  0EC8               	movlw	200
  3078  002020  EC73  F021         	call	_Delay10KTCYx
  3079                           
  3080                           ;serialcomms.c: 122: Delay10KTCYx(200);
  3081  002024  0EC8               	movlw	200
  3082  002026  EC73  F021         	call	_Delay10KTCYx
  3083                           
  3084                           ;serialcomms.c: 123: }
  3085  00202A  D070               	goto	l6034
  3086  00202C                     l5994:
  3087                           
  3088                           ;serialcomms.c: 124: else if (DayCount<100)
  3089  00202C  BE2B               	btfsc	_DayCount+1,7,c
  3090  00202E  D006               	goto	l5996
  3091  002030  502B               	movf	_DayCount+1,w,c
  3092  002032  E134               	bnz	l6014
  3093  002034  0E64               	movlw	100
  3094  002036  5C2A               	subwf	_DayCount,w,c
  3095  002038  B0D8               	btfsc	status,0,c
  3096  00203A  D030               	goto	l6014
  3097  00203C                     l5996:
  3098                           
  3099                           ;serialcomms.c: 125: {
  3100                           ;serialcomms.c: 127: if (NewDay)
  3101  00203C  504E               	movf	_NewDay,w,c
  3102  00203E  104F               	iorwf	_NewDay+1,w,c
  3103  002040  B4D8               	btfsc	status,2,c
  3104  002042  D019               	goto	l6008
  3105                           
  3106                           ;serialcomms.c: 128: {
  3107                           ;serialcomms.c: 129: DayCount++;
  3108  002044  4A2A               	infsnz	_DayCount,f,c
  3109  002046  2A2B               	incf	_DayCount+1,f,c
  3110                           
  3111                           ;serialcomms.c: 130: NewDay=0;
  3112  002048  0E00               	movlw	0
  3113  00204A  6E4F               	movwf	_NewDay+1,c
  3114  00204C  0E00               	movlw	0
  3115  00204E  6E4E               	movwf	_NewDay,c
  3116                           
  3117                           ;serialcomms.c: 131: printf("new FILE%2i.txt\r\n",DayCount);
  3118  002050  0E58               	movlw	low STR_3
  3119  002052  0100               	movlb	0	; () banked
  3120  002054  6FAB               	movwf	printf@f& (0+255),b
  3121  002056  0E7F               	movlw	high STR_3
  3122  002058  0100               	movlb	0	; () banked
  3123  00205A  6FAC               	movwf	(printf@f+1)& (0+255),b
  3124  00205C  C02A  F0AD         	movff	_DayCount,?_printf+2
  3125  002060  C02B  F0AE         	movff	_DayCount+1,?_printf+3
  3126  002064  ECEA  F009         	call	_printf	;wreg free
  3127                           
  3128                           ;serialcomms.c: 132: Delay10KTCYx(200);
  3129  002068  0EC8               	movlw	200
  3130  00206A  EC73  F021         	call	_Delay10KTCYx
  3131                           
  3132                           ;serialcomms.c: 133: Delay10KTCYx(200);
  3133  00206E  0EC8               	movlw	200
  3134  002070  EC73  F021         	call	_Delay10KTCYx
  3135  002074  D000               	goto	l6008
  3136  002076                     l6008:
  3137                           
  3138                           ;serialcomms.c: 134: }
  3139                           ;serialcomms.c: 136: printf("append FILE%2i.txt\r\n",DayCount);
  3140  002076  0EBB               	movlw	low STR_4
  3141  002078  0100               	movlb	0	; () banked
  3142  00207A  6FAB               	movwf	printf@f& (0+255),b
  3143  00207C  0E7E               	movlw	high STR_4
  3144  00207E  0100               	movlb	0	; () banked
  3145  002080  6FAC               	movwf	(printf@f+1)& (0+255),b
  3146  002082  C02A  F0AD         	movff	_DayCount,?_printf+2
  3147  002086  C02B  F0AE         	movff	_DayCount+1,?_printf+3
  3148  00208A  ECEA  F009         	call	_printf	;wreg free
  3149                           
  3150                           ;serialcomms.c: 137: Delay10KTCYx(200);
  3151  00208E  0EC8               	movlw	200
  3152  002090  EC73  F021         	call	_Delay10KTCYx
  3153                           
  3154                           ;serialcomms.c: 138: Delay10KTCYx(200);
  3155  002094  0EC8               	movlw	200
  3156  002096  EC73  F021         	call	_Delay10KTCYx
  3157                           
  3158                           ;serialcomms.c: 139: }
  3159  00209A  D038               	goto	l6034
  3160  00209C                     l6014:
  3161                           
  3162                           ;serialcomms.c: 140: else if (DayCount<1000)
  3163  00209C  BE2B               	btfsc	_DayCount+1,7,c
  3164  00209E  D006               	goto	l6016
  3165  0020A0  0EE8               	movlw	232
  3166  0020A2  5C2A               	subwf	_DayCount,w,c
  3167  0020A4  0E03               	movlw	3
  3168  0020A6  582B               	subwfb	_DayCount+1,w,c
  3169  0020A8  B0D8               	btfsc	status,0,c
  3170  0020AA  D030               	goto	l6034
  3171  0020AC                     l6016:
  3172                           
  3173                           ;serialcomms.c: 141: {
  3174                           ;serialcomms.c: 143: if (NewDay)
  3175  0020AC  504E               	movf	_NewDay,w,c
  3176  0020AE  104F               	iorwf	_NewDay+1,w,c
  3177  0020B0  B4D8               	btfsc	status,2,c
  3178  0020B2  D019               	goto	l6028
  3179                           
  3180                           ;serialcomms.c: 144: {
  3181                           ;serialcomms.c: 145: DayCount++;
  3182  0020B4  4A2A               	infsnz	_DayCount,f,c
  3183  0020B6  2A2B               	incf	_DayCount+1,f,c
  3184                           
  3185                           ;serialcomms.c: 146: NewDay=0;
  3186  0020B8  0E00               	movlw	0
  3187  0020BA  6E4F               	movwf	_NewDay+1,c
  3188  0020BC  0E00               	movlw	0
  3189  0020BE  6E4E               	movwf	_NewDay,c
  3190                           
  3191                           ;serialcomms.c: 147: printf("new FILE%3i.txt\r\n",DayCount);
  3192  0020C0  0E6A               	movlw	low STR_5
  3193  0020C2  0100               	movlb	0	; () banked
  3194  0020C4  6FAB               	movwf	printf@f& (0+255),b
  3195  0020C6  0E7F               	movlw	high STR_5
  3196  0020C8  0100               	movlb	0	; () banked
  3197  0020CA  6FAC               	movwf	(printf@f+1)& (0+255),b
  3198  0020CC  C02A  F0AD         	movff	_DayCount,?_printf+2
  3199  0020D0  C02B  F0AE         	movff	_DayCount+1,?_printf+3
  3200  0020D4  ECEA  F009         	call	_printf	;wreg free
  3201                           
  3202                           ;serialcomms.c: 148: Delay10KTCYx(200);
  3203  0020D8  0EC8               	movlw	200
  3204  0020DA  EC73  F021         	call	_Delay10KTCYx
  3205                           
  3206                           ;serialcomms.c: 149: Delay10KTCYx(200);
  3207  0020DE  0EC8               	movlw	200
  3208  0020E0  EC73  F021         	call	_Delay10KTCYx
  3209  0020E4  D000               	goto	l6028
  3210  0020E6                     l6028:
  3211                           
  3212                           ;serialcomms.c: 150: }
  3213                           ;serialcomms.c: 152: printf("append FILE%3i.txt\r\n",DayCount);
  3214  0020E6  0ED0               	movlw	low STR_6
  3215  0020E8  0100               	movlb	0	; () banked
  3216  0020EA  6FAB               	movwf	printf@f& (0+255),b
  3217  0020EC  0E7E               	movlw	high STR_6
  3218  0020EE  0100               	movlb	0	; () banked
  3219  0020F0  6FAC               	movwf	(printf@f+1)& (0+255),b
  3220  0020F2  C02A  F0AD         	movff	_DayCount,?_printf+2
  3221  0020F6  C02B  F0AE         	movff	_DayCount+1,?_printf+3
  3222  0020FA  ECEA  F009         	call	_printf	;wreg free
  3223                           
  3224                           ;serialcomms.c: 153: Delay10KTCYx(200);
  3225  0020FE  0EC8               	movlw	200
  3226  002100  EC73  F021         	call	_Delay10KTCYx
  3227                           
  3228                           ;serialcomms.c: 154: Delay10KTCYx(200);
  3229  002104  0EC8               	movlw	200
  3230  002106  EC73  F021         	call	_Delay10KTCYx
  3231  00210A  D000               	goto	l6034
  3232  00210C                     l6034:
  3233                           
  3234                           ;serialcomms.c: 155: }
  3235                           ;serialcomms.c: 156: }
  3236                           ;serialcomms.c: 159: printf("\r\r\nLog started!\r\n");
  3237  00210C  0E34               	movlw	low STR_7
  3238  00210E  0100               	movlb	0	; () banked
  3239  002110  6FAB               	movwf	printf@f& (0+255),b
  3240  002112  0E7F               	movlw	high STR_7
  3241  002114  0100               	movlb	0	; () banked
  3242  002116  6FAC               	movwf	(printf@f+1)& (0+255),b
  3243  002118  ECEA  F009         	call	_printf	;wreg free
  3244                           
  3245                           ;serialcomms.c: 160: printf("%2i:%2i:%2i\r\n",hours,minutes,seconds);
  3246  00211C  0EFF               	movlw	low (STR_29+6)
  3247  00211E  0100               	movlb	0	; () banked
  3248  002120  6FAB               	movwf	printf@f& (0+255),b
  3249  002122  0E7E               	movlw	high (STR_29+6)
  3250  002124  0100               	movlb	0	; () banked
  3251  002126  6FAC               	movwf	(printf@f+1)& (0+255),b
  3252  002128  C032  F0AD         	movff	_hours,?_printf+2
  3253  00212C  C033  F0AE         	movff	_hours+1,?_printf+3
  3254  002130  C036  F0AF         	movff	_minutes,?_printf+4
  3255  002134  C037  F0B0         	movff	_minutes+1,?_printf+5
  3256  002138  C038  F0B1         	movff	_seconds,?_printf+6
  3257  00213C  C039  F0B2         	movff	_seconds+1,?_printf+7
  3258  002140  ECEA  F009         	call	_printf	;wreg free
  3259                           
  3260                           ;serialcomms.c: 161: printf("%2i/%2i/%4i\r\n\n",day,month,year);
  3261  002144  0E8E               	movlw	low STR_9
  3262  002146  0100               	movlb	0	; () banked
  3263  002148  6FAB               	movwf	printf@f& (0+255),b
  3264  00214A  0E7F               	movlw	high STR_9
  3265  00214C  0100               	movlb	0	; () banked
  3266  00214E  6FAC               	movwf	(printf@f+1)& (0+255),b
  3267  002150  C056  F0AD         	movff	_day,?_printf+2
  3268  002154  C057  F0AE         	movff	_day+1,?_printf+3
  3269  002158  C058  F0AF         	movff	_month,?_printf+4
  3270  00215C  C059  F0B0         	movff	_month+1,?_printf+5
  3271  002160  C05E  F0B1         	movff	_year,?_printf+6
  3272  002164  C05F  F0B2         	movff	_year+1,?_printf+7
  3273  002168  ECEA  F009         	call	_printf	;wreg free
  3274                           
  3275                           ;serialcomms.c: 163: while (Pumping)
  3276  00216C  D00B               	goto	l6046
  3277  00216E                     l6040:
  3278                           
  3279                           ;serialcomms.c: 164: {
  3280                           ;serialcomms.c: 166: ReadAndTime();
  3281  00216E  ECB2  F015         	call	_ReadAndTime	;wreg free
  3282                           
  3283                           ;serialcomms.c: 177: cmStuffsWrapperFun();
  3284  002172  EC54  F012         	call	_cmStuffsWrapperFun	;wreg free
  3285                           
  3286                           ;serialcomms.c: 180: Pumping=PumpDetect();
  3287  002176  ECAB  F016         	call	_PumpDetect	;wreg free
  3288  00217A  C0A3  F054         	movff	?_PumpDetect,_Pumping
  3289  00217E  C0A4  F055         	movff	?_PumpDetect+1,_Pumping+1
  3290  002182  D000               	goto	l6046
  3291  002184                     l6046:
  3292  002184  5054               	movf	_Pumping,w,c
  3293  002186  1055               	iorwf	_Pumping+1,w,c
  3294  002188  A4D8               	btfss	status,2,c
  3295  00218A  D7F1               	goto	l6040
  3296                           
  3297                           ;serialcomms.c: 181: }
  3298                           ;serialcomms.c: 183: printf("Pumping Stopped.\r\n");
  3299  00218C  0E21               	movlw	low STR_10
  3300  00218E  0100               	movlb	0	; () banked
  3301  002190  6FAB               	movwf	printf@f& (0+255),b
  3302  002192  0E7F               	movlw	high STR_10
  3303  002194  0100               	movlb	0	; () banked
  3304  002196  6FAC               	movwf	(printf@f+1)& (0+255),b
  3305  002198  ECEA  F009         	call	_printf	;wreg free
  3306                           
  3307                           ;serialcomms.c: 184: printf("%2i:%2i:%2i\r\n",hours,minutes,seconds);
  3308  00219C  0EFF               	movlw	low (STR_29+6)
  3309  00219E  0100               	movlb	0	; () banked
  3310  0021A0  6FAB               	movwf	printf@f& (0+255),b
  3311  0021A2  0E7E               	movlw	high (STR_29+6)
  3312  0021A4  0100               	movlb	0	; () banked
  3313  0021A6  6FAC               	movwf	(printf@f+1)& (0+255),b
  3314  0021A8  C032  F0AD         	movff	_hours,?_printf+2
  3315  0021AC  C033  F0AE         	movff	_hours+1,?_printf+3
  3316  0021B0  C036  F0AF         	movff	_minutes,?_printf+4
  3317  0021B4  C037  F0B0         	movff	_minutes+1,?_printf+5
  3318  0021B8  C038  F0B1         	movff	_seconds,?_printf+6
  3319  0021BC  C039  F0B2         	movff	_seconds+1,?_printf+7
  3320  0021C0  ECEA  F009         	call	_printf	;wreg free
  3321                           
  3322                           ;serialcomms.c: 185: printf("%2i/%2i/%4i\r\n\n",day,month,year);
  3323  0021C4  0E8E               	movlw	low STR_9
  3324  0021C6  0100               	movlb	0	; () banked
  3325  0021C8  6FAB               	movwf	printf@f& (0+255),b
  3326  0021CA  0E7F               	movlw	high STR_9
  3327  0021CC  0100               	movlb	0	; () banked
  3328  0021CE  6FAC               	movwf	(printf@f+1)& (0+255),b
  3329  0021D0  C056  F0AD         	movff	_day,?_printf+2
  3330  0021D4  C057  F0AE         	movff	_day+1,?_printf+3
  3331  0021D8  C058  F0AF         	movff	_month,?_printf+4
  3332  0021DC  C059  F0B0         	movff	_month+1,?_printf+5
  3333  0021E0  C05E  F0B1         	movff	_year,?_printf+6
  3334  0021E4  C05F  F0B2         	movff	_year+1,?_printf+7
  3335  0021E8  ECEA  F009         	call	_printf	;wreg free
  3336                           
  3337                           ;serialcomms.c: 186: printf("~~~");
  3338  0021EC  0EFB               	movlw	low STR_13
  3339  0021EE  0100               	movlb	0	; () banked
  3340  0021F0  6FAB               	movwf	printf@f& (0+255),b
  3341  0021F2  0E7F               	movlw	high STR_13
  3342  0021F4  0100               	movlb	0	; () banked
  3343  0021F6  6FAC               	movwf	(printf@f+1)& (0+255),b
  3344  0021F8  ECEA  F009         	call	_printf	;wreg free
  3345                           
  3346                           ;serialcomms.c: 187: Delay10KTCYx(200);
  3347  0021FC  0EC8               	movlw	200
  3348  0021FE  EC73  F021         	call	_Delay10KTCYx
  3349                           
  3350                           ;serialcomms.c: 188: Delay10KTCYx(200);
  3351  002202  0EC8               	movlw	200
  3352  002204  EC73  F021         	call	_Delay10KTCYx
  3353                           
  3354                           ;serialcomms.c: 189: LATCbits.LATC0=0;
  3355  002208  908B               	bcf	3979,0,c	;volatile
  3356                           
  3357                           ;serialcomms.c: 190: Delay10KTCYx(200);
  3358  00220A  0EC8               	movlw	200
  3359  00220C  EC73  F021         	call	_Delay10KTCYx
  3360                           
  3361                           ;serialcomms.c: 191: Delay10KTCYx(200);
  3362  002210  0EC8               	movlw	200
  3363  002212  EC73  F021         	call	_Delay10KTCYx
  3364  002216  D000               	goto	l6060
  3365  002218                     l6060:
  3366                           
  3367                           ;serialcomms.c: 192: }
  3368                           ;serialcomms.c: 195: if (NewMessage==1)
  3369  002218  042C               	decf	_NewMessage,w,c
  3370  00221A  102D               	iorwf	_NewMessage+1,w,c
  3371  00221C  A4D8               	btfss	status,2,c
  3372  00221E  D6AB               	goto	l146
  3373                           
  3374                           ;serialcomms.c: 196: {
  3375                           ;serialcomms.c: 197: MessageRoutine();
  3376  002220  ECED  F007         	call	_MessageRoutine	;wreg free
  3377  002224  D6A8               	goto	l146
  3378  002226  EFC2  F000         	goto	start
  3379  00222A                     __end_of_main:
  3380                           	opt stack 0
  3381                           tblptru	equ	0xFF8
  3382                           tblptrh	equ	0xFF7
  3383                           tblptrl	equ	0xFF6
  3384                           tablat	equ	0xFF5
  3385                           postinc0	equ	0xFEE
  3386                           wreg	equ	0xFE8
  3387                           postdec1	equ	0xFE5
  3388                           fsr1h	equ	0xFE2
  3389                           fsr1l	equ	0xFE1
  3390                           status	equ	0xFD8
  3391                           
  3392 ;; *************** function _cmStuffsWrapperFun *****************
  3393 ;; Defined at:
  3394 ;;		line 202 in file "serialcomms.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;		None
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;  iW              2   84[BANK1 ] int 
  3399 ;;  iTemp           2   82[BANK1 ] int 
  3400 ;; Return value:  Size  Location     Type
  3401 ;;		None               void
  3402 ;; Registers used:
  3403 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3409 ;;      Params:         0       0       0       0       0       0       0
  3410 ;;      Locals:         0       0      13       0       0       0       0
  3411 ;;      Temps:          0       0       0       0       0       0       0
  3412 ;;      Totals:         0       0      13       0       0       0       0
  3413 ;;Total ram usage:       13 bytes
  3414 ;; Hardware stack levels used:    1
  3415 ;; Hardware stack levels required when called:   10
  3416 ;; This function calls:
  3417 ;;		___awtoft
  3418 ;;		___ftadd
  3419 ;;		___ftdiv
  3420 ;;		___ftmul
  3421 ;;		___fttol
  3422 ;;		___wmul
  3423 ;;		_cmFftFun
  3424 ;;		_cmFilterHighPassUsingLowPass
  3425 ;;		_log
  3426 ;;		_printf
  3427 ;; This function is called by:
  3428 ;;		_main
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           	psect	text1
  3433  0024A8                     __ptext1:
  3434                           	opt stack 0
  3435  0024A8                     _cmStuffsWrapperFun:
  3436                           	opt stack 20
  3437                           
  3438                           ;serialcomms.c: 204: if (cmWinLen<128)
  3439                           
  3440                           ;incstack = 0
  3441  0024A8  BE2F               	btfsc	_cmWinLen+1,7,c
  3442  0024AA  D006               	goto	l5692
  3443  0024AC  502F               	movf	_cmWinLen+1,w,c
  3444  0024AE  E130               	bnz	l5698
  3445  0024B0  0E80               	movlw	128
  3446  0024B2  5C2E               	subwf	_cmWinLen,w,c
  3447  0024B4  B0D8               	btfsc	status,0,c
  3448  0024B6  D02C               	goto	l5698
  3449  0024B8                     l5692:
  3450                           
  3451                           ;serialcomms.c: 205: {
  3452                           ;serialcomms.c: 207: printf("%6i,%6i,%6i,%5u\r\n", x, y, z,tt);
  3453  0024B8  0E7C               	movlw	low STR_14
  3454  0024BA  0100               	movlb	0	; () banked
  3455  0024BC  6FAB               	movwf	printf@f& (0+255),b
  3456  0024BE  0E7F               	movlw	high STR_14
  3457  0024C0  0100               	movlb	0	; () banked
  3458  0024C2  6FAC               	movwf	(printf@f+1)& (0+255),b
  3459  0024C4  C03E  F0AD         	movff	_x,?_printf+2
  3460  0024C8  C03F  F0AE         	movff	_x+1,?_printf+3
  3461  0024CC  C040  F0AF         	movff	_y,?_printf+4
  3462  0024D0  C041  F0B0         	movff	_y+1,?_printf+5
  3463  0024D4  C042  F0B1         	movff	_z,?_printf+6
  3464  0024D8  C043  F0B2         	movff	_z+1,?_printf+7
  3465  0024DC  C1D2  F0B3         	movff	_tt,?_printf+8
  3466  0024E0  C1D3  F0B4         	movff	_tt+1,?_printf+9
  3467  0024E4  ECEA  F009         	call	_printf	;wreg free
  3468                           
  3469                           ;serialcomms.c: 209: cmYreal[cmWinLen] = y;
  3470  0024E8  90D8               	bcf	status,0,c
  3471  0024EA  342E               	rlcf	_cmWinLen,w,c
  3472  0024EC  6ED9               	movwf	fsr2l,c
  3473  0024EE  342F               	rlcf	_cmWinLen+1,w,c
  3474  0024F0  6EDA               	movwf	fsr2h,c
  3475  0024F2  0E00               	movlw	low _cmYreal
  3476  0024F4  26D9               	addwf	fsr2l,f,c
  3477  0024F6  0E02               	movlw	high _cmYreal
  3478  0024F8  22DA               	addwfc	fsr2h,f,c
  3479  0024FA  C040  FFDE         	movff	_y,postinc2
  3480  0024FE  C041  FFDD         	movff	_y+1,postdec2
  3481                           
  3482                           ;serialcomms.c: 210: cmWinLen = cmWinLen+1;
  3483  002502  0E01               	movlw	1
  3484  002504  242E               	addwf	_cmWinLen,w,c
  3485  002506  6E2E               	movwf	_cmWinLen,c
  3486  002508  0E00               	movlw	0
  3487  00250A  202F               	addwfc	_cmWinLen+1,w,c
  3488  00250C  6E2F               	movwf	_cmWinLen+1,c
  3489                           
  3490                           ;serialcomms.c: 211: }
  3491  00250E  D0F8               	goto	l171
  3492  002510                     l5698:
  3493                           
  3494                           ;serialcomms.c: 212: else
  3495                           ;serialcomms.c: 213: {
  3496                           ;serialcomms.c: 227: cmFilterHighPassUsingLowPass();
  3497  002510  ECC7  F00D         	call	_cmFilterHighPassUsingLowPass	;wreg free
  3498                           
  3499                           ;serialcomms.c: 236: cmFftFun();
  3500  002514  ECE3  F005         	call	_cmFftFun	;wreg free
  3501                           
  3502                           ;serialcomms.c: 246: cmYout = 1*cmWeightVector[0];
  3503  002518  C118  F030         	movff	_cmWeightVector,_cmYout
  3504  00251C  C119  F031         	movff	_cmWeightVector+1,_cmYout+1
  3505                           
  3506                           ;serialcomms.c: 248: printf("\t%i %i %i\n",1,cmWeightVector[0],cmYout);
  3507  002520  0ECE               	movlw	low STR_15
  3508  002522  0100               	movlb	0	; () banked
  3509  002524  6FAB               	movwf	printf@f& (0+255),b
  3510  002526  0E7F               	movlw	high STR_15
  3511  002528  0100               	movlb	0	; () banked
  3512  00252A  6FAC               	movwf	(printf@f+1)& (0+255),b
  3513  00252C  0E00               	movlw	0
  3514  00252E  0100               	movlb	0	; () banked
  3515  002530  6FAE               	movwf	(?_printf+3)& (0+255),b
  3516  002532  0E01               	movlw	1
  3517  002534  6FAD               	movwf	(?_printf+2)& (0+255),b
  3518  002536  C118  F0AF         	movff	_cmWeightVector,?_printf+4
  3519  00253A  C119  F0B0         	movff	_cmWeightVector+1,?_printf+5
  3520  00253E  C030  F0B1         	movff	_cmYout,?_printf+6
  3521  002542  C031  F0B2         	movff	_cmYout+1,?_printf+7
  3522  002546  ECEA  F009         	call	_printf	;wreg free
  3523                           
  3524                           ;serialcomms.c: 249: for (int iW=1,iTemp=2;iW<21;iW++,iTemp=iTemp+3){
  3525  00254A  0E00               	movlw	0
  3526  00254C  0101               	movlb	1	; () banked
  3527  00254E  6FAB               	movwf	(cmStuffsWrapperFun@iW+1)& (0+255),b
  3528  002550  0E01               	movlw	1
  3529  002552  6FAA               	movwf	cmStuffsWrapperFun@iW& (0+255),b
  3530                           
  3531                           ; BSR set to: 1
  3532  002554  0E00               	movlw	0
  3533  002556  0101               	movlb	1	; () banked
  3534  002558  6FA9               	movwf	(cmStuffsWrapperFun@iTemp+1)& (0+255),b
  3535  00255A  0E02               	movlw	2
  3536  00255C  6FA8               	movwf	cmStuffsWrapperFun@iTemp& (0+255),b
  3537                           
  3538                           ; BSR set to: 1
  3539  00255E  0101               	movlb	1	; () banked
  3540  002560  BFAB               	btfsc	(cmStuffsWrapperFun@iW+1)& (0+255),7,b
  3541  002562  D00A               	goto	l5714
  3542  002564  0101               	movlb	1	; () banked
  3543  002566  51AB               	movf	(cmStuffsWrapperFun@iW+1)& (0+255),w,b
  3544  002568  E106               	bnz	u6480
  3545  00256A  0E15               	movlw	21
  3546  00256C  0101               	movlb	1	; () banked
  3547  00256E  5DAA               	subwf	cmStuffsWrapperFun@iW& (0+255),w,b
  3548  002570  B0D8               	btfsc	status,0,c
  3549  002572  D0A5               	goto	l5728
  3550  002574  D001               	goto	l5714
  3551  002576                     u6480:
  3552                           
  3553                           ; BSR set to: 1
  3554  002576  D0A3               	goto	l5728
  3555  002578                     l5714:
  3556                           
  3557                           ; BSR set to: 1
  3558                           ;serialcomms.c: 253: cmYout = cmYout+cmWeightVector[iW]*10*log(cmYreal[iTemp])/log(10);
  3559  002578  90D8               	bcf	status,0,c
  3560  00257A  0101               	movlb	1	; () banked
  3561  00257C  35A8               	rlcf	cmStuffsWrapperFun@iTemp& (0+255),w,b
  3562  00257E  6ED9               	movwf	fsr2l,c
  3563  002580  0101               	movlb	1	; () banked
  3564  002582  35A9               	rlcf	(cmStuffsWrapperFun@iTemp+1)& (0+255),w,b
  3565  002584  6EDA               	movwf	fsr2h,c
  3566  002586  0E00               	movlw	low _cmYreal
  3567  002588  26D9               	addwf	fsr2l,f,c
  3568  00258A  0E02               	movlw	high _cmYreal
  3569  00258C  22DA               	addwfc	fsr2h,f,c
  3570  00258E  CFDE F0A7          	movff	postinc2,___awtoft@c
  3571  002592  CFDD F0A8          	movff	postdec2,___awtoft@c+1
  3572  002596  EC70  F020         	call	___awtoft	;wreg free
  3573  00259A  C0A7  F19F         	movff	?___awtoft,_cmStuffsWrapperFun$2559
  3574  00259E  C0A8  F1A0         	movff	?___awtoft+1,_cmStuffsWrapperFun$2559+1
  3575  0025A2  C0A9  F1A1         	movff	?___awtoft+2,_cmStuffsWrapperFun$2559+2
  3576                           
  3577                           ;serialcomms.c: 253: cmYout = cmYout+cmWeightVector[iW]*10*log(cmYreal[iTemp])/log(10);
  3578  0025A6  C19F  F0D2         	movff	_cmStuffsWrapperFun$2559,log@x
  3579  0025AA  C1A0  F0D3         	movff	_cmStuffsWrapperFun$2559+1,log@x+1
  3580  0025AE  C1A1  F0D4         	movff	_cmStuffsWrapperFun$2559+2,log@x+2
  3581  0025B2  ECD2  F018         	call	_log	;wreg free
  3582  0025B6  C0D2  F1A2         	movff	?_log,_cmStuffsWrapperFun$2560
  3583  0025BA  C0D3  F1A3         	movff	?_log+1,_cmStuffsWrapperFun$2560+1
  3584  0025BE  C0D4  F1A4         	movff	?_log+2,_cmStuffsWrapperFun$2560+2
  3585                           
  3586                           ;serialcomms.c: 253: cmYout = cmYout+cmWeightVector[iW]*10*log(cmYreal[iTemp])/log(10);
  3587  0025C2  0E00               	movlw	0
  3588  0025C4  0100               	movlb	0	; () banked
  3589  0025C6  6FD2               	movwf	log@x& (0+255),b
  3590  0025C8  0E20               	movlw	32
  3591  0025CA  0100               	movlb	0	; () banked
  3592  0025CC  6FD3               	movwf	(log@x+1)& (0+255),b
  3593  0025CE  0E41               	movlw	65
  3594  0025D0  0100               	movlb	0	; () banked
  3595  0025D2  6FD4               	movwf	(log@x+2)& (0+255),b
  3596  0025D4  ECD2  F018         	call	_log	;wreg free
  3597  0025D8  C0D2  F0DA         	movff	?_log,___ftdiv@f2
  3598  0025DC  C0D3  F0DB         	movff	?_log+1,___ftdiv@f2+1
  3599  0025E0  C0D4  F0DC         	movff	?_log+2,___ftdiv@f2+2
  3600  0025E4  C1A2  F0AE         	movff	_cmStuffsWrapperFun$2560,___ftmul@f2
  3601  0025E8  C1A3  F0AF         	movff	_cmStuffsWrapperFun$2560+1,___ftmul@f2+1
  3602  0025EC  C1A4  F0B0         	movff	_cmStuffsWrapperFun$2560+2,___ftmul@f2+2
  3603  0025F0  0E00               	movlw	0
  3604  0025F2  0100               	movlb	0	; () banked
  3605  0025F4  6FA2               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3606  0025F6  0E0A               	movlw	10
  3607  0025F8  6FA1               	movwf	___wmul@multiplicand& (0+255),b
  3608  0025FA  90D8               	bcf	status,0,c
  3609  0025FC  0101               	movlb	1	; () banked
  3610  0025FE  35AA               	rlcf	cmStuffsWrapperFun@iW& (0+255),w,b
  3611  002600  6ED9               	movwf	fsr2l,c
  3612  002602  0101               	movlb	1	; () banked
  3613  002604  35AB               	rlcf	(cmStuffsWrapperFun@iW+1)& (0+255),w,b
  3614  002606  6EDA               	movwf	fsr2h,c
  3615  002608  0E18               	movlw	low _cmWeightVector
  3616  00260A  26D9               	addwf	fsr2l,f,c
  3617  00260C  0E01               	movlw	high _cmWeightVector
  3618  00260E  22DA               	addwfc	fsr2h,f,c
  3619  002610  CFDE F09F          	movff	postinc2,___wmul@multiplier
  3620  002614  CFDD F0A0          	movff	postdec2,___wmul@multiplier+1
  3621  002618  ECB7  F020         	call	___wmul	;wreg free
  3622  00261C  C09F  F0A7         	movff	?___wmul,___awtoft@c
  3623  002620  C0A0  F0A8         	movff	?___wmul+1,___awtoft@c+1
  3624  002624  EC70  F020         	call	___awtoft	;wreg free
  3625  002628  C0A7  F0AB         	movff	?___awtoft,___ftmul@f1
  3626  00262C  C0A8  F0AC         	movff	?___awtoft+1,___ftmul@f1+1
  3627  002630  C0A9  F0AD         	movff	?___awtoft+2,___ftmul@f1+2
  3628  002634  EC83  F017         	call	___ftmul	;wreg free
  3629  002638  C0AB  F0D7         	movff	?___ftmul,___ftdiv@f1
  3630  00263C  C0AC  F0D8         	movff	?___ftmul+1,___ftdiv@f1+1
  3631  002640  C0AD  F0D9         	movff	?___ftmul+2,___ftdiv@f1+2
  3632  002644  EC31  F018         	call	___ftdiv	;wreg free
  3633  002648  C0D7  F1A5         	movff	?___ftdiv,_cmStuffsWrapperFun$2561
  3634  00264C  C0D8  F1A6         	movff	?___ftdiv+1,_cmStuffsWrapperFun$2561+1
  3635  002650  C0D9  F1A7         	movff	?___ftdiv+2,_cmStuffsWrapperFun$2561+2
  3636                           
  3637                           ;serialcomms.c: 253: cmYout = cmYout+cmWeightVector[iW]*10*log(cmYreal[iTemp])/log(10);
  3638  002654  C1A5  F0BD         	movff	_cmStuffsWrapperFun$2561,___ftadd@f2
  3639  002658  C1A6  F0BE         	movff	_cmStuffsWrapperFun$2561+1,___ftadd@f2+1
  3640  00265C  C1A7  F0BF         	movff	_cmStuffsWrapperFun$2561+2,___ftadd@f2+2
  3641  002660  C030  F0A7         	movff	_cmYout,___awtoft@c
  3642  002664  C031  F0A8         	movff	_cmYout+1,___awtoft@c+1
  3643  002668  EC70  F020         	call	___awtoft	;wreg free
  3644  00266C  C0A7  F0BA         	movff	?___awtoft,___ftadd@f1
  3645  002670  C0A8  F0BB         	movff	?___awtoft+1,___ftadd@f1+1
  3646  002674  C0A9  F0BC         	movff	?___awtoft+2,___ftadd@f1+2
  3647  002678  EC15  F011         	call	___ftadd	;wreg free
  3648  00267C  C0BA  F15C         	movff	?___ftadd,___fttol@f1
  3649  002680  C0BB  F15D         	movff	?___ftadd+1,___fttol@f1+1
  3650  002684  C0BC  F15E         	movff	?___ftadd+2,___fttol@f1+2
  3651  002688  EC72  F019         	call	___fttol	;wreg free
  3652  00268C  C15C  F030         	movff	?___fttol,_cmYout
  3653  002690  C15D  F031         	movff	?___fttol+1,_cmYout+1
  3654  002694  0101               	movlb	1	; () banked
  3655  002696  4BAA               	infsnz	cmStuffsWrapperFun@iW& (0+255),f,b
  3656  002698  2BAB               	incf	(cmStuffsWrapperFun@iW+1)& (0+255),f,b
  3657                           
  3658                           ; BSR set to: 1
  3659  00269A  0E03               	movlw	3
  3660  00269C  0101               	movlb	1	; () banked
  3661  00269E  25A8               	addwf	cmStuffsWrapperFun@iTemp& (0+255),w,b
  3662  0026A0  0101               	movlb	1	; () banked
  3663  0026A2  6FA8               	movwf	cmStuffsWrapperFun@iTemp& (0+255),b
  3664  0026A4  0E00               	movlw	0
  3665  0026A6  0101               	movlb	1	; () banked
  3666  0026A8  21A9               	addwfc	(cmStuffsWrapperFun@iTemp+1)& (0+255),w,b
  3667  0026AA  0101               	movlb	1	; () banked
  3668  0026AC  6FA9               	movwf	(cmStuffsWrapperFun@iTemp+1)& (0+255),b
  3669                           
  3670                           ; BSR set to: 1
  3671  0026AE  0101               	movlb	1	; () banked
  3672  0026B0  BFAB               	btfsc	(cmStuffsWrapperFun@iW+1)& (0+255),7,b
  3673  0026B2  D762               	goto	l5714
  3674  0026B4  0101               	movlb	1	; () banked
  3675  0026B6  51AB               	movf	(cmStuffsWrapperFun@iW+1)& (0+255),w,b
  3676  0026B8  E102               	bnz	l5728
  3677  0026BA  D757               	goto	L1
  3678  0026BC  D000               	goto	l5728
  3679  0026BE                     l5728:
  3680                           
  3681                           ; BSR set to: 1
  3682                           ;serialcomms.c: 256: }
  3683                           ;serialcomms.c: 259: printf("%6i,%6i,%6i,%5u,%i\r\n", x, y, z,tt,cmYout);
  3684  0026BE  0E91               	movlw	low STR_16
  3685  0026C0  0100               	movlb	0	; () banked
  3686  0026C2  6FAB               	movwf	printf@f& (0+255),b
  3687  0026C4  0E7E               	movlw	high STR_16
  3688  0026C6  0100               	movlb	0	; () banked
  3689  0026C8  6FAC               	movwf	(printf@f+1)& (0+255),b
  3690  0026CA  C03E  F0AD         	movff	_x,?_printf+2
  3691  0026CE  C03F  F0AE         	movff	_x+1,?_printf+3
  3692  0026D2  C040  F0AF         	movff	_y,?_printf+4
  3693  0026D6  C041  F0B0         	movff	_y+1,?_printf+5
  3694  0026DA  C042  F0B1         	movff	_z,?_printf+6
  3695  0026DE  C043  F0B2         	movff	_z+1,?_printf+7
  3696  0026E2  C1D2  F0B3         	movff	_tt,?_printf+8
  3697  0026E6  C1D3  F0B4         	movff	_tt+1,?_printf+9
  3698  0026EA  C030  F0B5         	movff	_cmYout,?_printf+10
  3699  0026EE  C031  F0B6         	movff	_cmYout+1,?_printf+11
  3700  0026F2  ECEA  F009         	call	_printf	;wreg free
  3701                           
  3702                           ;serialcomms.c: 261: cmWinLen = 0;
  3703  0026F6  0E00               	movlw	0
  3704  0026F8  6E2F               	movwf	_cmWinLen+1,c
  3705  0026FA  0E00               	movlw	0
  3706  0026FC  6E2E               	movwf	_cmWinLen,c
  3707  0026FE  D000               	goto	l171
  3708  002700                     l171:
  3709  002700  0012               	return		;funcret
  3710  002702                     __end_of_cmStuffsWrapperFun:
  3711                           	opt stack 0
  3712                           tblptru	equ	0xFF8
  3713                           tblptrh	equ	0xFF7
  3714                           tblptrl	equ	0xFF6
  3715                           tablat	equ	0xFF5
  3716                           postinc0	equ	0xFEE
  3717                           wreg	equ	0xFE8
  3718                           postdec1	equ	0xFE5
  3719                           fsr1h	equ	0xFE2
  3720                           fsr1l	equ	0xFE1
  3721                           postinc2	equ	0xFDE
  3722                           postdec2	equ	0xFDD
  3723                           fsr2h	equ	0xFDA
  3724                           fsr2l	equ	0xFD9
  3725                           status	equ	0xFD8
  3726                           
  3727 ;; *************** function _cmFilterHighPassUsingLowPass *****************
  3728 ;; Defined at:
  3729 ;;		line 265 in file "serialcomms.c"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;		None
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;  j               2   67[BANK0 ] int 
  3734 ;;  j               2   61[BANK0 ] int 
  3735 ;;  k               2   57[BANK0 ] int 
  3736 ;;  xLPF            2   63[BANK0 ] int 
  3737 ;;  i               2   69[BANK0 ] int 
  3738 ;;  cmFilterCoef    8   49[BANK0 ] int [4]
  3739 ;;  Nsignal         2   65[BANK0 ] int 
  3740 ;;  xBuffer         2   59[BANK0 ] int 
  3741 ;; Return value:  Size  Location     Type
  3742 ;;		None               void
  3743 ;; Registers used:
  3744 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3750 ;;      Params:         0       0       0       0       0       0       0
  3751 ;;      Locals:         0      22       0       0       0       0       0
  3752 ;;      Temps:          0      12       0       0       0       0       0
  3753 ;;      Totals:         0      34       0       0       0       0       0
  3754 ;;Total ram usage:       34 bytes
  3755 ;; Hardware stack levels used:    1
  3756 ;; Hardware stack levels required when called:    6
  3757 ;; This function calls:
  3758 ;;		___wmul
  3759 ;; This function is called by:
  3760 ;;		_cmStuffsWrapperFun
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           	psect	text2
  3765  001B8E                     __ptext2:
  3766                           	opt stack 0
  3767  001B8E                     _cmFilterHighPassUsingLowPass:
  3768                           	opt stack 23
  3769                           
  3770                           ;serialcomms.c: 268: int cmFilterCoeff[4] = {1, 1, 1, 1};
  3771                           
  3772                           ;incstack = 0
  3773  001B8E  EE21  F00E         	lfsr	2,cmFilterHighPassUsingLowPass@F4482
  3774  001B92  EE10  F0B1         	lfsr	1,cmFilterHighPassUsingLowPass@cmFilterCoeff
  3775  001B96  0E07               	movlw	7
  3776  001B98                     u6091:
  3777  001B98  CFDB FFE3          	movff	plusw2,plusw1
  3778  001B9C  06E8               	decf	wreg,f,c
  3779  001B9E  E2FC               	bc	u6091
  3780                           
  3781                           ;serialcomms.c: 273: int Nsignal = sizeof(cmYreal)/sizeof(cmYreal[0]);
  3782  001BA0  0E00               	movlw	0
  3783  001BA2  0100               	movlb	0	; () banked
  3784  001BA4  6FC2               	movwf	(cmFilterHighPassUsingLowPass@Nsignal+1)& (0+255),b
  3785  001BA6  0E80               	movlw	128
  3786  001BA8  6FC1               	movwf	cmFilterHighPassUsingLowPass@Nsignal& (0+255),b
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;serialcomms.c: 277: int xBuffer = 0;
  3790  001BAA  0E00               	movlw	0
  3791  001BAC  0100               	movlb	0	; () banked
  3792  001BAE  6FBC               	movwf	(cmFilterHighPassUsingLowPass@xBuffer+1)& (0+255),b
  3793  001BB0  0E00               	movlw	0
  3794  001BB2  6FBB               	movwf	cmFilterHighPassUsingLowPass@xBuffer& (0+255),b
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;serialcomms.c: 278: for (int i=4/2; i<Nsignal+4/2; i++){
  3798  001BB4  0E00               	movlw	0
  3799  001BB6  0100               	movlb	0	; () banked
  3800  001BB8  6FC6               	movwf	(cmFilterHighPassUsingLowPass@i+1)& (0+255),b
  3801  001BBA  0E02               	movlw	2
  3802  001BBC  6FC5               	movwf	cmFilterHighPassUsingLowPass@i& (0+255),b
  3803  001BBE  D145               	goto	l5456
  3804  001BC0                     l5414:
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;serialcomms.c: 279: int xLPF = 0;
  3808  001BC0  0E00               	movlw	0
  3809  001BC2  0100               	movlb	0	; () banked
  3810  001BC4  6FC0               	movwf	(cmFilterHighPassUsingLowPass@xLPF+1)& (0+255),b
  3811  001BC6  0E00               	movlw	0
  3812  001BC8  6FBF               	movwf	cmFilterHighPassUsingLowPass@xLPF& (0+255),b
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;serialcomms.c: 280: if (i+1<4){
  3816  001BCA  0E01               	movlw	1
  3817  001BCC  0100               	movlb	0	; () banked
  3818  001BCE  25C5               	addwf	cmFilterHighPassUsingLowPass@i& (0+255),w,b
  3819  001BD0  0100               	movlb	0	; () banked
  3820  001BD2  6FA5               	movwf	??_cmFilterHighPassUsingLowPass& (0+255),b
  3821  001BD4  0E00               	movlw	0
  3822  001BD6  0100               	movlb	0	; () banked
  3823  001BD8  21C6               	addwfc	(cmFilterHighPassUsingLowPass@i+1)& (0+255),w,b
  3824  001BDA  0100               	movlb	0	; () banked
  3825  001BDC  6FA6               	movwf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),b
  3826  001BDE  0100               	movlb	0	; () banked
  3827  001BE0  BFA6               	btfsc	(??_cmFilterHighPassUsingLowPass+1)& (0+255),7,b
  3828  001BE2  D008               	goto	l5418
  3829  001BE4  0100               	movlb	0	; () banked
  3830  001BE6  51A6               	movf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),w,b
  3831  001BE8  E148               	bnz	l5434
  3832  001BEA  0E04               	movlw	4
  3833  001BEC  0100               	movlb	0	; () banked
  3834  001BEE  5DA5               	subwf	??_cmFilterHighPassUsingLowPass& (0+255),w,b
  3835  001BF0  B0D8               	btfsc	status,0,c
  3836  001BF2  D043               	goto	l5434
  3837  001BF4                     l5418:
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;serialcomms.c: 281: for (int j=i, k=0; j>=0; k++,j--){
  3841  001BF4  C0C5  F0BD         	movff	cmFilterHighPassUsingLowPass@i,cmFilterHighPassUsingLowPass@j
  3842  001BF8  C0C6  F0BE         	movff	cmFilterHighPassUsingLowPass@i+1,cmFilterHighPassUsingLowPass@j+1
  3843                           
  3844                           ; BSR set to: 0
  3845  001BFC  0E00               	movlw	0
  3846  001BFE  0100               	movlb	0	; () banked
  3847  001C00  6FBA               	movwf	(cmFilterHighPassUsingLowPass@k+1)& (0+255),b
  3848  001C02  0E00               	movlw	0
  3849  001C04  6FB9               	movwf	cmFilterHighPassUsingLowPass@k& (0+255),b
  3850  001C06                     l5422:
  3851                           
  3852                           ; BSR set to: 0
  3853  001C06  0100               	movlb	0	; () banked
  3854  001C08  BFBE               	btfsc	(cmFilterHighPassUsingLowPass@j+1)& (0+255),7,b
  3855  001C0A  D0AE               	goto	l5448
  3856  001C0C  D001               	goto	l5426
  3857                           
  3858                           ; BSR set to: 0
  3859  001C0E  D0AC               	goto	l5448
  3860  001C10                     l5426:
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;serialcomms.c: 282: xLPF = xLPF + cmFilterCoeff[k]*cmYreal[j];
  3864  001C10  90D8               	bcf	status,0,c
  3865  001C12  0100               	movlb	0	; () banked
  3866  001C14  35B9               	rlcf	cmFilterHighPassUsingLowPass@k& (0+255),w,b
  3867  001C16  6ED9               	movwf	fsr2l,c
  3868  001C18  0100               	movlb	0	; () banked
  3869  001C1A  35BA               	rlcf	(cmFilterHighPassUsingLowPass@k+1)& (0+255),w,b
  3870  001C1C  6EDA               	movwf	fsr2h,c
  3871  001C1E  0EB1               	movlw	low cmFilterHighPassUsingLowPass@cmFilterCoeff
  3872  001C20  26D9               	addwf	fsr2l,f,c
  3873  001C22  0E00               	movlw	high cmFilterHighPassUsingLowPass@cmFilterCoeff
  3874  001C24  22DA               	addwfc	fsr2h,f,c
  3875  001C26  CFDE F09F          	movff	postinc2,___wmul@multiplier
  3876  001C2A  CFDD F0A0          	movff	postdec2,___wmul@multiplier+1
  3877  001C2E  90D8               	bcf	status,0,c
  3878  001C30  0100               	movlb	0	; () banked
  3879  001C32  35BD               	rlcf	cmFilterHighPassUsingLowPass@j& (0+255),w,b
  3880  001C34  6ED9               	movwf	fsr2l,c
  3881  001C36  0100               	movlb	0	; () banked
  3882  001C38  35BE               	rlcf	(cmFilterHighPassUsingLowPass@j+1)& (0+255),w,b
  3883  001C3A  6EDA               	movwf	fsr2h,c
  3884  001C3C  0E00               	movlw	low _cmYreal
  3885  001C3E  26D9               	addwf	fsr2l,f,c
  3886  001C40  0E02               	movlw	high _cmYreal
  3887  001C42  22DA               	addwfc	fsr2h,f,c
  3888  001C44  CFDE F0A1          	movff	postinc2,___wmul@multiplicand
  3889  001C48  CFDD F0A2          	movff	postdec2,___wmul@multiplicand+1
  3890  001C4C  ECB7  F020         	call	___wmul	;wreg free
  3891  001C50  0100               	movlb	0	; () banked
  3892  001C52  51BF               	movf	cmFilterHighPassUsingLowPass@xLPF& (0+255),w,b
  3893  001C54  0100               	movlb	0	; () banked
  3894  001C56  259F               	addwf	?___wmul& (0+255),w,b
  3895  001C58  0100               	movlb	0	; () banked
  3896  001C5A  6FBF               	movwf	cmFilterHighPassUsingLowPass@xLPF& (0+255),b
  3897  001C5C  0100               	movlb	0	; () banked
  3898  001C5E  51C0               	movf	(cmFilterHighPassUsingLowPass@xLPF+1)& (0+255),w,b
  3899  001C60  0100               	movlb	0	; () banked
  3900  001C62  21A0               	addwfc	(?___wmul+1)& (0+255),w,b
  3901  001C64  0100               	movlb	0	; () banked
  3902  001C66  6FC0               	movwf	(cmFilterHighPassUsingLowPass@xLPF+1)& (0+255),b
  3903                           
  3904                           ; BSR set to: 0
  3905  001C68  0100               	movlb	0	; () banked
  3906  001C6A  4BB9               	infsnz	cmFilterHighPassUsingLowPass@k& (0+255),f,b
  3907  001C6C  2BBA               	incf	(cmFilterHighPassUsingLowPass@k+1)& (0+255),f,b
  3908                           
  3909                           ; BSR set to: 0
  3910  001C6E  0100               	movlb	0	; () banked
  3911  001C70  07BD               	decf	cmFilterHighPassUsingLowPass@j& (0+255),f,b
  3912  001C72  A0D8               	btfss	status,0,c
  3913  001C74  07BE               	decf	(cmFilterHighPassUsingLowPass@j+1)& (0+255),f,b
  3914  001C76  D7C7               	goto	l5422
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;serialcomms.c: 284: }
  3918                           ;serialcomms.c: 285: }
  3919                           
  3920                           ; BSR set to: 0
  3921  001C78  D077               	goto	l5448
  3922  001C7A                     l5434:
  3923                           
  3924                           ; BSR set to: 0
  3925                           ;serialcomms.c: 286: else{
  3926                           ;serialcomms.c: 287: for (int j=0; j<4; j++){
  3927  001C7A  0E00               	movlw	0
  3928  001C7C  0100               	movlb	0	; () banked
  3929  001C7E  6FC4               	movwf	(cmFilterHighPassUsingLowPass@j_428+1)& (0+255),b
  3930  001C80  0E00               	movlw	0
  3931  001C82  6FC3               	movwf	cmFilterHighPassUsingLowPass@j_428& (0+255),b
  3932  001C84                     l5436:
  3933                           
  3934                           ; BSR set to: 0
  3935  001C84  0100               	movlb	0	; () banked
  3936  001C86  BFC4               	btfsc	(cmFilterHighPassUsingLowPass@j_428+1)& (0+255),7,b
  3937  001C88  D00A               	goto	l5440
  3938  001C8A  0100               	movlb	0	; () banked
  3939  001C8C  51C4               	movf	(cmFilterHighPassUsingLowPass@j_428+1)& (0+255),w,b
  3940  001C8E  E16C               	bnz	l5448
  3941  001C90  0E04               	movlw	4
  3942  001C92  0100               	movlb	0	; () banked
  3943  001C94  5DC3               	subwf	cmFilterHighPassUsingLowPass@j_428& (0+255),w,b
  3944  001C96  B0D8               	btfsc	status,0,c
  3945  001C98  D067               	goto	l5448
  3946  001C9A  D001               	goto	l5440
  3947                           
  3948                           ; BSR set to: 0
  3949  001C9C  D065               	goto	l5448
  3950  001C9E                     l5440:
  3951                           
  3952                           ; BSR set to: 0
  3953                           ;serialcomms.c: 288: if(i-j<Nsignal){
  3954  001C9E  C0C3  F0A5         	movff	cmFilterHighPassUsingLowPass@j_428,??_cmFilterHighPassUsingLowPass
  3955  001CA2  C0C4  F0A6         	movff	cmFilterHighPassUsingLowPass@j_428+1,??_cmFilterHighPassUsingLowPass+1
  3956  001CA6  0100               	movlb	0	; () banked
  3957  001CA8  1FA5               	comf	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  3958  001CAA  1FA6               	comf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  3959  001CAC  4BA5               	infsnz	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  3960  001CAE  2BA6               	incf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  3961  001CB0  0100               	movlb	0	; () banked
  3962  001CB2  51C5               	movf	cmFilterHighPassUsingLowPass@i& (0+255),w,b
  3963  001CB4  0100               	movlb	0	; () banked
  3964  001CB6  27A5               	addwf	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  3965  001CB8  0100               	movlb	0	; () banked
  3966  001CBA  51C6               	movf	(cmFilterHighPassUsingLowPass@i+1)& (0+255),w,b
  3967  001CBC  0100               	movlb	0	; () banked
  3968  001CBE  23A6               	addwfc	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  3969  001CC0  0100               	movlb	0	; () banked
  3970  001CC2  51C1               	movf	cmFilterHighPassUsingLowPass@Nsignal& (0+255),w,b
  3971  001CC4  0100               	movlb	0	; () banked
  3972  001CC6  5DA5               	subwf	??_cmFilterHighPassUsingLowPass& (0+255),w,b
  3973  001CC8  0100               	movlb	0	; () banked
  3974  001CCA  51A6               	movf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),w,b
  3975  001CCC  0A80               	xorlw	128
  3976  001CCE  0100               	movlb	0	; () banked
  3977  001CD0  6FA7               	movwf	(??_cmFilterHighPassUsingLowPass+2)& (0+255),b
  3978  001CD2  0100               	movlb	0	; () banked
  3979  001CD4  51C2               	movf	(cmFilterHighPassUsingLowPass@Nsignal+1)& (0+255),w,b
  3980  001CD6  0A80               	xorlw	128
  3981  001CD8  0100               	movlb	0	; () banked
  3982  001CDA  59A7               	subwfb	(??_cmFilterHighPassUsingLowPass+2)& (0+255),w,b
  3983  001CDC  B0D8               	btfsc	status,0,c
  3984  001CDE  D03F               	goto	l5444
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;serialcomms.c: 289: xLPF = xLPF + cmFilterCoeff[j]*cmYreal[i-j];
  3988  001CE0  90D8               	bcf	status,0,c
  3989  001CE2  0100               	movlb	0	; () banked
  3990  001CE4  35C3               	rlcf	cmFilterHighPassUsingLowPass@j_428& (0+255),w,b
  3991  001CE6  6ED9               	movwf	fsr2l,c
  3992  001CE8  0100               	movlb	0	; () banked
  3993  001CEA  35C4               	rlcf	(cmFilterHighPassUsingLowPass@j_428+1)& (0+255),w,b
  3994  001CEC  6EDA               	movwf	fsr2h,c
  3995  001CEE  0EB1               	movlw	low cmFilterHighPassUsingLowPass@cmFilterCoeff
  3996  001CF0  26D9               	addwf	fsr2l,f,c
  3997  001CF2  0E00               	movlw	high cmFilterHighPassUsingLowPass@cmFilterCoeff
  3998  001CF4  22DA               	addwfc	fsr2h,f,c
  3999  001CF6  CFDE F09F          	movff	postinc2,___wmul@multiplier
  4000  001CFA  CFDD F0A0          	movff	postdec2,___wmul@multiplier+1
  4001  001CFE  C0C3  F0A5         	movff	cmFilterHighPassUsingLowPass@j_428,??_cmFilterHighPassUsingLowPass
  4002  001D02  C0C4  F0A6         	movff	cmFilterHighPassUsingLowPass@j_428+1,??_cmFilterHighPassUsingLowPass+1
  4003  001D06  0100               	movlb	0	; () banked
  4004  001D08  1FA5               	comf	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4005  001D0A  1FA6               	comf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4006  001D0C  4BA5               	infsnz	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4007  001D0E  2BA6               	incf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4008  001D10  0100               	movlb	0	; () banked
  4009  001D12  51C5               	movf	cmFilterHighPassUsingLowPass@i& (0+255),w,b
  4010  001D14  0100               	movlb	0	; () banked
  4011  001D16  27A5               	addwf	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4012  001D18  0100               	movlb	0	; () banked
  4013  001D1A  51C6               	movf	(cmFilterHighPassUsingLowPass@i+1)& (0+255),w,b
  4014  001D1C  0100               	movlb	0	; () banked
  4015  001D1E  23A6               	addwfc	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4016  001D20  90D8               	bcf	status,0,c
  4017  001D22  0100               	movlb	0	; () banked
  4018  001D24  37A5               	rlcf	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4019  001D26  37A6               	rlcf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4020  001D28  0E00               	movlw	low _cmYreal
  4021  001D2A  0100               	movlb	0	; () banked
  4022  001D2C  25A5               	addwf	??_cmFilterHighPassUsingLowPass& (0+255),w,b
  4023  001D2E  6ED9               	movwf	fsr2l,c
  4024  001D30  0E02               	movlw	high _cmYreal
  4025  001D32  0100               	movlb	0	; () banked
  4026  001D34  21A6               	addwfc	(??_cmFilterHighPassUsingLowPass+1)& (0+255),w,b
  4027  001D36  6EDA               	movwf	fsr2h,c
  4028  001D38  CFDE F0A1          	movff	postinc2,___wmul@multiplicand
  4029  001D3C  CFDD F0A2          	movff	postdec2,___wmul@multiplicand+1
  4030  001D40  ECB7  F020         	call	___wmul	;wreg free
  4031  001D44  0100               	movlb	0	; () banked
  4032  001D46  51BF               	movf	cmFilterHighPassUsingLowPass@xLPF& (0+255),w,b
  4033  001D48  0100               	movlb	0	; () banked
  4034  001D4A  259F               	addwf	?___wmul& (0+255),w,b
  4035  001D4C  0100               	movlb	0	; () banked
  4036  001D4E  6FBF               	movwf	cmFilterHighPassUsingLowPass@xLPF& (0+255),b
  4037  001D50  0100               	movlb	0	; () banked
  4038  001D52  51C0               	movf	(cmFilterHighPassUsingLowPass@xLPF+1)& (0+255),w,b
  4039  001D54  0100               	movlb	0	; () banked
  4040  001D56  21A0               	addwfc	(?___wmul+1)& (0+255),w,b
  4041  001D58  0100               	movlb	0	; () banked
  4042  001D5A  6FC0               	movwf	(cmFilterHighPassUsingLowPass@xLPF+1)& (0+255),b
  4043  001D5C  D000               	goto	l5444
  4044  001D5E                     l5444:
  4045                           
  4046                           ; BSR set to: 0
  4047  001D5E  0100               	movlb	0	; () banked
  4048  001D60  4BC3               	infsnz	cmFilterHighPassUsingLowPass@j_428& (0+255),f,b
  4049  001D62  2BC4               	incf	(cmFilterHighPassUsingLowPass@j_428+1)& (0+255),f,b
  4050  001D64  D78F               	goto	l5436
  4051                           
  4052                           ; BSR set to: 0
  4053                           
  4054                           ; BSR set to: 0
  4055  001D66  D000               	goto	l5448
  4056  001D68                     l5448:
  4057                           
  4058                           ; BSR set to: 0
  4059                           ;serialcomms.c: 290: }
  4060                           ;serialcomms.c: 292: }
  4061                           ;serialcomms.c: 293: }
  4062                           ;serialcomms.c: 294: if (i>4/2){
  4063  001D68  0100               	movlb	0	; () banked
  4064  001D6A  BFC6               	btfsc	(cmFilterHighPassUsingLowPass@i+1)& (0+255),7,b
  4065  001D6C  D066               	goto	l5452
  4066  001D6E  0100               	movlb	0	; () banked
  4067  001D70  51C6               	movf	(cmFilterHighPassUsingLowPass@i+1)& (0+255),w,b
  4068  001D72  E105               	bnz	u6160
  4069  001D74  0E03               	movlw	3
  4070  001D76  0100               	movlb	0	; () banked
  4071  001D78  5DC5               	subwf	cmFilterHighPassUsingLowPass@i& (0+255),w,b
  4072  001D7A  A0D8               	btfss	status,0,c
  4073  001D7C  D05E               	goto	l5452
  4074  001D7E                     u6160:
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;serialcomms.c: 298: cmYreal[i-3] = 4*cmYreal[i-3] - xBuffer;
  4078  001D7E  C0BB  F0A5         	movff	cmFilterHighPassUsingLowPass@xBuffer,??_cmFilterHighPassUsingLowPass
  4079  001D82  C0BC  F0A6         	movff	cmFilterHighPassUsingLowPass@xBuffer+1,??_cmFilterHighPassUsingLowPass+1
  4080  001D86  0100               	movlb	0	; () banked
  4081  001D88  1FA5               	comf	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4082  001D8A  1FA6               	comf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4083  001D8C  4BA5               	infsnz	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4084  001D8E  2BA6               	incf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4085  001D90  0EFA               	movlw	250
  4086  001D92  0100               	movlb	0	; () banked
  4087  001D94  6FA7               	movwf	(??_cmFilterHighPassUsingLowPass+2)& (0+255),b
  4088  001D96  0EFF               	movlw	255
  4089  001D98  0100               	movlb	0	; () banked
  4090  001D9A  6FA8               	movwf	(??_cmFilterHighPassUsingLowPass+3)& (0+255),b
  4091  001D9C  C0C5  F0A9         	movff	cmFilterHighPassUsingLowPass@i,??_cmFilterHighPassUsingLowPass+4
  4092  001DA0  C0C6  F0AA         	movff	cmFilterHighPassUsingLowPass@i+1,??_cmFilterHighPassUsingLowPass+5
  4093  001DA4  90D8               	bcf	status,0,c
  4094  001DA6  0100               	movlb	0	; () banked
  4095  001DA8  37A9               	rlcf	(??_cmFilterHighPassUsingLowPass+4)& (0+255),f,b
  4096  001DAA  37AA               	rlcf	(??_cmFilterHighPassUsingLowPass+5)& (0+255),f,b
  4097  001DAC  0100               	movlb	0	; () banked
  4098  001DAE  51A7               	movf	(??_cmFilterHighPassUsingLowPass+2)& (0+255),w,b
  4099  001DB0  0100               	movlb	0	; () banked
  4100  001DB2  27A9               	addwf	(??_cmFilterHighPassUsingLowPass+4)& (0+255),f,b
  4101  001DB4  0100               	movlb	0	; () banked
  4102  001DB6  51A8               	movf	(??_cmFilterHighPassUsingLowPass+3)& (0+255),w,b
  4103  001DB8  0100               	movlb	0	; () banked
  4104  001DBA  23AA               	addwfc	(??_cmFilterHighPassUsingLowPass+5)& (0+255),f,b
  4105  001DBC  0E00               	movlw	low _cmYreal
  4106  001DBE  0100               	movlb	0	; () banked
  4107  001DC0  25A9               	addwf	(??_cmFilterHighPassUsingLowPass+4)& (0+255),w,b
  4108  001DC2  6ED9               	movwf	fsr2l,c
  4109  001DC4  0E02               	movlw	high _cmYreal
  4110  001DC6  0100               	movlb	0	; () banked
  4111  001DC8  21AA               	addwfc	(??_cmFilterHighPassUsingLowPass+5)& (0+255),w,b
  4112  001DCA  6EDA               	movwf	fsr2h,c
  4113  001DCC  CFDE F0AB          	movff	postinc2,??_cmFilterHighPassUsingLowPass+6
  4114  001DD0  CFDD F0AC          	movff	postdec2,??_cmFilterHighPassUsingLowPass+7
  4115  001DD4  0100               	movlb	0	; () banked
  4116  001DD6  90D8               	bcf	status,0,c
  4117  001DD8  37AB               	rlcf	(??_cmFilterHighPassUsingLowPass+6)& (0+255),f,b
  4118  001DDA  37AC               	rlcf	(??_cmFilterHighPassUsingLowPass+7)& (0+255),f,b
  4119  001DDC  0100               	movlb	0	; () banked
  4120  001DDE  90D8               	bcf	status,0,c
  4121  001DE0  37AB               	rlcf	(??_cmFilterHighPassUsingLowPass+6)& (0+255),f,b
  4122  001DE2  37AC               	rlcf	(??_cmFilterHighPassUsingLowPass+7)& (0+255),f,b
  4123  001DE4  0100               	movlb	0	; () banked
  4124  001DE6  51A5               	movf	??_cmFilterHighPassUsingLowPass& (0+255),w,b
  4125  001DE8  0100               	movlb	0	; () banked
  4126  001DEA  27AB               	addwf	(??_cmFilterHighPassUsingLowPass+6)& (0+255),f,b
  4127  001DEC  0100               	movlb	0	; () banked
  4128  001DEE  51A6               	movf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),w,b
  4129  001DF0  0100               	movlb	0	; () banked
  4130  001DF2  23AC               	addwfc	(??_cmFilterHighPassUsingLowPass+7)& (0+255),f,b
  4131  001DF4  0EFA               	movlw	250
  4132  001DF6  0100               	movlb	0	; () banked
  4133  001DF8  6FAD               	movwf	(??_cmFilterHighPassUsingLowPass+8)& (0+255),b
  4134  001DFA  0EFF               	movlw	255
  4135  001DFC  0100               	movlb	0	; () banked
  4136  001DFE  6FAE               	movwf	(??_cmFilterHighPassUsingLowPass+9)& (0+255),b
  4137  001E00  C0C5  F0AF         	movff	cmFilterHighPassUsingLowPass@i,??_cmFilterHighPassUsingLowPass+10
  4138  001E04  C0C6  F0B0         	movff	cmFilterHighPassUsingLowPass@i+1,??_cmFilterHighPassUsingLowPass+11
  4139  001E08  90D8               	bcf	status,0,c
  4140  001E0A  0100               	movlb	0	; () banked
  4141  001E0C  37AF               	rlcf	(??_cmFilterHighPassUsingLowPass+10)& (0+255),f,b
  4142  001E0E  37B0               	rlcf	(??_cmFilterHighPassUsingLowPass+11)& (0+255),f,b
  4143  001E10  0100               	movlb	0	; () banked
  4144  001E12  51AD               	movf	(??_cmFilterHighPassUsingLowPass+8)& (0+255),w,b
  4145  001E14  0100               	movlb	0	; () banked
  4146  001E16  27AF               	addwf	(??_cmFilterHighPassUsingLowPass+10)& (0+255),f,b
  4147  001E18  0100               	movlb	0	; () banked
  4148  001E1A  51AE               	movf	(??_cmFilterHighPassUsingLowPass+9)& (0+255),w,b
  4149  001E1C  0100               	movlb	0	; () banked
  4150  001E1E  23B0               	addwfc	(??_cmFilterHighPassUsingLowPass+11)& (0+255),f,b
  4151  001E20  0E00               	movlw	low _cmYreal
  4152  001E22  0100               	movlb	0	; () banked
  4153  001E24  25AF               	addwf	(??_cmFilterHighPassUsingLowPass+10)& (0+255),w,b
  4154  001E26  6ED9               	movwf	fsr2l,c
  4155  001E28  0E02               	movlw	high _cmYreal
  4156  001E2A  0100               	movlb	0	; () banked
  4157  001E2C  21B0               	addwfc	(??_cmFilterHighPassUsingLowPass+11)& (0+255),w,b
  4158  001E2E  6EDA               	movwf	fsr2h,c
  4159  001E30  C0AB  FFDE         	movff	??_cmFilterHighPassUsingLowPass+6,postinc2
  4160  001E34  C0AC  FFDD         	movff	??_cmFilterHighPassUsingLowPass+7,postdec2
  4161  001E38  D000               	goto	l5452
  4162  001E3A                     l5452:
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;serialcomms.c: 300: }
  4166                           ;serialcomms.c: 301: xBuffer = xLPF;
  4167  001E3A  C0BF  F0BB         	movff	cmFilterHighPassUsingLowPass@xLPF,cmFilterHighPassUsingLowPass@xBuffer
  4168  001E3E  C0C0  F0BC         	movff	cmFilterHighPassUsingLowPass@xLPF+1,cmFilterHighPassUsingLowPass@xBuffer+1
  4169                           
  4170                           ; BSR set to: 0
  4171  001E42  0100               	movlb	0	; () banked
  4172  001E44  4BC5               	infsnz	cmFilterHighPassUsingLowPass@i& (0+255),f,b
  4173  001E46  2BC6               	incf	(cmFilterHighPassUsingLowPass@i+1)& (0+255),f,b
  4174  001E48  D000               	goto	l5456
  4175  001E4A                     l5456:
  4176                           
  4177                           ; BSR set to: 0
  4178  001E4A  0E02               	movlw	2
  4179  001E4C  0100               	movlb	0	; () banked
  4180  001E4E  25C1               	addwf	cmFilterHighPassUsingLowPass@Nsignal& (0+255),w,b
  4181  001E50  0100               	movlb	0	; () banked
  4182  001E52  6FA5               	movwf	??_cmFilterHighPassUsingLowPass& (0+255),b
  4183  001E54  0E00               	movlw	0
  4184  001E56  0100               	movlb	0	; () banked
  4185  001E58  21C2               	addwfc	(cmFilterHighPassUsingLowPass@Nsignal+1)& (0+255),w,b
  4186  001E5A  0100               	movlb	0	; () banked
  4187  001E5C  6FA6               	movwf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),b
  4188  001E5E  0100               	movlb	0	; () banked
  4189  001E60  51A5               	movf	??_cmFilterHighPassUsingLowPass& (0+255),w,b
  4190  001E62  0100               	movlb	0	; () banked
  4191  001E64  5DC5               	subwf	cmFilterHighPassUsingLowPass@i& (0+255),w,b
  4192  001E66  0100               	movlb	0	; () banked
  4193  001E68  51C6               	movf	(cmFilterHighPassUsingLowPass@i+1)& (0+255),w,b
  4194  001E6A  0A80               	xorlw	128
  4195  001E6C  0100               	movlb	0	; () banked
  4196  001E6E  6FA7               	movwf	(??_cmFilterHighPassUsingLowPass+2)& (0+255),b
  4197  001E70  0100               	movlb	0	; () banked
  4198  001E72  51A6               	movf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),w,b
  4199  001E74  0A80               	xorlw	128
  4200  001E76  0100               	movlb	0	; () banked
  4201  001E78  59A7               	subwfb	(??_cmFilterHighPassUsingLowPass+2)& (0+255),w,b
  4202  001E7A  A0D8               	btfss	status,0,c
  4203  001E7C  D6A1               	goto	l5414
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;serialcomms.c: 302: }
  4207                           ;serialcomms.c: 305: cmYreal[Nsignal-1] = 4*cmYreal[Nsignal-1] - xBuffer;
  4208                           
  4209                           ; BSR set to: 0
  4210  001E7E  C0BB  F0A5         	movff	cmFilterHighPassUsingLowPass@xBuffer,??_cmFilterHighPassUsingLowPass
  4211  001E82  C0BC  F0A6         	movff	cmFilterHighPassUsingLowPass@xBuffer+1,??_cmFilterHighPassUsingLowPass+1
  4212  001E86  0100               	movlb	0	; () banked
  4213  001E88  1FA5               	comf	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4214  001E8A  1FA6               	comf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4215  001E8C  4BA5               	infsnz	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4216  001E8E  2BA6               	incf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4217  001E90  0EFE               	movlw	254
  4218  001E92  0100               	movlb	0	; () banked
  4219  001E94  6FA7               	movwf	(??_cmFilterHighPassUsingLowPass+2)& (0+255),b
  4220  001E96  0EFF               	movlw	255
  4221  001E98  0100               	movlb	0	; () banked
  4222  001E9A  6FA8               	movwf	(??_cmFilterHighPassUsingLowPass+3)& (0+255),b
  4223  001E9C  C0C1  F0A9         	movff	cmFilterHighPassUsingLowPass@Nsignal,??_cmFilterHighPassUsingLowPass+4
  4224  001EA0  C0C2  F0AA         	movff	cmFilterHighPassUsingLowPass@Nsignal+1,??_cmFilterHighPassUsingLowPass+5
  4225  001EA4  90D8               	bcf	status,0,c
  4226  001EA6  0100               	movlb	0	; () banked
  4227  001EA8  37A9               	rlcf	(??_cmFilterHighPassUsingLowPass+4)& (0+255),f,b
  4228  001EAA  37AA               	rlcf	(??_cmFilterHighPassUsingLowPass+5)& (0+255),f,b
  4229  001EAC  0100               	movlb	0	; () banked
  4230  001EAE  51A7               	movf	(??_cmFilterHighPassUsingLowPass+2)& (0+255),w,b
  4231  001EB0  0100               	movlb	0	; () banked
  4232  001EB2  27A9               	addwf	(??_cmFilterHighPassUsingLowPass+4)& (0+255),f,b
  4233  001EB4  0100               	movlb	0	; () banked
  4234  001EB6  51A8               	movf	(??_cmFilterHighPassUsingLowPass+3)& (0+255),w,b
  4235  001EB8  0100               	movlb	0	; () banked
  4236  001EBA  23AA               	addwfc	(??_cmFilterHighPassUsingLowPass+5)& (0+255),f,b
  4237  001EBC  0E00               	movlw	low _cmYreal
  4238  001EBE  0100               	movlb	0	; () banked
  4239  001EC0  25A9               	addwf	(??_cmFilterHighPassUsingLowPass+4)& (0+255),w,b
  4240  001EC2  6ED9               	movwf	fsr2l,c
  4241  001EC4  0E02               	movlw	high _cmYreal
  4242  001EC6  0100               	movlb	0	; () banked
  4243  001EC8  21AA               	addwfc	(??_cmFilterHighPassUsingLowPass+5)& (0+255),w,b
  4244  001ECA  6EDA               	movwf	fsr2h,c
  4245  001ECC  CFDE F0AB          	movff	postinc2,??_cmFilterHighPassUsingLowPass+6
  4246  001ED0  CFDD F0AC          	movff	postdec2,??_cmFilterHighPassUsingLowPass+7
  4247  001ED4  0100               	movlb	0	; () banked
  4248  001ED6  90D8               	bcf	status,0,c
  4249  001ED8  37AB               	rlcf	(??_cmFilterHighPassUsingLowPass+6)& (0+255),f,b
  4250  001EDA  37AC               	rlcf	(??_cmFilterHighPassUsingLowPass+7)& (0+255),f,b
  4251  001EDC  0100               	movlb	0	; () banked
  4252  001EDE  90D8               	bcf	status,0,c
  4253  001EE0  37AB               	rlcf	(??_cmFilterHighPassUsingLowPass+6)& (0+255),f,b
  4254  001EE2  37AC               	rlcf	(??_cmFilterHighPassUsingLowPass+7)& (0+255),f,b
  4255  001EE4  0100               	movlb	0	; () banked
  4256  001EE6  51A5               	movf	??_cmFilterHighPassUsingLowPass& (0+255),w,b
  4257  001EE8  0100               	movlb	0	; () banked
  4258  001EEA  27AB               	addwf	(??_cmFilterHighPassUsingLowPass+6)& (0+255),f,b
  4259  001EEC  0100               	movlb	0	; () banked
  4260  001EEE  51A6               	movf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),w,b
  4261  001EF0  0100               	movlb	0	; () banked
  4262  001EF2  23AC               	addwfc	(??_cmFilterHighPassUsingLowPass+7)& (0+255),f,b
  4263  001EF4  0EFE               	movlw	254
  4264  001EF6  0100               	movlb	0	; () banked
  4265  001EF8  6FAD               	movwf	(??_cmFilterHighPassUsingLowPass+8)& (0+255),b
  4266  001EFA  0EFF               	movlw	255
  4267  001EFC  0100               	movlb	0	; () banked
  4268  001EFE  6FAE               	movwf	(??_cmFilterHighPassUsingLowPass+9)& (0+255),b
  4269  001F00  C0C1  F0AF         	movff	cmFilterHighPassUsingLowPass@Nsignal,??_cmFilterHighPassUsingLowPass+10
  4270  001F04  C0C2  F0B0         	movff	cmFilterHighPassUsingLowPass@Nsignal+1,??_cmFilterHighPassUsingLowPass+11
  4271  001F08  90D8               	bcf	status,0,c
  4272  001F0A  0100               	movlb	0	; () banked
  4273  001F0C  37AF               	rlcf	(??_cmFilterHighPassUsingLowPass+10)& (0+255),f,b
  4274  001F0E  37B0               	rlcf	(??_cmFilterHighPassUsingLowPass+11)& (0+255),f,b
  4275  001F10  0100               	movlb	0	; () banked
  4276  001F12  51AD               	movf	(??_cmFilterHighPassUsingLowPass+8)& (0+255),w,b
  4277  001F14  0100               	movlb	0	; () banked
  4278  001F16  27AF               	addwf	(??_cmFilterHighPassUsingLowPass+10)& (0+255),f,b
  4279  001F18  0100               	movlb	0	; () banked
  4280  001F1A  51AE               	movf	(??_cmFilterHighPassUsingLowPass+9)& (0+255),w,b
  4281  001F1C  0100               	movlb	0	; () banked
  4282  001F1E  23B0               	addwfc	(??_cmFilterHighPassUsingLowPass+11)& (0+255),f,b
  4283  001F20  0E00               	movlw	low _cmYreal
  4284  001F22  0100               	movlb	0	; () banked
  4285  001F24  25AF               	addwf	(??_cmFilterHighPassUsingLowPass+10)& (0+255),w,b
  4286  001F26  6ED9               	movwf	fsr2l,c
  4287  001F28  0E02               	movlw	high _cmYreal
  4288  001F2A  0100               	movlb	0	; () banked
  4289  001F2C  21B0               	addwfc	(??_cmFilterHighPassUsingLowPass+11)& (0+255),w,b
  4290  001F2E  6EDA               	movwf	fsr2h,c
  4291  001F30  C0AB  FFDE         	movff	??_cmFilterHighPassUsingLowPass+6,postinc2
  4292  001F34  C0AC  FFDD         	movff	??_cmFilterHighPassUsingLowPass+7,postdec2
  4293                           
  4294                           ; BSR set to: 0
  4295  001F38  0012               	return		;funcret
  4296  001F3A                     __end_of_cmFilterHighPassUsingLowPass:
  4297                           	opt stack 0
  4298                           tblptru	equ	0xFF8
  4299                           tblptrh	equ	0xFF7
  4300                           tblptrl	equ	0xFF6
  4301                           tablat	equ	0xFF5
  4302                           postinc0	equ	0xFEE
  4303                           wreg	equ	0xFE8
  4304                           postdec1	equ	0xFE5
  4305                           plusw1	equ	0xFE3
  4306                           fsr1h	equ	0xFE2
  4307                           fsr1l	equ	0xFE1
  4308                           postinc2	equ	0xFDE
  4309                           postdec2	equ	0xFDD
  4310                           plusw2	equ	0xFDB
  4311                           fsr2h	equ	0xFDA
  4312                           fsr2l	equ	0xFD9
  4313                           status	equ	0xFD8
  4314                           
  4315 ;; *************** function _cmFftFun *****************
  4316 ;; Defined at:
  4317 ;;		line 309 in file "serialcomms.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;		None
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;  k               2   71[BANK1 ] int 
  4322 ;;  place           4   67[BANK1 ] long 
  4323 ;;  root            4   63[BANK1 ] long 
  4324 ;;  sizeData        2   61[BANK1 ] short 
  4325 ;; Return value:  Size  Location     Type
  4326 ;;		None               void
  4327 ;; Registers used:
  4328 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4334 ;;      Params:         0       0       0       0       0       0       0
  4335 ;;      Locals:         0       0      12       0       0       0       0
  4336 ;;      Temps:          0       0      11       0       0       0       0
  4337 ;;      Totals:         0       0      23       0       0       0       0
  4338 ;;Total ram usage:       23 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; Hardware stack levels required when called:    9
  4341 ;; This function calls:
  4342 ;;		___ftdiv
  4343 ;;		___fttol
  4344 ;;		___wmul
  4345 ;;		_fix_fft
  4346 ;;		_log
  4347 ;; This function is called by:
  4348 ;;		_cmStuffsWrapperFun
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           	psect	text3
  4353  000BC6                     __ptext3:
  4354                           	opt stack 0
  4355  000BC6                     _cmFftFun:
  4356                           	opt stack 20
  4357                           
  4358                           ;serialcomms.c: 371: short sizeData = log(128)/log(2);
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;incstack = 0
  4362  000BC6  0E00               	movlw	0
  4363  000BC8  0100               	movlb	0	; () banked
  4364  000BCA  6FD2               	movwf	log@x& (0+255),b
  4365  000BCC  0E00               	movlw	0
  4366  000BCE  0100               	movlb	0	; () banked
  4367  000BD0  6FD3               	movwf	(log@x+1)& (0+255),b
  4368  000BD2  0E40               	movlw	64
  4369  000BD4  0100               	movlb	0	; () banked
  4370  000BD6  6FD4               	movwf	(log@x+2)& (0+255),b
  4371  000BD8  ECD2  F018         	call	_log	;wreg free
  4372  000BDC  C0D2  F0DA         	movff	?_log,___ftdiv@f2
  4373  000BE0  C0D3  F0DB         	movff	?_log+1,___ftdiv@f2+1
  4374  000BE4  C0D4  F0DC         	movff	?_log+2,___ftdiv@f2+2
  4375  000BE8  0E00               	movlw	0
  4376  000BEA  0100               	movlb	0	; () banked
  4377  000BEC  6FD2               	movwf	log@x& (0+255),b
  4378  000BEE  0E00               	movlw	0
  4379  000BF0  0100               	movlb	0	; () banked
  4380  000BF2  6FD3               	movwf	(log@x+1)& (0+255),b
  4381  000BF4  0E43               	movlw	67
  4382  000BF6  0100               	movlb	0	; () banked
  4383  000BF8  6FD4               	movwf	(log@x+2)& (0+255),b
  4384  000BFA  ECD2  F018         	call	_log	;wreg free
  4385  000BFE  C0D2  F0D7         	movff	?_log,___ftdiv@f1
  4386  000C02  C0D3  F0D8         	movff	?_log+1,___ftdiv@f1+1
  4387  000C06  C0D4  F0D9         	movff	?_log+2,___ftdiv@f1+2
  4388  000C0A  EC31  F018         	call	___ftdiv	;wreg free
  4389  000C0E  C0D7  F15C         	movff	?___ftdiv,___fttol@f1
  4390  000C12  C0D8  F15D         	movff	?___ftdiv+1,___fttol@f1+1
  4391  000C16  C0D9  F15E         	movff	?___ftdiv+2,___fttol@f1+2
  4392  000C1A  EC72  F019         	call	___fttol	;wreg free
  4393  000C1E  C15C  F193         	movff	?___fttol,cmFftFun@sizeData
  4394  000C22  C15D  F194         	movff	?___fttol+1,cmFftFun@sizeData+1
  4395                           
  4396                           ;serialcomms.c: 372: fix_fft(cmYreal, cmYimag, sizeData);
  4397  000C26  0E00               	movlw	low _cmYreal
  4398  000C28  0100               	movlb	0	; () banked
  4399  000C2A  6FAB               	movwf	fix_fft@fr& (0+255),b
  4400  000C2C  0E02               	movlw	high _cmYreal
  4401  000C2E  0100               	movlb	0	; () banked
  4402  000C30  6FAC               	movwf	(fix_fft@fr+1)& (0+255),b
  4403  000C32  0E00               	movlw	low _cmYimag
  4404  000C34  0100               	movlb	0	; () banked
  4405  000C36  6FAD               	movwf	fix_fft@fi& (0+255),b
  4406  000C38  0E03               	movlw	high _cmYimag
  4407  000C3A  0100               	movlb	0	; () banked
  4408  000C3C  6FAE               	movwf	(fix_fft@fi+1)& (0+255),b
  4409  000C3E  C193  F0AF         	movff	cmFftFun@sizeData,fix_fft@m
  4410  000C42  C194  F0B0         	movff	cmFftFun@sizeData+1,fix_fft@m+1
  4411  000C46  ECC4  F000         	call	_fix_fft	;wreg free
  4412                           
  4413                           ;serialcomms.c: 385: long place, root;
  4414                           ;serialcomms.c: 386: for (int k=0; k < 128/2; k++)
  4415  000C4A  0E00               	movlw	0
  4416  000C4C  0101               	movlb	1	; () banked
  4417  000C4E  6F9E               	movwf	(cmFftFun@k+1)& (0+255),b
  4418  000C50  0E00               	movlw	0
  4419  000C52  6F9D               	movwf	cmFftFun@k& (0+255),b
  4420                           
  4421                           ; BSR set to: 1
  4422  000C54  0101               	movlb	1	; () banked
  4423  000C56  BF9E               	btfsc	(cmFftFun@k+1)& (0+255),7,b
  4424  000C58  D00A               	goto	l5470
  4425  000C5A  0101               	movlb	1	; () banked
  4426  000C5C  519E               	movf	(cmFftFun@k+1)& (0+255),w,b
  4427  000C5E  E106               	bnz	u6180
  4428  000C60  0E40               	movlw	64
  4429  000C62  0101               	movlb	1	; () banked
  4430  000C64  5D9D               	subwf	cmFftFun@k& (0+255),w,b
  4431  000C66  B0D8               	btfsc	status,0,c
  4432  000C68  D1B7               	goto	l200
  4433  000C6A  D001               	goto	l5470
  4434  000C6C                     u6180:
  4435                           
  4436                           ; BSR set to: 1
  4437  000C6C  D1B5               	goto	l200
  4438  000C6E                     l5470:
  4439                           
  4440                           ; BSR set to: 1
  4441                           ;serialcomms.c: 387: {
  4442                           ;serialcomms.c: 388: cmYreal[k] = (cmYreal[k] * cmYreal[k] +
  4443                           ;serialcomms.c: 389: cmYimag[k] * cmYimag[k]);
  4444  000C6E  90D8               	bcf	status,0,c
  4445  000C70  0101               	movlb	1	; () banked
  4446  000C72  359D               	rlcf	cmFftFun@k& (0+255),w,b
  4447  000C74  6ED9               	movwf	fsr2l,c
  4448  000C76  0101               	movlb	1	; () banked
  4449  000C78  359E               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4450  000C7A  6EDA               	movwf	fsr2h,c
  4451  000C7C  0E00               	movlw	low _cmYreal
  4452  000C7E  26D9               	addwf	fsr2l,f,c
  4453  000C80  0E02               	movlw	high _cmYreal
  4454  000C82  22DA               	addwfc	fsr2h,f,c
  4455  000C84  CFDE F09F          	movff	postinc2,___wmul@multiplier
  4456  000C88  CFDD F0A0          	movff	postdec2,___wmul@multiplier+1
  4457  000C8C  90D8               	bcf	status,0,c
  4458  000C8E  0101               	movlb	1	; () banked
  4459  000C90  359D               	rlcf	cmFftFun@k& (0+255),w,b
  4460  000C92  6ED9               	movwf	fsr2l,c
  4461  000C94  0101               	movlb	1	; () banked
  4462  000C96  359E               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4463  000C98  6EDA               	movwf	fsr2h,c
  4464  000C9A  0E00               	movlw	low _cmYreal
  4465  000C9C  26D9               	addwf	fsr2l,f,c
  4466  000C9E  0E02               	movlw	high _cmYreal
  4467  000CA0  22DA               	addwfc	fsr2h,f,c
  4468  000CA2  CFDE F0A1          	movff	postinc2,___wmul@multiplicand
  4469  000CA6  CFDD F0A2          	movff	postdec2,___wmul@multiplicand+1
  4470  000CAA  ECB7  F020         	call	___wmul	;wreg free
  4471  000CAE  C09F  F188         	movff	?___wmul,??_cmFftFun
  4472  000CB2  C0A0  F189         	movff	?___wmul+1,??_cmFftFun+1
  4473  000CB6  90D8               	bcf	status,0,c
  4474  000CB8  0101               	movlb	1	; () banked
  4475  000CBA  359D               	rlcf	cmFftFun@k& (0+255),w,b
  4476  000CBC  6ED9               	movwf	fsr2l,c
  4477  000CBE  0101               	movlb	1	; () banked
  4478  000CC0  359E               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4479  000CC2  6EDA               	movwf	fsr2h,c
  4480  000CC4  0E00               	movlw	low _cmYimag
  4481  000CC6  26D9               	addwf	fsr2l,f,c
  4482  000CC8  0E03               	movlw	high _cmYimag
  4483  000CCA  22DA               	addwfc	fsr2h,f,c
  4484  000CCC  CFDE F09F          	movff	postinc2,___wmul@multiplier
  4485  000CD0  CFDD F0A0          	movff	postdec2,___wmul@multiplier+1
  4486  000CD4  90D8               	bcf	status,0,c
  4487  000CD6  0101               	movlb	1	; () banked
  4488  000CD8  359D               	rlcf	cmFftFun@k& (0+255),w,b
  4489  000CDA  6ED9               	movwf	fsr2l,c
  4490  000CDC  0101               	movlb	1	; () banked
  4491  000CDE  359E               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4492  000CE0  6EDA               	movwf	fsr2h,c
  4493  000CE2  0E00               	movlw	low _cmYimag
  4494  000CE4  26D9               	addwf	fsr2l,f,c
  4495  000CE6  0E03               	movlw	high _cmYimag
  4496  000CE8  22DA               	addwfc	fsr2h,f,c
  4497  000CEA  CFDE F0A1          	movff	postinc2,___wmul@multiplicand
  4498  000CEE  CFDD F0A2          	movff	postdec2,___wmul@multiplicand+1
  4499  000CF2  ECB7  F020         	call	___wmul	;wreg free
  4500  000CF6  0100               	movlb	0	; () banked
  4501  000CF8  519F               	movf	?___wmul& (0+255),w,b
  4502  000CFA  0101               	movlb	1	; () banked
  4503  000CFC  2788               	addwf	??_cmFftFun& (0+255),f,b
  4504  000CFE  0100               	movlb	0	; () banked
  4505  000D00  51A0               	movf	(?___wmul+1)& (0+255),w,b
  4506  000D02  0101               	movlb	1	; () banked
  4507  000D04  2389               	addwfc	(??_cmFftFun+1)& (0+255),f,b
  4508  000D06  90D8               	bcf	status,0,c
  4509  000D08  0101               	movlb	1	; () banked
  4510  000D0A  359D               	rlcf	cmFftFun@k& (0+255),w,b
  4511  000D0C  6ED9               	movwf	fsr2l,c
  4512  000D0E  0101               	movlb	1	; () banked
  4513  000D10  359E               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4514  000D12  6EDA               	movwf	fsr2h,c
  4515  000D14  0E00               	movlw	low _cmYreal
  4516  000D16  26D9               	addwf	fsr2l,f,c
  4517  000D18  0E02               	movlw	high _cmYreal
  4518  000D1A  22DA               	addwfc	fsr2h,f,c
  4519  000D1C  C188  FFDE         	movff	??_cmFftFun,postinc2
  4520  000D20  C189  FFDD         	movff	??_cmFftFun+1,postdec2
  4521                           
  4522                           ; BSR set to: 1
  4523                           ;serialcomms.c: 394: place = 0x40000000;
  4524  000D24  0E00               	movlw	0
  4525  000D26  0101               	movlb	1	; () banked
  4526  000D28  6F99               	movwf	cmFftFun@place& (0+255),b
  4527  000D2A  0E00               	movlw	0
  4528  000D2C  6F9A               	movwf	(cmFftFun@place+1)& (0+255),b
  4529  000D2E  0E00               	movlw	0
  4530  000D30  6F9B               	movwf	(cmFftFun@place+2)& (0+255),b
  4531  000D32  0E40               	movlw	64
  4532  000D34  6F9C               	movwf	(cmFftFun@place+3)& (0+255),b
  4533                           
  4534                           ; BSR set to: 1
  4535                           ;serialcomms.c: 395: root = 0;
  4536  000D36  0E00               	movlw	0
  4537  000D38  0101               	movlb	1	; () banked
  4538  000D3A  6F95               	movwf	cmFftFun@root& (0+255),b
  4539  000D3C  0E00               	movlw	0
  4540  000D3E  6F96               	movwf	(cmFftFun@root+1)& (0+255),b
  4541  000D40  0E00               	movlw	0
  4542  000D42  6F97               	movwf	(cmFftFun@root+2)& (0+255),b
  4543  000D44  0E00               	movlw	0
  4544  000D46  6F98               	movwf	(cmFftFun@root+3)& (0+255),b
  4545                           
  4546                           ; BSR set to: 1
  4547                           ;serialcomms.c: 397: if (cmYreal[k] >= 0)
  4548  000D48  90D8               	bcf	status,0,c
  4549  000D4A  0101               	movlb	1	; () banked
  4550  000D4C  359D               	rlcf	cmFftFun@k& (0+255),w,b
  4551  000D4E  6ED9               	movwf	fsr2l,c
  4552  000D50  0101               	movlb	1	; () banked
  4553  000D52  359E               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4554  000D54  6EDA               	movwf	fsr2h,c
  4555  000D56  0E00               	movlw	low _cmYreal
  4556  000D58  26D9               	addwf	fsr2l,f,c
  4557  000D5A  0E02               	movlw	high _cmYreal
  4558  000D5C  22DA               	addwfc	fsr2h,f,c
  4559  000D5E  0E01               	movlw	1
  4560  000D60  AEDB               	btfss	plusw2,7,c
  4561  000D62  D023               	goto	l5482
  4562  000D64  D11F               	goto	l5496
  4563                           
  4564                           ; BSR set to: 1
  4565                           ;serialcomms.c: 398: {
  4566                           ;serialcomms.c: 399: while (place > cmYreal[k]) place = place >> 2;
  4567  000D66  D021               	goto	l5482
  4568  000D68                     l5480:
  4569                           
  4570                           ; BSR set to: 1
  4571  000D68  0E02               	movlw	2
  4572  000D6A  0101               	movlb	1	; () banked
  4573  000D6C  6F88               	movwf	??_cmFftFun& (0+255),b
  4574  000D6E  C199  F189         	movff	cmFftFun@place,??_cmFftFun+1
  4575  000D72  C19A  F18A         	movff	cmFftFun@place+1,??_cmFftFun+2
  4576  000D76  C19B  F18B         	movff	cmFftFun@place+2,??_cmFftFun+3
  4577  000D7A  C19C  F18C         	movff	cmFftFun@place+3,??_cmFftFun+4
  4578  000D7E                     u6205:
  4579  000D7E  0101               	movlb	1	; () banked
  4580  000D80  6788               	tstfsz	??_cmFftFun& (0+255),b
  4581  000D82  D001               	goto	u6206
  4582  000D84  D009               	goto	u6207
  4583  000D86                     u6206:
  4584  000D86  0101               	movlb	1	; () banked
  4585  000D88  358C               	rlcf	(??_cmFftFun+4)& (0+255),w,b
  4586  000D8A  338C               	rrcf	(??_cmFftFun+4)& (0+255),f,b
  4587  000D8C  338B               	rrcf	(??_cmFftFun+3)& (0+255),f,b
  4588  000D8E  338A               	rrcf	(??_cmFftFun+2)& (0+255),f,b
  4589  000D90  3389               	rrcf	(??_cmFftFun+1)& (0+255),f,b
  4590  000D92  0101               	movlb	1	; () banked
  4591  000D94  2F88               	decfsz	??_cmFftFun& (0+255),f,b
  4592  000D96  D7F3               	goto	u6205
  4593  000D98                     u6207:
  4594  000D98  C189  F199         	movff	??_cmFftFun+1,cmFftFun@place
  4595  000D9C  C18A  F19A         	movff	??_cmFftFun+2,cmFftFun@place+1
  4596  000DA0  C18B  F19B         	movff	??_cmFftFun+3,cmFftFun@place+2
  4597  000DA4  C18C  F19C         	movff	??_cmFftFun+4,cmFftFun@place+3
  4598  000DA8  D000               	goto	l5482
  4599  000DAA                     l5482:
  4600  000DAA  90D8               	bcf	status,0,c
  4601  000DAC  0101               	movlb	1	; () banked
  4602  000DAE  359D               	rlcf	cmFftFun@k& (0+255),w,b
  4603  000DB0  6ED9               	movwf	fsr2l,c
  4604  000DB2  0101               	movlb	1	; () banked
  4605  000DB4  359E               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4606  000DB6  6EDA               	movwf	fsr2h,c
  4607  000DB8  0E00               	movlw	low _cmYreal
  4608  000DBA  26D9               	addwf	fsr2l,f,c
  4609  000DBC  0E02               	movlw	high _cmYreal
  4610  000DBE  22DA               	addwfc	fsr2h,f,c
  4611  000DC0  CFDE F188          	movff	postinc2,??_cmFftFun
  4612  000DC4  CFDD F189          	movff	postdec2,??_cmFftFun+1
  4613  000DC8  C188  F18A         	movff	??_cmFftFun,??_cmFftFun+2
  4614  000DCC  C189  F18B         	movff	??_cmFftFun+1,??_cmFftFun+3
  4615  000DD0  0E00               	movlw	0
  4616  000DD2  0101               	movlb	1	; () banked
  4617  000DD4  BF8B               	btfsc	(??_cmFftFun+3)& (0+255),7,b
  4618  000DD6  0EFF               	movlw	255
  4619  000DD8  6F8C               	movwf	(??_cmFftFun+4)& (0+255),b
  4620  000DDA  6F8D               	movwf	(??_cmFftFun+5)& (0+255),b
  4621  000DDC  0101               	movlb	1	; () banked
  4622  000DDE  5199               	movf	cmFftFun@place& (0+255),w,b
  4623  000DE0  0101               	movlb	1	; () banked
  4624  000DE2  5D8A               	subwf	(??_cmFftFun+2)& (0+255),w,b
  4625  000DE4  0101               	movlb	1	; () banked
  4626  000DE6  519A               	movf	(cmFftFun@place+1)& (0+255),w,b
  4627  000DE8  0101               	movlb	1	; () banked
  4628  000DEA  598B               	subwfb	(??_cmFftFun+3)& (0+255),w,b
  4629  000DEC  0101               	movlb	1	; () banked
  4630  000DEE  519B               	movf	(cmFftFun@place+2)& (0+255),w,b
  4631  000DF0  0101               	movlb	1	; () banked
  4632  000DF2  598C               	subwfb	(??_cmFftFun+4)& (0+255),w,b
  4633  000DF4  0101               	movlb	1	; () banked
  4634  000DF6  518D               	movf	(??_cmFftFun+5)& (0+255),w,b
  4635  000DF8  0A80               	xorlw	128
  4636  000DFA  0101               	movlb	1	; () banked
  4637  000DFC  6F8E               	movwf	(??_cmFftFun+6)& (0+255),b
  4638  000DFE  0101               	movlb	1	; () banked
  4639  000E00  519C               	movf	(cmFftFun@place+3)& (0+255),w,b
  4640  000E02  0A80               	xorlw	128
  4641  000E04  0101               	movlb	1	; () banked
  4642  000E06  598E               	subwfb	(??_cmFftFun+6)& (0+255),w,b
  4643  000E08  B0D8               	btfsc	status,0,c
  4644  000E0A  D0C0               	goto	l5494
  4645  000E0C  D7AD               	goto	l5480
  4646                           
  4647                           ; BSR set to: 1
  4648                           ;serialcomms.c: 401: while (place)
  4649  000E0E  D0BE               	goto	l5494
  4650  000E10                     l5484:
  4651                           
  4652                           ; BSR set to: 1
  4653                           ;serialcomms.c: 402: {
  4654                           ;serialcomms.c: 403: if (cmYreal[k] >= root + place)
  4655  000E10  0101               	movlb	1	; () banked
  4656  000E12  5199               	movf	cmFftFun@place& (0+255),w,b
  4657  000E14  0101               	movlb	1	; () banked
  4658  000E16  2595               	addwf	cmFftFun@root& (0+255),w,b
  4659  000E18  0101               	movlb	1	; () banked
  4660  000E1A  6F88               	movwf	??_cmFftFun& (0+255),b
  4661  000E1C  0101               	movlb	1	; () banked
  4662  000E1E  519A               	movf	(cmFftFun@place+1)& (0+255),w,b
  4663  000E20  0101               	movlb	1	; () banked
  4664  000E22  2196               	addwfc	(cmFftFun@root+1)& (0+255),w,b
  4665  000E24  0101               	movlb	1	; () banked
  4666  000E26  6F89               	movwf	(??_cmFftFun+1)& (0+255),b
  4667  000E28  0101               	movlb	1	; () banked
  4668  000E2A  519B               	movf	(cmFftFun@place+2)& (0+255),w,b
  4669  000E2C  0101               	movlb	1	; () banked
  4670  000E2E  2197               	addwfc	(cmFftFun@root+2)& (0+255),w,b
  4671  000E30  0101               	movlb	1	; () banked
  4672  000E32  6F8A               	movwf	(??_cmFftFun+2)& (0+255),b
  4673  000E34  0101               	movlb	1	; () banked
  4674  000E36  519C               	movf	(cmFftFun@place+3)& (0+255),w,b
  4675  000E38  0101               	movlb	1	; () banked
  4676  000E3A  2198               	addwfc	(cmFftFun@root+3)& (0+255),w,b
  4677  000E3C  0101               	movlb	1	; () banked
  4678  000E3E  6F8B               	movwf	(??_cmFftFun+3)& (0+255),b
  4679  000E40  90D8               	bcf	status,0,c
  4680  000E42  0101               	movlb	1	; () banked
  4681  000E44  359D               	rlcf	cmFftFun@k& (0+255),w,b
  4682  000E46  6ED9               	movwf	fsr2l,c
  4683  000E48  0101               	movlb	1	; () banked
  4684  000E4A  359E               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4685  000E4C  6EDA               	movwf	fsr2h,c
  4686  000E4E  0E00               	movlw	low _cmYreal
  4687  000E50  26D9               	addwf	fsr2l,f,c
  4688  000E52  0E02               	movlw	high _cmYreal
  4689  000E54  22DA               	addwfc	fsr2h,f,c
  4690  000E56  CFDE F18C          	movff	postinc2,??_cmFftFun+4
  4691  000E5A  CFDD F18D          	movff	postdec2,??_cmFftFun+5
  4692  000E5E  C18C  F18E         	movff	??_cmFftFun+4,??_cmFftFun+6
  4693  000E62  C18D  F18F         	movff	??_cmFftFun+5,??_cmFftFun+7
  4694  000E66  0E00               	movlw	0
  4695  000E68  0101               	movlb	1	; () banked
  4696  000E6A  BF8F               	btfsc	(??_cmFftFun+7)& (0+255),7,b
  4697  000E6C  0EFF               	movlw	255
  4698  000E6E  6F90               	movwf	(??_cmFftFun+8)& (0+255),b
  4699  000E70  6F91               	movwf	(??_cmFftFun+9)& (0+255),b
  4700  000E72  0101               	movlb	1	; () banked
  4701  000E74  5188               	movf	??_cmFftFun& (0+255),w,b
  4702  000E76  0101               	movlb	1	; () banked
  4703  000E78  5D8E               	subwf	(??_cmFftFun+6)& (0+255),w,b
  4704  000E7A  0101               	movlb	1	; () banked
  4705  000E7C  5189               	movf	(??_cmFftFun+1)& (0+255),w,b
  4706  000E7E  0101               	movlb	1	; () banked
  4707  000E80  598F               	subwfb	(??_cmFftFun+7)& (0+255),w,b
  4708  000E82  0101               	movlb	1	; () banked
  4709  000E84  518A               	movf	(??_cmFftFun+2)& (0+255),w,b
  4710  000E86  0101               	movlb	1	; () banked
  4711  000E88  5990               	subwfb	(??_cmFftFun+8)& (0+255),w,b
  4712  000E8A  0101               	movlb	1	; () banked
  4713  000E8C  5191               	movf	(??_cmFftFun+9)& (0+255),w,b
  4714  000E8E  0A80               	xorlw	128
  4715  000E90  0101               	movlb	1	; () banked
  4716  000E92  6F92               	movwf	(??_cmFftFun+10)& (0+255),b
  4717  000E94  0101               	movlb	1	; () banked
  4718  000E96  518B               	movf	(??_cmFftFun+3)& (0+255),w,b
  4719  000E98  0A80               	xorlw	128
  4720  000E9A  0101               	movlb	1	; () banked
  4721  000E9C  5992               	subwfb	(??_cmFftFun+10)& (0+255),w,b
  4722  000E9E  A0D8               	btfss	status,0,c
  4723  000EA0  D03E               	goto	l5490
  4724                           
  4725                           ; BSR set to: 1
  4726                           ;serialcomms.c: 404: {
  4727                           ;serialcomms.c: 405: cmYreal[k] -= root + place;
  4728  000EA2  0101               	movlb	1	; () banked
  4729  000EA4  5199               	movf	cmFftFun@place& (0+255),w,b
  4730  000EA6  0101               	movlb	1	; () banked
  4731  000EA8  2595               	addwf	cmFftFun@root& (0+255),w,b
  4732  000EAA  0101               	movlb	1	; () banked
  4733  000EAC  6F88               	movwf	??_cmFftFun& (0+255),b
  4734  000EAE  0101               	movlb	1	; () banked
  4735  000EB0  519A               	movf	(cmFftFun@place+1)& (0+255),w,b
  4736  000EB2  0101               	movlb	1	; () banked
  4737  000EB4  2196               	addwfc	(cmFftFun@root+1)& (0+255),w,b
  4738  000EB6  0101               	movlb	1	; () banked
  4739  000EB8  6F89               	movwf	(??_cmFftFun+1)& (0+255),b
  4740  000EBA  90D8               	bcf	status,0,c
  4741  000EBC  0101               	movlb	1	; () banked
  4742  000EBE  359D               	rlcf	cmFftFun@k& (0+255),w,b
  4743  000EC0  6ED9               	movwf	fsr2l,c
  4744  000EC2  0101               	movlb	1	; () banked
  4745  000EC4  359E               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4746  000EC6  6EDA               	movwf	fsr2h,c
  4747  000EC8  0E00               	movlw	low _cmYreal
  4748  000ECA  26D9               	addwf	fsr2l,f,c
  4749  000ECC  0E02               	movlw	high _cmYreal
  4750  000ECE  22DA               	addwfc	fsr2h,f,c
  4751  000ED0  0101               	movlb	1	; () banked
  4752  000ED2  5188               	movf	??_cmFftFun& (0+255),w,b
  4753  000ED4  5EDE               	subwf	postinc2,f,c
  4754  000ED6  5189               	movf	(??_cmFftFun+1)& (0+255),w,b
  4755  000ED8  5ADD               	subwfb	postdec2,f,c
  4756                           
  4757                           ; BSR set to: 1
  4758                           ;serialcomms.c: 406: root += place * 2;
  4759  000EDA  90D8               	bcf	status,0,c
  4760  000EDC  0101               	movlb	1	; () banked
  4761  000EDE  3599               	rlcf	cmFftFun@place& (0+255),w,b
  4762  000EE0  0101               	movlb	1	; () banked
  4763  000EE2  6F88               	movwf	??_cmFftFun& (0+255),b
  4764  000EE4  0101               	movlb	1	; () banked
  4765  000EE6  359A               	rlcf	(cmFftFun@place+1)& (0+255),w,b
  4766  000EE8  0101               	movlb	1	; () banked
  4767  000EEA  6F89               	movwf	(??_cmFftFun+1)& (0+255),b
  4768  000EEC  0101               	movlb	1	; () banked
  4769  000EEE  359B               	rlcf	(cmFftFun@place+2)& (0+255),w,b
  4770  000EF0  0101               	movlb	1	; () banked
  4771  000EF2  6F8A               	movwf	(??_cmFftFun+2)& (0+255),b
  4772  000EF4  0101               	movlb	1	; () banked
  4773  000EF6  359C               	rlcf	(cmFftFun@place+3)& (0+255),w,b
  4774  000EF8  0101               	movlb	1	; () banked
  4775  000EFA  6F8B               	movwf	(??_cmFftFun+3)& (0+255),b
  4776  000EFC  0101               	movlb	1	; () banked
  4777  000EFE  5188               	movf	??_cmFftFun& (0+255),w,b
  4778  000F00  0101               	movlb	1	; () banked
  4779  000F02  2795               	addwf	cmFftFun@root& (0+255),f,b
  4780  000F04  0101               	movlb	1	; () banked
  4781  000F06  5189               	movf	(??_cmFftFun+1)& (0+255),w,b
  4782  000F08  0101               	movlb	1	; () banked
  4783  000F0A  2396               	addwfc	(cmFftFun@root+1)& (0+255),f,b
  4784  000F0C  0101               	movlb	1	; () banked
  4785  000F0E  518A               	movf	(??_cmFftFun+2)& (0+255),w,b
  4786  000F10  0101               	movlb	1	; () banked
  4787  000F12  2397               	addwfc	(cmFftFun@root+2)& (0+255),f,b
  4788  000F14  0101               	movlb	1	; () banked
  4789  000F16  518B               	movf	(??_cmFftFun+3)& (0+255),w,b
  4790  000F18  0101               	movlb	1	; () banked
  4791  000F1A  2398               	addwfc	(cmFftFun@root+3)& (0+255),f,b
  4792  000F1C  D000               	goto	l5490
  4793  000F1E                     l5490:
  4794                           
  4795                           ; BSR set to: 1
  4796                           ;serialcomms.c: 407: }
  4797                           ;serialcomms.c: 408: root = root >> 1;
  4798  000F1E  C195  F188         	movff	cmFftFun@root,??_cmFftFun
  4799  000F22  C196  F189         	movff	cmFftFun@root+1,??_cmFftFun+1
  4800  000F26  C197  F18A         	movff	cmFftFun@root+2,??_cmFftFun+2
  4801  000F2A  C198  F18B         	movff	cmFftFun@root+3,??_cmFftFun+3
  4802  000F2E  0101               	movlb	1	; () banked
  4803  000F30  358B               	rlcf	(??_cmFftFun+3)& (0+255),w,b
  4804  000F32  338B               	rrcf	(??_cmFftFun+3)& (0+255),f,b
  4805  000F34  338A               	rrcf	(??_cmFftFun+2)& (0+255),f,b
  4806  000F36  3389               	rrcf	(??_cmFftFun+1)& (0+255),f,b
  4807  000F38  3388               	rrcf	??_cmFftFun& (0+255),f,b
  4808  000F3A  C188  F195         	movff	??_cmFftFun,cmFftFun@root
  4809  000F3E  C189  F196         	movff	??_cmFftFun+1,cmFftFun@root+1
  4810  000F42  C18A  F197         	movff	??_cmFftFun+2,cmFftFun@root+2
  4811  000F46  C18B  F198         	movff	??_cmFftFun+3,cmFftFun@root+3
  4812                           
  4813                           ; BSR set to: 1
  4814                           ;serialcomms.c: 409: place = place >> 2;
  4815  000F4A  0E02               	movlw	2
  4816  000F4C  0101               	movlb	1	; () banked
  4817  000F4E  6F88               	movwf	??_cmFftFun& (0+255),b
  4818  000F50  C199  F189         	movff	cmFftFun@place,??_cmFftFun+1
  4819  000F54  C19A  F18A         	movff	cmFftFun@place+1,??_cmFftFun+2
  4820  000F58  C19B  F18B         	movff	cmFftFun@place+2,??_cmFftFun+3
  4821  000F5C  C19C  F18C         	movff	cmFftFun@place+3,??_cmFftFun+4
  4822  000F60                     u6235:
  4823  000F60  0101               	movlb	1	; () banked
  4824  000F62  6788               	tstfsz	??_cmFftFun& (0+255),b
  4825  000F64  D001               	goto	u6236
  4826  000F66  D009               	goto	u6237
  4827  000F68                     u6236:
  4828  000F68  0101               	movlb	1	; () banked
  4829  000F6A  358C               	rlcf	(??_cmFftFun+4)& (0+255),w,b
  4830  000F6C  338C               	rrcf	(??_cmFftFun+4)& (0+255),f,b
  4831  000F6E  338B               	rrcf	(??_cmFftFun+3)& (0+255),f,b
  4832  000F70  338A               	rrcf	(??_cmFftFun+2)& (0+255),f,b
  4833  000F72  3389               	rrcf	(??_cmFftFun+1)& (0+255),f,b
  4834  000F74  0101               	movlb	1	; () banked
  4835  000F76  2F88               	decfsz	??_cmFftFun& (0+255),f,b
  4836  000F78  D7F3               	goto	u6235
  4837  000F7A                     u6237:
  4838  000F7A  C189  F199         	movff	??_cmFftFun+1,cmFftFun@place
  4839  000F7E  C18A  F19A         	movff	??_cmFftFun+2,cmFftFun@place+1
  4840  000F82  C18B  F19B         	movff	??_cmFftFun+3,cmFftFun@place+2
  4841  000F86  C18C  F19C         	movff	??_cmFftFun+4,cmFftFun@place+3
  4842  000F8A  D000               	goto	l5494
  4843  000F8C                     l5494:
  4844  000F8C  0101               	movlb	1	; () banked
  4845  000F8E  5199               	movf	cmFftFun@place& (0+255),w,b
  4846  000F90  0101               	movlb	1	; () banked
  4847  000F92  119A               	iorwf	(cmFftFun@place+1)& (0+255),w,b
  4848  000F94  0101               	movlb	1	; () banked
  4849  000F96  119B               	iorwf	(cmFftFun@place+2)& (0+255),w,b
  4850  000F98  0101               	movlb	1	; () banked
  4851  000F9A  119C               	iorwf	(cmFftFun@place+3)& (0+255),w,b
  4852  000F9C  B4D8               	btfsc	status,2,c
  4853  000F9E  D002               	goto	l5496
  4854  000FA0  D737               	goto	l5484
  4855                           
  4856                           ; BSR set to: 1
  4857  000FA2  D000               	goto	l5496
  4858  000FA4                     l5496:
  4859                           
  4860                           ; BSR set to: 1
  4861                           ;serialcomms.c: 410: }
  4862                           ;serialcomms.c: 411: }
  4863                           ;serialcomms.c: 412: cmYreal[k] = root;
  4864  000FA4  90D8               	bcf	status,0,c
  4865  000FA6  0101               	movlb	1	; () banked
  4866  000FA8  359D               	rlcf	cmFftFun@k& (0+255),w,b
  4867  000FAA  6ED9               	movwf	fsr2l,c
  4868  000FAC  0101               	movlb	1	; () banked
  4869  000FAE  359E               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4870  000FB0  6EDA               	movwf	fsr2h,c
  4871  000FB2  0E00               	movlw	low _cmYreal
  4872  000FB4  26D9               	addwf	fsr2l,f,c
  4873  000FB6  0E02               	movlw	high _cmYreal
  4874  000FB8  22DA               	addwfc	fsr2h,f,c
  4875  000FBA  C195  FFDE         	movff	cmFftFun@root,postinc2
  4876  000FBE  C196  FFDD         	movff	cmFftFun@root+1,postdec2
  4877                           
  4878                           ; BSR set to: 1
  4879  000FC2  0101               	movlb	1	; () banked
  4880  000FC4  4B9D               	infsnz	cmFftFun@k& (0+255),f,b
  4881  000FC6  2B9E               	incf	(cmFftFun@k+1)& (0+255),f,b
  4882                           
  4883                           ; BSR set to: 1
  4884  000FC8  0101               	movlb	1	; () banked
  4885  000FCA  BF9E               	btfsc	(cmFftFun@k+1)& (0+255),7,b
  4886  000FCC  D650               	goto	l5470
  4887  000FCE  0101               	movlb	1	; () banked
  4888  000FD0  519E               	movf	(cmFftFun@k+1)& (0+255),w,b
  4889  000FD2  E102               	bnz	l200
  4890  000FD4  D645               	goto	L2
  4891  000FD6  D000               	goto	l200
  4892  000FD8                     l200:
  4893                           
  4894                           ; BSR set to: 1
  4895  000FD8  0012               	return		;funcret
  4896  000FDA                     __end_of_cmFftFun:
  4897                           	opt stack 0
  4898                           tblptru	equ	0xFF8
  4899                           tblptrh	equ	0xFF7
  4900                           tblptrl	equ	0xFF6
  4901                           tablat	equ	0xFF5
  4902                           postinc0	equ	0xFEE
  4903                           wreg	equ	0xFE8
  4904                           postdec1	equ	0xFE5
  4905                           plusw1	equ	0xFE3
  4906                           fsr1h	equ	0xFE2
  4907                           fsr1l	equ	0xFE1
  4908                           postinc2	equ	0xFDE
  4909                           postdec2	equ	0xFDD
  4910                           plusw2	equ	0xFDB
  4911                           fsr2h	equ	0xFDA
  4912                           fsr2l	equ	0xFD9
  4913                           status	equ	0xFD8
  4914                           
  4915 ;; *************** function _log *****************
  4916 ;; Defined at:
  4917 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;  x               3   82[BANK0 ] short 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  exponent        2   85[BANK0 ] int 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  3   82[BANK0 ] int 
  4924 ;; Registers used:
  4925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4931 ;;      Params:         0       3       0       0       0       0       0
  4932 ;;      Locals:         0       2       0       0       0       0       0
  4933 ;;      Temps:          0       0       0       0       0       0       0
  4934 ;;      Totals:         0       5       0       0       0       0       0
  4935 ;;Total ram usage:        5 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    8
  4938 ;; This function calls:
  4939 ;;		___awtoft
  4940 ;;		___ftadd
  4941 ;;		___ftmul
  4942 ;;		_eval_poly
  4943 ;;		_frexp
  4944 ;; This function is called by:
  4945 ;;		_cmStuffsWrapperFun
  4946 ;;		_cmFftFun
  4947 ;; This function uses a non-reentrant model
  4948 ;;
  4949                           
  4950                           	psect	text4
  4951  0031A4                     __ptext4:
  4952                           	opt stack 0
  4953  0031A4                     _log:
  4954                           	opt stack 21
  4955                           
  4956                           ; BSR set to: 1
  4957                           ;incstack = 0
  4958  0031A4  0100               	movlb	0	; () banked
  4959  0031A6  AFD4               	btfss	(log@x+2)& (0+255),7,b
  4960  0031A8  D006               	goto	l5158
  4961                           
  4962                           ; BSR set to: 0
  4963  0031AA  0E00               	movlw	0
  4964  0031AC  0101               	movlb	1	; () banked
  4965  0031AE  6FCF               	movwf	(_errno+1)& (0+255),b
  4966  0031B0  0E21               	movlw	33
  4967  0031B2  D00D               	goto	L3
  4968                           
  4969                           ; BSR set to: 0
  4970  0031B4  D096               	goto	l1330
  4971  0031B6                     l5158:
  4972                           
  4973                           ; BSR set to: 0
  4974  0031B6  0100               	movlb	0	; () banked
  4975  0031B8  51D2               	movf	log@x& (0+255),w,b
  4976  0031BA  0100               	movlb	0	; () banked
  4977  0031BC  11D3               	iorwf	(log@x+1)& (0+255),w,b
  4978  0031BE  0100               	movlb	0	; () banked
  4979  0031C0  11D4               	iorwf	(log@x+2)& (0+255),w,b
  4980  0031C2  A4D8               	btfss	status,2,c
  4981  0031C4  D00F               	goto	l5164
  4982                           
  4983                           ; BSR set to: 0
  4984  0031C6  0E00               	movlw	0
  4985  0031C8  0101               	movlb	1	; () banked
  4986  0031CA  6FCF               	movwf	(_errno+1)& (0+255),b
  4987  0031CC  0E22               	movlw	34
  4988  0031CE                     L3:
  4989  0031CE  6FCE               	movwf	_errno& (0+255),b
  4990  0031D0  0E00               	movlw	0
  4991  0031D2  0100               	movlb	0	; () banked
  4992  0031D4  6FD2               	movwf	?_log& (0+255),b
  4993  0031D6  0E00               	movlw	0
  4994  0031D8  0100               	movlb	0	; () banked
  4995  0031DA  6FD3               	movwf	(?_log+1)& (0+255),b
  4996  0031DC  0E00               	movlw	0
  4997  0031DE  0100               	movlb	0	; () banked
  4998  0031E0  6FD4               	movwf	(?_log+2)& (0+255),b
  4999                           
  5000                           ; BSR set to: 0
  5001  0031E2  D07F               	goto	l1330
  5002  0031E4                     l5164:
  5003                           
  5004                           ; BSR set to: 0
  5005  0031E4  0E00               	movlw	0
  5006  0031E6  0100               	movlb	0	; () banked
  5007  0031E8  6FAE               	movwf	___ftmul@f2& (0+255),b
  5008  0031EA  0E00               	movlw	0
  5009  0031EC  0100               	movlb	0	; () banked
  5010  0031EE  6FAF               	movwf	(___ftmul@f2+1)& (0+255),b
  5011  0031F0  0E40               	movlw	64
  5012  0031F2  0100               	movlb	0	; () banked
  5013  0031F4  6FB0               	movwf	(___ftmul@f2+2)& (0+255),b
  5014  0031F6  0ED5               	movlw	low log@exponent
  5015  0031F8  0100               	movlb	0	; () banked
  5016  0031FA  6FA2               	movwf	frexp@eptr& (0+255),b
  5017  0031FC  0E00               	movlw	high log@exponent
  5018  0031FE  0100               	movlb	0	; () banked
  5019  003200  6FA3               	movwf	(frexp@eptr+1)& (0+255),b
  5020  003202  C0D2  F09F         	movff	log@x,frexp@value
  5021  003206  C0D3  F0A0         	movff	log@x+1,frexp@value+1
  5022  00320A  C0D4  F0A1         	movff	log@x+2,frexp@value+2
  5023  00320E  EC50  F01D         	call	_frexp	;wreg free
  5024  003212  C09F  F0AB         	movff	?_frexp,___ftmul@f1
  5025  003216  C0A0  F0AC         	movff	?_frexp+1,___ftmul@f1+1
  5026  00321A  C0A1  F0AD         	movff	?_frexp+2,___ftmul@f1+2
  5027  00321E  EC83  F017         	call	___ftmul	;wreg free
  5028  003222  C0AB  F0BA         	movff	?___ftmul,___ftadd@f1
  5029  003226  C0AC  F0BB         	movff	?___ftmul+1,___ftadd@f1+1
  5030  00322A  C0AD  F0BC         	movff	?___ftmul+2,___ftadd@f1+2
  5031  00322E  0E00               	movlw	0
  5032  003230  0100               	movlb	0	; () banked
  5033  003232  6FBD               	movwf	___ftadd@f2& (0+255),b
  5034  003234  0E80               	movlw	128
  5035  003236  0100               	movlb	0	; () banked
  5036  003238  6FBE               	movwf	(___ftadd@f2+1)& (0+255),b
  5037  00323A  0EBF               	movlw	191
  5038  00323C  0100               	movlb	0	; () banked
  5039  00323E  6FBF               	movwf	(___ftadd@f2+2)& (0+255),b
  5040  003240  EC15  F011         	call	___ftadd	;wreg free
  5041  003244  C0BA  F0D2         	movff	?___ftadd,log@x
  5042  003248  C0BB  F0D3         	movff	?___ftadd+1,log@x+1
  5043  00324C  C0BC  F0D4         	movff	?___ftadd+2,log@x+2
  5044  003250  0100               	movlb	0	; () banked
  5045  003252  07D5               	decf	log@exponent& (0+255),f,b
  5046  003254  A0D8               	btfss	status,0,c
  5047  003256  07D6               	decf	(log@exponent+1)& (0+255),f,b
  5048                           
  5049                           ; BSR set to: 0
  5050  003258  C0D2  F0C6         	movff	log@x,eval_poly@x
  5051  00325C  C0D3  F0C7         	movff	log@x+1,eval_poly@x+1
  5052  003260  C0D4  F0C8         	movff	log@x+2,eval_poly@x+2
  5053  003264  0E5F               	movlw	low log@coeff
  5054  003266  0100               	movlb	0	; () banked
  5055  003268  6FC9               	movwf	eval_poly@d& (0+255),b
  5056  00326A  0E7D               	movlw	high log@coeff
  5057  00326C  0100               	movlb	0	; () banked
  5058  00326E  6FCA               	movwf	(eval_poly@d+1)& (0+255),b
  5059  003270  0E00               	movlw	0
  5060  003272  0100               	movlb	0	; () banked
  5061  003274  6FCC               	movwf	(eval_poly@n+1)& (0+255),b
  5062  003276  0E08               	movlw	8
  5063  003278  6FCB               	movwf	eval_poly@n& (0+255),b
  5064  00327A  ECAD  F01B         	call	_eval_poly	;wreg free
  5065  00327E  C0C6  F0D2         	movff	?_eval_poly,log@x
  5066  003282  C0C7  F0D3         	movff	?_eval_poly+1,log@x+1
  5067  003286  C0C8  F0D4         	movff	?_eval_poly+2,log@x+2
  5068  00328A  0E72               	movlw	114
  5069  00328C  0100               	movlb	0	; () banked
  5070  00328E  6FAE               	movwf	___ftmul@f2& (0+255),b
  5071  003290  0E31               	movlw	49
  5072  003292  0100               	movlb	0	; () banked
  5073  003294  6FAF               	movwf	(___ftmul@f2+1)& (0+255),b
  5074  003296  0E3F               	movlw	63
  5075  003298  0100               	movlb	0	; () banked
  5076  00329A  6FB0               	movwf	(___ftmul@f2+2)& (0+255),b
  5077  00329C  C0D5  F0A7         	movff	log@exponent,___awtoft@c
  5078  0032A0  C0D6  F0A8         	movff	log@exponent+1,___awtoft@c+1
  5079  0032A4  EC70  F020         	call	___awtoft	;wreg free
  5080  0032A8  C0A7  F0AB         	movff	?___awtoft,___ftmul@f1
  5081  0032AC  C0A8  F0AC         	movff	?___awtoft+1,___ftmul@f1+1
  5082  0032B0  C0A9  F0AD         	movff	?___awtoft+2,___ftmul@f1+2
  5083  0032B4  EC83  F017         	call	___ftmul	;wreg free
  5084  0032B8  C0AB  F0BA         	movff	?___ftmul,___ftadd@f1
  5085  0032BC  C0AC  F0BB         	movff	?___ftmul+1,___ftadd@f1+1
  5086  0032C0  C0AD  F0BC         	movff	?___ftmul+2,___ftadd@f1+2
  5087  0032C4  C0D2  F0BD         	movff	log@x,___ftadd@f2
  5088  0032C8  C0D3  F0BE         	movff	log@x+1,___ftadd@f2+1
  5089  0032CC  C0D4  F0BF         	movff	log@x+2,___ftadd@f2+2
  5090  0032D0  EC15  F011         	call	___ftadd	;wreg free
  5091  0032D4  C0BA  F0D2         	movff	?___ftadd,?_log
  5092  0032D8  C0BB  F0D3         	movff	?___ftadd+1,?_log+1
  5093  0032DC  C0BC  F0D4         	movff	?___ftadd+2,?_log+2
  5094  0032E0  D000               	goto	l1330
  5095  0032E2                     l1330:
  5096  0032E2  0012               	return		;funcret
  5097  0032E4                     __end_of_log:
  5098                           	opt stack 0
  5099                           tblptru	equ	0xFF8
  5100                           tblptrh	equ	0xFF7
  5101                           tblptrl	equ	0xFF6
  5102                           tablat	equ	0xFF5
  5103                           postinc0	equ	0xFEE
  5104                           wreg	equ	0xFE8
  5105                           postdec1	equ	0xFE5
  5106                           plusw1	equ	0xFE3
  5107                           fsr1h	equ	0xFE2
  5108                           fsr1l	equ	0xFE1
  5109                           postinc2	equ	0xFDE
  5110                           postdec2	equ	0xFDD
  5111                           plusw2	equ	0xFDB
  5112                           fsr2h	equ	0xFDA
  5113                           fsr2l	equ	0xFD9
  5114                           status	equ	0xFD8
  5115                           
  5116 ;; *************** function _frexp *****************
  5117 ;; Defined at:
  5118 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  5119 ;; Parameters:    Size  Location     Type
  5120 ;;  value           3   31[BANK0 ] int 
  5121 ;;  eptr            2   34[BANK0 ] PTR int 
  5122 ;;		 -> log@exponent(2), 
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;		None
  5125 ;; Return value:  Size  Location     Type
  5126 ;;                  3   31[BANK0 ] PTR int 
  5127 ;; Registers used:
  5128 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5129 ;; Tracked objects:
  5130 ;;		On entry : 0/0
  5131 ;;		On exit  : 0/0
  5132 ;;		Unchanged: 0/0
  5133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5134 ;;      Params:         0       5       0       0       0       0       0
  5135 ;;      Locals:         0       0       0       0       0       0       0
  5136 ;;      Temps:          0       2       0       0       0       0       0
  5137 ;;      Totals:         0       7       0       0       0       0       0
  5138 ;;Total ram usage:        7 bytes
  5139 ;; Hardware stack levels used:    1
  5140 ;; Hardware stack levels required when called:    5
  5141 ;; This function calls:
  5142 ;;		Nothing
  5143 ;; This function is called by:
  5144 ;;		_log
  5145 ;; This function uses a non-reentrant model
  5146 ;;
  5147                           
  5148                           	psect	text5
  5149  003AA0                     __ptext5:
  5150                           	opt stack 0
  5151  003AA0                     _frexp:
  5152                           	opt stack 23
  5153                           
  5154                           ;incstack = 0
  5155  003AA0  0100               	movlb	0	; () banked
  5156  003AA2  519F               	movf	frexp@value& (0+255),w,b
  5157  003AA4  0100               	movlb	0	; () banked
  5158  003AA6  11A0               	iorwf	(frexp@value+1)& (0+255),w,b
  5159  003AA8  0100               	movlb	0	; () banked
  5160  003AAA  11A1               	iorwf	(frexp@value+2)& (0+255),w,b
  5161  003AAC  A4D8               	btfss	status,2,c
  5162  003AAE  D012               	goto	l4990
  5163                           
  5164                           ; BSR set to: 0
  5165  003AB0  C0A2  FFD9         	movff	frexp@eptr,fsr2l
  5166  003AB4  C0A3  FFDA         	movff	frexp@eptr+1,fsr2h
  5167  003AB8  0E00               	movlw	0
  5168  003ABA  6EDE               	movwf	postinc2,c
  5169  003ABC  0E00               	movlw	0
  5170  003ABE  6EDD               	movwf	postdec2,c
  5171                           
  5172                           ; BSR set to: 0
  5173  003AC0  0E00               	movlw	0
  5174  003AC2  0100               	movlb	0	; () banked
  5175  003AC4  6F9F               	movwf	?_frexp& (0+255),b
  5176  003AC6  0E00               	movlw	0
  5177  003AC8  0100               	movlb	0	; () banked
  5178  003ACA  6FA0               	movwf	(?_frexp+1)& (0+255),b
  5179  003ACC  0E00               	movlw	0
  5180  003ACE  0100               	movlb	0	; () banked
  5181  003AD0  6FA1               	movwf	(?_frexp+2)& (0+255),b
  5182                           
  5183                           ; BSR set to: 0
  5184  003AD2  D03C               	goto	l1430
  5185  003AD4                     l4990:
  5186                           
  5187                           ; BSR set to: 0
  5188  003AD4  0100               	movlb	0	; () banked
  5189  003AD6  51A1               	movf	(frexp@value+2)& (0+255),w,b
  5190  003AD8  0B7F               	andlw	127
  5191  003ADA  0100               	movlb	0	; () banked
  5192  003ADC  6FA4               	movwf	??_frexp& (0+255),b
  5193  003ADE  6BA5               	clrf	(??_frexp+1)& (0+255),b
  5194  003AE0  90D8               	bcf	status,0,c
  5195  003AE2  0100               	movlb	0	; () banked
  5196  003AE4  37A4               	rlcf	??_frexp& (0+255),f,b
  5197  003AE6  37A5               	rlcf	(??_frexp+1)& (0+255),f,b
  5198  003AE8  C0A2  FFD9         	movff	frexp@eptr,fsr2l
  5199  003AEC  C0A3  FFDA         	movff	frexp@eptr+1,fsr2h
  5200  003AF0  C0A4  FFDE         	movff	??_frexp,postinc2
  5201  003AF4  C0A5  FFDD         	movff	??_frexp+1,postdec2
  5202  003AF8  0100               	movlb	0	; () banked
  5203  003AFA  AFA0               	btfss	(frexp@value+1)& (0+255),7,b
  5204  003AFC  D004               	goto	u5420
  5205  003AFE  0100               	movlb	0	; () banked
  5206  003B00  6BA4               	clrf	??_frexp& (0+255),b
  5207  003B02  2BA4               	incf	??_frexp& (0+255),f,b
  5208  003B04  D002               	goto	u5428
  5209  003B06                     u5420:
  5210  003B06  0100               	movlb	0	; () banked
  5211  003B08  6BA4               	clrf	??_frexp& (0+255),b
  5212  003B0A                     u5428:
  5213  003B0A  0100               	movlb	0	; () banked
  5214  003B0C  51A4               	movf	??_frexp& (0+255),w,b
  5215  003B0E  C0A2  FFD9         	movff	frexp@eptr,fsr2l
  5216  003B12  C0A3  FFDA         	movff	frexp@eptr+1,fsr2h
  5217  003B16  12DE               	iorwf	postinc2,f,c
  5218  003B18  0E00               	movlw	0
  5219  003B1A  12DD               	iorwf	postdec2,f,c
  5220                           
  5221                           ; BSR set to: 0
  5222  003B1C  C0A2  FFD9         	movff	frexp@eptr,fsr2l
  5223  003B20  C0A3  FFDA         	movff	frexp@eptr+1,fsr2h
  5224  003B24  0E82               	movlw	130
  5225  003B26  26DE               	addwf	postinc2,f,c
  5226  003B28  0EFF               	movlw	255
  5227  003B2A  22DD               	addwfc	postdec2,f,c
  5228                           
  5229                           ; BSR set to: 0
  5230  003B2C  81A1               	bsf	(frexp@value+2)& (0+255),0,b
  5231  003B2E  83A1               	bsf	(frexp@value+2)& (0+255),1,b
  5232  003B30  85A1               	bsf	(frexp@value+2)& (0+255),2,b
  5233  003B32  87A1               	bsf	(frexp@value+2)& (0+255),3,b
  5234  003B34  89A1               	bsf	(frexp@value+2)& (0+255),4,b
  5235  003B36  8BA1               	bsf	(frexp@value+2)& (0+255),5,b
  5236  003B38  9DA1               	bcf	(frexp@value+2)& (0+255),6,b
  5237                           
  5238                           ; BSR set to: 0
  5239  003B3A  0100               	movlb	0	; () banked
  5240  003B3C  9FA0               	bcf	(frexp@value+1)& (0+255),7,b
  5241                           
  5242                           ; BSR set to: 0
  5243  003B3E  C09F  F09F         	movff	frexp@value,?_frexp
  5244  003B42  C0A0  F0A0         	movff	frexp@value+1,?_frexp+1
  5245  003B46  C0A1  F0A1         	movff	frexp@value+2,?_frexp+2
  5246  003B4A  D000               	goto	l1430
  5247  003B4C                     l1430:
  5248                           
  5249                           ; BSR set to: 0
  5250  003B4C  0012               	return		;funcret
  5251  003B4E                     __end_of_frexp:
  5252                           	opt stack 0
  5253                           tblptru	equ	0xFF8
  5254                           tblptrh	equ	0xFF7
  5255                           tblptrl	equ	0xFF6
  5256                           tablat	equ	0xFF5
  5257                           postinc0	equ	0xFEE
  5258                           wreg	equ	0xFE8
  5259                           postdec1	equ	0xFE5
  5260                           plusw1	equ	0xFE3
  5261                           fsr1h	equ	0xFE2
  5262                           fsr1l	equ	0xFE1
  5263                           postinc2	equ	0xFDE
  5264                           postdec2	equ	0xFDD
  5265                           plusw2	equ	0xFDB
  5266                           fsr2h	equ	0xFDA
  5267                           fsr2l	equ	0xFD9
  5268                           status	equ	0xFD8
  5269                           
  5270 ;; *************** function _eval_poly *****************
  5271 ;; Defined at:
  5272 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;  x               3   70[BANK0 ] PTR int 
  5275 ;;  d               2   73[BANK0 ] PTR const 
  5276 ;;		 -> log@coeff(27), 
  5277 ;;  n               2   75[BANK0 ] int 
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;  res             3   79[BANK0 ] int 
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  3   70[BANK0 ] int 
  5282 ;; Registers used:
  5283 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5284 ;; Tracked objects:
  5285 ;;		On entry : 0/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5289 ;;      Params:         0       7       0       0       0       0       0
  5290 ;;      Locals:         0       3       0       0       0       0       0
  5291 ;;      Temps:          0       2       0       0       0       0       0
  5292 ;;      Totals:         0      12       0       0       0       0       0
  5293 ;;Total ram usage:       12 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; Hardware stack levels required when called:    7
  5296 ;; This function calls:
  5297 ;;		___ftadd
  5298 ;;		___ftmul
  5299 ;;		___wmul
  5300 ;; This function is called by:
  5301 ;;		_log
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           	psect	text6
  5306  00375A                     __ptext6:
  5307                           	opt stack 0
  5308  00375A                     _eval_poly:
  5309                           	opt stack 21
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;incstack = 0
  5313  00375A  C0CB  F09F         	movff	eval_poly@n,___wmul@multiplier
  5314  00375E  C0CC  F0A0         	movff	eval_poly@n+1,___wmul@multiplier+1
  5315  003762  0E00               	movlw	0
  5316  003764  0100               	movlb	0	; () banked
  5317  003766  6FA2               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5318  003768  0E03               	movlw	3
  5319  00376A  6FA1               	movwf	___wmul@multiplicand& (0+255),b
  5320  00376C  ECB7  F020         	call	___wmul	;wreg free
  5321  003770  C0C9  F0CD         	movff	eval_poly@d,??_eval_poly
  5322  003774  C0CA  F0CE         	movff	eval_poly@d+1,??_eval_poly+1
  5323  003778  0100               	movlb	0	; () banked
  5324  00377A  519F               	movf	?___wmul& (0+255),w,b
  5325  00377C  0100               	movlb	0	; () banked
  5326  00377E  27CD               	addwf	??_eval_poly& (0+255),f,b
  5327  003780  0100               	movlb	0	; () banked
  5328  003782  51A0               	movf	(?___wmul+1)& (0+255),w,b
  5329  003784  0100               	movlb	0	; () banked
  5330  003786  23CE               	addwfc	(??_eval_poly+1)& (0+255),f,b
  5331  003788  C0CD  FFF6         	movff	??_eval_poly,tblptrl
  5332  00378C  C0CE  FFF7         	movff	??_eval_poly+1,tblptrh
  5333  003790                     	if	0	;tblptru may be non-zero
  5334  003790                     	endif
  5335  003790                     	if	0	;tblptru may be non-zero
  5336  003790                     	endif
  5337  003790  0009               	tblrd		*+
  5338  003792  CFF5 F0CF          	movff	tablat,eval_poly@res
  5339  003796  0009               	tblrd		*+
  5340  003798  CFF5 F0D0          	movff	tablat,eval_poly@res+1
  5341  00379C  000A               	tblrd		*-
  5342  00379E  CFF5 F0D1          	movff	tablat,eval_poly@res+2
  5343  0037A2  D045               	goto	l5006
  5344  0037A4                     l5004:
  5345                           
  5346                           ; BSR set to: 0
  5347  0037A4  C0CF  F0AE         	movff	eval_poly@res,___ftmul@f2
  5348  0037A8  C0D0  F0AF         	movff	eval_poly@res+1,___ftmul@f2+1
  5349  0037AC  C0D1  F0B0         	movff	eval_poly@res+2,___ftmul@f2+2
  5350  0037B0  C0C6  F0AB         	movff	eval_poly@x,___ftmul@f1
  5351  0037B4  C0C7  F0AC         	movff	eval_poly@x+1,___ftmul@f1+1
  5352  0037B8  C0C8  F0AD         	movff	eval_poly@x+2,___ftmul@f1+2
  5353  0037BC  EC83  F017         	call	___ftmul	;wreg free
  5354  0037C0  C0AB  F0BA         	movff	?___ftmul,___ftadd@f1
  5355  0037C4  C0AC  F0BB         	movff	?___ftmul+1,___ftadd@f1+1
  5356  0037C8  C0AD  F0BC         	movff	?___ftmul+2,___ftadd@f1+2
  5357  0037CC  0E00               	movlw	0
  5358  0037CE  0100               	movlb	0	; () banked
  5359  0037D0  6FA2               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5360  0037D2  0E03               	movlw	3
  5361  0037D4  6FA1               	movwf	___wmul@multiplicand& (0+255),b
  5362  0037D6  0100               	movlb	0	; () banked
  5363  0037D8  07CB               	decf	eval_poly@n& (0+255),f,b
  5364  0037DA  A0D8               	btfss	status,0,c
  5365  0037DC  07CC               	decf	(eval_poly@n+1)& (0+255),f,b
  5366  0037DE  C0CB  F09F         	movff	eval_poly@n,___wmul@multiplier
  5367  0037E2  C0CC  F0A0         	movff	eval_poly@n+1,___wmul@multiplier+1
  5368  0037E6  ECB7  F020         	call	___wmul	;wreg free
  5369  0037EA  C0C9  F0CD         	movff	eval_poly@d,??_eval_poly
  5370  0037EE  C0CA  F0CE         	movff	eval_poly@d+1,??_eval_poly+1
  5371  0037F2  0100               	movlb	0	; () banked
  5372  0037F4  519F               	movf	?___wmul& (0+255),w,b
  5373  0037F6  0100               	movlb	0	; () banked
  5374  0037F8  27CD               	addwf	??_eval_poly& (0+255),f,b
  5375  0037FA  0100               	movlb	0	; () banked
  5376  0037FC  51A0               	movf	(?___wmul+1)& (0+255),w,b
  5377  0037FE  0100               	movlb	0	; () banked
  5378  003800  23CE               	addwfc	(??_eval_poly+1)& (0+255),f,b
  5379  003802  C0CD  FFF6         	movff	??_eval_poly,tblptrl
  5380  003806  C0CE  FFF7         	movff	??_eval_poly+1,tblptrh
  5381  00380A                     	if	0	;tblptru may be non-zero
  5382  00380A                     	endif
  5383  00380A                     	if	0	;tblptru may be non-zero
  5384  00380A                     	endif
  5385  00380A  0009               	tblrd		*+
  5386  00380C  CFF5 F0BD          	movff	tablat,___ftadd@f2
  5387  003810  0009               	tblrd		*+
  5388  003812  CFF5 F0BE          	movff	tablat,___ftadd@f2+1
  5389  003816  000A               	tblrd		*-
  5390  003818  CFF5 F0BF          	movff	tablat,___ftadd@f2+2
  5391  00381C  EC15  F011         	call	___ftadd	;wreg free
  5392  003820  C0BA  F0CF         	movff	?___ftadd,eval_poly@res
  5393  003824  C0BB  F0D0         	movff	?___ftadd+1,eval_poly@res+1
  5394  003828  C0BC  F0D1         	movff	?___ftadd+2,eval_poly@res+2
  5395  00382C  D000               	goto	l5006
  5396  00382E                     l5006:
  5397  00382E  0100               	movlb	0	; () banked
  5398  003830  51CB               	movf	eval_poly@n& (0+255),w,b
  5399  003832  0100               	movlb	0	; () banked
  5400  003834  11CC               	iorwf	(eval_poly@n+1)& (0+255),w,b
  5401  003836  A4D8               	btfss	status,2,c
  5402  003838  D7B5               	goto	l5004
  5403                           
  5404                           ; BSR set to: 0
  5405  00383A  C0CF  F0C6         	movff	eval_poly@res,?_eval_poly
  5406  00383E  C0D0  F0C7         	movff	eval_poly@res+1,?_eval_poly+1
  5407  003842  C0D1  F0C8         	movff	eval_poly@res+2,?_eval_poly+2
  5408                           
  5409                           ; BSR set to: 0
  5410  003846  0012               	return		;funcret
  5411  003848                     __end_of_eval_poly:
  5412                           	opt stack 0
  5413                           tblptru	equ	0xFF8
  5414                           tblptrh	equ	0xFF7
  5415                           tblptrl	equ	0xFF6
  5416                           tablat	equ	0xFF5
  5417                           postinc0	equ	0xFEE
  5418                           wreg	equ	0xFE8
  5419                           postdec1	equ	0xFE5
  5420                           plusw1	equ	0xFE3
  5421                           fsr1h	equ	0xFE2
  5422                           fsr1l	equ	0xFE1
  5423                           postinc2	equ	0xFDE
  5424                           postdec2	equ	0xFDD
  5425                           plusw2	equ	0xFDB
  5426                           fsr2h	equ	0xFDA
  5427                           fsr2l	equ	0xFD9
  5428                           status	equ	0xFD8
  5429                           
  5430 ;; *************** function _fix_fft *****************
  5431 ;; Defined at:
  5432 ;;		line 52 in file "fft.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;  fr              2   43[BANK0 ] PTR short 
  5435 ;;		 -> cmYreal(256), 
  5436 ;;  fi              2   45[BANK0 ] PTR short 
  5437 ;;		 -> cmYimag(256), 
  5438 ;;  m               2   47[BANK0 ] short 
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;  c               4   46[BANK1 ] long 
  5441 ;;  b               2   28[BANK1 ] short 
  5442 ;;  j               4   42[BANK1 ] long 
  5443 ;;  l               4   38[BANK1 ] long 
  5444 ;;  mr              4   34[BANK1 ] long 
  5445 ;;  i               4   30[BANK1 ] long 
  5446 ;;  n               4   20[BANK1 ] long 
  5447 ;;  istep           4    8[BANK1 ] long 
  5448 ;;  nn              4    4[BANK1 ] long 
  5449 ;;  k               4    0[BANK1 ] long 
  5450 ;;  shift           4    0        long 
  5451 ;;  ti              2   26[BANK1 ] short 
  5452 ;;  tr              2   24[BANK1 ] short 
  5453 ;;  wi              2   18[BANK1 ] short 
  5454 ;;  wr              2   16[BANK1 ] short 
  5455 ;;  qi              2   14[BANK1 ] short 
  5456 ;;  qr              2   12[BANK1 ] short 
  5457 ;; Return value:  Size  Location     Type
  5458 ;;		None               void
  5459 ;; Registers used:
  5460 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5466 ;;      Params:         0       6       0       0       0       0       0
  5467 ;;      Locals:         0       0      50       0       0       0       0
  5468 ;;      Temps:          0       8       0       0       0       0       0
  5469 ;;      Totals:         0      14      50       0       0       0       0
  5470 ;;Total ram usage:       64 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:    6
  5473 ;; This function calls:
  5474 ;;		___lmul
  5475 ;; This function is called by:
  5476 ;;		_cmFftFun
  5477 ;; This function uses a non-reentrant model
  5478 ;;
  5479                           
  5480                           	psect	text7
  5481  000188                     __ptext7:
  5482                           	opt stack 0
  5483  000188                     _fix_fft:
  5484                           	opt stack 22
  5485                           
  5486                           ;fft.c: 54: long int mr = 0, nn, i, j, l, k, istep, n, shift;
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;incstack = 0
  5490  000188  0E00               	movlw	0
  5491  00018A  0101               	movlb	1	; () banked
  5492  00018C  6F78               	movwf	fix_fft@mr& (0+255),b
  5493  00018E  0E00               	movlw	0
  5494  000190  6F79               	movwf	(fix_fft@mr+1)& (0+255),b
  5495  000192  0E00               	movlw	0
  5496  000194  6F7A               	movwf	(fix_fft@mr+2)& (0+255),b
  5497  000196  0E00               	movlw	0
  5498  000198  6F7B               	movwf	(fix_fft@mr+3)& (0+255),b
  5499                           
  5500                           ; BSR set to: 1
  5501                           ;fft.c: 55: short qr, qi, tr, ti, wr, wi;
  5502                           ;fft.c: 57: n = 1 << m;
  5503  00019A  C0AF  F0B1         	movff	fix_fft@m,??_fix_fft
  5504  00019E  0E01               	movlw	1
  5505  0001A0  0100               	movlb	0	; () banked
  5506  0001A2  6FB2               	movwf	(??_fix_fft+1)& (0+255),b
  5507  0001A4  0E00               	movlw	0
  5508  0001A6  0100               	movlb	0	; () banked
  5509  0001A8  6FB3               	movwf	(??_fix_fft+2)& (0+255),b
  5510  0001AA  0100               	movlb	0	; () banked
  5511  0001AC  2BB1               	incf	??_fix_fft& (0+255),f,b
  5512  0001AE  D004               	goto	u5764
  5513  0001B0                     u5765:
  5514  0001B0  90D8               	bcf	status,0,c
  5515  0001B2  0100               	movlb	0	; () banked
  5516  0001B4  37B2               	rlcf	(??_fix_fft+1)& (0+255),f,b
  5517  0001B6  37B3               	rlcf	(??_fix_fft+2)& (0+255),f,b
  5518  0001B8                     u5764:
  5519  0001B8  0100               	movlb	0	; () banked
  5520  0001BA  2FB1               	decfsz	??_fix_fft& (0+255),f,b
  5521  0001BC  D7F9               	goto	u5765
  5522  0001BE  C0B2  F16A         	movff	??_fix_fft+1,fix_fft@n
  5523  0001C2  C0B3  F16B         	movff	??_fix_fft+2,fix_fft@n+1
  5524  0001C6  0101               	movlb	1	; () banked
  5525  0001C8  0E00               	movlw	0
  5526  0001CA  BF6B               	btfsc	(fix_fft@n+1)& (0+255),7,b
  5527  0001CC  0EFF               	movlw	-1
  5528  0001CE  6F6C               	movwf	(fix_fft@n+2)& (0+255),b
  5529  0001D0  6F6D               	movwf	(fix_fft@n+3)& (0+255),b
  5530                           
  5531                           ; BSR set to: 1
  5532                           ;fft.c: 58: nn = n - 1;
  5533  0001D2  0EFF               	movlw	255
  5534  0001D4  0101               	movlb	1	; () banked
  5535  0001D6  256A               	addwf	fix_fft@n& (0+255),w,b
  5536  0001D8  0101               	movlb	1	; () banked
  5537  0001DA  6F5A               	movwf	fix_fft@nn& (0+255),b
  5538  0001DC  0EFF               	movlw	255
  5539  0001DE  0101               	movlb	1	; () banked
  5540  0001E0  216B               	addwfc	(fix_fft@n+1)& (0+255),w,b
  5541  0001E2  0101               	movlb	1	; () banked
  5542  0001E4  6F5B               	movwf	(fix_fft@nn+1)& (0+255),b
  5543  0001E6  0EFF               	movlw	255
  5544  0001E8  0101               	movlb	1	; () banked
  5545  0001EA  216C               	addwfc	(fix_fft@n+2)& (0+255),w,b
  5546  0001EC  0101               	movlb	1	; () banked
  5547  0001EE  6F5C               	movwf	(fix_fft@nn+2)& (0+255),b
  5548  0001F0  0EFF               	movlw	255
  5549  0001F2  0101               	movlb	1	; () banked
  5550  0001F4  216D               	addwfc	(fix_fft@n+3)& (0+255),w,b
  5551  0001F6  0101               	movlb	1	; () banked
  5552  0001F8  6F5D               	movwf	(fix_fft@nn+3)& (0+255),b
  5553                           
  5554                           ;fft.c: 64: for (m=1; m<=nn; ++m)
  5555  0001FA  0E00               	movlw	0
  5556  0001FC  0100               	movlb	0	; () banked
  5557  0001FE  6FB0               	movwf	(fix_fft@m+1)& (0+255),b
  5558  000200  0E01               	movlw	1
  5559  000202  6FAF               	movwf	fix_fft@m& (0+255),b
  5560  000204  D12C               	goto	l5198
  5561  000206                     l613:
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;fft.c: 65: {
  5565                           ;fft.c: 66: l = n;
  5566  000206  C16A  F17C         	movff	fix_fft@n,fix_fft@l
  5567  00020A  C16B  F17D         	movff	fix_fft@n+1,fix_fft@l+1
  5568  00020E  C16C  F17E         	movff	fix_fft@n+2,fix_fft@l+2
  5569  000212  C16D  F17F         	movff	fix_fft@n+3,fix_fft@l+3
  5570  000216  D000               	goto	l5180
  5571  000218                     l5180:
  5572                           
  5573                           ; BSR set to: 0
  5574                           ;fft.c: 68: {
  5575                           ;fft.c: 69: l >>= 1;
  5576  000218  0101               	movlb	1	; () banked
  5577  00021A  357F               	rlcf	(fix_fft@l+3)& (0+255),w,b
  5578  00021C  337F               	rrcf	(fix_fft@l+3)& (0+255),f,b
  5579  00021E  337E               	rrcf	(fix_fft@l+2)& (0+255),f,b
  5580  000220  337D               	rrcf	(fix_fft@l+1)& (0+255),f,b
  5581  000222  337C               	rrcf	fix_fft@l& (0+255),f,b
  5582                           
  5583                           ;fft.c: 70: } while (mr+l > nn);
  5584  000224  0101               	movlb	1	; () banked
  5585  000226  517C               	movf	fix_fft@l& (0+255),w,b
  5586  000228  0101               	movlb	1	; () banked
  5587  00022A  2578               	addwf	fix_fft@mr& (0+255),w,b
  5588  00022C  0100               	movlb	0	; () banked
  5589  00022E  6FB1               	movwf	??_fix_fft& (0+255),b
  5590  000230  0101               	movlb	1	; () banked
  5591  000232  517D               	movf	(fix_fft@l+1)& (0+255),w,b
  5592  000234  0101               	movlb	1	; () banked
  5593  000236  2179               	addwfc	(fix_fft@mr+1)& (0+255),w,b
  5594  000238  0100               	movlb	0	; () banked
  5595  00023A  6FB2               	movwf	(??_fix_fft+1)& (0+255),b
  5596  00023C  0101               	movlb	1	; () banked
  5597  00023E  517E               	movf	(fix_fft@l+2)& (0+255),w,b
  5598  000240  0101               	movlb	1	; () banked
  5599  000242  217A               	addwfc	(fix_fft@mr+2)& (0+255),w,b
  5600  000244  0100               	movlb	0	; () banked
  5601  000246  6FB3               	movwf	(??_fix_fft+2)& (0+255),b
  5602  000248  0101               	movlb	1	; () banked
  5603  00024A  517F               	movf	(fix_fft@l+3)& (0+255),w,b
  5604  00024C  0101               	movlb	1	; () banked
  5605  00024E  217B               	addwfc	(fix_fft@mr+3)& (0+255),w,b
  5606  000250  0100               	movlb	0	; () banked
  5607  000252  6FB4               	movwf	(??_fix_fft+3)& (0+255),b
  5608  000254  0100               	movlb	0	; () banked
  5609  000256  51B1               	movf	??_fix_fft& (0+255),w,b
  5610  000258  0101               	movlb	1	; () banked
  5611  00025A  5D5A               	subwf	fix_fft@nn& (0+255),w,b
  5612  00025C  0100               	movlb	0	; () banked
  5613  00025E  51B2               	movf	(??_fix_fft+1)& (0+255),w,b
  5614  000260  0101               	movlb	1	; () banked
  5615  000262  595B               	subwfb	(fix_fft@nn+1)& (0+255),w,b
  5616  000264  0100               	movlb	0	; () banked
  5617  000266  51B3               	movf	(??_fix_fft+2)& (0+255),w,b
  5618  000268  0101               	movlb	1	; () banked
  5619  00026A  595C               	subwfb	(fix_fft@nn+2)& (0+255),w,b
  5620  00026C  0101               	movlb	1	; () banked
  5621  00026E  515D               	movf	(fix_fft@nn+3)& (0+255),w,b
  5622  000270  0A80               	xorlw	128
  5623  000272  0100               	movlb	0	; () banked
  5624  000274  6FB5               	movwf	(??_fix_fft+4)& (0+255),b
  5625  000276  0100               	movlb	0	; () banked
  5626  000278  51B4               	movf	(??_fix_fft+3)& (0+255),w,b
  5627  00027A  0A80               	xorlw	128
  5628  00027C  0100               	movlb	0	; () banked
  5629  00027E  59B5               	subwfb	(??_fix_fft+4)& (0+255),w,b
  5630  000280  A0D8               	btfss	status,0,c
  5631  000282  D7CA               	goto	l5180
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;fft.c: 72: mr = (mr & (l-1)) + l;
  5635                           
  5636                           ; BSR set to: 0
  5637  000284  0EFF               	movlw	255
  5638  000286  0101               	movlb	1	; () banked
  5639  000288  257C               	addwf	fix_fft@l& (0+255),w,b
  5640  00028A  0100               	movlb	0	; () banked
  5641  00028C  6FB1               	movwf	??_fix_fft& (0+255),b
  5642  00028E  0EFF               	movlw	255
  5643  000290  0101               	movlb	1	; () banked
  5644  000292  217D               	addwfc	(fix_fft@l+1)& (0+255),w,b
  5645  000294  0100               	movlb	0	; () banked
  5646  000296  6FB2               	movwf	(??_fix_fft+1)& (0+255),b
  5647  000298  0EFF               	movlw	255
  5648  00029A  0101               	movlb	1	; () banked
  5649  00029C  217E               	addwfc	(fix_fft@l+2)& (0+255),w,b
  5650  00029E  0100               	movlb	0	; () banked
  5651  0002A0  6FB3               	movwf	(??_fix_fft+2)& (0+255),b
  5652  0002A2  0EFF               	movlw	255
  5653  0002A4  0101               	movlb	1	; () banked
  5654  0002A6  217F               	addwfc	(fix_fft@l+3)& (0+255),w,b
  5655  0002A8  0100               	movlb	0	; () banked
  5656  0002AA  6FB4               	movwf	(??_fix_fft+3)& (0+255),b
  5657  0002AC  0101               	movlb	1	; () banked
  5658  0002AE  5178               	movf	fix_fft@mr& (0+255),w,b
  5659  0002B0  0100               	movlb	0	; () banked
  5660  0002B2  15B1               	andwf	??_fix_fft& (0+255),w,b
  5661  0002B4  0100               	movlb	0	; () banked
  5662  0002B6  6FB5               	movwf	(??_fix_fft+4)& (0+255),b
  5663  0002B8  0101               	movlb	1	; () banked
  5664  0002BA  5179               	movf	(fix_fft@mr+1)& (0+255),w,b
  5665  0002BC  0100               	movlb	0	; () banked
  5666  0002BE  15B2               	andwf	(??_fix_fft+1)& (0+255),w,b
  5667  0002C0  0100               	movlb	0	; () banked
  5668  0002C2  6FB6               	movwf	(??_fix_fft+5)& (0+255),b
  5669  0002C4  0101               	movlb	1	; () banked
  5670  0002C6  517A               	movf	(fix_fft@mr+2)& (0+255),w,b
  5671  0002C8  0100               	movlb	0	; () banked
  5672  0002CA  15B3               	andwf	(??_fix_fft+2)& (0+255),w,b
  5673  0002CC  0100               	movlb	0	; () banked
  5674  0002CE  6FB7               	movwf	(??_fix_fft+6)& (0+255),b
  5675  0002D0  0101               	movlb	1	; () banked
  5676  0002D2  517B               	movf	(fix_fft@mr+3)& (0+255),w,b
  5677  0002D4  0100               	movlb	0	; () banked
  5678  0002D6  15B4               	andwf	(??_fix_fft+3)& (0+255),w,b
  5679  0002D8  0100               	movlb	0	; () banked
  5680  0002DA  6FB8               	movwf	(??_fix_fft+7)& (0+255),b
  5681  0002DC  0101               	movlb	1	; () banked
  5682  0002DE  517C               	movf	fix_fft@l& (0+255),w,b
  5683  0002E0  0100               	movlb	0	; () banked
  5684  0002E2  25B5               	addwf	(??_fix_fft+4)& (0+255),w,b
  5685  0002E4  0101               	movlb	1	; () banked
  5686  0002E6  6F78               	movwf	fix_fft@mr& (0+255),b
  5687  0002E8  0101               	movlb	1	; () banked
  5688  0002EA  517D               	movf	(fix_fft@l+1)& (0+255),w,b
  5689  0002EC  0100               	movlb	0	; () banked
  5690  0002EE  21B6               	addwfc	(??_fix_fft+5)& (0+255),w,b
  5691  0002F0  0101               	movlb	1	; () banked
  5692  0002F2  6F79               	movwf	(fix_fft@mr+1)& (0+255),b
  5693  0002F4  0101               	movlb	1	; () banked
  5694  0002F6  517E               	movf	(fix_fft@l+2)& (0+255),w,b
  5695  0002F8  0100               	movlb	0	; () banked
  5696  0002FA  21B7               	addwfc	(??_fix_fft+6)& (0+255),w,b
  5697  0002FC  0101               	movlb	1	; () banked
  5698  0002FE  6F7A               	movwf	(fix_fft@mr+2)& (0+255),b
  5699  000300  0101               	movlb	1	; () banked
  5700  000302  517F               	movf	(fix_fft@l+3)& (0+255),w,b
  5701  000304  0100               	movlb	0	; () banked
  5702  000306  21B8               	addwfc	(??_fix_fft+7)& (0+255),w,b
  5703  000308  0101               	movlb	1	; () banked
  5704  00030A  6F7B               	movwf	(fix_fft@mr+3)& (0+255),b
  5705                           
  5706                           ;fft.c: 73: if (mr <= m) continue;
  5707  00030C  C0AF  F0B1         	movff	fix_fft@m,??_fix_fft
  5708  000310  C0B0  F0B2         	movff	fix_fft@m+1,??_fix_fft+1
  5709  000314  0E00               	movlw	0
  5710  000316  0100               	movlb	0	; () banked
  5711  000318  BFB2               	btfsc	(??_fix_fft+1)& (0+255),7,b
  5712  00031A  0EFF               	movlw	255
  5713  00031C  6FB3               	movwf	(??_fix_fft+2)& (0+255),b
  5714  00031E  6FB4               	movwf	(??_fix_fft+3)& (0+255),b
  5715  000320  0101               	movlb	1	; () banked
  5716  000322  5178               	movf	fix_fft@mr& (0+255),w,b
  5717  000324  0100               	movlb	0	; () banked
  5718  000326  5DB1               	subwf	??_fix_fft& (0+255),w,b
  5719  000328  0101               	movlb	1	; () banked
  5720  00032A  5179               	movf	(fix_fft@mr+1)& (0+255),w,b
  5721  00032C  0100               	movlb	0	; () banked
  5722  00032E  59B2               	subwfb	(??_fix_fft+1)& (0+255),w,b
  5723  000330  0101               	movlb	1	; () banked
  5724  000332  517A               	movf	(fix_fft@mr+2)& (0+255),w,b
  5725  000334  0100               	movlb	0	; () banked
  5726  000336  59B3               	subwfb	(??_fix_fft+2)& (0+255),w,b
  5727  000338  0100               	movlb	0	; () banked
  5728  00033A  51B4               	movf	(??_fix_fft+3)& (0+255),w,b
  5729  00033C  0A80               	xorlw	128
  5730  00033E  0100               	movlb	0	; () banked
  5731  000340  6FB5               	movwf	(??_fix_fft+4)& (0+255),b
  5732  000342  0101               	movlb	1	; () banked
  5733  000344  517B               	movf	(fix_fft@mr+3)& (0+255),w,b
  5734  000346  0A80               	xorlw	128
  5735  000348  0100               	movlb	0	; () banked
  5736  00034A  59B5               	subwfb	(??_fix_fft+4)& (0+255),w,b
  5737  00034C  B0D8               	btfsc	status,0,c
  5738  00034E  D083               	goto	l5196
  5739  000350  D001               	goto	l5186
  5740                           
  5741                           ; BSR set to: 0
  5742  000352  D081               	goto	l5196
  5743  000354                     l5186:
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;fft.c: 75: tr = fr[m];
  5747  000354  90D8               	bcf	status,0,c
  5748  000356  0100               	movlb	0	; () banked
  5749  000358  35AF               	rlcf	fix_fft@m& (0+255),w,b
  5750  00035A  6ED9               	movwf	fsr2l,c
  5751  00035C  0100               	movlb	0	; () banked
  5752  00035E  35B0               	rlcf	(fix_fft@m+1)& (0+255),w,b
  5753  000360  6EDA               	movwf	fsr2h,c
  5754  000362  0100               	movlb	0	; () banked
  5755  000364  51AB               	movf	fix_fft@fr& (0+255),w,b
  5756  000366  26D9               	addwf	fsr2l,f,c
  5757  000368  0100               	movlb	0	; () banked
  5758  00036A  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  5759  00036C  22DA               	addwfc	fsr2h,f,c
  5760  00036E  CFDE F16E          	movff	postinc2,fix_fft@tr
  5761  000372  CFDD F16F          	movff	postdec2,fix_fft@tr+1
  5762                           
  5763                           ; BSR set to: 0
  5764                           ;fft.c: 76: fr[m] = fr[mr];
  5765  000376  90D8               	bcf	status,0,c
  5766  000378  0101               	movlb	1	; () banked
  5767  00037A  3578               	rlcf	fix_fft@mr& (0+255),w,b
  5768  00037C  6ED9               	movwf	fsr2l,c
  5769  00037E  0101               	movlb	1	; () banked
  5770  000380  3579               	rlcf	(fix_fft@mr+1)& (0+255),w,b
  5771  000382  6EDA               	movwf	fsr2h,c
  5772  000384  0100               	movlb	0	; () banked
  5773  000386  51AB               	movf	fix_fft@fr& (0+255),w,b
  5774  000388  26D9               	addwf	fsr2l,f,c
  5775  00038A  0100               	movlb	0	; () banked
  5776  00038C  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  5777  00038E  22DA               	addwfc	fsr2h,f,c
  5778  000390  90D8               	bcf	status,0,c
  5779  000392  0100               	movlb	0	; () banked
  5780  000394  35AF               	rlcf	fix_fft@m& (0+255),w,b
  5781  000396  6EE1               	movwf	fsr1l,c
  5782  000398  0100               	movlb	0	; () banked
  5783  00039A  35B0               	rlcf	(fix_fft@m+1)& (0+255),w,b
  5784  00039C  6EE2               	movwf	fsr1h,c
  5785  00039E  0100               	movlb	0	; () banked
  5786  0003A0  51AB               	movf	fix_fft@fr& (0+255),w,b
  5787  0003A2  26E1               	addwf	fsr1l,f,c
  5788  0003A4  0100               	movlb	0	; () banked
  5789  0003A6  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  5790  0003A8  22E2               	addwfc	fsr1h,f,c
  5791  0003AA  CFDE FFE6          	movff	postinc2,postinc1
  5792  0003AE  CFDD FFE5          	movff	postdec2,postdec1
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;fft.c: 77: fr[mr] = tr;
  5796  0003B2  90D8               	bcf	status,0,c
  5797  0003B4  0101               	movlb	1	; () banked
  5798  0003B6  3578               	rlcf	fix_fft@mr& (0+255),w,b
  5799  0003B8  6ED9               	movwf	fsr2l,c
  5800  0003BA  0101               	movlb	1	; () banked
  5801  0003BC  3579               	rlcf	(fix_fft@mr+1)& (0+255),w,b
  5802  0003BE  6EDA               	movwf	fsr2h,c
  5803  0003C0  0100               	movlb	0	; () banked
  5804  0003C2  51AB               	movf	fix_fft@fr& (0+255),w,b
  5805  0003C4  26D9               	addwf	fsr2l,f,c
  5806  0003C6  0100               	movlb	0	; () banked
  5807  0003C8  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  5808  0003CA  22DA               	addwfc	fsr2h,f,c
  5809  0003CC  C16E  FFDE         	movff	fix_fft@tr,postinc2
  5810  0003D0  C16F  FFDD         	movff	fix_fft@tr+1,postdec2
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;fft.c: 78: ti = fi[m];
  5814  0003D4  90D8               	bcf	status,0,c
  5815  0003D6  0100               	movlb	0	; () banked
  5816  0003D8  35AF               	rlcf	fix_fft@m& (0+255),w,b
  5817  0003DA  6ED9               	movwf	fsr2l,c
  5818  0003DC  0100               	movlb	0	; () banked
  5819  0003DE  35B0               	rlcf	(fix_fft@m+1)& (0+255),w,b
  5820  0003E0  6EDA               	movwf	fsr2h,c
  5821  0003E2  0100               	movlb	0	; () banked
  5822  0003E4  51AD               	movf	fix_fft@fi& (0+255),w,b
  5823  0003E6  26D9               	addwf	fsr2l,f,c
  5824  0003E8  0100               	movlb	0	; () banked
  5825  0003EA  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  5826  0003EC  22DA               	addwfc	fsr2h,f,c
  5827  0003EE  CFDE F170          	movff	postinc2,fix_fft@ti
  5828  0003F2  CFDD F171          	movff	postdec2,fix_fft@ti+1
  5829                           
  5830                           ; BSR set to: 0
  5831                           ;fft.c: 79: fi[m] = fi[mr];
  5832  0003F6  90D8               	bcf	status,0,c
  5833  0003F8  0101               	movlb	1	; () banked
  5834  0003FA  3578               	rlcf	fix_fft@mr& (0+255),w,b
  5835  0003FC  6ED9               	movwf	fsr2l,c
  5836  0003FE  0101               	movlb	1	; () banked
  5837  000400  3579               	rlcf	(fix_fft@mr+1)& (0+255),w,b
  5838  000402  6EDA               	movwf	fsr2h,c
  5839  000404  0100               	movlb	0	; () banked
  5840  000406  51AD               	movf	fix_fft@fi& (0+255),w,b
  5841  000408  26D9               	addwf	fsr2l,f,c
  5842  00040A  0100               	movlb	0	; () banked
  5843  00040C  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  5844  00040E  22DA               	addwfc	fsr2h,f,c
  5845  000410  90D8               	bcf	status,0,c
  5846  000412  0100               	movlb	0	; () banked
  5847  000414  35AF               	rlcf	fix_fft@m& (0+255),w,b
  5848  000416  6EE1               	movwf	fsr1l,c
  5849  000418  0100               	movlb	0	; () banked
  5850  00041A  35B0               	rlcf	(fix_fft@m+1)& (0+255),w,b
  5851  00041C  6EE2               	movwf	fsr1h,c
  5852  00041E  0100               	movlb	0	; () banked
  5853  000420  51AD               	movf	fix_fft@fi& (0+255),w,b
  5854  000422  26E1               	addwf	fsr1l,f,c
  5855  000424  0100               	movlb	0	; () banked
  5856  000426  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  5857  000428  22E2               	addwfc	fsr1h,f,c
  5858  00042A  CFDE FFE6          	movff	postinc2,postinc1
  5859  00042E  CFDD FFE5          	movff	postdec2,postdec1
  5860                           
  5861                           ;fft.c: 80: fi[mr] = ti;
  5862  000432  90D8               	bcf	status,0,c
  5863  000434  0101               	movlb	1	; () banked
  5864  000436  3578               	rlcf	fix_fft@mr& (0+255),w,b
  5865  000438  6ED9               	movwf	fsr2l,c
  5866  00043A  0101               	movlb	1	; () banked
  5867  00043C  3579               	rlcf	(fix_fft@mr+1)& (0+255),w,b
  5868  00043E  6EDA               	movwf	fsr2h,c
  5869  000440  0100               	movlb	0	; () banked
  5870  000442  51AD               	movf	fix_fft@fi& (0+255),w,b
  5871  000444  26D9               	addwf	fsr2l,f,c
  5872  000446  0100               	movlb	0	; () banked
  5873  000448  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  5874  00044A  22DA               	addwfc	fsr2h,f,c
  5875  00044C  C170  FFDE         	movff	fix_fft@ti,postinc2
  5876  000450  C171  FFDD         	movff	fix_fft@ti+1,postdec2
  5877  000454  D000               	goto	l5196
  5878  000456                     l5196:
  5879                           
  5880                           ; BSR set to: 0
  5881  000456  0100               	movlb	0	; () banked
  5882  000458  4BAF               	infsnz	fix_fft@m& (0+255),f,b
  5883  00045A  2BB0               	incf	(fix_fft@m+1)& (0+255),f,b
  5884  00045C  D000               	goto	l5198
  5885  00045E                     l5198:
  5886                           
  5887                           ; BSR set to: 0
  5888  00045E  C0AF  F0B1         	movff	fix_fft@m,??_fix_fft
  5889  000462  C0B0  F0B2         	movff	fix_fft@m+1,??_fix_fft+1
  5890  000466  0E00               	movlw	0
  5891  000468  0100               	movlb	0	; () banked
  5892  00046A  BFB2               	btfsc	(??_fix_fft+1)& (0+255),7,b
  5893  00046C  0EFF               	movlw	255
  5894  00046E  6FB3               	movwf	(??_fix_fft+2)& (0+255),b
  5895  000470  6FB4               	movwf	(??_fix_fft+3)& (0+255),b
  5896  000472  0100               	movlb	0	; () banked
  5897  000474  51B1               	movf	??_fix_fft& (0+255),w,b
  5898  000476  0101               	movlb	1	; () banked
  5899  000478  5D5A               	subwf	fix_fft@nn& (0+255),w,b
  5900  00047A  0100               	movlb	0	; () banked
  5901  00047C  51B2               	movf	(??_fix_fft+1)& (0+255),w,b
  5902  00047E  0101               	movlb	1	; () banked
  5903  000480  595B               	subwfb	(fix_fft@nn+1)& (0+255),w,b
  5904  000482  0100               	movlb	0	; () banked
  5905  000484  51B3               	movf	(??_fix_fft+2)& (0+255),w,b
  5906  000486  0101               	movlb	1	; () banked
  5907  000488  595C               	subwfb	(fix_fft@nn+2)& (0+255),w,b
  5908  00048A  0101               	movlb	1	; () banked
  5909  00048C  515D               	movf	(fix_fft@nn+3)& (0+255),w,b
  5910  00048E  0A80               	xorlw	128
  5911  000490  0100               	movlb	0	; () banked
  5912  000492  6FB5               	movwf	(??_fix_fft+4)& (0+255),b
  5913  000494  0100               	movlb	0	; () banked
  5914  000496  51B4               	movf	(??_fix_fft+3)& (0+255),w,b
  5915  000498  0A80               	xorlw	128
  5916  00049A  0100               	movlb	0	; () banked
  5917  00049C  59B5               	subwfb	(??_fix_fft+4)& (0+255),w,b
  5918  00049E  B0D8               	btfsc	status,0,c
  5919  0004A0  D6B2               	goto	l613
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;fft.c: 81: }
  5923                           ;fft.c: 83: l = 1;
  5924                           
  5925                           ; BSR set to: 0
  5926  0004A2  0E01               	movlw	1
  5927  0004A4  0101               	movlb	1	; () banked
  5928  0004A6  6F7C               	movwf	fix_fft@l& (0+255),b
  5929  0004A8  0E00               	movlw	0
  5930  0004AA  6F7D               	movwf	(fix_fft@l+1)& (0+255),b
  5931  0004AC  0E00               	movlw	0
  5932  0004AE  6F7E               	movwf	(fix_fft@l+2)& (0+255),b
  5933  0004B0  0E00               	movlw	0
  5934  0004B2  6F7F               	movwf	(fix_fft@l+3)& (0+255),b
  5935                           
  5936                           ;fft.c: 84: k = 10-1;
  5937  0004B4  0E09               	movlw	9
  5938  0004B6  0101               	movlb	1	; () banked
  5939  0004B8  6F56               	movwf	fix_fft@k& (0+255),b
  5940  0004BA  0E00               	movlw	0
  5941  0004BC  6F57               	movwf	(fix_fft@k+1)& (0+255),b
  5942  0004BE  0E00               	movlw	0
  5943  0004C0  6F58               	movwf	(fix_fft@k+2)& (0+255),b
  5944  0004C2  0E00               	movlw	0
  5945  0004C4  6F59               	movwf	(fix_fft@k+3)& (0+255),b
  5946                           
  5947                           ;fft.c: 86: while (l < n)
  5948  0004C6  D366               	goto	l619
  5949  0004C8                     l5202:
  5950                           
  5951                           ;fft.c: 87: {
  5952                           ;fft.c: 100: long int c;
  5953                           ;fft.c: 101: short b;
  5954                           ;fft.c: 103: istep = l << 1;
  5955  0004C8  90D8               	bcf	status,0,c
  5956  0004CA  0101               	movlb	1	; () banked
  5957  0004CC  357C               	rlcf	fix_fft@l& (0+255),w,b
  5958  0004CE  0101               	movlb	1	; () banked
  5959  0004D0  6F5E               	movwf	fix_fft@istep& (0+255),b
  5960  0004D2  0101               	movlb	1	; () banked
  5961  0004D4  357D               	rlcf	(fix_fft@l+1)& (0+255),w,b
  5962  0004D6  0101               	movlb	1	; () banked
  5963  0004D8  6F5F               	movwf	(fix_fft@istep+1)& (0+255),b
  5964  0004DA  0101               	movlb	1	; () banked
  5965  0004DC  357E               	rlcf	(fix_fft@l+2)& (0+255),w,b
  5966  0004DE  0101               	movlb	1	; () banked
  5967  0004E0  6F60               	movwf	(fix_fft@istep+2)& (0+255),b
  5968  0004E2  0101               	movlb	1	; () banked
  5969  0004E4  357F               	rlcf	(fix_fft@l+3)& (0+255),w,b
  5970  0004E6  0101               	movlb	1	; () banked
  5971  0004E8  6F61               	movwf	(fix_fft@istep+3)& (0+255),b
  5972                           
  5973                           ; BSR set to: 1
  5974                           ;fft.c: 104: for (m=0; m<l; ++m)
  5975  0004EA  0E00               	movlw	0
  5976  0004EC  0100               	movlb	0	; () banked
  5977  0004EE  6FB0               	movwf	(fix_fft@m+1)& (0+255),b
  5978  0004F0  0E00               	movlw	0
  5979  0004F2  6FAF               	movwf	fix_fft@m& (0+255),b
  5980  0004F4  D31C               	goto	l5262
  5981  0004F6                     l5206:
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;fft.c: 105: {
  5985                           ;fft.c: 106: j = m << k;
  5986  0004F6  C156  F0B1         	movff	fix_fft@k,??_fix_fft
  5987  0004FA  C0AF  F0B2         	movff	fix_fft@m,??_fix_fft+1
  5988  0004FE  C0B0  F0B3         	movff	fix_fft@m+1,??_fix_fft+2
  5989  000502  0100               	movlb	0	; () banked
  5990  000504  2BB1               	incf	??_fix_fft& (0+255),f,b
  5991  000506  D004               	goto	u5804
  5992  000508                     u5805:
  5993  000508  90D8               	bcf	status,0,c
  5994  00050A  0100               	movlb	0	; () banked
  5995  00050C  37B2               	rlcf	(??_fix_fft+1)& (0+255),f,b
  5996  00050E  37B3               	rlcf	(??_fix_fft+2)& (0+255),f,b
  5997  000510                     u5804:
  5998  000510  0100               	movlb	0	; () banked
  5999  000512  2FB1               	decfsz	??_fix_fft& (0+255),f,b
  6000  000514  D7F9               	goto	u5805
  6001  000516  C0B2  F180         	movff	??_fix_fft+1,fix_fft@j
  6002  00051A  C0B3  F181         	movff	??_fix_fft+2,fix_fft@j+1
  6003  00051E  0101               	movlb	1	; () banked
  6004  000520  0E00               	movlw	0
  6005  000522  BF81               	btfsc	(fix_fft@j+1)& (0+255),7,b
  6006  000524  0EFF               	movlw	-1
  6007  000526  6F82               	movwf	(fix_fft@j+2)& (0+255),b
  6008  000528  6F83               	movwf	(fix_fft@j+3)& (0+255),b
  6009                           
  6010                           ; BSR set to: 1
  6011                           ;fft.c: 108: wr = Sinewave[j+1024/4];
  6012  00052A  0E00               	movlw	0
  6013  00052C  0100               	movlb	0	; () banked
  6014  00052E  6FB1               	movwf	??_fix_fft& (0+255),b
  6015  000530  0E02               	movlw	2
  6016  000532  0100               	movlb	0	; () banked
  6017  000534  6FB2               	movwf	(??_fix_fft+1)& (0+255),b
  6018  000536  C180  F0B3         	movff	fix_fft@j,??_fix_fft+2
  6019  00053A  C181  F0B4         	movff	fix_fft@j+1,??_fix_fft+3
  6020  00053E  90D8               	bcf	status,0,c
  6021  000540  0100               	movlb	0	; () banked
  6022  000542  37B3               	rlcf	(??_fix_fft+2)& (0+255),f,b
  6023  000544  37B4               	rlcf	(??_fix_fft+3)& (0+255),f,b
  6024  000546  0100               	movlb	0	; () banked
  6025  000548  51B1               	movf	??_fix_fft& (0+255),w,b
  6026  00054A  0100               	movlb	0	; () banked
  6027  00054C  27B3               	addwf	(??_fix_fft+2)& (0+255),f,b
  6028  00054E  0100               	movlb	0	; () banked
  6029  000550  51B2               	movf	(??_fix_fft+1)& (0+255),w,b
  6030  000552  0100               	movlb	0	; () banked
  6031  000554  23B4               	addwfc	(??_fix_fft+3)& (0+255),f,b
  6032  000556  0E55               	movlw	low _Sinewave
  6033  000558  0100               	movlb	0	; () banked
  6034  00055A  25B3               	addwf	(??_fix_fft+2)& (0+255),w,b
  6035  00055C  6EF6               	movwf	tblptrl,c
  6036  00055E  0E77               	movlw	high _Sinewave
  6037  000560  21B4               	addwfc	(??_fix_fft+3)& (0+255),w,b
  6038  000562  6EF7               	movwf	tblptrh,c
  6039  000564                     	if	0	;There are less than 3 active tblptr bytes
  6040  000564                     	endif
  6041  000564  0009               	tblrd		*+
  6042  000566  CFF5 F166          	movff	tablat,fix_fft@wr
  6043  00056A  000A               	tblrd		*-
  6044  00056C  CFF5 F167          	movff	tablat,fix_fft@wr+1
  6045                           
  6046                           ; BSR set to: 0
  6047                           ;fft.c: 109: wi = -Sinewave[j];
  6048  000570  90D8               	bcf	status,0,c
  6049  000572  0101               	movlb	1	; () banked
  6050  000574  3580               	rlcf	fix_fft@j& (0+255),w,b
  6051  000576  6EF6               	movwf	tblptrl,c
  6052  000578  0101               	movlb	1	; () banked
  6053  00057A  3581               	rlcf	(fix_fft@j+1)& (0+255),w,b
  6054  00057C  6EF7               	movwf	tblptrh,c
  6055  00057E  0E55               	movlw	low _Sinewave
  6056  000580  26F6               	addwf	tblptrl,f,c
  6057  000582  0E77               	movlw	high _Sinewave
  6058  000584  22F7               	addwfc	tblptrh,f,c
  6059  000586                     	if	0	;There are less than 3 active tblptr bytes
  6060  000586                     	endif
  6061  000586  0009               	tblrd		*+
  6062  000588  CFF5 F0B1          	movff	tablat,??_fix_fft
  6063  00058C  0009               	tblrd		*+
  6064  00058E  CFF5 F0B2          	movff	tablat,??_fix_fft+1
  6065  000592  0100               	movlb	0	; () banked
  6066  000594  1FB1               	comf	??_fix_fft& (0+255),f,b
  6067  000596  1FB2               	comf	(??_fix_fft+1)& (0+255),f,b
  6068  000598  4BB1               	infsnz	??_fix_fft& (0+255),f,b
  6069  00059A  2BB2               	incf	(??_fix_fft+1)& (0+255),f,b
  6070  00059C  C0B1  F168         	movff	??_fix_fft,fix_fft@wi
  6071  0005A0  C0B2  F169         	movff	??_fix_fft+1,fix_fft@wi+1
  6072                           
  6073                           ;fft.c: 111: wr >>= 1;
  6074  0005A4  0101               	movlb	1	; () banked
  6075  0005A6  3567               	rlcf	(fix_fft@wr+1)& (0+255),w,b
  6076  0005A8  3367               	rrcf	(fix_fft@wr+1)& (0+255),f,b
  6077  0005AA  3366               	rrcf	fix_fft@wr& (0+255),f,b
  6078                           
  6079                           ;fft.c: 112: wi >>= 1;
  6080  0005AC  0101               	movlb	1	; () banked
  6081  0005AE  3569               	rlcf	(fix_fft@wi+1)& (0+255),w,b
  6082  0005B0  3369               	rrcf	(fix_fft@wi+1)& (0+255),f,b
  6083  0005B2  3368               	rrcf	fix_fft@wi& (0+255),f,b
  6084                           
  6085                           ; BSR set to: 1
  6086                           ;fft.c: 114: for (i=m; i<n; i+=istep)
  6087  0005B4  C0AF  F174         	movff	fix_fft@m,fix_fft@i
  6088  0005B8  C0B0  F175         	movff	fix_fft@m+1,fix_fft@i+1
  6089  0005BC  0101               	movlb	1	; () banked
  6090  0005BE  0E00               	movlw	0
  6091  0005C0  BF75               	btfsc	(fix_fft@i+1)& (0+255),7,b
  6092  0005C2  0EFF               	movlw	-1
  6093  0005C4  6F76               	movwf	(fix_fft@i+2)& (0+255),b
  6094  0005C6  6F77               	movwf	(fix_fft@i+3)& (0+255),b
  6095  0005C8  D296               	goto	l5258
  6096  0005CA                     l5214:
  6097                           
  6098                           ;fft.c: 115: {
  6099                           ;fft.c: 116: j = i + l;
  6100  0005CA  0101               	movlb	1	; () banked
  6101  0005CC  517C               	movf	fix_fft@l& (0+255),w,b
  6102  0005CE  0101               	movlb	1	; () banked
  6103  0005D0  2574               	addwf	fix_fft@i& (0+255),w,b
  6104  0005D2  0101               	movlb	1	; () banked
  6105  0005D4  6F80               	movwf	fix_fft@j& (0+255),b
  6106  0005D6  0101               	movlb	1	; () banked
  6107  0005D8  517D               	movf	(fix_fft@l+1)& (0+255),w,b
  6108  0005DA  0101               	movlb	1	; () banked
  6109  0005DC  2175               	addwfc	(fix_fft@i+1)& (0+255),w,b
  6110  0005DE  0101               	movlb	1	; () banked
  6111  0005E0  6F81               	movwf	(fix_fft@j+1)& (0+255),b
  6112  0005E2  0101               	movlb	1	; () banked
  6113  0005E4  517E               	movf	(fix_fft@l+2)& (0+255),w,b
  6114  0005E6  0101               	movlb	1	; () banked
  6115  0005E8  2176               	addwfc	(fix_fft@i+2)& (0+255),w,b
  6116  0005EA  0101               	movlb	1	; () banked
  6117  0005EC  6F82               	movwf	(fix_fft@j+2)& (0+255),b
  6118  0005EE  0101               	movlb	1	; () banked
  6119  0005F0  517F               	movf	(fix_fft@l+3)& (0+255),w,b
  6120  0005F2  0101               	movlb	1	; () banked
  6121  0005F4  2177               	addwfc	(fix_fft@i+3)& (0+255),w,b
  6122  0005F6  0101               	movlb	1	; () banked
  6123  0005F8  6F83               	movwf	(fix_fft@j+3)& (0+255),b
  6124                           
  6125                           ; BSR set to: 1
  6126                           ;fft.c: 124: c = ((long int)wr * (long int)fr[j]);
  6127  0005FA  C166  F09F         	movff	fix_fft@wr,___lmul@multiplier
  6128  0005FE  C167  F0A0         	movff	fix_fft@wr+1,___lmul@multiplier+1
  6129  000602  0100               	movlb	0	; () banked
  6130  000604  0E00               	movlw	0
  6131  000606  BFA0               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  6132  000608  0EFF               	movlw	-1
  6133  00060A  6FA1               	movwf	(___lmul@multiplier+2)& (0+255),b
  6134  00060C  6FA2               	movwf	(___lmul@multiplier+3)& (0+255),b
  6135  00060E  90D8               	bcf	status,0,c
  6136  000610  0101               	movlb	1	; () banked
  6137  000612  3580               	rlcf	fix_fft@j& (0+255),w,b
  6138  000614  6ED9               	movwf	fsr2l,c
  6139  000616  0101               	movlb	1	; () banked
  6140  000618  3581               	rlcf	(fix_fft@j+1)& (0+255),w,b
  6141  00061A  6EDA               	movwf	fsr2h,c
  6142  00061C  0100               	movlb	0	; () banked
  6143  00061E  51AB               	movf	fix_fft@fr& (0+255),w,b
  6144  000620  26D9               	addwf	fsr2l,f,c
  6145  000622  0100               	movlb	0	; () banked
  6146  000624  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  6147  000626  22DA               	addwfc	fsr2h,f,c
  6148  000628  CFDE F0A3          	movff	postinc2,___lmul@multiplicand
  6149  00062C  CFDD F0A4          	movff	postdec2,___lmul@multiplicand+1
  6150  000630  0100               	movlb	0	; () banked
  6151  000632  0E00               	movlw	0
  6152  000634  BFA4               	btfsc	(___lmul@multiplicand+1)& (0+255),7,b
  6153  000636  0EFF               	movlw	-1
  6154  000638  6FA5               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6155  00063A  6FA6               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6156  00063C  EC04  F01F         	call	___lmul	;wreg free
  6157  000640  C09F  F184         	movff	?___lmul,fix_fft@c
  6158  000644  C0A0  F185         	movff	?___lmul+1,fix_fft@c+1
  6159  000648  C0A1  F186         	movff	?___lmul+2,fix_fft@c+2
  6160  00064C  C0A2  F187         	movff	?___lmul+3,fix_fft@c+3
  6161                           
  6162                           ;fft.c: 125: c = c >> 14;
  6163  000650  0E0E               	movlw	14
  6164  000652  0100               	movlb	0	; () banked
  6165  000654  6FB1               	movwf	??_fix_fft& (0+255),b
  6166  000656  C184  F0B2         	movff	fix_fft@c,??_fix_fft+1
  6167  00065A  C185  F0B3         	movff	fix_fft@c+1,??_fix_fft+2
  6168  00065E  C186  F0B4         	movff	fix_fft@c+2,??_fix_fft+3
  6169  000662  C187  F0B5         	movff	fix_fft@c+3,??_fix_fft+4
  6170  000666                     u5815:
  6171  000666  0100               	movlb	0	; () banked
  6172  000668  67B1               	tstfsz	??_fix_fft& (0+255),b
  6173  00066A  D001               	goto	u5816
  6174  00066C  D009               	goto	u5817
  6175  00066E                     u5816:
  6176  00066E  0100               	movlb	0	; () banked
  6177  000670  35B5               	rlcf	(??_fix_fft+4)& (0+255),w,b
  6178  000672  33B5               	rrcf	(??_fix_fft+4)& (0+255),f,b
  6179  000674  33B4               	rrcf	(??_fix_fft+3)& (0+255),f,b
  6180  000676  33B3               	rrcf	(??_fix_fft+2)& (0+255),f,b
  6181  000678  33B2               	rrcf	(??_fix_fft+1)& (0+255),f,b
  6182  00067A  0100               	movlb	0	; () banked
  6183  00067C  2FB1               	decfsz	??_fix_fft& (0+255),f,b
  6184  00067E  D7F3               	goto	u5815
  6185  000680                     u5817:
  6186  000680  C0B2  F184         	movff	??_fix_fft+1,fix_fft@c
  6187  000684  C0B3  F185         	movff	??_fix_fft+2,fix_fft@c+1
  6188  000688  C0B4  F186         	movff	??_fix_fft+3,fix_fft@c+2
  6189  00068C  C0B5  F187         	movff	??_fix_fft+4,fix_fft@c+3
  6190                           
  6191                           ;fft.c: 126: b = c & 0x01;
  6192  000690  0E01               	movlw	1
  6193  000692  0101               	movlb	1	; () banked
  6194  000694  1584               	andwf	fix_fft@c& (0+255),w,b
  6195  000696  0101               	movlb	1	; () banked
  6196  000698  6F72               	movwf	fix_fft@b& (0+255),b
  6197  00069A  0101               	movlb	1	; () banked
  6198  00069C  6B73               	clrf	(fix_fft@b+1)& (0+255),b
  6199                           
  6200                           ; BSR set to: 1
  6201                           ;fft.c: 127: tr = (c >> 1) + b;
  6202  00069E  C184  F0B1         	movff	fix_fft@c,??_fix_fft
  6203  0006A2  C185  F0B2         	movff	fix_fft@c+1,??_fix_fft+1
  6204  0006A6  C186  F0B3         	movff	fix_fft@c+2,??_fix_fft+2
  6205  0006AA  C187  F0B4         	movff	fix_fft@c+3,??_fix_fft+3
  6206  0006AE  0100               	movlb	0	; () banked
  6207  0006B0  35B4               	rlcf	(??_fix_fft+3)& (0+255),w,b
  6208  0006B2  33B4               	rrcf	(??_fix_fft+3)& (0+255),f,b
  6209  0006B4  33B3               	rrcf	(??_fix_fft+2)& (0+255),f,b
  6210  0006B6  33B2               	rrcf	(??_fix_fft+1)& (0+255),f,b
  6211  0006B8  33B1               	rrcf	??_fix_fft& (0+255),f,b
  6212  0006BA  0101               	movlb	1	; () banked
  6213  0006BC  5172               	movf	fix_fft@b& (0+255),w,b
  6214  0006BE  0100               	movlb	0	; () banked
  6215  0006C0  25B1               	addwf	??_fix_fft& (0+255),w,b
  6216  0006C2  0101               	movlb	1	; () banked
  6217  0006C4  6F6E               	movwf	fix_fft@tr& (0+255),b
  6218  0006C6  0101               	movlb	1	; () banked
  6219  0006C8  5173               	movf	(fix_fft@b+1)& (0+255),w,b
  6220  0006CA  0100               	movlb	0	; () banked
  6221  0006CC  21B2               	addwfc	(??_fix_fft+1)& (0+255),w,b
  6222  0006CE  0101               	movlb	1	; () banked
  6223  0006D0  6F6F               	movwf	(fix_fft@tr+1)& (0+255),b
  6224                           
  6225                           ;fft.c: 129: c = ((long int)wi * (long int)fi[j]);
  6226  0006D2  C168  F09F         	movff	fix_fft@wi,___lmul@multiplier
  6227  0006D6  C169  F0A0         	movff	fix_fft@wi+1,___lmul@multiplier+1
  6228  0006DA  0100               	movlb	0	; () banked
  6229  0006DC  0E00               	movlw	0
  6230  0006DE  BFA0               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  6231  0006E0  0EFF               	movlw	-1
  6232  0006E2  6FA1               	movwf	(___lmul@multiplier+2)& (0+255),b
  6233  0006E4  6FA2               	movwf	(___lmul@multiplier+3)& (0+255),b
  6234  0006E6  90D8               	bcf	status,0,c
  6235  0006E8  0101               	movlb	1	; () banked
  6236  0006EA  3580               	rlcf	fix_fft@j& (0+255),w,b
  6237  0006EC  6ED9               	movwf	fsr2l,c
  6238  0006EE  0101               	movlb	1	; () banked
  6239  0006F0  3581               	rlcf	(fix_fft@j+1)& (0+255),w,b
  6240  0006F2  6EDA               	movwf	fsr2h,c
  6241  0006F4  0100               	movlb	0	; () banked
  6242  0006F6  51AD               	movf	fix_fft@fi& (0+255),w,b
  6243  0006F8  26D9               	addwf	fsr2l,f,c
  6244  0006FA  0100               	movlb	0	; () banked
  6245  0006FC  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  6246  0006FE  22DA               	addwfc	fsr2h,f,c
  6247  000700  CFDE F0A3          	movff	postinc2,___lmul@multiplicand
  6248  000704  CFDD F0A4          	movff	postdec2,___lmul@multiplicand+1
  6249  000708  0100               	movlb	0	; () banked
  6250  00070A  0E00               	movlw	0
  6251  00070C  BFA4               	btfsc	(___lmul@multiplicand+1)& (0+255),7,b
  6252  00070E  0EFF               	movlw	-1
  6253  000710  6FA5               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6254  000712  6FA6               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6255  000714  EC04  F01F         	call	___lmul	;wreg free
  6256  000718  C09F  F184         	movff	?___lmul,fix_fft@c
  6257  00071C  C0A0  F185         	movff	?___lmul+1,fix_fft@c+1
  6258  000720  C0A1  F186         	movff	?___lmul+2,fix_fft@c+2
  6259  000724  C0A2  F187         	movff	?___lmul+3,fix_fft@c+3
  6260                           
  6261                           ;fft.c: 130: c = c >> 14;
  6262  000728  0E0E               	movlw	14
  6263  00072A  0100               	movlb	0	; () banked
  6264  00072C  6FB1               	movwf	??_fix_fft& (0+255),b
  6265  00072E  C184  F0B2         	movff	fix_fft@c,??_fix_fft+1
  6266  000732  C185  F0B3         	movff	fix_fft@c+1,??_fix_fft+2
  6267  000736  C186  F0B4         	movff	fix_fft@c+2,??_fix_fft+3
  6268  00073A  C187  F0B5         	movff	fix_fft@c+3,??_fix_fft+4
  6269  00073E                     u5825:
  6270  00073E  0100               	movlb	0	; () banked
  6271  000740  67B1               	tstfsz	??_fix_fft& (0+255),b
  6272  000742  D001               	goto	u5826
  6273  000744  D009               	goto	u5827
  6274  000746                     u5826:
  6275  000746  0100               	movlb	0	; () banked
  6276  000748  35B5               	rlcf	(??_fix_fft+4)& (0+255),w,b
  6277  00074A  33B5               	rrcf	(??_fix_fft+4)& (0+255),f,b
  6278  00074C  33B4               	rrcf	(??_fix_fft+3)& (0+255),f,b
  6279  00074E  33B3               	rrcf	(??_fix_fft+2)& (0+255),f,b
  6280  000750  33B2               	rrcf	(??_fix_fft+1)& (0+255),f,b
  6281  000752  0100               	movlb	0	; () banked
  6282  000754  2FB1               	decfsz	??_fix_fft& (0+255),f,b
  6283  000756  D7F3               	goto	u5825
  6284  000758                     u5827:
  6285  000758  C0B2  F184         	movff	??_fix_fft+1,fix_fft@c
  6286  00075C  C0B3  F185         	movff	??_fix_fft+2,fix_fft@c+1
  6287  000760  C0B4  F186         	movff	??_fix_fft+3,fix_fft@c+2
  6288  000764  C0B5  F187         	movff	??_fix_fft+4,fix_fft@c+3
  6289                           
  6290                           ;fft.c: 131: b = c & 0x01;
  6291  000768  0E01               	movlw	1
  6292  00076A  0101               	movlb	1	; () banked
  6293  00076C  1584               	andwf	fix_fft@c& (0+255),w,b
  6294  00076E  0101               	movlb	1	; () banked
  6295  000770  6F72               	movwf	fix_fft@b& (0+255),b
  6296  000772  0101               	movlb	1	; () banked
  6297  000774  6B73               	clrf	(fix_fft@b+1)& (0+255),b
  6298                           
  6299                           ; BSR set to: 1
  6300                           ;fft.c: 132: tr = tr - ((c >> 1) + b);
  6301  000776  C184  F0B1         	movff	fix_fft@c,??_fix_fft
  6302  00077A  C185  F0B2         	movff	fix_fft@c+1,??_fix_fft+1
  6303  00077E  C186  F0B3         	movff	fix_fft@c+2,??_fix_fft+2
  6304  000782  C187  F0B4         	movff	fix_fft@c+3,??_fix_fft+3
  6305  000786  0100               	movlb	0	; () banked
  6306  000788  35B4               	rlcf	(??_fix_fft+3)& (0+255),w,b
  6307  00078A  33B4               	rrcf	(??_fix_fft+3)& (0+255),f,b
  6308  00078C  33B3               	rrcf	(??_fix_fft+2)& (0+255),f,b
  6309  00078E  33B2               	rrcf	(??_fix_fft+1)& (0+255),f,b
  6310  000790  33B1               	rrcf	??_fix_fft& (0+255),f,b
  6311  000792  0101               	movlb	1	; () banked
  6312  000794  5172               	movf	fix_fft@b& (0+255),w,b
  6313  000796  0100               	movlb	0	; () banked
  6314  000798  27B1               	addwf	??_fix_fft& (0+255),f,b
  6315  00079A  0101               	movlb	1	; () banked
  6316  00079C  5173               	movf	(fix_fft@b+1)& (0+255),w,b
  6317  00079E  0100               	movlb	0	; () banked
  6318  0007A0  23B2               	addwfc	(??_fix_fft+1)& (0+255),f,b
  6319  0007A2  0100               	movlb	0	; () banked
  6320  0007A4  1FB1               	comf	??_fix_fft& (0+255),f,b
  6321  0007A6  1FB2               	comf	(??_fix_fft+1)& (0+255),f,b
  6322  0007A8  4BB1               	infsnz	??_fix_fft& (0+255),f,b
  6323  0007AA  2BB2               	incf	(??_fix_fft+1)& (0+255),f,b
  6324  0007AC  0101               	movlb	1	; () banked
  6325  0007AE  516E               	movf	fix_fft@tr& (0+255),w,b
  6326  0007B0  0100               	movlb	0	; () banked
  6327  0007B2  25B1               	addwf	??_fix_fft& (0+255),w,b
  6328  0007B4  0101               	movlb	1	; () banked
  6329  0007B6  6F6E               	movwf	fix_fft@tr& (0+255),b
  6330  0007B8  0101               	movlb	1	; () banked
  6331  0007BA  516F               	movf	(fix_fft@tr+1)& (0+255),w,b
  6332  0007BC  0100               	movlb	0	; () banked
  6333  0007BE  21B2               	addwfc	(??_fix_fft+1)& (0+255),w,b
  6334  0007C0  0101               	movlb	1	; () banked
  6335  0007C2  6F6F               	movwf	(fix_fft@tr+1)& (0+255),b
  6336                           
  6337                           ; BSR set to: 1
  6338                           ;fft.c: 135: c = ((long int)wr * (long int)fi[j]);
  6339  0007C4  C166  F09F         	movff	fix_fft@wr,___lmul@multiplier
  6340  0007C8  C167  F0A0         	movff	fix_fft@wr+1,___lmul@multiplier+1
  6341  0007CC  0100               	movlb	0	; () banked
  6342  0007CE  0E00               	movlw	0
  6343  0007D0  BFA0               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  6344  0007D2  0EFF               	movlw	-1
  6345  0007D4  6FA1               	movwf	(___lmul@multiplier+2)& (0+255),b
  6346  0007D6  6FA2               	movwf	(___lmul@multiplier+3)& (0+255),b
  6347  0007D8  90D8               	bcf	status,0,c
  6348  0007DA  0101               	movlb	1	; () banked
  6349  0007DC  3580               	rlcf	fix_fft@j& (0+255),w,b
  6350  0007DE  6ED9               	movwf	fsr2l,c
  6351  0007E0  0101               	movlb	1	; () banked
  6352  0007E2  3581               	rlcf	(fix_fft@j+1)& (0+255),w,b
  6353  0007E4  6EDA               	movwf	fsr2h,c
  6354  0007E6  0100               	movlb	0	; () banked
  6355  0007E8  51AD               	movf	fix_fft@fi& (0+255),w,b
  6356  0007EA  26D9               	addwf	fsr2l,f,c
  6357  0007EC  0100               	movlb	0	; () banked
  6358  0007EE  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  6359  0007F0  22DA               	addwfc	fsr2h,f,c
  6360  0007F2  CFDE F0A3          	movff	postinc2,___lmul@multiplicand
  6361  0007F6  CFDD F0A4          	movff	postdec2,___lmul@multiplicand+1
  6362  0007FA  0100               	movlb	0	; () banked
  6363  0007FC  0E00               	movlw	0
  6364  0007FE  BFA4               	btfsc	(___lmul@multiplicand+1)& (0+255),7,b
  6365  000800  0EFF               	movlw	-1
  6366  000802  6FA5               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6367  000804  6FA6               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6368  000806  EC04  F01F         	call	___lmul	;wreg free
  6369  00080A  C09F  F184         	movff	?___lmul,fix_fft@c
  6370  00080E  C0A0  F185         	movff	?___lmul+1,fix_fft@c+1
  6371  000812  C0A1  F186         	movff	?___lmul+2,fix_fft@c+2
  6372  000816  C0A2  F187         	movff	?___lmul+3,fix_fft@c+3
  6373                           
  6374                           ;fft.c: 136: c = c >> 14;
  6375  00081A  0E0E               	movlw	14
  6376  00081C  0100               	movlb	0	; () banked
  6377  00081E  6FB1               	movwf	??_fix_fft& (0+255),b
  6378  000820  C184  F0B2         	movff	fix_fft@c,??_fix_fft+1
  6379  000824  C185  F0B3         	movff	fix_fft@c+1,??_fix_fft+2
  6380  000828  C186  F0B4         	movff	fix_fft@c+2,??_fix_fft+3
  6381  00082C  C187  F0B5         	movff	fix_fft@c+3,??_fix_fft+4
  6382  000830                     u5835:
  6383  000830  0100               	movlb	0	; () banked
  6384  000832  67B1               	tstfsz	??_fix_fft& (0+255),b
  6385  000834  D001               	goto	u5836
  6386  000836  D009               	goto	u5837
  6387  000838                     u5836:
  6388  000838  0100               	movlb	0	; () banked
  6389  00083A  35B5               	rlcf	(??_fix_fft+4)& (0+255),w,b
  6390  00083C  33B5               	rrcf	(??_fix_fft+4)& (0+255),f,b
  6391  00083E  33B4               	rrcf	(??_fix_fft+3)& (0+255),f,b
  6392  000840  33B3               	rrcf	(??_fix_fft+2)& (0+255),f,b
  6393  000842  33B2               	rrcf	(??_fix_fft+1)& (0+255),f,b
  6394  000844  0100               	movlb	0	; () banked
  6395  000846  2FB1               	decfsz	??_fix_fft& (0+255),f,b
  6396  000848  D7F3               	goto	u5835
  6397  00084A                     u5837:
  6398  00084A  C0B2  F184         	movff	??_fix_fft+1,fix_fft@c
  6399  00084E  C0B3  F185         	movff	??_fix_fft+2,fix_fft@c+1
  6400  000852  C0B4  F186         	movff	??_fix_fft+3,fix_fft@c+2
  6401  000856  C0B5  F187         	movff	??_fix_fft+4,fix_fft@c+3
  6402                           
  6403                           ;fft.c: 137: b = c & 0x01;
  6404  00085A  0E01               	movlw	1
  6405  00085C  0101               	movlb	1	; () banked
  6406  00085E  1584               	andwf	fix_fft@c& (0+255),w,b
  6407  000860  0101               	movlb	1	; () banked
  6408  000862  6F72               	movwf	fix_fft@b& (0+255),b
  6409  000864  0101               	movlb	1	; () banked
  6410  000866  6B73               	clrf	(fix_fft@b+1)& (0+255),b
  6411                           
  6412                           ;fft.c: 138: ti = (c >> 1) + b;
  6413  000868  C184  F0B1         	movff	fix_fft@c,??_fix_fft
  6414  00086C  C185  F0B2         	movff	fix_fft@c+1,??_fix_fft+1
  6415  000870  C186  F0B3         	movff	fix_fft@c+2,??_fix_fft+2
  6416  000874  C187  F0B4         	movff	fix_fft@c+3,??_fix_fft+3
  6417  000878  0100               	movlb	0	; () banked
  6418  00087A  35B4               	rlcf	(??_fix_fft+3)& (0+255),w,b
  6419  00087C  33B4               	rrcf	(??_fix_fft+3)& (0+255),f,b
  6420  00087E  33B3               	rrcf	(??_fix_fft+2)& (0+255),f,b
  6421  000880  33B2               	rrcf	(??_fix_fft+1)& (0+255),f,b
  6422  000882  33B1               	rrcf	??_fix_fft& (0+255),f,b
  6423  000884  0101               	movlb	1	; () banked
  6424  000886  5172               	movf	fix_fft@b& (0+255),w,b
  6425  000888  0100               	movlb	0	; () banked
  6426  00088A  25B1               	addwf	??_fix_fft& (0+255),w,b
  6427  00088C  0101               	movlb	1	; () banked
  6428  00088E  6F70               	movwf	fix_fft@ti& (0+255),b
  6429  000890  0101               	movlb	1	; () banked
  6430  000892  5173               	movf	(fix_fft@b+1)& (0+255),w,b
  6431  000894  0100               	movlb	0	; () banked
  6432  000896  21B2               	addwfc	(??_fix_fft+1)& (0+255),w,b
  6433  000898  0101               	movlb	1	; () banked
  6434  00089A  6F71               	movwf	(fix_fft@ti+1)& (0+255),b
  6435                           
  6436                           ; BSR set to: 1
  6437                           ;fft.c: 140: c = ((long int)wi * (long int)fr[j]);
  6438  00089C  C168  F09F         	movff	fix_fft@wi,___lmul@multiplier
  6439  0008A0  C169  F0A0         	movff	fix_fft@wi+1,___lmul@multiplier+1
  6440  0008A4  0100               	movlb	0	; () banked
  6441  0008A6  0E00               	movlw	0
  6442  0008A8  BFA0               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  6443  0008AA  0EFF               	movlw	-1
  6444  0008AC  6FA1               	movwf	(___lmul@multiplier+2)& (0+255),b
  6445  0008AE  6FA2               	movwf	(___lmul@multiplier+3)& (0+255),b
  6446  0008B0  90D8               	bcf	status,0,c
  6447  0008B2  0101               	movlb	1	; () banked
  6448  0008B4  3580               	rlcf	fix_fft@j& (0+255),w,b
  6449  0008B6  6ED9               	movwf	fsr2l,c
  6450  0008B8  0101               	movlb	1	; () banked
  6451  0008BA  3581               	rlcf	(fix_fft@j+1)& (0+255),w,b
  6452  0008BC  6EDA               	movwf	fsr2h,c
  6453  0008BE  0100               	movlb	0	; () banked
  6454  0008C0  51AB               	movf	fix_fft@fr& (0+255),w,b
  6455  0008C2  26D9               	addwf	fsr2l,f,c
  6456  0008C4  0100               	movlb	0	; () banked
  6457  0008C6  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  6458  0008C8  22DA               	addwfc	fsr2h,f,c
  6459  0008CA  CFDE F0A3          	movff	postinc2,___lmul@multiplicand
  6460  0008CE  CFDD F0A4          	movff	postdec2,___lmul@multiplicand+1
  6461  0008D2  0100               	movlb	0	; () banked
  6462  0008D4  0E00               	movlw	0
  6463  0008D6  BFA4               	btfsc	(___lmul@multiplicand+1)& (0+255),7,b
  6464  0008D8  0EFF               	movlw	-1
  6465  0008DA  6FA5               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6466  0008DC  6FA6               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6467  0008DE  EC04  F01F         	call	___lmul	;wreg free
  6468  0008E2  C09F  F184         	movff	?___lmul,fix_fft@c
  6469  0008E6  C0A0  F185         	movff	?___lmul+1,fix_fft@c+1
  6470  0008EA  C0A1  F186         	movff	?___lmul+2,fix_fft@c+2
  6471  0008EE  C0A2  F187         	movff	?___lmul+3,fix_fft@c+3
  6472                           
  6473                           ;fft.c: 141: c = c >> 14;
  6474  0008F2  0E0E               	movlw	14
  6475  0008F4  0100               	movlb	0	; () banked
  6476  0008F6  6FB1               	movwf	??_fix_fft& (0+255),b
  6477  0008F8  C184  F0B2         	movff	fix_fft@c,??_fix_fft+1
  6478  0008FC  C185  F0B3         	movff	fix_fft@c+1,??_fix_fft+2
  6479  000900  C186  F0B4         	movff	fix_fft@c+2,??_fix_fft+3
  6480  000904  C187  F0B5         	movff	fix_fft@c+3,??_fix_fft+4
  6481  000908                     u5845:
  6482  000908  0100               	movlb	0	; () banked
  6483  00090A  67B1               	tstfsz	??_fix_fft& (0+255),b
  6484  00090C  D001               	goto	u5846
  6485  00090E  D009               	goto	u5847
  6486  000910                     u5846:
  6487  000910  0100               	movlb	0	; () banked
  6488  000912  35B5               	rlcf	(??_fix_fft+4)& (0+255),w,b
  6489  000914  33B5               	rrcf	(??_fix_fft+4)& (0+255),f,b
  6490  000916  33B4               	rrcf	(??_fix_fft+3)& (0+255),f,b
  6491  000918  33B3               	rrcf	(??_fix_fft+2)& (0+255),f,b
  6492  00091A  33B2               	rrcf	(??_fix_fft+1)& (0+255),f,b
  6493  00091C  0100               	movlb	0	; () banked
  6494  00091E  2FB1               	decfsz	??_fix_fft& (0+255),f,b
  6495  000920  D7F3               	goto	u5845
  6496  000922                     u5847:
  6497  000922  C0B2  F184         	movff	??_fix_fft+1,fix_fft@c
  6498  000926  C0B3  F185         	movff	??_fix_fft+2,fix_fft@c+1
  6499  00092A  C0B4  F186         	movff	??_fix_fft+3,fix_fft@c+2
  6500  00092E  C0B5  F187         	movff	??_fix_fft+4,fix_fft@c+3
  6501                           
  6502                           ;fft.c: 142: b = c & 0x01;
  6503  000932  0E01               	movlw	1
  6504  000934  0101               	movlb	1	; () banked
  6505  000936  1584               	andwf	fix_fft@c& (0+255),w,b
  6506  000938  0101               	movlb	1	; () banked
  6507  00093A  6F72               	movwf	fix_fft@b& (0+255),b
  6508  00093C  0101               	movlb	1	; () banked
  6509  00093E  6B73               	clrf	(fix_fft@b+1)& (0+255),b
  6510                           
  6511                           ; BSR set to: 1
  6512                           ;fft.c: 143: ti = ti + ((c >> 1) + b);
  6513  000940  C184  F0B1         	movff	fix_fft@c,??_fix_fft
  6514  000944  C185  F0B2         	movff	fix_fft@c+1,??_fix_fft+1
  6515  000948  C186  F0B3         	movff	fix_fft@c+2,??_fix_fft+2
  6516  00094C  C187  F0B4         	movff	fix_fft@c+3,??_fix_fft+3
  6517  000950  0100               	movlb	0	; () banked
  6518  000952  35B4               	rlcf	(??_fix_fft+3)& (0+255),w,b
  6519  000954  33B4               	rrcf	(??_fix_fft+3)& (0+255),f,b
  6520  000956  33B3               	rrcf	(??_fix_fft+2)& (0+255),f,b
  6521  000958  33B2               	rrcf	(??_fix_fft+1)& (0+255),f,b
  6522  00095A  33B1               	rrcf	??_fix_fft& (0+255),f,b
  6523  00095C  0101               	movlb	1	; () banked
  6524  00095E  5172               	movf	fix_fft@b& (0+255),w,b
  6525  000960  0100               	movlb	0	; () banked
  6526  000962  27B1               	addwf	??_fix_fft& (0+255),f,b
  6527  000964  0101               	movlb	1	; () banked
  6528  000966  5173               	movf	(fix_fft@b+1)& (0+255),w,b
  6529  000968  0100               	movlb	0	; () banked
  6530  00096A  23B2               	addwfc	(??_fix_fft+1)& (0+255),f,b
  6531  00096C  0101               	movlb	1	; () banked
  6532  00096E  5170               	movf	fix_fft@ti& (0+255),w,b
  6533  000970  0100               	movlb	0	; () banked
  6534  000972  25B1               	addwf	??_fix_fft& (0+255),w,b
  6535  000974  0101               	movlb	1	; () banked
  6536  000976  6F70               	movwf	fix_fft@ti& (0+255),b
  6537  000978  0101               	movlb	1	; () banked
  6538  00097A  5171               	movf	(fix_fft@ti+1)& (0+255),w,b
  6539  00097C  0100               	movlb	0	; () banked
  6540  00097E  21B2               	addwfc	(??_fix_fft+1)& (0+255),w,b
  6541  000980  0101               	movlb	1	; () banked
  6542  000982  6F71               	movwf	(fix_fft@ti+1)& (0+255),b
  6543                           
  6544                           ; BSR set to: 1
  6545                           ;fft.c: 145: qr = fr[i];
  6546  000984  90D8               	bcf	status,0,c
  6547  000986  0101               	movlb	1	; () banked
  6548  000988  3574               	rlcf	fix_fft@i& (0+255),w,b
  6549  00098A  6ED9               	movwf	fsr2l,c
  6550  00098C  0101               	movlb	1	; () banked
  6551  00098E  3575               	rlcf	(fix_fft@i+1)& (0+255),w,b
  6552  000990  6EDA               	movwf	fsr2h,c
  6553  000992  0100               	movlb	0	; () banked
  6554  000994  51AB               	movf	fix_fft@fr& (0+255),w,b
  6555  000996  26D9               	addwf	fsr2l,f,c
  6556  000998  0100               	movlb	0	; () banked
  6557  00099A  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  6558  00099C  22DA               	addwfc	fsr2h,f,c
  6559  00099E  CFDE F162          	movff	postinc2,fix_fft@qr
  6560  0009A2  CFDD F163          	movff	postdec2,fix_fft@qr+1
  6561                           
  6562                           ; BSR set to: 0
  6563                           ;fft.c: 146: qi = fi[i];
  6564  0009A6  90D8               	bcf	status,0,c
  6565  0009A8  0101               	movlb	1	; () banked
  6566  0009AA  3574               	rlcf	fix_fft@i& (0+255),w,b
  6567  0009AC  6ED9               	movwf	fsr2l,c
  6568  0009AE  0101               	movlb	1	; () banked
  6569  0009B0  3575               	rlcf	(fix_fft@i+1)& (0+255),w,b
  6570  0009B2  6EDA               	movwf	fsr2h,c
  6571  0009B4  0100               	movlb	0	; () banked
  6572  0009B6  51AD               	movf	fix_fft@fi& (0+255),w,b
  6573  0009B8  26D9               	addwf	fsr2l,f,c
  6574  0009BA  0100               	movlb	0	; () banked
  6575  0009BC  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  6576  0009BE  22DA               	addwfc	fsr2h,f,c
  6577  0009C0  CFDE F164          	movff	postinc2,fix_fft@qi
  6578  0009C4  CFDD F165          	movff	postdec2,fix_fft@qi+1
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;fft.c: 147: qr >>= 1;
  6582  0009C8  0101               	movlb	1	; () banked
  6583  0009CA  3563               	rlcf	(fix_fft@qr+1)& (0+255),w,b
  6584  0009CC  3363               	rrcf	(fix_fft@qr+1)& (0+255),f,b
  6585  0009CE  3362               	rrcf	fix_fft@qr& (0+255),f,b
  6586                           
  6587                           ; BSR set to: 1
  6588                           ;fft.c: 148: qi >>= 1;
  6589  0009D0  0101               	movlb	1	; () banked
  6590  0009D2  3565               	rlcf	(fix_fft@qi+1)& (0+255),w,b
  6591  0009D4  3365               	rrcf	(fix_fft@qi+1)& (0+255),f,b
  6592  0009D6  3364               	rrcf	fix_fft@qi& (0+255),f,b
  6593                           
  6594                           ; BSR set to: 1
  6595                           ;fft.c: 150: fr[j] = qr - tr;
  6596  0009D8  C16E  F0B1         	movff	fix_fft@tr,??_fix_fft
  6597  0009DC  C16F  F0B2         	movff	fix_fft@tr+1,??_fix_fft+1
  6598  0009E0  0100               	movlb	0	; () banked
  6599  0009E2  1FB1               	comf	??_fix_fft& (0+255),f,b
  6600  0009E4  1FB2               	comf	(??_fix_fft+1)& (0+255),f,b
  6601  0009E6  4BB1               	infsnz	??_fix_fft& (0+255),f,b
  6602  0009E8  2BB2               	incf	(??_fix_fft+1)& (0+255),f,b
  6603  0009EA  0101               	movlb	1	; () banked
  6604  0009EC  5162               	movf	fix_fft@qr& (0+255),w,b
  6605  0009EE  0100               	movlb	0	; () banked
  6606  0009F0  27B1               	addwf	??_fix_fft& (0+255),f,b
  6607  0009F2  0101               	movlb	1	; () banked
  6608  0009F4  5163               	movf	(fix_fft@qr+1)& (0+255),w,b
  6609  0009F6  0100               	movlb	0	; () banked
  6610  0009F8  23B2               	addwfc	(??_fix_fft+1)& (0+255),f,b
  6611  0009FA  90D8               	bcf	status,0,c
  6612  0009FC  0101               	movlb	1	; () banked
  6613  0009FE  3580               	rlcf	fix_fft@j& (0+255),w,b
  6614  000A00  6ED9               	movwf	fsr2l,c
  6615  000A02  0101               	movlb	1	; () banked
  6616  000A04  3581               	rlcf	(fix_fft@j+1)& (0+255),w,b
  6617  000A06  6EDA               	movwf	fsr2h,c
  6618  000A08  0100               	movlb	0	; () banked
  6619  000A0A  51AB               	movf	fix_fft@fr& (0+255),w,b
  6620  000A0C  26D9               	addwf	fsr2l,f,c
  6621  000A0E  0100               	movlb	0	; () banked
  6622  000A10  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  6623  000A12  22DA               	addwfc	fsr2h,f,c
  6624  000A14  C0B1  FFDE         	movff	??_fix_fft,postinc2
  6625  000A18  C0B2  FFDD         	movff	??_fix_fft+1,postdec2
  6626                           
  6627                           ; BSR set to: 0
  6628                           ;fft.c: 151: fi[j] = qi - ti;
  6629  000A1C  C170  F0B1         	movff	fix_fft@ti,??_fix_fft
  6630  000A20  C171  F0B2         	movff	fix_fft@ti+1,??_fix_fft+1
  6631  000A24  0100               	movlb	0	; () banked
  6632  000A26  1FB1               	comf	??_fix_fft& (0+255),f,b
  6633  000A28  1FB2               	comf	(??_fix_fft+1)& (0+255),f,b
  6634  000A2A  4BB1               	infsnz	??_fix_fft& (0+255),f,b
  6635  000A2C  2BB2               	incf	(??_fix_fft+1)& (0+255),f,b
  6636  000A2E  0101               	movlb	1	; () banked
  6637  000A30  5164               	movf	fix_fft@qi& (0+255),w,b
  6638  000A32  0100               	movlb	0	; () banked
  6639  000A34  27B1               	addwf	??_fix_fft& (0+255),f,b
  6640  000A36  0101               	movlb	1	; () banked
  6641  000A38  5165               	movf	(fix_fft@qi+1)& (0+255),w,b
  6642  000A3A  0100               	movlb	0	; () banked
  6643  000A3C  23B2               	addwfc	(??_fix_fft+1)& (0+255),f,b
  6644  000A3E  90D8               	bcf	status,0,c
  6645  000A40  0101               	movlb	1	; () banked
  6646  000A42  3580               	rlcf	fix_fft@j& (0+255),w,b
  6647  000A44  6ED9               	movwf	fsr2l,c
  6648  000A46  0101               	movlb	1	; () banked
  6649  000A48  3581               	rlcf	(fix_fft@j+1)& (0+255),w,b
  6650  000A4A  6EDA               	movwf	fsr2h,c
  6651  000A4C  0100               	movlb	0	; () banked
  6652  000A4E  51AD               	movf	fix_fft@fi& (0+255),w,b
  6653  000A50  26D9               	addwf	fsr2l,f,c
  6654  000A52  0100               	movlb	0	; () banked
  6655  000A54  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  6656  000A56  22DA               	addwfc	fsr2h,f,c
  6657  000A58  C0B1  FFDE         	movff	??_fix_fft,postinc2
  6658  000A5C  C0B2  FFDD         	movff	??_fix_fft+1,postdec2
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;fft.c: 152: fr[i] = qr + tr;
  6662  000A60  0101               	movlb	1	; () banked
  6663  000A62  516E               	movf	fix_fft@tr& (0+255),w,b
  6664  000A64  0101               	movlb	1	; () banked
  6665  000A66  2562               	addwf	fix_fft@qr& (0+255),w,b
  6666  000A68  0100               	movlb	0	; () banked
  6667  000A6A  6FB1               	movwf	??_fix_fft& (0+255),b
  6668  000A6C  0101               	movlb	1	; () banked
  6669  000A6E  516F               	movf	(fix_fft@tr+1)& (0+255),w,b
  6670  000A70  0101               	movlb	1	; () banked
  6671  000A72  2163               	addwfc	(fix_fft@qr+1)& (0+255),w,b
  6672  000A74  0100               	movlb	0	; () banked
  6673  000A76  6FB2               	movwf	(??_fix_fft+1)& (0+255),b
  6674  000A78  90D8               	bcf	status,0,c
  6675  000A7A  0101               	movlb	1	; () banked
  6676  000A7C  3574               	rlcf	fix_fft@i& (0+255),w,b
  6677  000A7E  6ED9               	movwf	fsr2l,c
  6678  000A80  0101               	movlb	1	; () banked
  6679  000A82  3575               	rlcf	(fix_fft@i+1)& (0+255),w,b
  6680  000A84  6EDA               	movwf	fsr2h,c
  6681  000A86  0100               	movlb	0	; () banked
  6682  000A88  51AB               	movf	fix_fft@fr& (0+255),w,b
  6683  000A8A  26D9               	addwf	fsr2l,f,c
  6684  000A8C  0100               	movlb	0	; () banked
  6685  000A8E  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  6686  000A90  22DA               	addwfc	fsr2h,f,c
  6687  000A92  C0B1  FFDE         	movff	??_fix_fft,postinc2
  6688  000A96  C0B2  FFDD         	movff	??_fix_fft+1,postdec2
  6689                           
  6690                           ; BSR set to: 0
  6691                           ;fft.c: 153: fi[i] = qi + ti;
  6692  000A9A  0101               	movlb	1	; () banked
  6693  000A9C  5170               	movf	fix_fft@ti& (0+255),w,b
  6694  000A9E  0101               	movlb	1	; () banked
  6695  000AA0  2564               	addwf	fix_fft@qi& (0+255),w,b
  6696  000AA2  0100               	movlb	0	; () banked
  6697  000AA4  6FB1               	movwf	??_fix_fft& (0+255),b
  6698  000AA6  0101               	movlb	1	; () banked
  6699  000AA8  5171               	movf	(fix_fft@ti+1)& (0+255),w,b
  6700  000AAA  0101               	movlb	1	; () banked
  6701  000AAC  2165               	addwfc	(fix_fft@qi+1)& (0+255),w,b
  6702  000AAE  0100               	movlb	0	; () banked
  6703  000AB0  6FB2               	movwf	(??_fix_fft+1)& (0+255),b
  6704  000AB2  90D8               	bcf	status,0,c
  6705  000AB4  0101               	movlb	1	; () banked
  6706  000AB6  3574               	rlcf	fix_fft@i& (0+255),w,b
  6707  000AB8  6ED9               	movwf	fsr2l,c
  6708  000ABA  0101               	movlb	1	; () banked
  6709  000ABC  3575               	rlcf	(fix_fft@i+1)& (0+255),w,b
  6710  000ABE  6EDA               	movwf	fsr2h,c
  6711  000AC0  0100               	movlb	0	; () banked
  6712  000AC2  51AD               	movf	fix_fft@fi& (0+255),w,b
  6713  000AC4  26D9               	addwf	fsr2l,f,c
  6714  000AC6  0100               	movlb	0	; () banked
  6715  000AC8  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  6716  000ACA  22DA               	addwfc	fsr2h,f,c
  6717  000ACC  C0B1  FFDE         	movff	??_fix_fft,postinc2
  6718  000AD0  C0B2  FFDD         	movff	??_fix_fft+1,postdec2
  6719                           
  6720                           ; BSR set to: 0
  6721  000AD4  0101               	movlb	1	; () banked
  6722  000AD6  515E               	movf	fix_fft@istep& (0+255),w,b
  6723  000AD8  0101               	movlb	1	; () banked
  6724  000ADA  2774               	addwf	fix_fft@i& (0+255),f,b
  6725  000ADC  0101               	movlb	1	; () banked
  6726  000ADE  515F               	movf	(fix_fft@istep+1)& (0+255),w,b
  6727  000AE0  0101               	movlb	1	; () banked
  6728  000AE2  2375               	addwfc	(fix_fft@i+1)& (0+255),f,b
  6729  000AE4  0101               	movlb	1	; () banked
  6730  000AE6  5160               	movf	(fix_fft@istep+2)& (0+255),w,b
  6731  000AE8  0101               	movlb	1	; () banked
  6732  000AEA  2376               	addwfc	(fix_fft@i+2)& (0+255),f,b
  6733  000AEC  0101               	movlb	1	; () banked
  6734  000AEE  5161               	movf	(fix_fft@istep+3)& (0+255),w,b
  6735  000AF0  0101               	movlb	1	; () banked
  6736  000AF2  2377               	addwfc	(fix_fft@i+3)& (0+255),f,b
  6737  000AF4  D000               	goto	l5258
  6738  000AF6                     l5258:
  6739                           
  6740                           ; BSR set to: 1
  6741  000AF6  0101               	movlb	1	; () banked
  6742  000AF8  516A               	movf	fix_fft@n& (0+255),w,b
  6743  000AFA  0101               	movlb	1	; () banked
  6744  000AFC  5D74               	subwf	fix_fft@i& (0+255),w,b
  6745  000AFE  0101               	movlb	1	; () banked
  6746  000B00  516B               	movf	(fix_fft@n+1)& (0+255),w,b
  6747  000B02  0101               	movlb	1	; () banked
  6748  000B04  5975               	subwfb	(fix_fft@i+1)& (0+255),w,b
  6749  000B06  0101               	movlb	1	; () banked
  6750  000B08  516C               	movf	(fix_fft@n+2)& (0+255),w,b
  6751  000B0A  0101               	movlb	1	; () banked
  6752  000B0C  5976               	subwfb	(fix_fft@i+2)& (0+255),w,b
  6753  000B0E  0101               	movlb	1	; () banked
  6754  000B10  5177               	movf	(fix_fft@i+3)& (0+255),w,b
  6755  000B12  0A80               	xorlw	128
  6756  000B14  0100               	movlb	0	; () banked
  6757  000B16  6FB1               	movwf	??_fix_fft& (0+255),b
  6758  000B18  0101               	movlb	1	; () banked
  6759  000B1A  516D               	movf	(fix_fft@n+3)& (0+255),w,b
  6760  000B1C  0A80               	xorlw	128
  6761  000B1E  0100               	movlb	0	; () banked
  6762  000B20  59B1               	subwfb	??_fix_fft& (0+255),w,b
  6763  000B22  A0D8               	btfss	status,0,c
  6764  000B24  D552               	goto	l5214
  6765                           
  6766                           ; BSR set to: 0
  6767                           
  6768                           ; BSR set to: 0
  6769  000B26  0100               	movlb	0	; () banked
  6770  000B28  4BAF               	infsnz	fix_fft@m& (0+255),f,b
  6771  000B2A  2BB0               	incf	(fix_fft@m+1)& (0+255),f,b
  6772  000B2C  D000               	goto	l5262
  6773  000B2E                     l5262:
  6774                           
  6775                           ; BSR set to: 0
  6776  000B2E  C0AF  F0B1         	movff	fix_fft@m,??_fix_fft
  6777  000B32  C0B0  F0B2         	movff	fix_fft@m+1,??_fix_fft+1
  6778  000B36  0E00               	movlw	0
  6779  000B38  0100               	movlb	0	; () banked
  6780  000B3A  BFB2               	btfsc	(??_fix_fft+1)& (0+255),7,b
  6781  000B3C  0EFF               	movlw	255
  6782  000B3E  6FB3               	movwf	(??_fix_fft+2)& (0+255),b
  6783  000B40  6FB4               	movwf	(??_fix_fft+3)& (0+255),b
  6784  000B42  0101               	movlb	1	; () banked
  6785  000B44  517C               	movf	fix_fft@l& (0+255),w,b
  6786  000B46  0100               	movlb	0	; () banked
  6787  000B48  5DB1               	subwf	??_fix_fft& (0+255),w,b
  6788  000B4A  0101               	movlb	1	; () banked
  6789  000B4C  517D               	movf	(fix_fft@l+1)& (0+255),w,b
  6790  000B4E  0100               	movlb	0	; () banked
  6791  000B50  59B2               	subwfb	(??_fix_fft+1)& (0+255),w,b
  6792  000B52  0101               	movlb	1	; () banked
  6793  000B54  517E               	movf	(fix_fft@l+2)& (0+255),w,b
  6794  000B56  0100               	movlb	0	; () banked
  6795  000B58  59B3               	subwfb	(??_fix_fft+2)& (0+255),w,b
  6796  000B5A  0100               	movlb	0	; () banked
  6797  000B5C  51B4               	movf	(??_fix_fft+3)& (0+255),w,b
  6798  000B5E  0A80               	xorlw	128
  6799  000B60  0100               	movlb	0	; () banked
  6800  000B62  6FB5               	movwf	(??_fix_fft+4)& (0+255),b
  6801  000B64  0101               	movlb	1	; () banked
  6802  000B66  517F               	movf	(fix_fft@l+3)& (0+255),w,b
  6803  000B68  0A80               	xorlw	128
  6804  000B6A  0100               	movlb	0	; () banked
  6805  000B6C  59B5               	subwfb	(??_fix_fft+4)& (0+255),w,b
  6806  000B6E  A0D8               	btfss	status,0,c
  6807  000B70  D4C2               	goto	l5206
  6808                           
  6809                           ; BSR set to: 0
  6810                           ;fft.c: 154: }
  6811                           ;fft.c: 155: }
  6812                           ;fft.c: 157: --k;
  6813                           
  6814                           ; BSR set to: 0
  6815  000B72  0EFF               	movlw	255
  6816  000B74  0101               	movlb	1	; () banked
  6817  000B76  2756               	addwf	fix_fft@k& (0+255),f,b
  6818  000B78  0EFF               	movlw	255
  6819  000B7A  2357               	addwfc	(fix_fft@k+1)& (0+255),f,b
  6820  000B7C  0EFF               	movlw	255
  6821  000B7E  2358               	addwfc	(fix_fft@k+2)& (0+255),f,b
  6822  000B80  0EFF               	movlw	255
  6823  000B82  2359               	addwfc	(fix_fft@k+3)& (0+255),f,b
  6824                           
  6825                           ; BSR set to: 1
  6826                           ;fft.c: 158: l = istep;
  6827  000B84  C15E  F17C         	movff	fix_fft@istep,fix_fft@l
  6828  000B88  C15F  F17D         	movff	fix_fft@istep+1,fix_fft@l+1
  6829  000B8C  C160  F17E         	movff	fix_fft@istep+2,fix_fft@l+2
  6830  000B90  C161  F17F         	movff	fix_fft@istep+3,fix_fft@l+3
  6831  000B94                     l619:
  6832                           
  6833                           ; BSR set to: 1
  6834  000B94  0101               	movlb	1	; () banked
  6835  000B96  516A               	movf	fix_fft@n& (0+255),w,b
  6836  000B98  0101               	movlb	1	; () banked
  6837  000B9A  5D7C               	subwf	fix_fft@l& (0+255),w,b
  6838  000B9C  0101               	movlb	1	; () banked
  6839  000B9E  516B               	movf	(fix_fft@n+1)& (0+255),w,b
  6840  000BA0  0101               	movlb	1	; () banked
  6841  000BA2  597D               	subwfb	(fix_fft@l+1)& (0+255),w,b
  6842  000BA4  0101               	movlb	1	; () banked
  6843  000BA6  516C               	movf	(fix_fft@n+2)& (0+255),w,b
  6844  000BA8  0101               	movlb	1	; () banked
  6845  000BAA  597E               	subwfb	(fix_fft@l+2)& (0+255),w,b
  6846  000BAC  0101               	movlb	1	; () banked
  6847  000BAE  517F               	movf	(fix_fft@l+3)& (0+255),w,b
  6848  000BB0  0A80               	xorlw	128
  6849  000BB2  0100               	movlb	0	; () banked
  6850  000BB4  6FB1               	movwf	??_fix_fft& (0+255),b
  6851  000BB6  0101               	movlb	1	; () banked
  6852  000BB8  516D               	movf	(fix_fft@n+3)& (0+255),w,b
  6853  000BBA  0A80               	xorlw	128
  6854  000BBC  0100               	movlb	0	; () banked
  6855  000BBE  59B1               	subwfb	??_fix_fft& (0+255),w,b
  6856  000BC0  A0D8               	btfss	status,0,c
  6857  000BC2  D482               	goto	l5202
  6858                           
  6859                           ; BSR set to: 0
  6860                           
  6861                           ; BSR set to: 0
  6862  000BC4  0012               	return		;funcret
  6863  000BC6                     __end_of_fix_fft:
  6864                           	opt stack 0
  6865                           tblptru	equ	0xFF8
  6866                           tblptrh	equ	0xFF7
  6867                           tblptrl	equ	0xFF6
  6868                           tablat	equ	0xFF5
  6869                           postinc0	equ	0xFEE
  6870                           wreg	equ	0xFE8
  6871                           postinc1	equ	0xFE6
  6872                           postdec1	equ	0xFE5
  6873                           plusw1	equ	0xFE3
  6874                           fsr1h	equ	0xFE2
  6875                           fsr1l	equ	0xFE1
  6876                           postinc2	equ	0xFDE
  6877                           postdec2	equ	0xFDD
  6878                           plusw2	equ	0xFDB
  6879                           fsr2h	equ	0xFDA
  6880                           fsr2l	equ	0xFD9
  6881                           status	equ	0xFD8
  6882                           
  6883 ;; *************** function ___lmul *****************
  6884 ;; Defined at:
  6885 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul32.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;  multiplier      4   31[BANK0 ] unsigned long 
  6888 ;;  multiplicand    4   35[BANK0 ] unsigned long 
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  product         4   39[BANK0 ] unsigned long 
  6891 ;; Return value:  Size  Location     Type
  6892 ;;                  4   31[BANK0 ] unsigned long 
  6893 ;; Registers used:
  6894 ;;		wreg, status,2, status,0
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6900 ;;      Params:         0       8       0       0       0       0       0
  6901 ;;      Locals:         0       4       0       0       0       0       0
  6902 ;;      Temps:          0       0       0       0       0       0       0
  6903 ;;      Totals:         0      12       0       0       0       0       0
  6904 ;;Total ram usage:       12 bytes
  6905 ;; Hardware stack levels used:    1
  6906 ;; Hardware stack levels required when called:    5
  6907 ;; This function calls:
  6908 ;;		Nothing
  6909 ;; This function is called by:
  6910 ;;		_fix_fft
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           	psect	text8
  6915  003E08                     __ptext8:
  6916                           	opt stack 0
  6917  003E08                     ___lmul:
  6918                           	opt stack 22
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;incstack = 0
  6922  003E08  0E00               	movlw	0
  6923  003E0A  0100               	movlb	0	; () banked
  6924  003E0C  6FA7               	movwf	___lmul@product& (0+255),b
  6925  003E0E  0E00               	movlw	0
  6926  003E10  6FA8               	movwf	(___lmul@product+1)& (0+255),b
  6927  003E12  0E00               	movlw	0
  6928  003E14  6FA9               	movwf	(___lmul@product+2)& (0+255),b
  6929  003E16  0E00               	movlw	0
  6930  003E18  6FAA               	movwf	(___lmul@product+3)& (0+255),b
  6931  003E1A  D000               	goto	l4962
  6932  003E1C                     l4962:
  6933                           
  6934                           ; BSR set to: 0
  6935  003E1C  0100               	movlb	0	; () banked
  6936  003E1E  A19F               	btfss	___lmul@multiplier& (0+255),0,b
  6937  003E20  D011               	goto	l4966
  6938                           
  6939                           ; BSR set to: 0
  6940  003E22  0100               	movlb	0	; () banked
  6941  003E24  51A3               	movf	___lmul@multiplicand& (0+255),w,b
  6942  003E26  0100               	movlb	0	; () banked
  6943  003E28  27A7               	addwf	___lmul@product& (0+255),f,b
  6944  003E2A  0100               	movlb	0	; () banked
  6945  003E2C  51A4               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  6946  003E2E  0100               	movlb	0	; () banked
  6947  003E30  23A8               	addwfc	(___lmul@product+1)& (0+255),f,b
  6948  003E32  0100               	movlb	0	; () banked
  6949  003E34  51A5               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  6950  003E36  0100               	movlb	0	; () banked
  6951  003E38  23A9               	addwfc	(___lmul@product+2)& (0+255),f,b
  6952  003E3A  0100               	movlb	0	; () banked
  6953  003E3C  51A6               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  6954  003E3E  0100               	movlb	0	; () banked
  6955  003E40  23AA               	addwfc	(___lmul@product+3)& (0+255),f,b
  6956  003E42  D000               	goto	l4966
  6957  003E44                     l4966:
  6958                           
  6959                           ; BSR set to: 0
  6960  003E44  0100               	movlb	0	; () banked
  6961  003E46  90D8               	bcf	status,0,c
  6962  003E48  37A3               	rlcf	___lmul@multiplicand& (0+255),f,b
  6963  003E4A  37A4               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  6964  003E4C  37A5               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  6965  003E4E  37A6               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  6966                           
  6967                           ; BSR set to: 0
  6968  003E50  0100               	movlb	0	; () banked
  6969  003E52  90D8               	bcf	status,0,c
  6970  003E54  33A2               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  6971  003E56  33A1               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  6972  003E58  33A0               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  6973  003E5A  339F               	rrcf	___lmul@multiplier& (0+255),f,b
  6974  003E5C  0100               	movlb	0	; () banked
  6975  003E5E  519F               	movf	___lmul@multiplier& (0+255),w,b
  6976  003E60  0100               	movlb	0	; () banked
  6977  003E62  11A0               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  6978  003E64  0100               	movlb	0	; () banked
  6979  003E66  11A1               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  6980  003E68  0100               	movlb	0	; () banked
  6981  003E6A  11A2               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  6982  003E6C  A4D8               	btfss	status,2,c
  6983  003E6E  D7D6               	goto	l4962
  6984                           
  6985                           ; BSR set to: 0
  6986  003E70  C0A7  F09F         	movff	___lmul@product,?___lmul
  6987  003E74  C0A8  F0A0         	movff	___lmul@product+1,?___lmul+1
  6988  003E78  C0A9  F0A1         	movff	___lmul@product+2,?___lmul+2
  6989  003E7C  C0AA  F0A2         	movff	___lmul@product+3,?___lmul+3
  6990                           
  6991                           ; BSR set to: 0
  6992  003E80  0012               	return		;funcret
  6993  003E82                     __end_of___lmul:
  6994                           	opt stack 0
  6995                           tblptru	equ	0xFF8
  6996                           tblptrh	equ	0xFF7
  6997                           tblptrl	equ	0xFF6
  6998                           tablat	equ	0xFF5
  6999                           postinc0	equ	0xFEE
  7000                           wreg	equ	0xFE8
  7001                           postinc1	equ	0xFE6
  7002                           postdec1	equ	0xFE5
  7003                           plusw1	equ	0xFE3
  7004                           fsr1h	equ	0xFE2
  7005                           fsr1l	equ	0xFE1
  7006                           postinc2	equ	0xFDE
  7007                           postdec2	equ	0xFDD
  7008                           plusw2	equ	0xFDB
  7009                           fsr2h	equ	0xFDA
  7010                           fsr2l	equ	0xFD9
  7011                           status	equ	0xFD8
  7012                           
  7013 ;; *************** function ___ftdiv *****************
  7014 ;; Defined at:
  7015 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;  f1              3   87[BANK0 ] float 
  7018 ;;  f2              3   90[BANK0 ] float 
  7019 ;; Auto vars:     Size  Location     Type
  7020 ;;  f3              3    1[BANK1 ] float 
  7021 ;;  sign            1    5[BANK1 ] unsigned char 
  7022 ;;  exp             1    4[BANK1 ] unsigned char 
  7023 ;;  cntr            1    0[BANK1 ] unsigned char 
  7024 ;; Return value:  Size  Location     Type
  7025 ;;                  3   87[BANK0 ] float 
  7026 ;; Registers used:
  7027 ;;		wreg, status,2, status,0, cstack
  7028 ;; Tracked objects:
  7029 ;;		On entry : 0/0
  7030 ;;		On exit  : 0/0
  7031 ;;		Unchanged: 0/0
  7032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7033 ;;      Params:         0       6       0       0       0       0       0
  7034 ;;      Locals:         0       0       6       0       0       0       0
  7035 ;;      Temps:          0       3       0       0       0       0       0
  7036 ;;      Totals:         0       9       6       0       0       0       0
  7037 ;;Total ram usage:       15 bytes
  7038 ;; Hardware stack levels used:    1
  7039 ;; Hardware stack levels required when called:    6
  7040 ;; This function calls:
  7041 ;;		___ftpack
  7042 ;; This function is called by:
  7043 ;;		_cmStuffsWrapperFun
  7044 ;;		_cmFftFun
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048                           	psect	text9
  7049  003062                     __ptext9:
  7050                           	opt stack 0
  7051  003062                     ___ftdiv:
  7052                           	opt stack 22
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;incstack = 0
  7056  003062  C0D9  F0DD         	movff	___ftdiv@f1+2,??___ftdiv
  7057  003066  0100               	movlb	0	; () banked
  7058  003068  6BDE               	clrf	(??___ftdiv+1)& (0+255),b
  7059  00306A  6BDF               	clrf	(??___ftdiv+2)& (0+255),b
  7060  00306C  0100               	movlb	0	; () banked
  7061  00306E  35D8               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  7062  003070  0100               	movlb	0	; () banked
  7063  003072  37DD               	rlcf	??___ftdiv& (0+255),f,b
  7064  003074  E301               	bnc	u5951
  7065  003076  81DE               	bsf	(??___ftdiv+1)& (0+255),0,b
  7066  003078                     u5951:
  7067  003078  0100               	movlb	0	; () banked
  7068  00307A  51DD               	movf	??___ftdiv& (0+255),w,b
  7069  00307C  0101               	movlb	1	; () banked
  7070  00307E  6F5A               	movwf	___ftdiv@exp& (0+255),b
  7071  003080  0101               	movlb	1	; () banked
  7072  003082  515A               	movf	___ftdiv@exp& (0+255),w,b
  7073  003084  A4D8               	btfss	status,2,c
  7074  003086  D002               	goto	l5316
  7075  003088  D014               	goto	l5318
  7076                           
  7077                           ; BSR set to: 0
  7078                           
  7079                           ; BSR set to: 1
  7080  00308A  D08B               	goto	l1208
  7081  00308C                     l5316:
  7082  00308C  C0DC  F0DD         	movff	___ftdiv@f2+2,??___ftdiv
  7083  003090  0100               	movlb	0	; () banked
  7084  003092  6BDE               	clrf	(??___ftdiv+1)& (0+255),b
  7085  003094  6BDF               	clrf	(??___ftdiv+2)& (0+255),b
  7086  003096  0100               	movlb	0	; () banked
  7087  003098  35DB               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  7088  00309A  0100               	movlb	0	; () banked
  7089  00309C  37DD               	rlcf	??___ftdiv& (0+255),f,b
  7090  00309E  E301               	bnc	u5971
  7091  0030A0  81DE               	bsf	(??___ftdiv+1)& (0+255),0,b
  7092  0030A2                     u5971:
  7093  0030A2  0100               	movlb	0	; () banked
  7094  0030A4  51DD               	movf	??___ftdiv& (0+255),w,b
  7095  0030A6  0101               	movlb	1	; () banked
  7096  0030A8  6F5B               	movwf	___ftdiv@sign& (0+255),b
  7097  0030AA  0101               	movlb	1	; () banked
  7098  0030AC  515B               	movf	___ftdiv@sign& (0+255),w,b
  7099  0030AE  A4D8               	btfss	status,2,c
  7100  0030B0  D00A               	goto	l5322
  7101  0030B2                     l5318:
  7102                           
  7103                           ; BSR set to: 1
  7104  0030B2  0E00               	movlw	0
  7105  0030B4  0100               	movlb	0	; () banked
  7106  0030B6  6FD7               	movwf	?___ftdiv& (0+255),b
  7107  0030B8  0E00               	movlw	0
  7108  0030BA  0100               	movlb	0	; () banked
  7109  0030BC  6FD8               	movwf	(?___ftdiv+1)& (0+255),b
  7110  0030BE  0E00               	movlw	0
  7111  0030C0  0100               	movlb	0	; () banked
  7112  0030C2  6FD9               	movwf	(?___ftdiv+2)& (0+255),b
  7113                           
  7114                           ; BSR set to: 0
  7115  0030C4  D06E               	goto	l1208
  7116  0030C6                     l5322:
  7117  0030C6  0E00               	movlw	0
  7118  0030C8  0101               	movlb	1	; () banked
  7119  0030CA  6F57               	movwf	___ftdiv@f3& (0+255),b
  7120  0030CC  0E00               	movlw	0
  7121  0030CE  0101               	movlb	1	; () banked
  7122  0030D0  6F58               	movwf	(___ftdiv@f3+1)& (0+255),b
  7123  0030D2  0E00               	movlw	0
  7124  0030D4  0101               	movlb	1	; () banked
  7125  0030D6  6F59               	movwf	(___ftdiv@f3+2)& (0+255),b
  7126                           
  7127                           ; BSR set to: 1
  7128  0030D8  0101               	movlb	1	; () banked
  7129  0030DA  515B               	movf	___ftdiv@sign& (0+255),w,b
  7130  0030DC  0F89               	addlw	137
  7131  0030DE  0101               	movlb	1	; () banked
  7132  0030E0  5F5A               	subwf	___ftdiv@exp& (0+255),f,b
  7133                           
  7134                           ; BSR set to: 1
  7135  0030E2  C0D9  F15B         	movff	___ftdiv@f1+2,___ftdiv@sign
  7136                           
  7137                           ; BSR set to: 1
  7138  0030E6  0100               	movlb	0	; () banked
  7139  0030E8  51DC               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7140  0030EA  0101               	movlb	1	; () banked
  7141  0030EC  1B5B               	xorwf	___ftdiv@sign& (0+255),f,b
  7142                           
  7143                           ; BSR set to: 1
  7144  0030EE  0E80               	movlw	128
  7145  0030F0  0101               	movlb	1	; () banked
  7146  0030F2  175B               	andwf	___ftdiv@sign& (0+255),f,b
  7147                           
  7148                           ; BSR set to: 1
  7149  0030F4  0100               	movlb	0	; () banked
  7150  0030F6  8FD8               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  7151                           
  7152                           ; BSR set to: 0
  7153  0030F8  0EFF               	movlw	255
  7154  0030FA  0100               	movlb	0	; () banked
  7155  0030FC  17D7               	andwf	___ftdiv@f1& (0+255),f,b
  7156  0030FE  0EFF               	movlw	255
  7157  003100  0100               	movlb	0	; () banked
  7158  003102  17D8               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  7159  003104  0E00               	movlw	0
  7160  003106  0100               	movlb	0	; () banked
  7161  003108  17D9               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  7162                           
  7163                           ; BSR set to: 0
  7164  00310A  0100               	movlb	0	; () banked
  7165  00310C  8FDB               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  7166                           
  7167                           ; BSR set to: 0
  7168  00310E  0EFF               	movlw	255
  7169  003110  0100               	movlb	0	; () banked
  7170  003112  17DA               	andwf	___ftdiv@f2& (0+255),f,b
  7171  003114  0EFF               	movlw	255
  7172  003116  0100               	movlb	0	; () banked
  7173  003118  17DB               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  7174  00311A  0E00               	movlw	0
  7175  00311C  0100               	movlb	0	; () banked
  7176  00311E  17DC               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  7177                           
  7178                           ; BSR set to: 0
  7179  003120  0E18               	movlw	24
  7180  003122  0101               	movlb	1	; () banked
  7181  003124  6F56               	movwf	___ftdiv@cntr& (0+255),b
  7182  003126  D000               	goto	l5342
  7183  003128                     l5342:
  7184                           
  7185                           ; BSR set to: 1
  7186  003128  0101               	movlb	1	; () banked
  7187  00312A  90D8               	bcf	status,0,c
  7188  00312C  3757               	rlcf	___ftdiv@f3& (0+255),f,b
  7189  00312E  3758               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  7190  003130  3759               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  7191                           
  7192                           ; BSR set to: 1
  7193  003132  0100               	movlb	0	; () banked
  7194  003134  51DA               	movf	___ftdiv@f2& (0+255),w,b
  7195  003136  0100               	movlb	0	; () banked
  7196  003138  5DD7               	subwf	___ftdiv@f1& (0+255),w,b
  7197  00313A  0100               	movlb	0	; () banked
  7198  00313C  51DB               	movf	(___ftdiv@f2+1)& (0+255),w,b
  7199  00313E  0100               	movlb	0	; () banked
  7200  003140  59D8               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  7201  003142  0100               	movlb	0	; () banked
  7202  003144  51DC               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7203  003146  0100               	movlb	0	; () banked
  7204  003148  59D9               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  7205  00314A  A0D8               	btfss	status,0,c
  7206  00314C  D00E               	goto	l1211
  7207                           
  7208                           ; BSR set to: 0
  7209  00314E  0100               	movlb	0	; () banked
  7210  003150  51DA               	movf	___ftdiv@f2& (0+255),w,b
  7211  003152  0100               	movlb	0	; () banked
  7212  003154  5FD7               	subwf	___ftdiv@f1& (0+255),f,b
  7213  003156  0100               	movlb	0	; () banked
  7214  003158  51DB               	movf	(___ftdiv@f2+1)& (0+255),w,b
  7215  00315A  0100               	movlb	0	; () banked
  7216  00315C  5BD8               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  7217  00315E  0100               	movlb	0	; () banked
  7218  003160  51DC               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7219  003162  0100               	movlb	0	; () banked
  7220  003164  5BD9               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  7221                           
  7222                           ; BSR set to: 0
  7223  003166  0101               	movlb	1	; () banked
  7224  003168  8157               	bsf	___ftdiv@f3& (0+255),0,b
  7225  00316A                     l1211:
  7226  00316A  0100               	movlb	0	; () banked
  7227  00316C  90D8               	bcf	status,0,c
  7228  00316E  37D7               	rlcf	___ftdiv@f1& (0+255),f,b
  7229  003170  37D8               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  7230  003172  37D9               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  7231                           
  7232                           ; BSR set to: 0
  7233  003174  0101               	movlb	1	; () banked
  7234  003176  2F56               	decfsz	___ftdiv@cntr& (0+255),f,b
  7235  003178  D7D7               	goto	l5342
  7236  00317A  D000               	goto	l5352
  7237  00317C                     l5352:
  7238                           
  7239                           ; BSR set to: 1
  7240  00317C  C157  F09F         	movff	___ftdiv@f3,___ftpack@arg
  7241  003180  C158  F0A0         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7242  003184  C159  F0A1         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7243  003188  C15A  F0A2         	movff	___ftdiv@exp,___ftpack@exp
  7244  00318C  C15B  F0A3         	movff	___ftdiv@sign,___ftpack@sign
  7245  003190  ECA1  F01A         	call	___ftpack	;wreg free
  7246  003194  C09F  F0D7         	movff	?___ftpack,?___ftdiv
  7247  003198  C0A0  F0D8         	movff	?___ftpack+1,?___ftdiv+1
  7248  00319C  C0A1  F0D9         	movff	?___ftpack+2,?___ftdiv+2
  7249  0031A0  D000               	goto	l1208
  7250  0031A2                     l1208:
  7251  0031A2  0012               	return		;funcret
  7252  0031A4                     __end_of___ftdiv:
  7253                           	opt stack 0
  7254                           tblptru	equ	0xFF8
  7255                           tblptrh	equ	0xFF7
  7256                           tblptrl	equ	0xFF6
  7257                           tablat	equ	0xFF5
  7258                           postinc0	equ	0xFEE
  7259                           wreg	equ	0xFE8
  7260                           postinc1	equ	0xFE6
  7261                           postdec1	equ	0xFE5
  7262                           plusw1	equ	0xFE3
  7263                           fsr1h	equ	0xFE2
  7264                           fsr1l	equ	0xFE1
  7265                           postinc2	equ	0xFDE
  7266                           postdec2	equ	0xFDD
  7267                           plusw2	equ	0xFDB
  7268                           fsr2h	equ	0xFDA
  7269                           fsr2l	equ	0xFD9
  7270                           status	equ	0xFD8
  7271                           
  7272 ;; *************** function _ReadAndTime *****************
  7273 ;; Defined at:
  7274 ;;		line 62 in file "AccelerationFuncs.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;		None
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;		None
  7279 ;; Return value:  Size  Location     Type
  7280 ;;		None               void
  7281 ;; Registers used:
  7282 ;;		wreg, status,2, status,0, cstack
  7283 ;; Tracked objects:
  7284 ;;		On entry : 0/0
  7285 ;;		On exit  : 0/0
  7286 ;;		Unchanged: 0/0
  7287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7288 ;;      Params:         0       0       0       0       0       0       0
  7289 ;;      Locals:         0       0       0       0       0       0       0
  7290 ;;      Temps:          0       0       0       0       0       0       0
  7291 ;;      Totals:         0       0       0       0       0       0       0
  7292 ;;Total ram usage:        0 bytes
  7293 ;; Hardware stack levels used:    1
  7294 ;; Hardware stack levels required when called:    8
  7295 ;; This function calls:
  7296 ;;		_Read_X
  7297 ;;		_Read_Y
  7298 ;;		_Read_Z
  7299 ;;		_TimeLoop
  7300 ;;		_approxRollingAverage
  7301 ;; This function is called by:
  7302 ;;		_main
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           	psect	text10
  7307  002B64                     __ptext10:
  7308                           	opt stack 0
  7309  002B64                     _ReadAndTime:
  7310                           	opt stack 22
  7311                           
  7312                           ;AccelerationFuncs.c: 65: x = Read_X(gscale,goffset);
  7313                           
  7314                           ;incstack = 0
  7315  002B64  C04B  F16B         	movff	_gscale,Read_X@m
  7316  002B68  C04C  F16C         	movff	_gscale+1,Read_X@m+1
  7317  002B6C  C04D  F16D         	movff	_gscale+2,Read_X@m+2
  7318  002B70  C048  F16E         	movff	_goffset,Read_X@c
  7319  002B74  C049  F16F         	movff	_goffset+1,Read_X@c+1
  7320  002B78  C04A  F170         	movff	_goffset+2,Read_X@c+2
  7321  002B7C  ECEC  F01C         	call	_Read_X	;wreg free
  7322  002B80  C16B  F03E         	movff	?_Read_X,_x
  7323  002B84  C16C  F03F         	movff	?_Read_X+1,_x+1
  7324                           
  7325                           ;AccelerationFuncs.c: 66: y = Read_Y(gscale,goffset);
  7326  002B88  C04B  F16B         	movff	_gscale,Read_Y@m
  7327  002B8C  C04C  F16C         	movff	_gscale+1,Read_Y@m+1
  7328  002B90  C04D  F16D         	movff	_gscale+2,Read_Y@m+2
  7329  002B94  C048  F16E         	movff	_goffset,Read_Y@c
  7330  002B98  C049  F16F         	movff	_goffset+1,Read_Y@c+1
  7331  002B9C  C04A  F170         	movff	_goffset+2,Read_Y@c+2
  7332  002BA0  EC88  F01C         	call	_Read_Y	;wreg free
  7333  002BA4  C16B  F040         	movff	?_Read_Y,_y
  7334  002BA8  C16C  F041         	movff	?_Read_Y+1,_y+1
  7335                           
  7336                           ;AccelerationFuncs.c: 67: z = Read_Z(gscale,goffset);
  7337  002BAC  C04B  F16B         	movff	_gscale,Read_Z@m
  7338  002BB0  C04C  F16C         	movff	_gscale+1,Read_Z@m+1
  7339  002BB4  C04D  F16D         	movff	_gscale+2,Read_Z@m+2
  7340  002BB8  C048  F16E         	movff	_goffset,Read_Z@c
  7341  002BBC  C049  F16F         	movff	_goffset+1,Read_Z@c+1
  7342  002BC0  C04A  F170         	movff	_goffset+2,Read_Z@c+2
  7343  002BC4  EC24  F01C         	call	_Read_Z	;wreg free
  7344  002BC8  C16B  F042         	movff	?_Read_Z,_z
  7345  002BCC  C16C  F043         	movff	?_Read_Z+1,_z+1
  7346                           
  7347                           ;AccelerationFuncs.c: 70: xlongavg=approxRollingAverage(xlongavg,x,Nlong);
  7348  002BD0  C1B0  F0AD         	movff	_xlongavg,approxRollingAverage@avg
  7349  002BD4  C1B1  F0AE         	movff	_xlongavg+1,approxRollingAverage@avg+1
  7350  002BD8  C1B2  F0AF         	movff	_xlongavg+2,approxRollingAverage@avg+2
  7351  002BDC  C1B3  F0B0         	movff	_xlongavg+3,approxRollingAverage@avg+3
  7352  002BE0  C03E  F0B1         	movff	_x,approxRollingAverage@new_sample
  7353  002BE4  C03F  F0B2         	movff	_x+1,approxRollingAverage@new_sample+1
  7354  002BE8  0100               	movlb	0	; () banked
  7355  002BEA  0E00               	movlw	0
  7356  002BEC  BFB2               	btfsc	(approxRollingAverage@new_sample+1)& (0+255),7,b
  7357  002BEE  0EFF               	movlw	-1
  7358  002BF0  6FB3               	movwf	(approxRollingAverage@new_sample+2)& (0+255),b
  7359  002BF2  6FB4               	movwf	(approxRollingAverage@new_sample+3)& (0+255),b
  7360  002BF4  C050  F0B5         	movff	_Nlong,approxRollingAverage@N
  7361  002BF8  C051  F0B6         	movff	_Nlong+1,approxRollingAverage@N+1
  7362  002BFC  ECA7  F01D         	call	_approxRollingAverage	;wreg free
  7363  002C00  C0AD  F1B0         	movff	?_approxRollingAverage,_xlongavg
  7364  002C04  C0AE  F1B1         	movff	?_approxRollingAverage+1,_xlongavg+1
  7365  002C08  C0AF  F1B2         	movff	?_approxRollingAverage+2,_xlongavg+2
  7366  002C0C  C0B0  F1B3         	movff	?_approxRollingAverage+3,_xlongavg+3
  7367                           
  7368                           ;AccelerationFuncs.c: 71: ylongavg=approxRollingAverage(ylongavg,y,Nlong);
  7369  002C10  C1B8  F0AD         	movff	_ylongavg,approxRollingAverage@avg
  7370  002C14  C1B9  F0AE         	movff	_ylongavg+1,approxRollingAverage@avg+1
  7371  002C18  C1BA  F0AF         	movff	_ylongavg+2,approxRollingAverage@avg+2
  7372  002C1C  C1BB  F0B0         	movff	_ylongavg+3,approxRollingAverage@avg+3
  7373  002C20  C040  F0B1         	movff	_y,approxRollingAverage@new_sample
  7374  002C24  C041  F0B2         	movff	_y+1,approxRollingAverage@new_sample+1
  7375  002C28  0100               	movlb	0	; () banked
  7376  002C2A  0E00               	movlw	0
  7377  002C2C  BFB2               	btfsc	(approxRollingAverage@new_sample+1)& (0+255),7,b
  7378  002C2E  0EFF               	movlw	-1
  7379  002C30  6FB3               	movwf	(approxRollingAverage@new_sample+2)& (0+255),b
  7380  002C32  6FB4               	movwf	(approxRollingAverage@new_sample+3)& (0+255),b
  7381  002C34  C050  F0B5         	movff	_Nlong,approxRollingAverage@N
  7382  002C38  C051  F0B6         	movff	_Nlong+1,approxRollingAverage@N+1
  7383  002C3C  ECA7  F01D         	call	_approxRollingAverage	;wreg free
  7384  002C40  C0AD  F1B8         	movff	?_approxRollingAverage,_ylongavg
  7385  002C44  C0AE  F1B9         	movff	?_approxRollingAverage+1,_ylongavg+1
  7386  002C48  C0AF  F1BA         	movff	?_approxRollingAverage+2,_ylongavg+2
  7387  002C4C  C0B0  F1BB         	movff	?_approxRollingAverage+3,_ylongavg+3
  7388                           
  7389                           ;AccelerationFuncs.c: 72: zlongavg=approxRollingAverage(zlongavg,z,Nlong);
  7390  002C50  C1C0  F0AD         	movff	_zlongavg,approxRollingAverage@avg
  7391  002C54  C1C1  F0AE         	movff	_zlongavg+1,approxRollingAverage@avg+1
  7392  002C58  C1C2  F0AF         	movff	_zlongavg+2,approxRollingAverage@avg+2
  7393  002C5C  C1C3  F0B0         	movff	_zlongavg+3,approxRollingAverage@avg+3
  7394  002C60  C042  F0B1         	movff	_z,approxRollingAverage@new_sample
  7395  002C64  C043  F0B2         	movff	_z+1,approxRollingAverage@new_sample+1
  7396  002C68  0100               	movlb	0	; () banked
  7397  002C6A  0E00               	movlw	0
  7398  002C6C  BFB2               	btfsc	(approxRollingAverage@new_sample+1)& (0+255),7,b
  7399  002C6E  0EFF               	movlw	-1
  7400  002C70  6FB3               	movwf	(approxRollingAverage@new_sample+2)& (0+255),b
  7401  002C72  6FB4               	movwf	(approxRollingAverage@new_sample+3)& (0+255),b
  7402  002C74  C050  F0B5         	movff	_Nlong,approxRollingAverage@N
  7403  002C78  C051  F0B6         	movff	_Nlong+1,approxRollingAverage@N+1
  7404  002C7C  ECA7  F01D         	call	_approxRollingAverage	;wreg free
  7405  002C80  C0AD  F1C0         	movff	?_approxRollingAverage,_zlongavg
  7406  002C84  C0AE  F1C1         	movff	?_approxRollingAverage+1,_zlongavg+1
  7407  002C88  C0AF  F1C2         	movff	?_approxRollingAverage+2,_zlongavg+2
  7408  002C8C  C0B0  F1C3         	movff	?_approxRollingAverage+3,_zlongavg+3
  7409                           
  7410                           ;AccelerationFuncs.c: 74: xshortavg=approxRollingAverage(xshortavg,x,Nshort);
  7411  002C90  C1B4  F0AD         	movff	_xshortavg,approxRollingAverage@avg
  7412  002C94  C1B5  F0AE         	movff	_xshortavg+1,approxRollingAverage@avg+1
  7413  002C98  C1B6  F0AF         	movff	_xshortavg+2,approxRollingAverage@avg+2
  7414  002C9C  C1B7  F0B0         	movff	_xshortavg+3,approxRollingAverage@avg+3
  7415  002CA0  C03E  F0B1         	movff	_x,approxRollingAverage@new_sample
  7416  002CA4  C03F  F0B2         	movff	_x+1,approxRollingAverage@new_sample+1
  7417  002CA8  0100               	movlb	0	; () banked
  7418  002CAA  0E00               	movlw	0
  7419  002CAC  BFB2               	btfsc	(approxRollingAverage@new_sample+1)& (0+255),7,b
  7420  002CAE  0EFF               	movlw	-1
  7421  002CB0  6FB3               	movwf	(approxRollingAverage@new_sample+2)& (0+255),b
  7422  002CB2  6FB4               	movwf	(approxRollingAverage@new_sample+3)& (0+255),b
  7423  002CB4  C052  F0B5         	movff	_Nshort,approxRollingAverage@N
  7424  002CB8  C053  F0B6         	movff	_Nshort+1,approxRollingAverage@N+1
  7425  002CBC  ECA7  F01D         	call	_approxRollingAverage	;wreg free
  7426  002CC0  C0AD  F1B4         	movff	?_approxRollingAverage,_xshortavg
  7427  002CC4  C0AE  F1B5         	movff	?_approxRollingAverage+1,_xshortavg+1
  7428  002CC8  C0AF  F1B6         	movff	?_approxRollingAverage+2,_xshortavg+2
  7429  002CCC  C0B0  F1B7         	movff	?_approxRollingAverage+3,_xshortavg+3
  7430                           
  7431                           ;AccelerationFuncs.c: 75: yshortavg=approxRollingAverage(yshortavg,y,Nshort);
  7432  002CD0  C1BC  F0AD         	movff	_yshortavg,approxRollingAverage@avg
  7433  002CD4  C1BD  F0AE         	movff	_yshortavg+1,approxRollingAverage@avg+1
  7434  002CD8  C1BE  F0AF         	movff	_yshortavg+2,approxRollingAverage@avg+2
  7435  002CDC  C1BF  F0B0         	movff	_yshortavg+3,approxRollingAverage@avg+3
  7436  002CE0  C040  F0B1         	movff	_y,approxRollingAverage@new_sample
  7437  002CE4  C041  F0B2         	movff	_y+1,approxRollingAverage@new_sample+1
  7438  002CE8  0100               	movlb	0	; () banked
  7439  002CEA  0E00               	movlw	0
  7440  002CEC  BFB2               	btfsc	(approxRollingAverage@new_sample+1)& (0+255),7,b
  7441  002CEE  0EFF               	movlw	-1
  7442  002CF0  6FB3               	movwf	(approxRollingAverage@new_sample+2)& (0+255),b
  7443  002CF2  6FB4               	movwf	(approxRollingAverage@new_sample+3)& (0+255),b
  7444  002CF4  C052  F0B5         	movff	_Nshort,approxRollingAverage@N
  7445  002CF8  C053  F0B6         	movff	_Nshort+1,approxRollingAverage@N+1
  7446  002CFC  ECA7  F01D         	call	_approxRollingAverage	;wreg free
  7447  002D00  C0AD  F1BC         	movff	?_approxRollingAverage,_yshortavg
  7448  002D04  C0AE  F1BD         	movff	?_approxRollingAverage+1,_yshortavg+1
  7449  002D08  C0AF  F1BE         	movff	?_approxRollingAverage+2,_yshortavg+2
  7450  002D0C  C0B0  F1BF         	movff	?_approxRollingAverage+3,_yshortavg+3
  7451                           
  7452                           ;AccelerationFuncs.c: 76: zshortavg=approxRollingAverage(zshortavg,z,Nshort);
  7453  002D10  C1C4  F0AD         	movff	_zshortavg,approxRollingAverage@avg
  7454  002D14  C1C5  F0AE         	movff	_zshortavg+1,approxRollingAverage@avg+1
  7455  002D18  C1C6  F0AF         	movff	_zshortavg+2,approxRollingAverage@avg+2
  7456  002D1C  C1C7  F0B0         	movff	_zshortavg+3,approxRollingAverage@avg+3
  7457  002D20  C042  F0B1         	movff	_z,approxRollingAverage@new_sample
  7458  002D24  C043  F0B2         	movff	_z+1,approxRollingAverage@new_sample+1
  7459  002D28  0100               	movlb	0	; () banked
  7460  002D2A  0E00               	movlw	0
  7461  002D2C  BFB2               	btfsc	(approxRollingAverage@new_sample+1)& (0+255),7,b
  7462  002D2E  0EFF               	movlw	-1
  7463  002D30  6FB3               	movwf	(approxRollingAverage@new_sample+2)& (0+255),b
  7464  002D32  6FB4               	movwf	(approxRollingAverage@new_sample+3)& (0+255),b
  7465  002D34  C052  F0B5         	movff	_Nshort,approxRollingAverage@N
  7466  002D38  C053  F0B6         	movff	_Nshort+1,approxRollingAverage@N+1
  7467  002D3C  ECA7  F01D         	call	_approxRollingAverage	;wreg free
  7468  002D40  C0AD  F1C4         	movff	?_approxRollingAverage,_zshortavg
  7469  002D44  C0AE  F1C5         	movff	?_approxRollingAverage+1,_zshortavg+1
  7470  002D48  C0AF  F1C6         	movff	?_approxRollingAverage+2,_zshortavg+2
  7471  002D4C  C0B0  F1C7         	movff	?_approxRollingAverage+3,_zshortavg+3
  7472                           
  7473                           ;AccelerationFuncs.c: 79: TimeLoop();
  7474  002D50  EC3C  F01E         	call	_TimeLoop	;wreg free
  7475  002D54  0012               	return		;funcret
  7476  002D56                     __end_of_ReadAndTime:
  7477                           	opt stack 0
  7478                           tblptru	equ	0xFF8
  7479                           tblptrh	equ	0xFF7
  7480                           tblptrl	equ	0xFF6
  7481                           tablat	equ	0xFF5
  7482                           postinc0	equ	0xFEE
  7483                           wreg	equ	0xFE8
  7484                           postinc1	equ	0xFE6
  7485                           postdec1	equ	0xFE5
  7486                           plusw1	equ	0xFE3
  7487                           fsr1h	equ	0xFE2
  7488                           fsr1l	equ	0xFE1
  7489                           postinc2	equ	0xFDE
  7490                           postdec2	equ	0xFDD
  7491                           plusw2	equ	0xFDB
  7492                           fsr2h	equ	0xFDA
  7493                           fsr2l	equ	0xFD9
  7494                           status	equ	0xFD8
  7495                           
  7496 ;; *************** function _approxRollingAverage *****************
  7497 ;; Defined at:
  7498 ;;		line 82 in file "AccelerationFuncs.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;  avg             4   45[BANK0 ] long 
  7501 ;;  new_sample      4   49[BANK0 ] long 
  7502 ;;  N               2   53[BANK0 ] int 
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;		None
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  4   45[BANK0 ] long 
  7507 ;; Registers used:
  7508 ;;		wreg, status,2, status,0, cstack
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7514 ;;      Params:         0      10       0       0       0       0       0
  7515 ;;      Locals:         0       0       0       0       0       0       0
  7516 ;;      Temps:          0       4       0       0       0       0       0
  7517 ;;      Totals:         0      14       0       0       0       0       0
  7518 ;;Total ram usage:       14 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    6
  7521 ;; This function calls:
  7522 ;;		___aldiv
  7523 ;; This function is called by:
  7524 ;;		_ReadAndTime
  7525 ;; This function uses a non-reentrant model
  7526 ;;
  7527                           
  7528                           	psect	text11
  7529  003B4E                     __ptext11:
  7530                           	opt stack 0
  7531  003B4E                     _approxRollingAverage:
  7532                           	opt stack 23
  7533                           
  7534                           ;AccelerationFuncs.c: 84: avg += (new_sample - avg) / N;
  7535                           
  7536                           ;incstack = 0
  7537  003B4E  C0AD  F0B7         	movff	approxRollingAverage@avg,??_approxRollingAverage
  7538  003B52  C0AE  F0B8         	movff	approxRollingAverage@avg+1,??_approxRollingAverage+1
  7539  003B56  C0AF  F0B9         	movff	approxRollingAverage@avg+2,??_approxRollingAverage+2
  7540  003B5A  C0B0  F0BA         	movff	approxRollingAverage@avg+3,??_approxRollingAverage+3
  7541  003B5E  0100               	movlb	0	; () banked
  7542  003B60  1FB7               	comf	??_approxRollingAverage& (0+255),f,b
  7543  003B62  1FB8               	comf	(??_approxRollingAverage+1)& (0+255),f,b
  7544  003B64  1FB9               	comf	(??_approxRollingAverage+2)& (0+255),f,b
  7545  003B66  1FBA               	comf	(??_approxRollingAverage+3)& (0+255),f,b
  7546  003B68  2BB7               	incf	??_approxRollingAverage& (0+255),f,b
  7547  003B6A  0E00               	movlw	0
  7548  003B6C  23B8               	addwfc	(??_approxRollingAverage+1)& (0+255),f,b
  7549  003B6E  23B9               	addwfc	(??_approxRollingAverage+2)& (0+255),f,b
  7550  003B70  23BA               	addwfc	(??_approxRollingAverage+3)& (0+255),f,b
  7551  003B72  0100               	movlb	0	; () banked
  7552  003B74  51B1               	movf	approxRollingAverage@new_sample& (0+255),w,b
  7553  003B76  0100               	movlb	0	; () banked
  7554  003B78  25B7               	addwf	??_approxRollingAverage& (0+255),w,b
  7555  003B7A  0100               	movlb	0	; () banked
  7556  003B7C  6F9F               	movwf	___aldiv@dividend& (0+255),b
  7557  003B7E  0100               	movlb	0	; () banked
  7558  003B80  51B2               	movf	(approxRollingAverage@new_sample+1)& (0+255),w,b
  7559  003B82  0100               	movlb	0	; () banked
  7560  003B84  21B8               	addwfc	(??_approxRollingAverage+1)& (0+255),w,b
  7561  003B86  0100               	movlb	0	; () banked
  7562  003B88  6FA0               	movwf	(___aldiv@dividend+1)& (0+255),b
  7563  003B8A  0100               	movlb	0	; () banked
  7564  003B8C  51B3               	movf	(approxRollingAverage@new_sample+2)& (0+255),w,b
  7565  003B8E  0100               	movlb	0	; () banked
  7566  003B90  21B9               	addwfc	(??_approxRollingAverage+2)& (0+255),w,b
  7567  003B92  0100               	movlb	0	; () banked
  7568  003B94  6FA1               	movwf	(___aldiv@dividend+2)& (0+255),b
  7569  003B96  0100               	movlb	0	; () banked
  7570  003B98  51B4               	movf	(approxRollingAverage@new_sample+3)& (0+255),w,b
  7571  003B9A  0100               	movlb	0	; () banked
  7572  003B9C  21BA               	addwfc	(??_approxRollingAverage+3)& (0+255),w,b
  7573  003B9E  0100               	movlb	0	; () banked
  7574  003BA0  6FA2               	movwf	(___aldiv@dividend+3)& (0+255),b
  7575  003BA2  C0B5  F0A3         	movff	approxRollingAverage@N,___aldiv@divisor
  7576  003BA6  C0B6  F0A4         	movff	approxRollingAverage@N+1,___aldiv@divisor+1
  7577  003BAA  0100               	movlb	0	; () banked
  7578  003BAC  0E00               	movlw	0
  7579  003BAE  BFA4               	btfsc	(___aldiv@divisor+1)& (0+255),7,b
  7580  003BB0  0EFF               	movlw	-1
  7581  003BB2  6FA5               	movwf	(___aldiv@divisor+2)& (0+255),b
  7582  003BB4  6FA6               	movwf	(___aldiv@divisor+3)& (0+255),b
  7583  003BB6  EC0B  F01A         	call	___aldiv	;wreg free
  7584  003BBA  0100               	movlb	0	; () banked
  7585  003BBC  519F               	movf	?___aldiv& (0+255),w,b
  7586  003BBE  0100               	movlb	0	; () banked
  7587  003BC0  27AD               	addwf	approxRollingAverage@avg& (0+255),f,b
  7588  003BC2  0100               	movlb	0	; () banked
  7589  003BC4  51A0               	movf	(?___aldiv+1)& (0+255),w,b
  7590  003BC6  0100               	movlb	0	; () banked
  7591  003BC8  23AE               	addwfc	(approxRollingAverage@avg+1)& (0+255),f,b
  7592  003BCA  0100               	movlb	0	; () banked
  7593  003BCC  51A1               	movf	(?___aldiv+2)& (0+255),w,b
  7594  003BCE  0100               	movlb	0	; () banked
  7595  003BD0  23AF               	addwfc	(approxRollingAverage@avg+2)& (0+255),f,b
  7596  003BD2  0100               	movlb	0	; () banked
  7597  003BD4  51A2               	movf	(?___aldiv+3)& (0+255),w,b
  7598  003BD6  0100               	movlb	0	; () banked
  7599  003BD8  23B0               	addwfc	(approxRollingAverage@avg+3)& (0+255),f,b
  7600                           
  7601                           ; BSR set to: 0
  7602                           ;AccelerationFuncs.c: 85: return avg;
  7603  003BDA  C0AD  F0AD         	movff	approxRollingAverage@avg,?_approxRollingAverage
  7604  003BDE  C0AE  F0AE         	movff	approxRollingAverage@avg+1,?_approxRollingAverage+1
  7605  003BE2  C0AF  F0AF         	movff	approxRollingAverage@avg+2,?_approxRollingAverage+2
  7606  003BE6  C0B0  F0B0         	movff	approxRollingAverage@avg+3,?_approxRollingAverage+3
  7607  003BEA  D000               	goto	l564
  7608  003BEC                     l564:
  7609                           
  7610                           ; BSR set to: 0
  7611  003BEC  0012               	return		;funcret
  7612  003BEE                     __end_of_approxRollingAverage:
  7613                           	opt stack 0
  7614                           tblptru	equ	0xFF8
  7615                           tblptrh	equ	0xFF7
  7616                           tblptrl	equ	0xFF6
  7617                           tablat	equ	0xFF5
  7618                           postinc0	equ	0xFEE
  7619                           wreg	equ	0xFE8
  7620                           postinc1	equ	0xFE6
  7621                           postdec1	equ	0xFE5
  7622                           plusw1	equ	0xFE3
  7623                           fsr1h	equ	0xFE2
  7624                           fsr1l	equ	0xFE1
  7625                           postinc2	equ	0xFDE
  7626                           postdec2	equ	0xFDD
  7627                           plusw2	equ	0xFDB
  7628                           fsr2h	equ	0xFDA
  7629                           fsr2l	equ	0xFD9
  7630                           status	equ	0xFD8
  7631                           
  7632 ;; *************** function ___aldiv *****************
  7633 ;; Defined at:
  7634 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\aldiv.c"
  7635 ;; Parameters:    Size  Location     Type
  7636 ;;  dividend        4   31[BANK0 ] long 
  7637 ;;  divisor         4   35[BANK0 ] long 
  7638 ;; Auto vars:     Size  Location     Type
  7639 ;;  quotient        4   41[BANK0 ] long 
  7640 ;;  sign            1   40[BANK0 ] unsigned char 
  7641 ;;  counter         1   39[BANK0 ] unsigned char 
  7642 ;; Return value:  Size  Location     Type
  7643 ;;                  4   31[BANK0 ] long 
  7644 ;; Registers used:
  7645 ;;		wreg, status,2, status,0
  7646 ;; Tracked objects:
  7647 ;;		On entry : 0/0
  7648 ;;		On exit  : 0/0
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7651 ;;      Params:         0       8       0       0       0       0       0
  7652 ;;      Locals:         0       6       0       0       0       0       0
  7653 ;;      Temps:          0       0       0       0       0       0       0
  7654 ;;      Totals:         0      14       0       0       0       0       0
  7655 ;;Total ram usage:       14 bytes
  7656 ;; Hardware stack levels used:    1
  7657 ;; Hardware stack levels required when called:    5
  7658 ;; This function calls:
  7659 ;;		Nothing
  7660 ;; This function is called by:
  7661 ;;		_approxRollingAverage
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665                           	psect	text12
  7666  003416                     __ptext12:
  7667                           	opt stack 0
  7668  003416                     ___aldiv:
  7669                           	opt stack 23
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;incstack = 0
  7673  003416  0E00               	movlw	0
  7674  003418  0100               	movlb	0	; () banked
  7675  00341A  6FA8               	movwf	___aldiv@sign& (0+255),b
  7676                           
  7677                           ; BSR set to: 0
  7678  00341C  0100               	movlb	0	; () banked
  7679  00341E  AFA6               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  7680  003420  D00D               	goto	l3670
  7681                           
  7682                           ; BSR set to: 0
  7683  003422  0100               	movlb	0	; () banked
  7684  003424  1FA6               	comf	(___aldiv@divisor+3)& (0+255),f,b
  7685  003426  1FA5               	comf	(___aldiv@divisor+2)& (0+255),f,b
  7686  003428  1FA4               	comf	(___aldiv@divisor+1)& (0+255),f,b
  7687  00342A  6DA3               	negf	___aldiv@divisor& (0+255),b
  7688  00342C  0E00               	movlw	0
  7689  00342E  23A4               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  7690  003430  23A5               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  7691  003432  23A6               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  7692                           
  7693                           ; BSR set to: 0
  7694  003434  0E01               	movlw	1
  7695  003436  0100               	movlb	0	; () banked
  7696  003438  6FA8               	movwf	___aldiv@sign& (0+255),b
  7697  00343A  D000               	goto	l3670
  7698  00343C                     l3670:
  7699                           
  7700                           ; BSR set to: 0
  7701  00343C  0100               	movlb	0	; () banked
  7702  00343E  AFA2               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  7703  003440  D00D               	goto	l3676
  7704                           
  7705                           ; BSR set to: 0
  7706  003442  0100               	movlb	0	; () banked
  7707  003444  1FA2               	comf	(___aldiv@dividend+3)& (0+255),f,b
  7708  003446  1FA1               	comf	(___aldiv@dividend+2)& (0+255),f,b
  7709  003448  1FA0               	comf	(___aldiv@dividend+1)& (0+255),f,b
  7710  00344A  6D9F               	negf	___aldiv@dividend& (0+255),b
  7711  00344C  0E00               	movlw	0
  7712  00344E  23A0               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  7713  003450  23A1               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  7714  003452  23A2               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  7715                           
  7716                           ; BSR set to: 0
  7717  003454  0E01               	movlw	1
  7718  003456  0100               	movlb	0	; () banked
  7719  003458  1BA8               	xorwf	___aldiv@sign& (0+255),f,b
  7720  00345A  D000               	goto	l3676
  7721  00345C                     l3676:
  7722                           
  7723                           ; BSR set to: 0
  7724  00345C  0E00               	movlw	0
  7725  00345E  0100               	movlb	0	; () banked
  7726  003460  6FA9               	movwf	___aldiv@quotient& (0+255),b
  7727  003462  0E00               	movlw	0
  7728  003464  6FAA               	movwf	(___aldiv@quotient+1)& (0+255),b
  7729  003466  0E00               	movlw	0
  7730  003468  6FAB               	movwf	(___aldiv@quotient+2)& (0+255),b
  7731  00346A  0E00               	movlw	0
  7732  00346C  6FAC               	movwf	(___aldiv@quotient+3)& (0+255),b
  7733                           
  7734                           ; BSR set to: 0
  7735  00346E  0100               	movlb	0	; () banked
  7736  003470  51A3               	movf	___aldiv@divisor& (0+255),w,b
  7737  003472  0100               	movlb	0	; () banked
  7738  003474  11A4               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  7739  003476  0100               	movlb	0	; () banked
  7740  003478  11A5               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  7741  00347A  0100               	movlb	0	; () banked
  7742  00347C  11A6               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  7743  00347E  B4D8               	btfsc	status,2,c
  7744  003480  D047               	goto	l3698
  7745                           
  7746                           ; BSR set to: 0
  7747  003482  0E01               	movlw	1
  7748  003484  0100               	movlb	0	; () banked
  7749  003486  6FA7               	movwf	___aldiv@counter& (0+255),b
  7750  003488  D009               	goto	l3684
  7751  00348A                     l3682:
  7752                           
  7753                           ; BSR set to: 0
  7754  00348A  0100               	movlb	0	; () banked
  7755  00348C  90D8               	bcf	status,0,c
  7756  00348E  37A3               	rlcf	___aldiv@divisor& (0+255),f,b
  7757  003490  37A4               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  7758  003492  37A5               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  7759  003494  37A6               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  7760  003496  0100               	movlb	0	; () banked
  7761  003498  2BA7               	incf	___aldiv@counter& (0+255),f,b
  7762  00349A  D000               	goto	l3684
  7763  00349C                     l3684:
  7764                           
  7765                           ; BSR set to: 0
  7766  00349C  0100               	movlb	0	; () banked
  7767  00349E  BFA6               	btfsc	(___aldiv@divisor+3)& (0+255),7,b
  7768  0034A0  D002               	goto	l3686
  7769  0034A2  D7F3               	goto	l3682
  7770                           
  7771                           ; BSR set to: 0
  7772  0034A4  D000               	goto	l3686
  7773  0034A6                     l3686:
  7774                           
  7775                           ; BSR set to: 0
  7776  0034A6  0100               	movlb	0	; () banked
  7777  0034A8  90D8               	bcf	status,0,c
  7778  0034AA  37A9               	rlcf	___aldiv@quotient& (0+255),f,b
  7779  0034AC  37AA               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  7780  0034AE  37AB               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  7781  0034B0  37AC               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  7782                           
  7783                           ; BSR set to: 0
  7784  0034B2  0100               	movlb	0	; () banked
  7785  0034B4  51A3               	movf	___aldiv@divisor& (0+255),w,b
  7786  0034B6  0100               	movlb	0	; () banked
  7787  0034B8  5D9F               	subwf	___aldiv@dividend& (0+255),w,b
  7788  0034BA  0100               	movlb	0	; () banked
  7789  0034BC  51A4               	movf	(___aldiv@divisor+1)& (0+255),w,b
  7790  0034BE  0100               	movlb	0	; () banked
  7791  0034C0  59A0               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  7792  0034C2  0100               	movlb	0	; () banked
  7793  0034C4  51A5               	movf	(___aldiv@divisor+2)& (0+255),w,b
  7794  0034C6  0100               	movlb	0	; () banked
  7795  0034C8  59A1               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  7796  0034CA  0100               	movlb	0	; () banked
  7797  0034CC  51A6               	movf	(___aldiv@divisor+3)& (0+255),w,b
  7798  0034CE  0100               	movlb	0	; () banked
  7799  0034D0  59A2               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  7800  0034D2  A0D8               	btfss	status,0,c
  7801  0034D4  D013               	goto	l3694
  7802                           
  7803                           ; BSR set to: 0
  7804  0034D6  0100               	movlb	0	; () banked
  7805  0034D8  51A3               	movf	___aldiv@divisor& (0+255),w,b
  7806  0034DA  0100               	movlb	0	; () banked
  7807  0034DC  5F9F               	subwf	___aldiv@dividend& (0+255),f,b
  7808  0034DE  0100               	movlb	0	; () banked
  7809  0034E0  51A4               	movf	(___aldiv@divisor+1)& (0+255),w,b
  7810  0034E2  0100               	movlb	0	; () banked
  7811  0034E4  5BA0               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  7812  0034E6  0100               	movlb	0	; () banked
  7813  0034E8  51A5               	movf	(___aldiv@divisor+2)& (0+255),w,b
  7814  0034EA  0100               	movlb	0	; () banked
  7815  0034EC  5BA1               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  7816  0034EE  0100               	movlb	0	; () banked
  7817  0034F0  51A6               	movf	(___aldiv@divisor+3)& (0+255),w,b
  7818  0034F2  0100               	movlb	0	; () banked
  7819  0034F4  5BA2               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  7820                           
  7821                           ; BSR set to: 0
  7822  0034F6  0100               	movlb	0	; () banked
  7823  0034F8  81A9               	bsf	___aldiv@quotient& (0+255),0,b
  7824  0034FA  D000               	goto	l3694
  7825  0034FC                     l3694:
  7826                           
  7827                           ; BSR set to: 0
  7828  0034FC  0100               	movlb	0	; () banked
  7829  0034FE  90D8               	bcf	status,0,c
  7830  003500  33A6               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  7831  003502  33A5               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  7832  003504  33A4               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  7833  003506  33A3               	rrcf	___aldiv@divisor& (0+255),f,b
  7834                           
  7835                           ; BSR set to: 0
  7836  003508  0100               	movlb	0	; () banked
  7837  00350A  2FA7               	decfsz	___aldiv@counter& (0+255),f,b
  7838  00350C  D7CC               	goto	l3686
  7839                           
  7840                           ; BSR set to: 0
  7841  00350E  D000               	goto	l3698
  7842  003510                     l3698:
  7843                           
  7844                           ; BSR set to: 0
  7845  003510  0100               	movlb	0	; () banked
  7846  003512  51A8               	movf	___aldiv@sign& (0+255),w,b
  7847  003514  0100               	movlb	0	; () banked
  7848  003516  B4D8               	btfsc	status,2,c
  7849  003518  D00A               	goto	l3702
  7850                           
  7851                           ; BSR set to: 0
  7852  00351A  0100               	movlb	0	; () banked
  7853  00351C  1FAC               	comf	(___aldiv@quotient+3)& (0+255),f,b
  7854  00351E  1FAB               	comf	(___aldiv@quotient+2)& (0+255),f,b
  7855  003520  1FAA               	comf	(___aldiv@quotient+1)& (0+255),f,b
  7856  003522  6DA9               	negf	___aldiv@quotient& (0+255),b
  7857  003524  0E00               	movlw	0
  7858  003526  23AA               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  7859  003528  23AB               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  7860  00352A  23AC               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  7861  00352C  D000               	goto	l3702
  7862  00352E                     l3702:
  7863                           
  7864                           ; BSR set to: 0
  7865  00352E  C0A9  F09F         	movff	___aldiv@quotient,?___aldiv
  7866  003532  C0AA  F0A0         	movff	___aldiv@quotient+1,?___aldiv+1
  7867  003536  C0AB  F0A1         	movff	___aldiv@quotient+2,?___aldiv+2
  7868  00353A  C0AC  F0A2         	movff	___aldiv@quotient+3,?___aldiv+3
  7869  00353E  D000               	goto	l861
  7870  003540                     l861:
  7871                           
  7872                           ; BSR set to: 0
  7873  003540  0012               	return		;funcret
  7874  003542                     __end_of___aldiv:
  7875                           	opt stack 0
  7876                           tblptru	equ	0xFF8
  7877                           tblptrh	equ	0xFF7
  7878                           tblptrl	equ	0xFF6
  7879                           tablat	equ	0xFF5
  7880                           postinc0	equ	0xFEE
  7881                           wreg	equ	0xFE8
  7882                           postinc1	equ	0xFE6
  7883                           postdec1	equ	0xFE5
  7884                           plusw1	equ	0xFE3
  7885                           fsr1h	equ	0xFE2
  7886                           fsr1l	equ	0xFE1
  7887                           postinc2	equ	0xFDE
  7888                           postdec2	equ	0xFDD
  7889                           plusw2	equ	0xFDB
  7890                           fsr2h	equ	0xFDA
  7891                           fsr2l	equ	0xFD9
  7892                           status	equ	0xFD8
  7893                           
  7894 ;; *************** function _TimeLoop *****************
  7895 ;; Defined at:
  7896 ;;		line 31 in file "TimingFuncs.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;		None
  7899 ;; Auto vars:     Size  Location     Type
  7900 ;;		None
  7901 ;; Return value:  Size  Location     Type
  7902 ;;		None               void
  7903 ;; Registers used:
  7904 ;;		wreg, status,2, status,0, cstack
  7905 ;; Tracked objects:
  7906 ;;		On entry : 0/0
  7907 ;;		On exit  : 0/0
  7908 ;;		Unchanged: 0/0
  7909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7910 ;;      Params:         0       0       0       0       0       0       0
  7911 ;;      Locals:         0       0       0       0       0       0       0
  7912 ;;      Temps:          0       4       0       0       0       0       0
  7913 ;;      Totals:         0       4       0       0       0       0       0
  7914 ;;Total ram usage:        4 bytes
  7915 ;; Hardware stack levels used:    1
  7916 ;; Hardware stack levels required when called:    6
  7917 ;; This function calls:
  7918 ;;		_ReadTimer0
  7919 ;; This function is called by:
  7920 ;;		_ReadAndTime
  7921 ;; This function uses a non-reentrant model
  7922 ;;
  7923                           
  7924                           	psect	text13
  7925  003C78                     __ptext13:
  7926                           	opt stack 0
  7927  003C78                     _TimeLoop:
  7928                           	opt stack 23
  7929                           
  7930                           ;TimingFuncs.c: 33: tr = ReadTimer0();
  7931                           
  7932                           ; BSR set to: 0
  7933                           ;incstack = 0
  7934  003C78  ECAE  F021         	call	_ReadTimer0	;wreg free
  7935  003C7C  C09F  F03C         	movff	?_ReadTimer0,_tr
  7936  003C80  C0A0  F03D         	movff	?_ReadTimer0+1,_tr+1
  7937                           
  7938                           ;TimingFuncs.c: 35: if (tl>tr)
  7939  003C84  503A               	movf	_tl,w,c
  7940  003C86  5C3C               	subwf	_tr,w,c
  7941  003C88  503B               	movf	_tl+1,w,c
  7942  003C8A  583D               	subwfb	_tr+1,w,c
  7943  003C8C  B0D8               	btfsc	status,0,c
  7944  003C8E  D020               	goto	l4086
  7945                           
  7946                           ;TimingFuncs.c: 36: {
  7947                           ;TimingFuncs.c: 37: tt = tr-tl-1017;
  7948  003C90  0EF9               	movlw	249
  7949  003C92  0100               	movlb	0	; () banked
  7950  003C94  6FA3               	movwf	??_TimeLoop& (0+255),b
  7951  003C96  0E03               	movlw	3
  7952  003C98  0100               	movlb	0	; () banked
  7953  003C9A  6FA4               	movwf	(??_TimeLoop+1)& (0+255),b
  7954  003C9C  C03A  F0A5         	movff	_tl,??_TimeLoop+2
  7955  003CA0  C03B  F0A6         	movff	_tl+1,??_TimeLoop+3
  7956  003CA4  0100               	movlb	0	; () banked
  7957  003CA6  51A3               	movf	??_TimeLoop& (0+255),w,b
  7958  003CA8  0100               	movlb	0	; () banked
  7959  003CAA  27A5               	addwf	(??_TimeLoop+2)& (0+255),f,b
  7960  003CAC  0100               	movlb	0	; () banked
  7961  003CAE  51A4               	movf	(??_TimeLoop+1)& (0+255),w,b
  7962  003CB0  0100               	movlb	0	; () banked
  7963  003CB2  23A6               	addwfc	(??_TimeLoop+3)& (0+255),f,b
  7964  003CB4  0100               	movlb	0	; () banked
  7965  003CB6  1FA5               	comf	(??_TimeLoop+2)& (0+255),f,b
  7966  003CB8  1FA6               	comf	(??_TimeLoop+3)& (0+255),f,b
  7967  003CBA  4BA5               	infsnz	(??_TimeLoop+2)& (0+255),f,b
  7968  003CBC  2BA6               	incf	(??_TimeLoop+3)& (0+255),f,b
  7969  003CBE  503C               	movf	_tr,w,c
  7970  003CC0  0100               	movlb	0	; () banked
  7971  003CC2  25A5               	addwf	(??_TimeLoop+2)& (0+255),w,b
  7972  003CC4  0101               	movlb	1	; () banked
  7973  003CC6  6FD2               	movwf	_tt& (0+255),b
  7974  003CC8  503D               	movf	_tr+1,w,c
  7975  003CCA  0100               	movlb	0	; () banked
  7976  003CCC  21A6               	addwfc	(??_TimeLoop+3)& (0+255),w,b
  7977  003CCE  D011               	goto	L4
  7978  003CD0                     l4086:
  7979                           
  7980                           ;TimingFuncs.c: 40: else
  7981                           ;TimingFuncs.c: 41: {
  7982                           ;TimingFuncs.c: 42: tt = tr-tl;
  7983  003CD0  C03A  F0A3         	movff	_tl,??_TimeLoop
  7984  003CD4  C03B  F0A4         	movff	_tl+1,??_TimeLoop+1
  7985  003CD8  0100               	movlb	0	; () banked
  7986  003CDA  1FA3               	comf	??_TimeLoop& (0+255),f,b
  7987  003CDC  1FA4               	comf	(??_TimeLoop+1)& (0+255),f,b
  7988  003CDE  4BA3               	infsnz	??_TimeLoop& (0+255),f,b
  7989  003CE0  2BA4               	incf	(??_TimeLoop+1)& (0+255),f,b
  7990  003CE2  503C               	movf	_tr,w,c
  7991  003CE4  0100               	movlb	0	; () banked
  7992  003CE6  25A3               	addwf	??_TimeLoop& (0+255),w,b
  7993  003CE8  0101               	movlb	1	; () banked
  7994  003CEA  6FD2               	movwf	_tt& (0+255),b
  7995  003CEC  503D               	movf	_tr+1,w,c
  7996  003CEE  0100               	movlb	0	; () banked
  7997  003CF0  21A4               	addwfc	(??_TimeLoop+1)& (0+255),w,b
  7998  003CF2                     L4:
  7999  003CF2  0101               	movlb	1	; () banked
  8000  003CF4  6FD3               	movwf	(_tt+1)& (0+255),b
  8001  003CF6  D000               	goto	l4088
  8002  003CF8                     l4088:
  8003                           
  8004                           ; BSR set to: 1
  8005                           ;TimingFuncs.c: 43: }
  8006                           ;TimingFuncs.c: 44: tl = tr;
  8007  003CF8  C03C  F03A         	movff	_tr,_tl
  8008  003CFC  C03D  F03B         	movff	_tr+1,_tl+1
  8009                           
  8010                           ; BSR set to: 1
  8011  003D00  0012               	return		;funcret
  8012  003D02                     __end_of_TimeLoop:
  8013                           	opt stack 0
  8014                           tblptru	equ	0xFF8
  8015                           tblptrh	equ	0xFF7
  8016                           tblptrl	equ	0xFF6
  8017                           tablat	equ	0xFF5
  8018                           postinc0	equ	0xFEE
  8019                           wreg	equ	0xFE8
  8020                           postinc1	equ	0xFE6
  8021                           postdec1	equ	0xFE5
  8022                           plusw1	equ	0xFE3
  8023                           fsr1h	equ	0xFE2
  8024                           fsr1l	equ	0xFE1
  8025                           postinc2	equ	0xFDE
  8026                           postdec2	equ	0xFDD
  8027                           plusw2	equ	0xFDB
  8028                           fsr2h	equ	0xFDA
  8029                           fsr2l	equ	0xFD9
  8030                           status	equ	0xFD8
  8031                           
  8032 ;; *************** function _ReadTimer0 *****************
  8033 ;; Defined at:
  8034 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\Timers\t0read.c"
  8035 ;; Parameters:    Size  Location     Type
  8036 ;;		None
  8037 ;; Auto vars:     Size  Location     Type
  8038 ;;  timer           2   33[BANK0 ] struct Timers
  8039 ;; Return value:  Size  Location     Type
  8040 ;;                  2   31[BANK0 ] unsigned int 
  8041 ;; Registers used:
  8042 ;;		None
  8043 ;; Tracked objects:
  8044 ;;		On entry : 0/0
  8045 ;;		On exit  : 0/0
  8046 ;;		Unchanged: 0/0
  8047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8048 ;;      Params:         0       2       0       0       0       0       0
  8049 ;;      Locals:         0       2       0       0       0       0       0
  8050 ;;      Temps:          0       0       0       0       0       0       0
  8051 ;;      Totals:         0       4       0       0       0       0       0
  8052 ;;Total ram usage:        4 bytes
  8053 ;; Hardware stack levels used:    1
  8054 ;; Hardware stack levels required when called:    5
  8055 ;; This function calls:
  8056 ;;		Nothing
  8057 ;; This function is called by:
  8058 ;;		_TimeLoop
  8059 ;; This function uses a non-reentrant model
  8060 ;;
  8061                           
  8062                           	psect	text14
  8063  00435C                     __ptext14:
  8064                           	opt stack 0
  8065  00435C                     _ReadTimer0:
  8066                           	opt stack 23
  8067                           
  8068                           ; BSR set to: 1
  8069                           ;incstack = 0
  8070  00435C  CFD6 F0A1          	movff	4054,ReadTimer0@timer	;volatile
  8071  004360  CFD7 F0A2          	movff	4055,ReadTimer0@timer+1	;volatile
  8072  004364  C0A1  F09F         	movff	ReadTimer0@timer,?_ReadTimer0
  8073  004368  C0A2  F0A0         	movff	ReadTimer0@timer+1,?_ReadTimer0+1
  8074  00436C  0012               	return		;funcret
  8075  00436E                     __end_of_ReadTimer0:
  8076                           	opt stack 0
  8077                           tblptru	equ	0xFF8
  8078                           tblptrh	equ	0xFF7
  8079                           tblptrl	equ	0xFF6
  8080                           tablat	equ	0xFF5
  8081                           postinc0	equ	0xFEE
  8082                           wreg	equ	0xFE8
  8083                           postinc1	equ	0xFE6
  8084                           postdec1	equ	0xFE5
  8085                           plusw1	equ	0xFE3
  8086                           fsr1h	equ	0xFE2
  8087                           fsr1l	equ	0xFE1
  8088                           postinc2	equ	0xFDE
  8089                           postdec2	equ	0xFDD
  8090                           plusw2	equ	0xFDB
  8091                           fsr2h	equ	0xFDA
  8092                           fsr2l	equ	0xFD9
  8093                           status	equ	0xFD8
  8094                           
  8095 ;; *************** function _Read_Z *****************
  8096 ;; Defined at:
  8097 ;;		line 50 in file "AccelerationFuncs.c"
  8098 ;; Parameters:    Size  Location     Type
  8099 ;;  m               3   21[BANK1 ] float 
  8100 ;;  c               3   24[BANK1 ] float 
  8101 ;; Auto vars:     Size  Location     Type
  8102 ;;  z               2   30[BANK1 ] int 
  8103 ;; Return value:  Size  Location     Type
  8104 ;;                  2   21[BANK1 ] int 
  8105 ;; Registers used:
  8106 ;;		wreg, status,2, status,0, cstack
  8107 ;; Tracked objects:
  8108 ;;		On entry : 0/0
  8109 ;;		On exit  : 0/0
  8110 ;;		Unchanged: 0/0
  8111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8112 ;;      Params:         0       0       6       0       0       0       0
  8113 ;;      Locals:         0       0       5       0       0       0       0
  8114 ;;      Temps:          0       0       0       0       0       0       0
  8115 ;;      Totals:         0       0      11       0       0       0       0
  8116 ;;Total ram usage:       11 bytes
  8117 ;; Hardware stack levels used:    1
  8118 ;; Hardware stack levels required when called:    7
  8119 ;; This function calls:
  8120 ;;		_BusyADC
  8121 ;;		_ConvertADC
  8122 ;;		_Delay10TCYx
  8123 ;;		_ReadADC
  8124 ;;		___awtoft
  8125 ;;		___ftadd
  8126 ;;		___ftmul
  8127 ;;		___ftneg
  8128 ;;		___fttol
  8129 ;; This function is called by:
  8130 ;;		_ReadAndTime
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           	psect	text15
  8135  003848                     __ptext15:
  8136                           	opt stack 0
  8137  003848                     _Read_Z:
  8138                           	opt stack 22
  8139                           
  8140                           ;AccelerationFuncs.c: 52: int z;
  8141                           ;AccelerationFuncs.c: 53: ADCON0bits.CHS=0b0101;
  8142                           
  8143                           ;incstack = 0
  8144  003848  50C2               	movf	4034,w,c	;volatile
  8145  00384A  0BC3               	andlw	-61
  8146  00384C  0914               	iorlw	20
  8147  00384E  6EC2               	movwf	4034,c	;volatile
  8148                           
  8149                           ;AccelerationFuncs.c: 54: Delay10TCYx(100);
  8150  003850  0E64               	movlw	100
  8151  003852  EC8E  F021         	call	_Delay10TCYx
  8152                           
  8153                           ;AccelerationFuncs.c: 55: ConvertADC();
  8154  003856  ECE3  F021         	call	_ConvertADC	;wreg free
  8155                           
  8156                           ;AccelerationFuncs.c: 56: while (BusyADC());
  8157  00385A  D000               	goto	l5620
  8158  00385C                     l5620:
  8159  00385C  ECC8  F021         	call	_BusyADC	;wreg free
  8160  003860  0900               	iorlw	0
  8161  003862  A4D8               	btfss	status,2,c
  8162  003864  D7FB               	goto	l5620
  8163                           
  8164                           ;AccelerationFuncs.c: 57: z=(ReadADC()*m-c)*100;
  8165  003866  C16E  F09F         	movff	Read_Z@c,___ftneg@f1
  8166  00386A  C16F  F0A0         	movff	Read_Z@c+1,___ftneg@f1+1
  8167  00386E  C170  F0A1         	movff	Read_Z@c+2,___ftneg@f1+2
  8168  003872  ECD3  F020         	call	___ftneg	;wreg free
  8169  003876  C09F  F0BD         	movff	?___ftneg,___ftadd@f2
  8170  00387A  C0A0  F0BE         	movff	?___ftneg+1,___ftadd@f2+1
  8171  00387E  C0A1  F0BF         	movff	?___ftneg+2,___ftadd@f2+2
  8172  003882  C16B  F0AE         	movff	Read_Z@m,___ftmul@f2
  8173  003886  C16C  F0AF         	movff	Read_Z@m+1,___ftmul@f2+1
  8174  00388A  C16D  F0B0         	movff	Read_Z@m+2,___ftmul@f2+2
  8175  00388E  ECA4  F021         	call	_ReadADC	;wreg free
  8176  003892  C09F  F0A7         	movff	?_ReadADC,___awtoft@c
  8177  003896  C0A0  F0A8         	movff	?_ReadADC+1,___awtoft@c+1
  8178  00389A  EC70  F020         	call	___awtoft	;wreg free
  8179  00389E  C0A7  F0AB         	movff	?___awtoft,___ftmul@f1
  8180  0038A2  C0A8  F0AC         	movff	?___awtoft+1,___ftmul@f1+1
  8181  0038A6  C0A9  F0AD         	movff	?___awtoft+2,___ftmul@f1+2
  8182  0038AA  EC83  F017         	call	___ftmul	;wreg free
  8183  0038AE  C0AB  F0BA         	movff	?___ftmul,___ftadd@f1
  8184  0038B2  C0AC  F0BB         	movff	?___ftmul+1,___ftadd@f1+1
  8185  0038B6  C0AD  F0BC         	movff	?___ftmul+2,___ftadd@f1+2
  8186  0038BA  EC15  F011         	call	___ftadd	;wreg free
  8187  0038BE  C0BA  F171         	movff	?___ftadd,_Read_Z$2564
  8188  0038C2  C0BB  F172         	movff	?___ftadd+1,_Read_Z$2564+1
  8189  0038C6  C0BC  F173         	movff	?___ftadd+2,_Read_Z$2564+2
  8190                           
  8191                           ;AccelerationFuncs.c: 57: z=(ReadADC()*m-c)*100;
  8192  0038CA  0E00               	movlw	0
  8193  0038CC  0100               	movlb	0	; () banked
  8194  0038CE  6FAE               	movwf	___ftmul@f2& (0+255),b
  8195  0038D0  0EC8               	movlw	200
  8196  0038D2  0100               	movlb	0	; () banked
  8197  0038D4  6FAF               	movwf	(___ftmul@f2+1)& (0+255),b
  8198  0038D6  0E42               	movlw	66
  8199  0038D8  0100               	movlb	0	; () banked
  8200  0038DA  6FB0               	movwf	(___ftmul@f2+2)& (0+255),b
  8201  0038DC  C171  F0AB         	movff	_Read_Z$2564,___ftmul@f1
  8202  0038E0  C172  F0AC         	movff	_Read_Z$2564+1,___ftmul@f1+1
  8203  0038E4  C173  F0AD         	movff	_Read_Z$2564+2,___ftmul@f1+2
  8204  0038E8  EC83  F017         	call	___ftmul	;wreg free
  8205  0038EC  C0AB  F15C         	movff	?___ftmul,___fttol@f1
  8206  0038F0  C0AC  F15D         	movff	?___ftmul+1,___fttol@f1+1
  8207  0038F4  C0AD  F15E         	movff	?___ftmul+2,___fttol@f1+2
  8208  0038F8  EC72  F019         	call	___fttol	;wreg free
  8209  0038FC  C15C  F174         	movff	?___fttol,Read_Z@z
  8210  003900  C15D  F175         	movff	?___fttol+1,Read_Z@z+1
  8211                           
  8212                           ;AccelerationFuncs.c: 59: return z;
  8213  003904  C174  F16B         	movff	Read_Z@z,?_Read_Z
  8214  003908  C175  F16C         	movff	Read_Z@z+1,?_Read_Z+1
  8215  00390C  D000               	goto	l558
  8216  00390E                     l558:
  8217  00390E  0012               	return		;funcret
  8218  003910                     __end_of_Read_Z:
  8219                           	opt stack 0
  8220                           tblptru	equ	0xFF8
  8221                           tblptrh	equ	0xFF7
  8222                           tblptrl	equ	0xFF6
  8223                           tablat	equ	0xFF5
  8224                           postinc0	equ	0xFEE
  8225                           wreg	equ	0xFE8
  8226                           postinc1	equ	0xFE6
  8227                           postdec1	equ	0xFE5
  8228                           plusw1	equ	0xFE3
  8229                           fsr1h	equ	0xFE2
  8230                           fsr1l	equ	0xFE1
  8231                           postinc2	equ	0xFDE
  8232                           postdec2	equ	0xFDD
  8233                           plusw2	equ	0xFDB
  8234                           fsr2h	equ	0xFDA
  8235                           fsr2l	equ	0xFD9
  8236                           status	equ	0xFD8
  8237                           
  8238 ;; *************** function _Read_Y *****************
  8239 ;; Defined at:
  8240 ;;		line 38 in file "AccelerationFuncs.c"
  8241 ;; Parameters:    Size  Location     Type
  8242 ;;  m               3   21[BANK1 ] float 
  8243 ;;  c               3   24[BANK1 ] float 
  8244 ;; Auto vars:     Size  Location     Type
  8245 ;;  y               2   30[BANK1 ] int 
  8246 ;; Return value:  Size  Location     Type
  8247 ;;                  2   21[BANK1 ] int 
  8248 ;; Registers used:
  8249 ;;		wreg, status,2, status,0, cstack
  8250 ;; Tracked objects:
  8251 ;;		On entry : 0/0
  8252 ;;		On exit  : 0/0
  8253 ;;		Unchanged: 0/0
  8254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8255 ;;      Params:         0       0       6       0       0       0       0
  8256 ;;      Locals:         0       0       5       0       0       0       0
  8257 ;;      Temps:          0       0       0       0       0       0       0
  8258 ;;      Totals:         0       0      11       0       0       0       0
  8259 ;;Total ram usage:       11 bytes
  8260 ;; Hardware stack levels used:    1
  8261 ;; Hardware stack levels required when called:    7
  8262 ;; This function calls:
  8263 ;;		_BusyADC
  8264 ;;		_ConvertADC
  8265 ;;		_Delay10TCYx
  8266 ;;		_ReadADC
  8267 ;;		___awtoft
  8268 ;;		___ftadd
  8269 ;;		___ftmul
  8270 ;;		___ftneg
  8271 ;;		___fttol
  8272 ;; This function is called by:
  8273 ;;		_ReadAndTime
  8274 ;; This function uses a non-reentrant model
  8275 ;;
  8276                           
  8277                           	psect	text16
  8278  003910                     __ptext16:
  8279                           	opt stack 0
  8280  003910                     _Read_Y:
  8281                           	opt stack 22
  8282                           
  8283                           ;AccelerationFuncs.c: 40: int y;
  8284                           ;AccelerationFuncs.c: 41: ADCON0bits.CHS=0b0100;
  8285                           
  8286                           ;incstack = 0
  8287  003910  50C2               	movf	4034,w,c	;volatile
  8288  003912  0BC3               	andlw	-61
  8289  003914  0910               	iorlw	16
  8290  003916  6EC2               	movwf	4034,c	;volatile
  8291                           
  8292                           ;AccelerationFuncs.c: 42: Delay10TCYx(100);
  8293  003918  0E64               	movlw	100
  8294  00391A  EC8E  F021         	call	_Delay10TCYx
  8295                           
  8296                           ;AccelerationFuncs.c: 43: ConvertADC();
  8297  00391E  ECE3  F021         	call	_ConvertADC	;wreg free
  8298                           
  8299                           ;AccelerationFuncs.c: 44: while (BusyADC());
  8300  003922  D000               	goto	l5606
  8301  003924                     l5606:
  8302  003924  ECC8  F021         	call	_BusyADC	;wreg free
  8303  003928  0900               	iorlw	0
  8304  00392A  A4D8               	btfss	status,2,c
  8305  00392C  D7FB               	goto	l5606
  8306                           
  8307                           ;AccelerationFuncs.c: 45: y=(ReadADC()*m-c)*100;
  8308  00392E  C16E  F09F         	movff	Read_Y@c,___ftneg@f1
  8309  003932  C16F  F0A0         	movff	Read_Y@c+1,___ftneg@f1+1
  8310  003936  C170  F0A1         	movff	Read_Y@c+2,___ftneg@f1+2
  8311  00393A  ECD3  F020         	call	___ftneg	;wreg free
  8312  00393E  C09F  F0BD         	movff	?___ftneg,___ftadd@f2
  8313  003942  C0A0  F0BE         	movff	?___ftneg+1,___ftadd@f2+1
  8314  003946  C0A1  F0BF         	movff	?___ftneg+2,___ftadd@f2+2
  8315  00394A  C16B  F0AE         	movff	Read_Y@m,___ftmul@f2
  8316  00394E  C16C  F0AF         	movff	Read_Y@m+1,___ftmul@f2+1
  8317  003952  C16D  F0B0         	movff	Read_Y@m+2,___ftmul@f2+2
  8318  003956  ECA4  F021         	call	_ReadADC	;wreg free
  8319  00395A  C09F  F0A7         	movff	?_ReadADC,___awtoft@c
  8320  00395E  C0A0  F0A8         	movff	?_ReadADC+1,___awtoft@c+1
  8321  003962  EC70  F020         	call	___awtoft	;wreg free
  8322  003966  C0A7  F0AB         	movff	?___awtoft,___ftmul@f1
  8323  00396A  C0A8  F0AC         	movff	?___awtoft+1,___ftmul@f1+1
  8324  00396E  C0A9  F0AD         	movff	?___awtoft+2,___ftmul@f1+2
  8325  003972  EC83  F017         	call	___ftmul	;wreg free
  8326  003976  C0AB  F0BA         	movff	?___ftmul,___ftadd@f1
  8327  00397A  C0AC  F0BB         	movff	?___ftmul+1,___ftadd@f1+1
  8328  00397E  C0AD  F0BC         	movff	?___ftmul+2,___ftadd@f1+2
  8329  003982  EC15  F011         	call	___ftadd	;wreg free
  8330  003986  C0BA  F171         	movff	?___ftadd,_Read_Y$2563
  8331  00398A  C0BB  F172         	movff	?___ftadd+1,_Read_Y$2563+1
  8332  00398E  C0BC  F173         	movff	?___ftadd+2,_Read_Y$2563+2
  8333                           
  8334                           ;AccelerationFuncs.c: 45: y=(ReadADC()*m-c)*100;
  8335  003992  0E00               	movlw	0
  8336  003994  0100               	movlb	0	; () banked
  8337  003996  6FAE               	movwf	___ftmul@f2& (0+255),b
  8338  003998  0EC8               	movlw	200
  8339  00399A  0100               	movlb	0	; () banked
  8340  00399C  6FAF               	movwf	(___ftmul@f2+1)& (0+255),b
  8341  00399E  0E42               	movlw	66
  8342  0039A0  0100               	movlb	0	; () banked
  8343  0039A2  6FB0               	movwf	(___ftmul@f2+2)& (0+255),b
  8344  0039A4  C171  F0AB         	movff	_Read_Y$2563,___ftmul@f1
  8345  0039A8  C172  F0AC         	movff	_Read_Y$2563+1,___ftmul@f1+1
  8346  0039AC  C173  F0AD         	movff	_Read_Y$2563+2,___ftmul@f1+2
  8347  0039B0  EC83  F017         	call	___ftmul	;wreg free
  8348  0039B4  C0AB  F15C         	movff	?___ftmul,___fttol@f1
  8349  0039B8  C0AC  F15D         	movff	?___ftmul+1,___fttol@f1+1
  8350  0039BC  C0AD  F15E         	movff	?___ftmul+2,___fttol@f1+2
  8351  0039C0  EC72  F019         	call	___fttol	;wreg free
  8352  0039C4  C15C  F174         	movff	?___fttol,Read_Y@y
  8353  0039C8  C15D  F175         	movff	?___fttol+1,Read_Y@y+1
  8354                           
  8355                           ;AccelerationFuncs.c: 47: return y;
  8356  0039CC  C174  F16B         	movff	Read_Y@y,?_Read_Y
  8357  0039D0  C175  F16C         	movff	Read_Y@y+1,?_Read_Y+1
  8358  0039D4  D000               	goto	l552
  8359  0039D6                     l552:
  8360  0039D6  0012               	return		;funcret
  8361  0039D8                     __end_of_Read_Y:
  8362                           	opt stack 0
  8363                           tblptru	equ	0xFF8
  8364                           tblptrh	equ	0xFF7
  8365                           tblptrl	equ	0xFF6
  8366                           tablat	equ	0xFF5
  8367                           postinc0	equ	0xFEE
  8368                           wreg	equ	0xFE8
  8369                           postinc1	equ	0xFE6
  8370                           postdec1	equ	0xFE5
  8371                           plusw1	equ	0xFE3
  8372                           fsr1h	equ	0xFE2
  8373                           fsr1l	equ	0xFE1
  8374                           postinc2	equ	0xFDE
  8375                           postdec2	equ	0xFDD
  8376                           plusw2	equ	0xFDB
  8377                           fsr2h	equ	0xFDA
  8378                           fsr2l	equ	0xFD9
  8379                           status	equ	0xFD8
  8380                           
  8381 ;; *************** function _Read_X *****************
  8382 ;; Defined at:
  8383 ;;		line 26 in file "AccelerationFuncs.c"
  8384 ;; Parameters:    Size  Location     Type
  8385 ;;  m               3   21[BANK1 ] float 
  8386 ;;  c               3   24[BANK1 ] float 
  8387 ;; Auto vars:     Size  Location     Type
  8388 ;;  x               2   30[BANK1 ] int 
  8389 ;; Return value:  Size  Location     Type
  8390 ;;                  2   21[BANK1 ] int 
  8391 ;; Registers used:
  8392 ;;		wreg, status,2, status,0, cstack
  8393 ;; Tracked objects:
  8394 ;;		On entry : 0/0
  8395 ;;		On exit  : 0/0
  8396 ;;		Unchanged: 0/0
  8397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8398 ;;      Params:         0       0       6       0       0       0       0
  8399 ;;      Locals:         0       0       5       0       0       0       0
  8400 ;;      Temps:          0       0       0       0       0       0       0
  8401 ;;      Totals:         0       0      11       0       0       0       0
  8402 ;;Total ram usage:       11 bytes
  8403 ;; Hardware stack levels used:    1
  8404 ;; Hardware stack levels required when called:    7
  8405 ;; This function calls:
  8406 ;;		_BusyADC
  8407 ;;		_ConvertADC
  8408 ;;		_Delay10TCYx
  8409 ;;		_ReadADC
  8410 ;;		___awtoft
  8411 ;;		___ftadd
  8412 ;;		___ftmul
  8413 ;;		___ftneg
  8414 ;;		___fttol
  8415 ;; This function is called by:
  8416 ;;		_ReadAndTime
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           	psect	text17
  8421  0039D8                     __ptext17:
  8422                           	opt stack 0
  8423  0039D8                     _Read_X:
  8424                           	opt stack 22
  8425                           
  8426                           ;AccelerationFuncs.c: 28: int x;
  8427                           ;AccelerationFuncs.c: 29: ADCON0bits.CHS=0b0110;
  8428                           
  8429                           ;incstack = 0
  8430  0039D8  50C2               	movf	4034,w,c	;volatile
  8431  0039DA  0BC3               	andlw	-61
  8432  0039DC  0918               	iorlw	24
  8433  0039DE  6EC2               	movwf	4034,c	;volatile
  8434                           
  8435                           ;AccelerationFuncs.c: 30: Delay10TCYx(100);
  8436  0039E0  0E64               	movlw	100
  8437  0039E2  EC8E  F021         	call	_Delay10TCYx
  8438                           
  8439                           ;AccelerationFuncs.c: 31: ConvertADC();
  8440  0039E6  ECE3  F021         	call	_ConvertADC	;wreg free
  8441                           
  8442                           ;AccelerationFuncs.c: 32: while (BusyADC());
  8443  0039EA  D000               	goto	l5592
  8444  0039EC                     l5592:
  8445  0039EC  ECC8  F021         	call	_BusyADC	;wreg free
  8446  0039F0  0900               	iorlw	0
  8447  0039F2  A4D8               	btfss	status,2,c
  8448  0039F4  D7FB               	goto	l5592
  8449                           
  8450                           ;AccelerationFuncs.c: 33: x=(ReadADC()*m-c)*100;
  8451  0039F6  C16E  F09F         	movff	Read_X@c,___ftneg@f1
  8452  0039FA  C16F  F0A0         	movff	Read_X@c+1,___ftneg@f1+1
  8453  0039FE  C170  F0A1         	movff	Read_X@c+2,___ftneg@f1+2
  8454  003A02  ECD3  F020         	call	___ftneg	;wreg free
  8455  003A06  C09F  F0BD         	movff	?___ftneg,___ftadd@f2
  8456  003A0A  C0A0  F0BE         	movff	?___ftneg+1,___ftadd@f2+1
  8457  003A0E  C0A1  F0BF         	movff	?___ftneg+2,___ftadd@f2+2
  8458  003A12  C16B  F0AE         	movff	Read_X@m,___ftmul@f2
  8459  003A16  C16C  F0AF         	movff	Read_X@m+1,___ftmul@f2+1
  8460  003A1A  C16D  F0B0         	movff	Read_X@m+2,___ftmul@f2+2
  8461  003A1E  ECA4  F021         	call	_ReadADC	;wreg free
  8462  003A22  C09F  F0A7         	movff	?_ReadADC,___awtoft@c
  8463  003A26  C0A0  F0A8         	movff	?_ReadADC+1,___awtoft@c+1
  8464  003A2A  EC70  F020         	call	___awtoft	;wreg free
  8465  003A2E  C0A7  F0AB         	movff	?___awtoft,___ftmul@f1
  8466  003A32  C0A8  F0AC         	movff	?___awtoft+1,___ftmul@f1+1
  8467  003A36  C0A9  F0AD         	movff	?___awtoft+2,___ftmul@f1+2
  8468  003A3A  EC83  F017         	call	___ftmul	;wreg free
  8469  003A3E  C0AB  F0BA         	movff	?___ftmul,___ftadd@f1
  8470  003A42  C0AC  F0BB         	movff	?___ftmul+1,___ftadd@f1+1
  8471  003A46  C0AD  F0BC         	movff	?___ftmul+2,___ftadd@f1+2
  8472  003A4A  EC15  F011         	call	___ftadd	;wreg free
  8473  003A4E  C0BA  F171         	movff	?___ftadd,_Read_X$2562
  8474  003A52  C0BB  F172         	movff	?___ftadd+1,_Read_X$2562+1
  8475  003A56  C0BC  F173         	movff	?___ftadd+2,_Read_X$2562+2
  8476                           
  8477                           ;AccelerationFuncs.c: 33: x=(ReadADC()*m-c)*100;
  8478  003A5A  0E00               	movlw	0
  8479  003A5C  0100               	movlb	0	; () banked
  8480  003A5E  6FAE               	movwf	___ftmul@f2& (0+255),b
  8481  003A60  0EC8               	movlw	200
  8482  003A62  0100               	movlb	0	; () banked
  8483  003A64  6FAF               	movwf	(___ftmul@f2+1)& (0+255),b
  8484  003A66  0E42               	movlw	66
  8485  003A68  0100               	movlb	0	; () banked
  8486  003A6A  6FB0               	movwf	(___ftmul@f2+2)& (0+255),b
  8487  003A6C  C171  F0AB         	movff	_Read_X$2562,___ftmul@f1
  8488  003A70  C172  F0AC         	movff	_Read_X$2562+1,___ftmul@f1+1
  8489  003A74  C173  F0AD         	movff	_Read_X$2562+2,___ftmul@f1+2
  8490  003A78  EC83  F017         	call	___ftmul	;wreg free
  8491  003A7C  C0AB  F15C         	movff	?___ftmul,___fttol@f1
  8492  003A80  C0AC  F15D         	movff	?___ftmul+1,___fttol@f1+1
  8493  003A84  C0AD  F15E         	movff	?___ftmul+2,___fttol@f1+2
  8494  003A88  EC72  F019         	call	___fttol	;wreg free
  8495  003A8C  C15C  F174         	movff	?___fttol,Read_X@x
  8496  003A90  C15D  F175         	movff	?___fttol+1,Read_X@x+1
  8497                           
  8498                           ;AccelerationFuncs.c: 35: return x;
  8499  003A94  C174  F16B         	movff	Read_X@x,?_Read_X
  8500  003A98  C175  F16C         	movff	Read_X@x+1,?_Read_X+1
  8501  003A9C  D000               	goto	l546
  8502  003A9E                     l546:
  8503  003A9E  0012               	return		;funcret
  8504  003AA0                     __end_of_Read_X:
  8505                           	opt stack 0
  8506                           tblptru	equ	0xFF8
  8507                           tblptrh	equ	0xFF7
  8508                           tblptrl	equ	0xFF6
  8509                           tablat	equ	0xFF5
  8510                           postinc0	equ	0xFEE
  8511                           wreg	equ	0xFE8
  8512                           postinc1	equ	0xFE6
  8513                           postdec1	equ	0xFE5
  8514                           plusw1	equ	0xFE3
  8515                           fsr1h	equ	0xFE2
  8516                           fsr1l	equ	0xFE1
  8517                           postinc2	equ	0xFDE
  8518                           postdec2	equ	0xFDD
  8519                           plusw2	equ	0xFDB
  8520                           fsr2h	equ	0xFDA
  8521                           fsr2l	equ	0xFD9
  8522                           status	equ	0xFD8
  8523                           
  8524 ;; *************** function ___fttol *****************
  8525 ;; Defined at:
  8526 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  8527 ;; Parameters:    Size  Location     Type
  8528 ;;  f1              3    6[BANK1 ] float 
  8529 ;; Auto vars:     Size  Location     Type
  8530 ;;  lval            4   16[BANK1 ] unsigned long 
  8531 ;;  exp1            1   20[BANK1 ] unsigned char 
  8532 ;;  sign1           1   15[BANK1 ] unsigned char 
  8533 ;; Return value:  Size  Location     Type
  8534 ;;                  4    6[BANK1 ] long 
  8535 ;; Registers used:
  8536 ;;		wreg, status,2, status,0
  8537 ;; Tracked objects:
  8538 ;;		On entry : 0/0
  8539 ;;		On exit  : 0/0
  8540 ;;		Unchanged: 0/0
  8541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8542 ;;      Params:         0       0       4       0       0       0       0
  8543 ;;      Locals:         0       0       6       0       0       0       0
  8544 ;;      Temps:          0       0       5       0       0       0       0
  8545 ;;      Totals:         0       0      15       0       0       0       0
  8546 ;;Total ram usage:       15 bytes
  8547 ;; Hardware stack levels used:    1
  8548 ;; Hardware stack levels required when called:    5
  8549 ;; This function calls:
  8550 ;;		Nothing
  8551 ;; This function is called by:
  8552 ;;		_cmStuffsWrapperFun
  8553 ;;		_cmFftFun
  8554 ;;		_Read_X
  8555 ;;		_Read_Y
  8556 ;;		_Read_Z
  8557 ;; This function uses a non-reentrant model
  8558 ;;
  8559                           
  8560                           	psect	text18
  8561  0032E4                     __ptext18:
  8562                           	opt stack 0
  8563  0032E4                     ___fttol:
  8564                           	opt stack 23
  8565                           
  8566                           ;incstack = 0
  8567  0032E4  C15E  F160         	movff	___fttol@f1+2,??___fttol
  8568  0032E8  0101               	movlb	1	; () banked
  8569  0032EA  6B61               	clrf	(??___fttol+1)& (0+255),b
  8570  0032EC  6B62               	clrf	(??___fttol+2)& (0+255),b
  8571  0032EE  0101               	movlb	1	; () banked
  8572  0032F0  355D               	rlcf	(___fttol@f1+1)& (0+255),w,b
  8573  0032F2  0101               	movlb	1	; () banked
  8574  0032F4  3760               	rlcf	??___fttol& (0+255),f,b
  8575  0032F6  E301               	bnc	u6011
  8576  0032F8  8161               	bsf	(??___fttol+1)& (0+255),0,b
  8577  0032FA                     u6011:
  8578  0032FA  0101               	movlb	1	; () banked
  8579  0032FC  5160               	movf	??___fttol& (0+255),w,b
  8580  0032FE  0101               	movlb	1	; () banked
  8581  003300  6F6A               	movwf	___fttol@exp1& (0+255),b
  8582  003302  0101               	movlb	1	; () banked
  8583  003304  516A               	movf	___fttol@exp1& (0+255),w,b
  8584  003306  A4D8               	btfss	status,2,c
  8585  003308  D002               	goto	l5366
  8586  00330A  D051               	goto	l5390
  8587                           
  8588                           ; BSR set to: 1
  8589                           
  8590                           ; BSR set to: 1
  8591  00330C  D083               	goto	l1244
  8592  00330E                     l5366:
  8593                           
  8594                           ; BSR set to: 1
  8595  00330E  0E17               	movlw	23
  8596  003310  0101               	movlb	1	; () banked
  8597  003312  6F60               	movwf	??___fttol& (0+255),b
  8598  003314  C15C  F161         	movff	___fttol@f1,??___fttol+1
  8599  003318  C15D  F162         	movff	___fttol@f1+1,??___fttol+2
  8600  00331C  C15E  F163         	movff	___fttol@f1+2,??___fttol+3
  8601  003320  0101               	movlb	1	; () banked
  8602  003322  2960               	incf	??___fttol& (0+255),w,b
  8603  003324  0101               	movlb	1	; () banked
  8604  003326  6F64               	movwf	(??___fttol+4)& (0+255),b
  8605  003328  D005               	goto	u6030
  8606  00332A                     u6035:
  8607  00332A  0101               	movlb	1	; () banked
  8608  00332C  90D8               	bcf	status,0,c
  8609  00332E  3363               	rrcf	(??___fttol+3)& (0+255),f,b
  8610  003330  3362               	rrcf	(??___fttol+2)& (0+255),f,b
  8611  003332  3361               	rrcf	(??___fttol+1)& (0+255),f,b
  8612  003334                     u6030:
  8613  003334  0101               	movlb	1	; () banked
  8614  003336  2F64               	decfsz	(??___fttol+4)& (0+255),f,b
  8615  003338  D7F8               	goto	u6035
  8616  00333A  0101               	movlb	1	; () banked
  8617  00333C  5161               	movf	(??___fttol+1)& (0+255),w,b
  8618  00333E  0101               	movlb	1	; () banked
  8619  003340  6F65               	movwf	___fttol@sign1& (0+255),b
  8620                           
  8621                           ; BSR set to: 1
  8622  003342  0101               	movlb	1	; () banked
  8623  003344  8F5D               	bsf	(___fttol@f1+1)& (0+255),7,b
  8624                           
  8625                           ; BSR set to: 1
  8626  003346  0EFF               	movlw	255
  8627  003348  0101               	movlb	1	; () banked
  8628  00334A  175C               	andwf	___fttol@f1& (0+255),f,b
  8629  00334C  0EFF               	movlw	255
  8630  00334E  0101               	movlb	1	; () banked
  8631  003350  175D               	andwf	(___fttol@f1+1)& (0+255),f,b
  8632  003352  0E00               	movlw	0
  8633  003354  0101               	movlb	1	; () banked
  8634  003356  175E               	andwf	(___fttol@f1+2)& (0+255),f,b
  8635                           
  8636                           ; BSR set to: 1
  8637  003358  0101               	movlb	1	; () banked
  8638  00335A  515C               	movf	___fttol@f1& (0+255),w,b
  8639  00335C  0101               	movlb	1	; () banked
  8640  00335E  6F66               	movwf	___fttol@lval& (0+255),b
  8641  003360  0101               	movlb	1	; () banked
  8642  003362  515D               	movf	(___fttol@f1+1)& (0+255),w,b
  8643  003364  0101               	movlb	1	; () banked
  8644  003366  6F67               	movwf	(___fttol@lval+1)& (0+255),b
  8645  003368  0101               	movlb	1	; () banked
  8646  00336A  515E               	movf	(___fttol@f1+2)& (0+255),w,b
  8647  00336C  0101               	movlb	1	; () banked
  8648  00336E  6F68               	movwf	(___fttol@lval+2)& (0+255),b
  8649  003370  0101               	movlb	1	; () banked
  8650  003372  6B69               	clrf	(___fttol@lval+3)& (0+255),b
  8651                           
  8652                           ; BSR set to: 1
  8653  003374  0E8E               	movlw	142
  8654  003376  0101               	movlb	1	; () banked
  8655  003378  5F6A               	subwf	___fttol@exp1& (0+255),f,b
  8656                           
  8657                           ; BSR set to: 1
  8658  00337A  0101               	movlb	1	; () banked
  8659  00337C  AF6A               	btfss	___fttol@exp1& (0+255),7,b
  8660  00337E  D013               	goto	l5388
  8661                           
  8662                           ; BSR set to: 1
  8663  003380  0101               	movlb	1	; () banked
  8664  003382  516A               	movf	___fttol@exp1& (0+255),w,b
  8665  003384  0A80               	xorlw	128
  8666  003386  0F8F               	addlw	143
  8667  003388  B0D8               	btfsc	status,0,c
  8668  00338A  D003               	goto	l5384
  8669  00338C  D010               	goto	l5390
  8670                           
  8671                           ; BSR set to: 1
  8672                           
  8673                           ; BSR set to: 1
  8674  00338E  D042               	goto	l1244
  8675                           
  8676                           ; BSR set to: 1
  8677  003390  D000               	goto	l5384
  8678  003392                     l5384:
  8679                           
  8680                           ; BSR set to: 1
  8681  003392  0101               	movlb	1	; () banked
  8682  003394  90D8               	bcf	status,0,c
  8683  003396  3369               	rrcf	(___fttol@lval+3)& (0+255),f,b
  8684  003398  3368               	rrcf	(___fttol@lval+2)& (0+255),f,b
  8685  00339A  3367               	rrcf	(___fttol@lval+1)& (0+255),f,b
  8686  00339C  3366               	rrcf	___fttol@lval& (0+255),f,b
  8687                           
  8688                           ; BSR set to: 1
  8689  00339E  0101               	movlb	1	; () banked
  8690  0033A0  3F6A               	incfsz	___fttol@exp1& (0+255),f,b
  8691  0033A2  D7F7               	goto	l5384
  8692                           
  8693                           ; BSR set to: 1
  8694  0033A4  D01F               	goto	l5398
  8695  0033A6                     l5388:
  8696                           
  8697                           ; BSR set to: 1
  8698  0033A6  0E17               	movlw	23
  8699  0033A8  0101               	movlb	1	; () banked
  8700  0033AA  656A               	cpfsgt	___fttol@exp1& (0+255),b
  8701  0033AC  D014               	goto	l5396
  8702  0033AE                     l5390:
  8703                           
  8704                           ; BSR set to: 1
  8705  0033AE  0E00               	movlw	0
  8706  0033B0  0101               	movlb	1	; () banked
  8707  0033B2  6F5C               	movwf	?___fttol& (0+255),b
  8708  0033B4  0E00               	movlw	0
  8709  0033B6  6F5D               	movwf	(?___fttol+1)& (0+255),b
  8710  0033B8  0E00               	movlw	0
  8711  0033BA  6F5E               	movwf	(?___fttol+2)& (0+255),b
  8712  0033BC  0E00               	movlw	0
  8713  0033BE  6F5F               	movwf	(?___fttol+3)& (0+255),b
  8714                           
  8715                           ; BSR set to: 1
  8716  0033C0  D029               	goto	l1244
  8717                           
  8718                           ; BSR set to: 1
  8719  0033C2  D009               	goto	l5396
  8720  0033C4                     l5394:
  8721                           
  8722                           ; BSR set to: 1
  8723  0033C4  0101               	movlb	1	; () banked
  8724  0033C6  90D8               	bcf	status,0,c
  8725  0033C8  3766               	rlcf	___fttol@lval& (0+255),f,b
  8726  0033CA  3767               	rlcf	(___fttol@lval+1)& (0+255),f,b
  8727  0033CC  3768               	rlcf	(___fttol@lval+2)& (0+255),f,b
  8728  0033CE  3769               	rlcf	(___fttol@lval+3)& (0+255),f,b
  8729  0033D0  0101               	movlb	1	; () banked
  8730  0033D2  076A               	decf	___fttol@exp1& (0+255),f,b
  8731  0033D4  D000               	goto	l5396
  8732  0033D6                     l5396:
  8733                           
  8734                           ; BSR set to: 1
  8735  0033D6  0101               	movlb	1	; () banked
  8736  0033D8  516A               	movf	___fttol@exp1& (0+255),w,b
  8737  0033DA  0101               	movlb	1	; () banked
  8738  0033DC  B4D8               	btfsc	status,2,c
  8739  0033DE  D002               	goto	l5398
  8740  0033E0  D7F1               	goto	l5394
  8741                           
  8742                           ; BSR set to: 1
  8743  0033E2  D000               	goto	l5398
  8744  0033E4                     l5398:
  8745                           
  8746                           ; BSR set to: 1
  8747  0033E4  0101               	movlb	1	; () banked
  8748  0033E6  5165               	movf	___fttol@sign1& (0+255),w,b
  8749  0033E8  0101               	movlb	1	; () banked
  8750  0033EA  B4D8               	btfsc	status,2,c
  8751  0033EC  D00A               	goto	l5402
  8752                           
  8753                           ; BSR set to: 1
  8754  0033EE  0101               	movlb	1	; () banked
  8755  0033F0  1F69               	comf	(___fttol@lval+3)& (0+255),f,b
  8756  0033F2  1F68               	comf	(___fttol@lval+2)& (0+255),f,b
  8757  0033F4  1F67               	comf	(___fttol@lval+1)& (0+255),f,b
  8758  0033F6  6D66               	negf	___fttol@lval& (0+255),b
  8759  0033F8  0E00               	movlw	0
  8760  0033FA  2367               	addwfc	(___fttol@lval+1)& (0+255),f,b
  8761  0033FC  2368               	addwfc	(___fttol@lval+2)& (0+255),f,b
  8762  0033FE  2369               	addwfc	(___fttol@lval+3)& (0+255),f,b
  8763  003400  D000               	goto	l5402
  8764  003402                     l5402:
  8765                           
  8766                           ; BSR set to: 1
  8767  003402  C166  F15C         	movff	___fttol@lval,?___fttol
  8768  003406  C167  F15D         	movff	___fttol@lval+1,?___fttol+1
  8769  00340A  C168  F15E         	movff	___fttol@lval+2,?___fttol+2
  8770  00340E  C169  F15F         	movff	___fttol@lval+3,?___fttol+3
  8771  003412  D000               	goto	l1244
  8772  003414                     l1244:
  8773                           
  8774                           ; BSR set to: 1
  8775  003414  0012               	return		;funcret
  8776  003416                     __end_of___fttol:
  8777                           	opt stack 0
  8778                           tblptru	equ	0xFF8
  8779                           tblptrh	equ	0xFF7
  8780                           tblptrl	equ	0xFF6
  8781                           tablat	equ	0xFF5
  8782                           postinc0	equ	0xFEE
  8783                           wreg	equ	0xFE8
  8784                           postinc1	equ	0xFE6
  8785                           postdec1	equ	0xFE5
  8786                           plusw1	equ	0xFE3
  8787                           fsr1h	equ	0xFE2
  8788                           fsr1l	equ	0xFE1
  8789                           postinc2	equ	0xFDE
  8790                           postdec2	equ	0xFDD
  8791                           plusw2	equ	0xFDB
  8792                           fsr2h	equ	0xFDA
  8793                           fsr2l	equ	0xFD9
  8794                           status	equ	0xFD8
  8795                           
  8796 ;; *************** function ___ftneg *****************
  8797 ;; Defined at:
  8798 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  8799 ;; Parameters:    Size  Location     Type
  8800 ;;  f1              3   31[BANK0 ] float 
  8801 ;; Auto vars:     Size  Location     Type
  8802 ;;		None
  8803 ;; Return value:  Size  Location     Type
  8804 ;;                  3   31[BANK0 ] float 
  8805 ;; Registers used:
  8806 ;;		wreg, status,2, status,0
  8807 ;; Tracked objects:
  8808 ;;		On entry : 0/0
  8809 ;;		On exit  : 0/0
  8810 ;;		Unchanged: 0/0
  8811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8812 ;;      Params:         0       3       0       0       0       0       0
  8813 ;;      Locals:         0       0       0       0       0       0       0
  8814 ;;      Temps:          0       0       0       0       0       0       0
  8815 ;;      Totals:         0       3       0       0       0       0       0
  8816 ;;Total ram usage:        3 bytes
  8817 ;; Hardware stack levels used:    1
  8818 ;; Hardware stack levels required when called:    5
  8819 ;; This function calls:
  8820 ;;		Nothing
  8821 ;; This function is called by:
  8822 ;;		_Read_X
  8823 ;;		_Read_Y
  8824 ;;		_Read_Z
  8825 ;; This function uses a non-reentrant model
  8826 ;;
  8827                           
  8828                           	psect	text19
  8829  0041A6                     __ptext19:
  8830                           	opt stack 0
  8831  0041A6                     ___ftneg:
  8832                           	opt stack 23
  8833                           
  8834                           ; BSR set to: 1
  8835                           ;incstack = 0
  8836  0041A6  0100               	movlb	0	; () banked
  8837  0041A8  519F               	movf	___ftneg@f1& (0+255),w,b
  8838  0041AA  0100               	movlb	0	; () banked
  8839  0041AC  11A0               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  8840  0041AE  0100               	movlb	0	; () banked
  8841  0041B0  11A1               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  8842  0041B2  B4D8               	btfsc	status,2,c
  8843  0041B4  D009               	goto	l1233
  8844                           
  8845                           ; BSR set to: 0
  8846  0041B6  0E00               	movlw	0
  8847  0041B8  0100               	movlb	0	; () banked
  8848  0041BA  1B9F               	xorwf	___ftneg@f1& (0+255),f,b
  8849  0041BC  0E00               	movlw	0
  8850  0041BE  0100               	movlb	0	; () banked
  8851  0041C0  1BA0               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  8852  0041C2  0E80               	movlw	128
  8853  0041C4  0100               	movlb	0	; () banked
  8854  0041C6  1BA1               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  8855  0041C8                     l1233:
  8856                           
  8857                           ; BSR set to: 0
  8858  0041C8  C09F  F09F         	movff	___ftneg@f1,?___ftneg
  8859  0041CC  C0A0  F0A0         	movff	___ftneg@f1+1,?___ftneg+1
  8860  0041D0  C0A1  F0A1         	movff	___ftneg@f1+2,?___ftneg+2
  8861                           
  8862                           ; BSR set to: 0
  8863  0041D4  0012               	return		;funcret
  8864  0041D6                     __end_of___ftneg:
  8865                           	opt stack 0
  8866                           tblptru	equ	0xFF8
  8867                           tblptrh	equ	0xFF7
  8868                           tblptrl	equ	0xFF6
  8869                           tablat	equ	0xFF5
  8870                           postinc0	equ	0xFEE
  8871                           wreg	equ	0xFE8
  8872                           postinc1	equ	0xFE6
  8873                           postdec1	equ	0xFE5
  8874                           plusw1	equ	0xFE3
  8875                           fsr1h	equ	0xFE2
  8876                           fsr1l	equ	0xFE1
  8877                           postinc2	equ	0xFDE
  8878                           postdec2	equ	0xFDD
  8879                           plusw2	equ	0xFDB
  8880                           fsr2h	equ	0xFDA
  8881                           fsr2l	equ	0xFD9
  8882                           status	equ	0xFD8
  8883                           
  8884 ;; *************** function ___ftmul *****************
  8885 ;; Defined at:
  8886 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  8887 ;; Parameters:    Size  Location     Type
  8888 ;;  f1              3   43[BANK0 ] float 
  8889 ;;  f2              3   46[BANK0 ] float 
  8890 ;; Auto vars:     Size  Location     Type
  8891 ;;  f3_as_produc    3   53[BANK0 ] unsigned um
  8892 ;;  sign            1   57[BANK0 ] unsigned char 
  8893 ;;  cntr            1   56[BANK0 ] unsigned char 
  8894 ;;  exp             1   52[BANK0 ] unsigned char 
  8895 ;; Return value:  Size  Location     Type
  8896 ;;                  3   43[BANK0 ] float 
  8897 ;; Registers used:
  8898 ;;		wreg, status,2, status,0, cstack
  8899 ;; Tracked objects:
  8900 ;;		On entry : 0/0
  8901 ;;		On exit  : 0/0
  8902 ;;		Unchanged: 0/0
  8903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8904 ;;      Params:         0       6       0       0       0       0       0
  8905 ;;      Locals:         0       6       0       0       0       0       0
  8906 ;;      Temps:          0       3       0       0       0       0       0
  8907 ;;      Totals:         0      15       0       0       0       0       0
  8908 ;;Total ram usage:       15 bytes
  8909 ;; Hardware stack levels used:    1
  8910 ;; Hardware stack levels required when called:    6
  8911 ;; This function calls:
  8912 ;;		___ftpack
  8913 ;; This function is called by:
  8914 ;;		_cmStuffsWrapperFun
  8915 ;;		_Read_X
  8916 ;;		_Read_Y
  8917 ;;		_Read_Z
  8918 ;;		_log
  8919 ;;		_eval_poly
  8920 ;; This function uses a non-reentrant model
  8921 ;;
  8922                           
  8923                           	psect	text20
  8924  002F06                     __ptext20:
  8925                           	opt stack 0
  8926  002F06                     ___ftmul:
  8927                           	opt stack 21
  8928                           
  8929                           ; BSR set to: 0
  8930                           ;incstack = 0
  8931  002F06  C0AD  F0B1         	movff	___ftmul@f1+2,??___ftmul
  8932  002F0A  0100               	movlb	0	; () banked
  8933  002F0C  6BB2               	clrf	(??___ftmul+1)& (0+255),b
  8934  002F0E  6BB3               	clrf	(??___ftmul+2)& (0+255),b
  8935  002F10  0100               	movlb	0	; () banked
  8936  002F12  35AC               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  8937  002F14  0100               	movlb	0	; () banked
  8938  002F16  37B1               	rlcf	??___ftmul& (0+255),f,b
  8939  002F18  E301               	bnc	u5291
  8940  002F1A  81B2               	bsf	(??___ftmul+1)& (0+255),0,b
  8941  002F1C                     u5291:
  8942  002F1C  0100               	movlb	0	; () banked
  8943  002F1E  51B1               	movf	??___ftmul& (0+255),w,b
  8944  002F20  0100               	movlb	0	; () banked
  8945  002F22  6FB4               	movwf	___ftmul@exp& (0+255),b
  8946  002F24  0100               	movlb	0	; () banked
  8947  002F26  51B4               	movf	___ftmul@exp& (0+255),w,b
  8948  002F28  A4D8               	btfss	status,2,c
  8949  002F2A  D002               	goto	l4902
  8950  002F2C  D014               	goto	l4904
  8951                           
  8952                           ; BSR set to: 0
  8953                           
  8954                           ; BSR set to: 0
  8955  002F2E  D098               	goto	l1223
  8956  002F30                     l4902:
  8957                           
  8958                           ; BSR set to: 0
  8959  002F30  C0B0  F0B1         	movff	___ftmul@f2+2,??___ftmul
  8960  002F34  0100               	movlb	0	; () banked
  8961  002F36  6BB2               	clrf	(??___ftmul+1)& (0+255),b
  8962  002F38  6BB3               	clrf	(??___ftmul+2)& (0+255),b
  8963  002F3A  0100               	movlb	0	; () banked
  8964  002F3C  35AF               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  8965  002F3E  0100               	movlb	0	; () banked
  8966  002F40  37B1               	rlcf	??___ftmul& (0+255),f,b
  8967  002F42  E301               	bnc	u5311
  8968  002F44  81B2               	bsf	(??___ftmul+1)& (0+255),0,b
  8969  002F46                     u5311:
  8970  002F46  0100               	movlb	0	; () banked
  8971  002F48  51B1               	movf	??___ftmul& (0+255),w,b
  8972  002F4A  0100               	movlb	0	; () banked
  8973  002F4C  6FB9               	movwf	___ftmul@sign& (0+255),b
  8974  002F4E  0100               	movlb	0	; () banked
  8975  002F50  51B9               	movf	___ftmul@sign& (0+255),w,b
  8976  002F52  A4D8               	btfss	status,2,c
  8977  002F54  D00A               	goto	l4908
  8978  002F56                     l4904:
  8979                           
  8980                           ; BSR set to: 0
  8981  002F56  0E00               	movlw	0
  8982  002F58  0100               	movlb	0	; () banked
  8983  002F5A  6FAB               	movwf	?___ftmul& (0+255),b
  8984  002F5C  0E00               	movlw	0
  8985  002F5E  0100               	movlb	0	; () banked
  8986  002F60  6FAC               	movwf	(?___ftmul+1)& (0+255),b
  8987  002F62  0E00               	movlw	0
  8988  002F64  0100               	movlb	0	; () banked
  8989  002F66  6FAD               	movwf	(?___ftmul+2)& (0+255),b
  8990                           
  8991                           ; BSR set to: 0
  8992  002F68  D07B               	goto	l1223
  8993  002F6A                     l4908:
  8994                           
  8995                           ; BSR set to: 0
  8996  002F6A  0100               	movlb	0	; () banked
  8997  002F6C  51B9               	movf	___ftmul@sign& (0+255),w,b
  8998  002F6E  0F7B               	addlw	123
  8999  002F70  0100               	movlb	0	; () banked
  9000  002F72  27B4               	addwf	___ftmul@exp& (0+255),f,b
  9001                           
  9002                           ; BSR set to: 0
  9003  002F74  C0AD  F0B9         	movff	___ftmul@f1+2,___ftmul@sign
  9004  002F78  0100               	movlb	0	; () banked
  9005  002F7A  51B0               	movf	(___ftmul@f2+2)& (0+255),w,b
  9006  002F7C  0100               	movlb	0	; () banked
  9007  002F7E  1BB9               	xorwf	___ftmul@sign& (0+255),f,b
  9008  002F80  0E80               	movlw	128
  9009  002F82  0100               	movlb	0	; () banked
  9010  002F84  17B9               	andwf	___ftmul@sign& (0+255),f,b
  9011                           
  9012                           ; BSR set to: 0
  9013  002F86  0100               	movlb	0	; () banked
  9014  002F88  8FAC               	bsf	(___ftmul@f1+1)& (0+255),7,b
  9015                           
  9016                           ; BSR set to: 0
  9017  002F8A  0100               	movlb	0	; () banked
  9018  002F8C  8FAF               	bsf	(___ftmul@f2+1)& (0+255),7,b
  9019                           
  9020                           ; BSR set to: 0
  9021  002F8E  0EFF               	movlw	255
  9022  002F90  0100               	movlb	0	; () banked
  9023  002F92  17AE               	andwf	___ftmul@f2& (0+255),f,b
  9024  002F94  0EFF               	movlw	255
  9025  002F96  0100               	movlb	0	; () banked
  9026  002F98  17AF               	andwf	(___ftmul@f2+1)& (0+255),f,b
  9027  002F9A  0E00               	movlw	0
  9028  002F9C  0100               	movlb	0	; () banked
  9029  002F9E  17B0               	andwf	(___ftmul@f2+2)& (0+255),f,b
  9030                           
  9031                           ; BSR set to: 0
  9032  002FA0  0E00               	movlw	0
  9033  002FA2  0100               	movlb	0	; () banked
  9034  002FA4  6FB5               	movwf	___ftmul@f3_as_product& (0+255),b
  9035  002FA6  0E00               	movlw	0
  9036  002FA8  0100               	movlb	0	; () banked
  9037  002FAA  6FB6               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  9038  002FAC  0E00               	movlw	0
  9039  002FAE  0100               	movlb	0	; () banked
  9040  002FB0  6FB7               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  9041                           
  9042                           ; BSR set to: 0
  9043  002FB2  0E07               	movlw	7
  9044  002FB4  0100               	movlb	0	; () banked
  9045  002FB6  6FB8               	movwf	___ftmul@cntr& (0+255),b
  9046  002FB8  D000               	goto	l4922
  9047  002FBA                     l4922:
  9048                           
  9049                           ; BSR set to: 0
  9050  002FBA  0100               	movlb	0	; () banked
  9051  002FBC  A1AB               	btfss	___ftmul@f1& (0+255),0,b
  9052  002FBE  D00D               	goto	l4926
  9053                           
  9054                           ; BSR set to: 0
  9055  002FC0  0100               	movlb	0	; () banked
  9056  002FC2  51AE               	movf	___ftmul@f2& (0+255),w,b
  9057  002FC4  0100               	movlb	0	; () banked
  9058  002FC6  27B5               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9059  002FC8  0100               	movlb	0	; () banked
  9060  002FCA  51AF               	movf	(___ftmul@f2+1)& (0+255),w,b
  9061  002FCC  0100               	movlb	0	; () banked
  9062  002FCE  23B6               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9063  002FD0  0100               	movlb	0	; () banked
  9064  002FD2  51B0               	movf	(___ftmul@f2+2)& (0+255),w,b
  9065  002FD4  0100               	movlb	0	; () banked
  9066  002FD6  23B7               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9067  002FD8  D000               	goto	l4926
  9068  002FDA                     l4926:
  9069                           
  9070                           ; BSR set to: 0
  9071  002FDA  0100               	movlb	0	; () banked
  9072  002FDC  90D8               	bcf	status,0,c
  9073  002FDE  33AD               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9074  002FE0  33AC               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9075  002FE2  33AB               	rrcf	___ftmul@f1& (0+255),f,b
  9076  002FE4  0100               	movlb	0	; () banked
  9077  002FE6  90D8               	bcf	status,0,c
  9078  002FE8  37AE               	rlcf	___ftmul@f2& (0+255),f,b
  9079  002FEA  37AF               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  9080  002FEC  37B0               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  9081                           
  9082                           ; BSR set to: 0
  9083  002FEE  0100               	movlb	0	; () banked
  9084  002FF0  2FB8               	decfsz	___ftmul@cntr& (0+255),f,b
  9085  002FF2  D7E3               	goto	l4922
  9086  002FF4  D000               	goto	l4930
  9087  002FF6                     l4930:
  9088                           
  9089                           ; BSR set to: 0
  9090  002FF6  0E09               	movlw	9
  9091  002FF8  0100               	movlb	0	; () banked
  9092  002FFA  6FB8               	movwf	___ftmul@cntr& (0+255),b
  9093  002FFC  D000               	goto	l4932
  9094  002FFE                     l4932:
  9095                           
  9096                           ; BSR set to: 0
  9097  002FFE  0100               	movlb	0	; () banked
  9098  003000  A1AB               	btfss	___ftmul@f1& (0+255),0,b
  9099  003002  D00D               	goto	l4936
  9100                           
  9101                           ; BSR set to: 0
  9102  003004  0100               	movlb	0	; () banked
  9103  003006  51AE               	movf	___ftmul@f2& (0+255),w,b
  9104  003008  0100               	movlb	0	; () banked
  9105  00300A  27B5               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9106  00300C  0100               	movlb	0	; () banked
  9107  00300E  51AF               	movf	(___ftmul@f2+1)& (0+255),w,b
  9108  003010  0100               	movlb	0	; () banked
  9109  003012  23B6               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9110  003014  0100               	movlb	0	; () banked
  9111  003016  51B0               	movf	(___ftmul@f2+2)& (0+255),w,b
  9112  003018  0100               	movlb	0	; () banked
  9113  00301A  23B7               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9114  00301C  D000               	goto	l4936
  9115  00301E                     l4936:
  9116                           
  9117                           ; BSR set to: 0
  9118  00301E  0100               	movlb	0	; () banked
  9119  003020  90D8               	bcf	status,0,c
  9120  003022  33AD               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9121  003024  33AC               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9122  003026  33AB               	rrcf	___ftmul@f1& (0+255),f,b
  9123  003028  0100               	movlb	0	; () banked
  9124  00302A  90D8               	bcf	status,0,c
  9125  00302C  33B7               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  9126  00302E  33B6               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  9127  003030  33B5               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  9128                           
  9129                           ; BSR set to: 0
  9130  003032  0100               	movlb	0	; () banked
  9131  003034  2FB8               	decfsz	___ftmul@cntr& (0+255),f,b
  9132  003036  D7E3               	goto	l4932
  9133  003038  D000               	goto	l4940
  9134  00303A                     l4940:
  9135                           
  9136                           ; BSR set to: 0
  9137  00303A  C0B5  F09F         	movff	___ftmul@f3_as_product,___ftpack@arg
  9138  00303E  C0B6  F0A0         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9139  003042  C0B7  F0A1         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9140  003046  C0B4  F0A2         	movff	___ftmul@exp,___ftpack@exp
  9141  00304A  C0B9  F0A3         	movff	___ftmul@sign,___ftpack@sign
  9142  00304E  ECA1  F01A         	call	___ftpack	;wreg free
  9143  003052  C09F  F0AB         	movff	?___ftpack,?___ftmul
  9144  003056  C0A0  F0AC         	movff	?___ftpack+1,?___ftmul+1
  9145  00305A  C0A1  F0AD         	movff	?___ftpack+2,?___ftmul+2
  9146  00305E  D000               	goto	l1223
  9147  003060                     l1223:
  9148  003060  0012               	return		;funcret
  9149  003062                     __end_of___ftmul:
  9150                           	opt stack 0
  9151                           tblptru	equ	0xFF8
  9152                           tblptrh	equ	0xFF7
  9153                           tblptrl	equ	0xFF6
  9154                           tablat	equ	0xFF5
  9155                           postinc0	equ	0xFEE
  9156                           wreg	equ	0xFE8
  9157                           postinc1	equ	0xFE6
  9158                           postdec1	equ	0xFE5
  9159                           plusw1	equ	0xFE3
  9160                           fsr1h	equ	0xFE2
  9161                           fsr1l	equ	0xFE1
  9162                           postinc2	equ	0xFDE
  9163                           postdec2	equ	0xFDD
  9164                           plusw2	equ	0xFDB
  9165                           fsr2h	equ	0xFDA
  9166                           fsr2l	equ	0xFD9
  9167                           status	equ	0xFD8
  9168                           
  9169 ;; *************** function ___ftadd *****************
  9170 ;; Defined at:
  9171 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  9172 ;; Parameters:    Size  Location     Type
  9173 ;;  f1              3   58[BANK0 ] float 
  9174 ;;  f2              3   61[BANK0 ] float 
  9175 ;; Auto vars:     Size  Location     Type
  9176 ;;  exp1            1   69[BANK0 ] unsigned char 
  9177 ;;  exp2            1   68[BANK0 ] unsigned char 
  9178 ;;  sign            1   67[BANK0 ] unsigned char 
  9179 ;; Return value:  Size  Location     Type
  9180 ;;                  3   58[BANK0 ] float 
  9181 ;; Registers used:
  9182 ;;		wreg, status,2, status,0, cstack
  9183 ;; Tracked objects:
  9184 ;;		On entry : 0/0
  9185 ;;		On exit  : 0/0
  9186 ;;		Unchanged: 0/0
  9187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9188 ;;      Params:         0       6       0       0       0       0       0
  9189 ;;      Locals:         0       3       0       0       0       0       0
  9190 ;;      Temps:          0       3       0       0       0       0       0
  9191 ;;      Totals:         0      12       0       0       0       0       0
  9192 ;;Total ram usage:       12 bytes
  9193 ;; Hardware stack levels used:    1
  9194 ;; Hardware stack levels required when called:    6
  9195 ;; This function calls:
  9196 ;;		___ftpack
  9197 ;; This function is called by:
  9198 ;;		_cmStuffsWrapperFun
  9199 ;;		_Read_X
  9200 ;;		_Read_Y
  9201 ;;		_Read_Z
  9202 ;;		_log
  9203 ;;		_eval_poly
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207                           	psect	text21
  9208  00222A                     __ptext21:
  9209                           	opt stack 0
  9210  00222A                     ___ftadd:
  9211                           	opt stack 21
  9212                           
  9213                           ;incstack = 0
  9214  00222A  C0BC  F0C0         	movff	___ftadd@f1+2,??___ftadd
  9215  00222E  0100               	movlb	0	; () banked
  9216  002230  6BC1               	clrf	(??___ftadd+1)& (0+255),b
  9217  002232  6BC2               	clrf	(??___ftadd+2)& (0+255),b
  9218  002234  0100               	movlb	0	; () banked
  9219  002236  35BB               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9220  002238  0100               	movlb	0	; () banked
  9221  00223A  37C0               	rlcf	??___ftadd& (0+255),f,b
  9222  00223C  E301               	bnc	u5081
  9223  00223E  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
  9224  002240                     u5081:
  9225  002240  0100               	movlb	0	; () banked
  9226  002242  51C0               	movf	??___ftadd& (0+255),w,b
  9227  002244  0100               	movlb	0	; () banked
  9228  002246  6FC5               	movwf	___ftadd@exp1& (0+255),b
  9229  002248  C0BF  F0C0         	movff	___ftadd@f2+2,??___ftadd
  9230  00224C  0100               	movlb	0	; () banked
  9231  00224E  6BC1               	clrf	(??___ftadd+1)& (0+255),b
  9232  002250  6BC2               	clrf	(??___ftadd+2)& (0+255),b
  9233  002252  0100               	movlb	0	; () banked
  9234  002254  35BE               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9235  002256  0100               	movlb	0	; () banked
  9236  002258  37C0               	rlcf	??___ftadd& (0+255),f,b
  9237  00225A  E301               	bnc	u5091
  9238  00225C  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
  9239  00225E                     u5091:
  9240  00225E  0100               	movlb	0	; () banked
  9241  002260  51C0               	movf	??___ftadd& (0+255),w,b
  9242  002262  0100               	movlb	0	; () banked
  9243  002264  6FC4               	movwf	___ftadd@exp2& (0+255),b
  9244                           
  9245                           ; BSR set to: 0
  9246  002266  0100               	movlb	0	; () banked
  9247  002268  51C5               	movf	___ftadd@exp1& (0+255),w,b
  9248  00226A  0100               	movlb	0	; () banked
  9249  00226C  B4D8               	btfsc	status,2,c
  9250  00226E  D011               	goto	l1176
  9251                           
  9252                           ; BSR set to: 0
  9253  002270  0100               	movlb	0	; () banked
  9254  002272  51C4               	movf	___ftadd@exp2& (0+255),w,b
  9255  002274  0100               	movlb	0	; () banked
  9256  002276  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
  9257  002278  B0D8               	btfsc	status,0,c
  9258  00227A  D012               	goto	l4834
  9259                           
  9260                           ; BSR set to: 0
  9261  00227C  0100               	movlb	0	; () banked
  9262  00227E  51C5               	movf	___ftadd@exp1& (0+255),w,b
  9263  002280  0800               	sublw	0
  9264  002282  0100               	movlb	0	; () banked
  9265  002284  25C4               	addwf	___ftadd@exp2& (0+255),w,b
  9266  002286  0100               	movlb	0	; () banked
  9267  002288  6FC0               	movwf	??___ftadd& (0+255),b
  9268  00228A  0E18               	movlw	24
  9269  00228C  0100               	movlb	0	; () banked
  9270  00228E  65C0               	cpfsgt	??___ftadd& (0+255),b
  9271  002290  D007               	goto	l4834
  9272  002292                     l1176:
  9273                           
  9274                           ; BSR set to: 0
  9275  002292  C0BD  F0BA         	movff	___ftadd@f2,?___ftadd
  9276  002296  C0BE  F0BB         	movff	___ftadd@f2+1,?___ftadd+1
  9277  00229A  C0BF  F0BC         	movff	___ftadd@f2+2,?___ftadd+2
  9278  00229E  D103               	goto	l1177
  9279  0022A0                     l4834:
  9280                           
  9281                           ; BSR set to: 0
  9282  0022A0  0100               	movlb	0	; () banked
  9283  0022A2  51C4               	movf	___ftadd@exp2& (0+255),w,b
  9284  0022A4  0100               	movlb	0	; () banked
  9285  0022A6  B4D8               	btfsc	status,2,c
  9286  0022A8  D011               	goto	l1180
  9287                           
  9288                           ; BSR set to: 0
  9289  0022AA  0100               	movlb	0	; () banked
  9290  0022AC  51C5               	movf	___ftadd@exp1& (0+255),w,b
  9291  0022AE  0100               	movlb	0	; () banked
  9292  0022B0  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
  9293  0022B2  B0D8               	btfsc	status,0,c
  9294  0022B4  D012               	goto	l4840
  9295                           
  9296                           ; BSR set to: 0
  9297  0022B6  0100               	movlb	0	; () banked
  9298  0022B8  51C4               	movf	___ftadd@exp2& (0+255),w,b
  9299  0022BA  0800               	sublw	0
  9300  0022BC  0100               	movlb	0	; () banked
  9301  0022BE  25C5               	addwf	___ftadd@exp1& (0+255),w,b
  9302  0022C0  0100               	movlb	0	; () banked
  9303  0022C2  6FC0               	movwf	??___ftadd& (0+255),b
  9304  0022C4  0E18               	movlw	24
  9305  0022C6  0100               	movlb	0	; () banked
  9306  0022C8  65C0               	cpfsgt	??___ftadd& (0+255),b
  9307  0022CA  D007               	goto	l4840
  9308  0022CC                     l1180:
  9309                           
  9310                           ; BSR set to: 0
  9311  0022CC  C0BA  F0BA         	movff	___ftadd@f1,?___ftadd
  9312  0022D0  C0BB  F0BB         	movff	___ftadd@f1+1,?___ftadd+1
  9313  0022D4  C0BC  F0BC         	movff	___ftadd@f1+2,?___ftadd+2
  9314  0022D8  D0E6               	goto	l1177
  9315  0022DA                     l4840:
  9316                           
  9317                           ; BSR set to: 0
  9318  0022DA  0E06               	movlw	6
  9319  0022DC  0100               	movlb	0	; () banked
  9320  0022DE  6FC3               	movwf	___ftadd@sign& (0+255),b
  9321                           
  9322                           ; BSR set to: 0
  9323  0022E0  0100               	movlb	0	; () banked
  9324  0022E2  AFBC               	btfss	(___ftadd@f1+2)& (0+255),7,b
  9325  0022E4  D003               	goto	l4846
  9326                           
  9327                           ; BSR set to: 0
  9328  0022E6  0100               	movlb	0	; () banked
  9329  0022E8  8FC3               	bsf	___ftadd@sign& (0+255),7,b
  9330  0022EA  D000               	goto	l4846
  9331  0022EC                     l4846:
  9332                           
  9333                           ; BSR set to: 0
  9334  0022EC  0100               	movlb	0	; () banked
  9335  0022EE  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9336  0022F0  D002               	goto	l1182
  9337                           
  9338                           ; BSR set to: 0
  9339  0022F2  0100               	movlb	0	; () banked
  9340  0022F4  8DC3               	bsf	___ftadd@sign& (0+255),6,b
  9341  0022F6                     l1182:
  9342                           
  9343                           ; BSR set to: 0
  9344  0022F6  0100               	movlb	0	; () banked
  9345  0022F8  8FBB               	bsf	(___ftadd@f1+1)& (0+255),7,b
  9346                           
  9347                           ; BSR set to: 0
  9348  0022FA  0EFF               	movlw	255
  9349  0022FC  0100               	movlb	0	; () banked
  9350  0022FE  17BA               	andwf	___ftadd@f1& (0+255),f,b
  9351  002300  0EFF               	movlw	255
  9352  002302  0100               	movlb	0	; () banked
  9353  002304  17BB               	andwf	(___ftadd@f1+1)& (0+255),f,b
  9354  002306  0E00               	movlw	0
  9355  002308  0100               	movlb	0	; () banked
  9356  00230A  17BC               	andwf	(___ftadd@f1+2)& (0+255),f,b
  9357  00230C  0100               	movlb	0	; () banked
  9358  00230E  8FBE               	bsf	(___ftadd@f2+1)& (0+255),7,b
  9359                           
  9360                           ; BSR set to: 0
  9361  002310  0EFF               	movlw	255
  9362  002312  0100               	movlb	0	; () banked
  9363  002314  17BD               	andwf	___ftadd@f2& (0+255),f,b
  9364  002316  0EFF               	movlw	255
  9365  002318  0100               	movlb	0	; () banked
  9366  00231A  17BE               	andwf	(___ftadd@f2+1)& (0+255),f,b
  9367  00231C  0E00               	movlw	0
  9368  00231E  0100               	movlb	0	; () banked
  9369  002320  17BF               	andwf	(___ftadd@f2+2)& (0+255),f,b
  9370                           
  9371                           ; BSR set to: 0
  9372  002322  0100               	movlb	0	; () banked
  9373  002324  51C4               	movf	___ftadd@exp2& (0+255),w,b
  9374  002326  0100               	movlb	0	; () banked
  9375  002328  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
  9376  00232A  B0D8               	btfsc	status,0,c
  9377  00232C  D028               	goto	l4866
  9378  00232E                     l4856:
  9379                           
  9380                           ; BSR set to: 0
  9381  00232E  0100               	movlb	0	; () banked
  9382  002330  90D8               	bcf	status,0,c
  9383  002332  37BD               	rlcf	___ftadd@f2& (0+255),f,b
  9384  002334  37BE               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  9385  002336  37BF               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  9386  002338  0100               	movlb	0	; () banked
  9387  00233A  07C4               	decf	___ftadd@exp2& (0+255),f,b
  9388                           
  9389                           ; BSR set to: 0
  9390  00233C  0100               	movlb	0	; () banked
  9391  00233E  51C5               	movf	___ftadd@exp1& (0+255),w,b
  9392  002340  0100               	movlb	0	; () banked
  9393  002342  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
  9394  002344  B4D8               	btfsc	status,2,c
  9395  002346  D013               	goto	l4864
  9396                           
  9397                           ; BSR set to: 0
  9398  002348  0100               	movlb	0	; () banked
  9399  00234A  07C3               	decf	___ftadd@sign& (0+255),f,b
  9400  00234C  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
  9401  002350  0E07               	movlw	7
  9402  002352  0100               	movlb	0	; () banked
  9403  002354  17C0               	andwf	??___ftadd& (0+255),f,b
  9404  002356  B4D8               	btfsc	status,2,c
  9405  002358  D00A               	goto	l4864
  9406  00235A  D7E9               	goto	l4856
  9407                           
  9408                           ; BSR set to: 0
  9409                           
  9410                           ; BSR set to: 0
  9411  00235C  D008               	goto	l4864
  9412  00235E                     l4862:
  9413                           
  9414                           ; BSR set to: 0
  9415  00235E  0100               	movlb	0	; () banked
  9416  002360  90D8               	bcf	status,0,c
  9417  002362  33BC               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  9418  002364  33BB               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  9419  002366  33BA               	rrcf	___ftadd@f1& (0+255),f,b
  9420  002368  0100               	movlb	0	; () banked
  9421  00236A  2BC5               	incf	___ftadd@exp1& (0+255),f,b
  9422  00236C  D000               	goto	l4864
  9423  00236E                     l4864:
  9424                           
  9425                           ; BSR set to: 0
  9426  00236E  0100               	movlb	0	; () banked
  9427  002370  51C4               	movf	___ftadd@exp2& (0+255),w,b
  9428  002372  0100               	movlb	0	; () banked
  9429  002374  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
  9430  002376  B4D8               	btfsc	status,2,c
  9431  002378  D030               	goto	l1191
  9432  00237A  D7F1               	goto	l4862
  9433                           
  9434                           ; BSR set to: 0
  9435  00237C  D02E               	goto	l1191
  9436  00237E                     l4866:
  9437                           
  9438                           ; BSR set to: 0
  9439  00237E  0100               	movlb	0	; () banked
  9440  002380  51C5               	movf	___ftadd@exp1& (0+255),w,b
  9441  002382  0100               	movlb	0	; () banked
  9442  002384  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
  9443  002386  B0D8               	btfsc	status,0,c
  9444  002388  D028               	goto	l1191
  9445  00238A                     l4868:
  9446                           
  9447                           ; BSR set to: 0
  9448  00238A  0100               	movlb	0	; () banked
  9449  00238C  90D8               	bcf	status,0,c
  9450  00238E  37BA               	rlcf	___ftadd@f1& (0+255),f,b
  9451  002390  37BB               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  9452  002392  37BC               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  9453  002394  0100               	movlb	0	; () banked
  9454  002396  07C5               	decf	___ftadd@exp1& (0+255),f,b
  9455                           
  9456                           ; BSR set to: 0
  9457  002398  0100               	movlb	0	; () banked
  9458  00239A  51C5               	movf	___ftadd@exp1& (0+255),w,b
  9459  00239C  0100               	movlb	0	; () banked
  9460  00239E  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
  9461  0023A0  B4D8               	btfsc	status,2,c
  9462  0023A2  D013               	goto	l4876
  9463                           
  9464                           ; BSR set to: 0
  9465  0023A4  0100               	movlb	0	; () banked
  9466  0023A6  07C3               	decf	___ftadd@sign& (0+255),f,b
  9467  0023A8  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
  9468  0023AC  0E07               	movlw	7
  9469  0023AE  0100               	movlb	0	; () banked
  9470  0023B0  17C0               	andwf	??___ftadd& (0+255),f,b
  9471  0023B2  B4D8               	btfsc	status,2,c
  9472  0023B4  D00A               	goto	l4876
  9473  0023B6  D7E9               	goto	l4868
  9474                           
  9475                           ; BSR set to: 0
  9476                           
  9477                           ; BSR set to: 0
  9478  0023B8  D008               	goto	l4876
  9479  0023BA                     l4874:
  9480                           
  9481                           ; BSR set to: 0
  9482  0023BA  0100               	movlb	0	; () banked
  9483  0023BC  90D8               	bcf	status,0,c
  9484  0023BE  33BF               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  9485  0023C0  33BE               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  9486  0023C2  33BD               	rrcf	___ftadd@f2& (0+255),f,b
  9487  0023C4  0100               	movlb	0	; () banked
  9488  0023C6  2BC4               	incf	___ftadd@exp2& (0+255),f,b
  9489  0023C8  D000               	goto	l4876
  9490  0023CA                     l4876:
  9491                           
  9492                           ; BSR set to: 0
  9493  0023CA  0100               	movlb	0	; () banked
  9494  0023CC  51C4               	movf	___ftadd@exp2& (0+255),w,b
  9495  0023CE  0100               	movlb	0	; () banked
  9496  0023D0  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
  9497  0023D2  B4D8               	btfsc	status,2,c
  9498  0023D4  D002               	goto	l1191
  9499  0023D6  D7F1               	goto	l4874
  9500                           
  9501                           ; BSR set to: 0
  9502  0023D8  D000               	goto	l1191
  9503  0023DA                     l1191:
  9504                           
  9505                           ; BSR set to: 0
  9506  0023DA  0100               	movlb	0	; () banked
  9507  0023DC  AFC3               	btfss	___ftadd@sign& (0+255),7,b
  9508  0023DE  D012               	goto	l1200
  9509                           
  9510                           ; BSR set to: 0
  9511  0023E0  0EFF               	movlw	255
  9512  0023E2  0100               	movlb	0	; () banked
  9513  0023E4  1BBA               	xorwf	___ftadd@f1& (0+255),f,b
  9514  0023E6  0EFF               	movlw	255
  9515  0023E8  0100               	movlb	0	; () banked
  9516  0023EA  1BBB               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  9517  0023EC  0EFF               	movlw	255
  9518  0023EE  0100               	movlb	0	; () banked
  9519  0023F0  1BBC               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  9520  0023F2  0E01               	movlw	1
  9521  0023F4  0100               	movlb	0	; () banked
  9522  0023F6  27BA               	addwf	___ftadd@f1& (0+255),f,b
  9523  0023F8  0E00               	movlw	0
  9524  0023FA  0100               	movlb	0	; () banked
  9525  0023FC  23BB               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  9526  0023FE  0E00               	movlw	0
  9527  002400  0100               	movlb	0	; () banked
  9528  002402  23BC               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  9529  002404                     l1200:
  9530                           
  9531                           ; BSR set to: 0
  9532  002404  0100               	movlb	0	; () banked
  9533  002406  ADC3               	btfss	___ftadd@sign& (0+255),6,b
  9534  002408  D013               	goto	l4882
  9535                           
  9536                           ; BSR set to: 0
  9537  00240A  0EFF               	movlw	255
  9538  00240C  0100               	movlb	0	; () banked
  9539  00240E  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
  9540  002410  0EFF               	movlw	255
  9541  002412  0100               	movlb	0	; () banked
  9542  002414  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9543  002416  0EFF               	movlw	255
  9544  002418  0100               	movlb	0	; () banked
  9545  00241A  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9546  00241C  0E01               	movlw	1
  9547  00241E  0100               	movlb	0	; () banked
  9548  002420  27BD               	addwf	___ftadd@f2& (0+255),f,b
  9549  002422  0E00               	movlw	0
  9550  002424  0100               	movlb	0	; () banked
  9551  002426  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9552  002428  0E00               	movlw	0
  9553  00242A  0100               	movlb	0	; () banked
  9554  00242C  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9555  00242E  D000               	goto	l4882
  9556  002430                     l4882:
  9557                           
  9558                           ; BSR set to: 0
  9559  002430  0E00               	movlw	0
  9560  002432  0100               	movlb	0	; () banked
  9561  002434  6FC3               	movwf	___ftadd@sign& (0+255),b
  9562                           
  9563                           ; BSR set to: 0
  9564  002436  0100               	movlb	0	; () banked
  9565  002438  51BA               	movf	___ftadd@f1& (0+255),w,b
  9566  00243A  0100               	movlb	0	; () banked
  9567  00243C  27BD               	addwf	___ftadd@f2& (0+255),f,b
  9568  00243E  0100               	movlb	0	; () banked
  9569  002440  51BB               	movf	(___ftadd@f1+1)& (0+255),w,b
  9570  002442  0100               	movlb	0	; () banked
  9571  002444  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9572  002446  0100               	movlb	0	; () banked
  9573  002448  51BC               	movf	(___ftadd@f1+2)& (0+255),w,b
  9574  00244A  0100               	movlb	0	; () banked
  9575  00244C  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9576                           
  9577                           ; BSR set to: 0
  9578  00244E  0100               	movlb	0	; () banked
  9579  002450  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9580  002452  D016               	goto	l4892
  9581                           
  9582                           ; BSR set to: 0
  9583  002454  0EFF               	movlw	255
  9584  002456  0100               	movlb	0	; () banked
  9585  002458  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
  9586  00245A  0EFF               	movlw	255
  9587  00245C  0100               	movlb	0	; () banked
  9588  00245E  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9589  002460  0EFF               	movlw	255
  9590  002462  0100               	movlb	0	; () banked
  9591  002464  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9592  002466  0E01               	movlw	1
  9593  002468  0100               	movlb	0	; () banked
  9594  00246A  27BD               	addwf	___ftadd@f2& (0+255),f,b
  9595  00246C  0E00               	movlw	0
  9596  00246E  0100               	movlb	0	; () banked
  9597  002470  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9598  002472  0E00               	movlw	0
  9599  002474  0100               	movlb	0	; () banked
  9600  002476  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9601                           
  9602                           ; BSR set to: 0
  9603  002478  0E01               	movlw	1
  9604  00247A  0100               	movlb	0	; () banked
  9605  00247C  6FC3               	movwf	___ftadd@sign& (0+255),b
  9606  00247E  D000               	goto	l4892
  9607  002480                     l4892:
  9608                           
  9609                           ; BSR set to: 0
  9610  002480  C0BD  F09F         	movff	___ftadd@f2,___ftpack@arg
  9611  002484  C0BE  F0A0         	movff	___ftadd@f2+1,___ftpack@arg+1
  9612  002488  C0BF  F0A1         	movff	___ftadd@f2+2,___ftpack@arg+2
  9613  00248C  C0C5  F0A2         	movff	___ftadd@exp1,___ftpack@exp
  9614  002490  C0C3  F0A3         	movff	___ftadd@sign,___ftpack@sign
  9615  002494  ECA1  F01A         	call	___ftpack	;wreg free
  9616  002498  C09F  F0BA         	movff	?___ftpack,?___ftadd
  9617  00249C  C0A0  F0BB         	movff	?___ftpack+1,?___ftadd+1
  9618  0024A0  C0A1  F0BC         	movff	?___ftpack+2,?___ftadd+2
  9619  0024A4  D000               	goto	l1177
  9620  0024A6                     l1177:
  9621  0024A6  0012               	return		;funcret
  9622  0024A8                     __end_of___ftadd:
  9623                           	opt stack 0
  9624                           tblptru	equ	0xFF8
  9625                           tblptrh	equ	0xFF7
  9626                           tblptrl	equ	0xFF6
  9627                           tablat	equ	0xFF5
  9628                           postinc0	equ	0xFEE
  9629                           wreg	equ	0xFE8
  9630                           postinc1	equ	0xFE6
  9631                           postdec1	equ	0xFE5
  9632                           plusw1	equ	0xFE3
  9633                           fsr1h	equ	0xFE2
  9634                           fsr1l	equ	0xFE1
  9635                           postinc2	equ	0xFDE
  9636                           postdec2	equ	0xFDD
  9637                           plusw2	equ	0xFDB
  9638                           fsr2h	equ	0xFDA
  9639                           fsr2l	equ	0xFD9
  9640                           status	equ	0xFD8
  9641                           
  9642 ;; *************** function ___awtoft *****************
  9643 ;; Defined at:
  9644 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  9645 ;; Parameters:    Size  Location     Type
  9646 ;;  c               2   39[BANK0 ] int 
  9647 ;; Auto vars:     Size  Location     Type
  9648 ;;  sign            1   42[BANK0 ] unsigned char 
  9649 ;; Return value:  Size  Location     Type
  9650 ;;                  3   39[BANK0 ] float 
  9651 ;; Registers used:
  9652 ;;		wreg, status,2, status,0, cstack
  9653 ;; Tracked objects:
  9654 ;;		On entry : 0/0
  9655 ;;		On exit  : 0/0
  9656 ;;		Unchanged: 0/0
  9657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9658 ;;      Params:         0       3       0       0       0       0       0
  9659 ;;      Locals:         0       1       0       0       0       0       0
  9660 ;;      Temps:          0       0       0       0       0       0       0
  9661 ;;      Totals:         0       4       0       0       0       0       0
  9662 ;;Total ram usage:        4 bytes
  9663 ;; Hardware stack levels used:    1
  9664 ;; Hardware stack levels required when called:    6
  9665 ;; This function calls:
  9666 ;;		___ftpack
  9667 ;; This function is called by:
  9668 ;;		_cmStuffsWrapperFun
  9669 ;;		_Read_X
  9670 ;;		_Read_Y
  9671 ;;		_Read_Z
  9672 ;;		_log
  9673 ;; This function uses a non-reentrant model
  9674 ;;
  9675                           
  9676                           	psect	text22
  9677  0040E0                     __ptext22:
  9678                           	opt stack 0
  9679  0040E0                     ___awtoft:
  9680                           	opt stack 22
  9681                           
  9682                           ;incstack = 0
  9683  0040E0  0E00               	movlw	0
  9684  0040E2  0100               	movlb	0	; () banked
  9685  0040E4  6FAA               	movwf	___awtoft@sign& (0+255),b
  9686                           
  9687                           ; BSR set to: 0
  9688  0040E6  0100               	movlb	0	; () banked
  9689  0040E8  AFA8               	btfss	(___awtoft@c+1)& (0+255),7,b
  9690  0040EA  D009               	goto	l4978
  9691                           
  9692                           ; BSR set to: 0
  9693  0040EC  0100               	movlb	0	; () banked
  9694  0040EE  6DA7               	negf	___awtoft@c& (0+255),b
  9695  0040F0  1FA8               	comf	(___awtoft@c+1)& (0+255),f,b
  9696  0040F2  B0D8               	btfsc	status,0,c
  9697  0040F4  2BA8               	incf	(___awtoft@c+1)& (0+255),f,b
  9698                           
  9699                           ; BSR set to: 0
  9700  0040F6  0E01               	movlw	1
  9701  0040F8  0100               	movlb	0	; () banked
  9702  0040FA  6FAA               	movwf	___awtoft@sign& (0+255),b
  9703  0040FC  D000               	goto	l4978
  9704  0040FE                     l4978:
  9705                           
  9706                           ; BSR set to: 0
  9707  0040FE  C0A7  F09F         	movff	___awtoft@c,___ftpack@arg
  9708  004102  C0A8  F0A0         	movff	___awtoft@c+1,___ftpack@arg+1
  9709  004106  0100               	movlb	0	; () banked
  9710  004108  6BA1               	clrf	(___ftpack@arg+2)& (0+255),b
  9711  00410A  0E8E               	movlw	142
  9712  00410C  0100               	movlb	0	; () banked
  9713  00410E  6FA2               	movwf	___ftpack@exp& (0+255),b
  9714  004110  C0AA  F0A3         	movff	___awtoft@sign,___ftpack@sign
  9715  004114  ECA1  F01A         	call	___ftpack	;wreg free
  9716  004118  C09F  F0A7         	movff	?___ftpack,?___awtoft
  9717  00411C  C0A0  F0A8         	movff	?___ftpack+1,?___awtoft+1
  9718  004120  C0A1  F0A9         	movff	?___ftpack+2,?___awtoft+2
  9719  004124  D000               	goto	l1025
  9720  004126                     l1025:
  9721  004126  0012               	return		;funcret
  9722  004128                     __end_of___awtoft:
  9723                           	opt stack 0
  9724                           tblptru	equ	0xFF8
  9725                           tblptrh	equ	0xFF7
  9726                           tblptrl	equ	0xFF6
  9727                           tablat	equ	0xFF5
  9728                           postinc0	equ	0xFEE
  9729                           wreg	equ	0xFE8
  9730                           postinc1	equ	0xFE6
  9731                           postdec1	equ	0xFE5
  9732                           plusw1	equ	0xFE3
  9733                           fsr1h	equ	0xFE2
  9734                           fsr1l	equ	0xFE1
  9735                           postinc2	equ	0xFDE
  9736                           postdec2	equ	0xFDD
  9737                           plusw2	equ	0xFDB
  9738                           fsr2h	equ	0xFDA
  9739                           fsr2l	equ	0xFD9
  9740                           status	equ	0xFD8
  9741                           
  9742 ;; *************** function ___ftpack *****************
  9743 ;; Defined at:
  9744 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  9745 ;; Parameters:    Size  Location     Type
  9746 ;;  arg             3   31[BANK0 ] unsigned um
  9747 ;;  exp             1   34[BANK0 ] unsigned char 
  9748 ;;  sign            1   35[BANK0 ] unsigned char 
  9749 ;; Auto vars:     Size  Location     Type
  9750 ;;		None
  9751 ;; Return value:  Size  Location     Type
  9752 ;;                  3   31[BANK0 ] float 
  9753 ;; Registers used:
  9754 ;;		wreg, status,2, status,0
  9755 ;; Tracked objects:
  9756 ;;		On entry : 0/0
  9757 ;;		On exit  : 0/0
  9758 ;;		Unchanged: 0/0
  9759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9760 ;;      Params:         0       5       0       0       0       0       0
  9761 ;;      Locals:         0       0       0       0       0       0       0
  9762 ;;      Temps:          0       3       0       0       0       0       0
  9763 ;;      Totals:         0       8       0       0       0       0       0
  9764 ;;Total ram usage:        8 bytes
  9765 ;; Hardware stack levels used:    1
  9766 ;; Hardware stack levels required when called:    5
  9767 ;; This function calls:
  9768 ;;		Nothing
  9769 ;; This function is called by:
  9770 ;;		___awtoft
  9771 ;;		___ftadd
  9772 ;;		___ftdiv
  9773 ;;		___ftmul
  9774 ;; This function uses a non-reentrant model
  9775 ;;
  9776                           
  9777                           	psect	text23
  9778  003542                     __ptext23:
  9779                           	opt stack 0
  9780  003542                     ___ftpack:
  9781                           	opt stack 21
  9782                           
  9783                           ;incstack = 0
  9784  003542  0100               	movlb	0	; () banked
  9785  003544  51A2               	movf	___ftpack@exp& (0+255),w,b
  9786  003546  0100               	movlb	0	; () banked
  9787  003548  B4D8               	btfsc	status,2,c
  9788  00354A  D008               	goto	l4788
  9789                           
  9790                           ; BSR set to: 0
  9791  00354C  0100               	movlb	0	; () banked
  9792  00354E  519F               	movf	___ftpack@arg& (0+255),w,b
  9793  003550  0100               	movlb	0	; () banked
  9794  003552  11A0               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  9795  003554  0100               	movlb	0	; () banked
  9796  003556  11A1               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  9797  003558  A4D8               	btfss	status,2,c
  9798  00355A  D013               	goto	l4794
  9799  00355C                     l4788:
  9800                           
  9801                           ; BSR set to: 0
  9802  00355C  0E00               	movlw	0
  9803  00355E  0100               	movlb	0	; () banked
  9804  003560  6F9F               	movwf	?___ftpack& (0+255),b
  9805  003562  0E00               	movlw	0
  9806  003564  0100               	movlb	0	; () banked
  9807  003566  6FA0               	movwf	(?___ftpack+1)& (0+255),b
  9808  003568  0E00               	movlw	0
  9809  00356A  0100               	movlb	0	; () banked
  9810  00356C  6FA1               	movwf	(?___ftpack+2)& (0+255),b
  9811                           
  9812                           ; BSR set to: 0
  9813  00356E  D078               	goto	l1136
  9814                           
  9815                           ; BSR set to: 0
  9816  003570  D008               	goto	l4794
  9817  003572                     l4792:
  9818                           
  9819                           ; BSR set to: 0
  9820  003572  0100               	movlb	0	; () banked
  9821  003574  2BA2               	incf	___ftpack@exp& (0+255),f,b
  9822  003576  0100               	movlb	0	; () banked
  9823  003578  90D8               	bcf	status,0,c
  9824  00357A  33A1               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  9825  00357C  33A0               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  9826  00357E  339F               	rrcf	___ftpack@arg& (0+255),f,b
  9827  003580  D000               	goto	l4794
  9828  003582                     l4794:
  9829                           
  9830                           ; BSR set to: 0
  9831  003582  0E00               	movlw	0
  9832  003584  0100               	movlb	0	; () banked
  9833  003586  159F               	andwf	___ftpack@arg& (0+255),w,b
  9834  003588  0100               	movlb	0	; () banked
  9835  00358A  6FA4               	movwf	??___ftpack& (0+255),b
  9836  00358C  0E00               	movlw	0
  9837  00358E  0100               	movlb	0	; () banked
  9838  003590  15A0               	andwf	(___ftpack@arg+1)& (0+255),w,b
  9839  003592  0100               	movlb	0	; () banked
  9840  003594  6FA5               	movwf	(??___ftpack+1)& (0+255),b
  9841  003596  0EFE               	movlw	254
  9842  003598  0100               	movlb	0	; () banked
  9843  00359A  15A1               	andwf	(___ftpack@arg+2)& (0+255),w,b
  9844  00359C  0100               	movlb	0	; () banked
  9845  00359E  6FA6               	movwf	(??___ftpack+2)& (0+255),b
  9846  0035A0  0100               	movlb	0	; () banked
  9847  0035A2  51A4               	movf	??___ftpack& (0+255),w,b
  9848  0035A4  0100               	movlb	0	; () banked
  9849  0035A6  11A5               	iorwf	(??___ftpack+1)& (0+255),w,b
  9850  0035A8  0100               	movlb	0	; () banked
  9851  0035AA  11A6               	iorwf	(??___ftpack+2)& (0+255),w,b
  9852  0035AC  B4D8               	btfsc	status,2,c
  9853  0035AE  D013               	goto	l4800
  9854  0035B0  D7E0               	goto	l4792
  9855                           
  9856                           ; BSR set to: 0
  9857  0035B2  D011               	goto	l4800
  9858  0035B4                     l4796:
  9859                           
  9860                           ; BSR set to: 0
  9861  0035B4  0100               	movlb	0	; () banked
  9862  0035B6  2BA2               	incf	___ftpack@exp& (0+255),f,b
  9863                           
  9864                           ; BSR set to: 0
  9865  0035B8  0E01               	movlw	1
  9866  0035BA  0100               	movlb	0	; () banked
  9867  0035BC  279F               	addwf	___ftpack@arg& (0+255),f,b
  9868  0035BE  0E00               	movlw	0
  9869  0035C0  0100               	movlb	0	; () banked
  9870  0035C2  23A0               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  9871  0035C4  0E00               	movlw	0
  9872  0035C6  0100               	movlb	0	; () banked
  9873  0035C8  23A1               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  9874  0035CA  0100               	movlb	0	; () banked
  9875  0035CC  90D8               	bcf	status,0,c
  9876  0035CE  33A1               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  9877  0035D0  33A0               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  9878  0035D2  339F               	rrcf	___ftpack@arg& (0+255),f,b
  9879  0035D4  D000               	goto	l4800
  9880  0035D6                     l4800:
  9881                           
  9882                           ; BSR set to: 0
  9883  0035D6  0E00               	movlw	0
  9884  0035D8  0100               	movlb	0	; () banked
  9885  0035DA  159F               	andwf	___ftpack@arg& (0+255),w,b
  9886  0035DC  0100               	movlb	0	; () banked
  9887  0035DE  6FA4               	movwf	??___ftpack& (0+255),b
  9888  0035E0  0E00               	movlw	0
  9889  0035E2  0100               	movlb	0	; () banked
  9890  0035E4  15A0               	andwf	(___ftpack@arg+1)& (0+255),w,b
  9891  0035E6  0100               	movlb	0	; () banked
  9892  0035E8  6FA5               	movwf	(??___ftpack+1)& (0+255),b
  9893  0035EA  0EFF               	movlw	255
  9894  0035EC  0100               	movlb	0	; () banked
  9895  0035EE  15A1               	andwf	(___ftpack@arg+2)& (0+255),w,b
  9896  0035F0  0100               	movlb	0	; () banked
  9897  0035F2  6FA6               	movwf	(??___ftpack+2)& (0+255),b
  9898  0035F4  0100               	movlb	0	; () banked
  9899  0035F6  51A4               	movf	??___ftpack& (0+255),w,b
  9900  0035F8  0100               	movlb	0	; () banked
  9901  0035FA  11A5               	iorwf	(??___ftpack+1)& (0+255),w,b
  9902  0035FC  0100               	movlb	0	; () banked
  9903  0035FE  11A6               	iorwf	(??___ftpack+2)& (0+255),w,b
  9904  003600  B4D8               	btfsc	status,2,c
  9905  003602  D00A               	goto	l4804
  9906  003604  D7D7               	goto	l4796
  9907                           
  9908                           ; BSR set to: 0
  9909  003606  D008               	goto	l4804
  9910  003608                     l4802:
  9911                           
  9912                           ; BSR set to: 0
  9913  003608  0100               	movlb	0	; () banked
  9914  00360A  07A2               	decf	___ftpack@exp& (0+255),f,b
  9915  00360C  0100               	movlb	0	; () banked
  9916  00360E  90D8               	bcf	status,0,c
  9917  003610  379F               	rlcf	___ftpack@arg& (0+255),f,b
  9918  003612  37A0               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  9919  003614  37A1               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  9920  003616  D000               	goto	l4804
  9921  003618                     l4804:
  9922                           
  9923                           ; BSR set to: 0
  9924  003618  0100               	movlb	0	; () banked
  9925  00361A  BFA0               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  9926  00361C  D005               	goto	l1147
  9927                           
  9928                           ; BSR set to: 0
  9929  00361E  0E02               	movlw	2
  9930  003620  0100               	movlb	0	; () banked
  9931  003622  61A2               	cpfslt	___ftpack@exp& (0+255),b
  9932  003624  D7F1               	goto	l4802
  9933  003626  D000               	goto	l1147
  9934  003628                     l1147:
  9935                           
  9936                           ; BSR set to: 0
  9937  003628  0100               	movlb	0	; () banked
  9938  00362A  B1A2               	btfsc	___ftpack@exp& (0+255),0,b
  9939  00362C  D003               	goto	l4810
  9940                           
  9941                           ; BSR set to: 0
  9942  00362E  0100               	movlb	0	; () banked
  9943  003630  9FA0               	bcf	(___ftpack@arg+1)& (0+255),7,b
  9944  003632  D000               	goto	l4810
  9945  003634                     l4810:
  9946                           
  9947                           ; BSR set to: 0
  9948  003634  0100               	movlb	0	; () banked
  9949  003636  90D8               	bcf	status,0,c
  9950  003638  33A2               	rrcf	___ftpack@exp& (0+255),f,b
  9951  00363A  0100               	movlb	0	; () banked
  9952  00363C  51A2               	movf	___ftpack@exp& (0+255),w,b
  9953  00363E  0100               	movlb	0	; () banked
  9954  003640  13A1               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  9955                           
  9956                           ; BSR set to: 0
  9957  003642  0100               	movlb	0	; () banked
  9958  003644  51A3               	movf	___ftpack@sign& (0+255),w,b
  9959  003646  0100               	movlb	0	; () banked
  9960  003648  B4D8               	btfsc	status,2,c
  9961  00364A  D003               	goto	l4816
  9962                           
  9963                           ; BSR set to: 0
  9964  00364C  0100               	movlb	0	; () banked
  9965  00364E  8FA1               	bsf	(___ftpack@arg+2)& (0+255),7,b
  9966  003650  D000               	goto	l4816
  9967  003652                     l4816:
  9968                           
  9969                           ; BSR set to: 0
  9970  003652  C09F  F09F         	movff	___ftpack@arg,?___ftpack
  9971  003656  C0A0  F0A0         	movff	___ftpack@arg+1,?___ftpack+1
  9972  00365A  C0A1  F0A1         	movff	___ftpack@arg+2,?___ftpack+2
  9973  00365E  D000               	goto	l1136
  9974  003660                     l1136:
  9975                           
  9976                           ; BSR set to: 0
  9977  003660  0012               	return		;funcret
  9978  003662                     __end_of___ftpack:
  9979                           	opt stack 0
  9980                           tblptru	equ	0xFF8
  9981                           tblptrh	equ	0xFF7
  9982                           tblptrl	equ	0xFF6
  9983                           tablat	equ	0xFF5
  9984                           postinc0	equ	0xFEE
  9985                           wreg	equ	0xFE8
  9986                           postinc1	equ	0xFE6
  9987                           postdec1	equ	0xFE5
  9988                           plusw1	equ	0xFE3
  9989                           fsr1h	equ	0xFE2
  9990                           fsr1l	equ	0xFE1
  9991                           postinc2	equ	0xFDE
  9992                           postdec2	equ	0xFDD
  9993                           plusw2	equ	0xFDB
  9994                           fsr2h	equ	0xFDA
  9995                           fsr2l	equ	0xFD9
  9996                           status	equ	0xFD8
  9997                           
  9998 ;; *************** function _ReadADC *****************
  9999 ;; Defined at:
 10000 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcread.c"
 10001 ;; Parameters:    Size  Location     Type
 10002 ;;		None
 10003 ;; Auto vars:     Size  Location     Type
 10004 ;;		None
 10005 ;; Return value:  Size  Location     Type
 10006 ;;                  2   31[BANK0 ] int 
 10007 ;; Registers used:
 10008 ;;		wreg, status,2
 10009 ;; Tracked objects:
 10010 ;;		On entry : 0/0
 10011 ;;		On exit  : 0/0
 10012 ;;		Unchanged: 0/0
 10013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10014 ;;      Params:         0       2       0       0       0       0       0
 10015 ;;      Locals:         0       0       0       0       0       0       0
 10016 ;;      Temps:          0       2       0       0       0       0       0
 10017 ;;      Totals:         0       4       0       0       0       0       0
 10018 ;;Total ram usage:        4 bytes
 10019 ;; Hardware stack levels used:    1
 10020 ;; Hardware stack levels required when called:    5
 10021 ;; This function calls:
 10022 ;;		Nothing
 10023 ;; This function is called by:
 10024 ;;		_Read_X
 10025 ;;		_Read_Y
 10026 ;;		_Read_Z
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           	psect	text24
 10031  004348                     __ptext24:
 10032                           	opt stack 0
 10033  004348                     _ReadADC:
 10034                           	opt stack 23
 10035                           
 10036                           ; BSR set to: 0
 10037                           ;incstack = 0
 10038  004348  50C4               	movf	4036,w,c	;volatile
 10039  00434A  0100               	movlb	0	; () banked
 10040  00434C  6FA1               	movwf	??_ReadADC& (0+255),b
 10041  00434E  50C3               	movf	4035,w,c	;volatile
 10042  004350  0100               	movlb	0	; () banked
 10043  004352  6F9F               	movwf	?_ReadADC& (0+255),b
 10044  004354  C0A1  F0A0         	movff	??_ReadADC,?_ReadADC+1
 10045  004358  D000               	goto	l698
 10046  00435A                     l698:
 10047                           
 10048                           ; BSR set to: 0
 10049  00435A  0012               	return		;funcret
 10050  00435C                     __end_of_ReadADC:
 10051                           	opt stack 0
 10052                           tblptru	equ	0xFF8
 10053                           tblptrh	equ	0xFF7
 10054                           tblptrl	equ	0xFF6
 10055                           tablat	equ	0xFF5
 10056                           postinc0	equ	0xFEE
 10057                           wreg	equ	0xFE8
 10058                           postinc1	equ	0xFE6
 10059                           postdec1	equ	0xFE5
 10060                           plusw1	equ	0xFE3
 10061                           fsr1h	equ	0xFE2
 10062                           fsr1l	equ	0xFE1
 10063                           postinc2	equ	0xFDE
 10064                           postdec2	equ	0xFDD
 10065                           plusw2	equ	0xFDB
 10066                           fsr2h	equ	0xFDA
 10067                           fsr2l	equ	0xFD9
 10068                           status	equ	0xFD8
 10069                           
 10070 ;; *************** function _Delay10TCYx *****************
 10071 ;; Defined at:
 10072 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d10tcyx.c"
 10073 ;; Parameters:    Size  Location     Type
 10074 ;;  unit            1    wreg     unsigned char 
 10075 ;; Auto vars:     Size  Location     Type
 10076 ;;  unit            1   31[BANK0 ] unsigned char 
 10077 ;; Return value:  Size  Location     Type
 10078 ;;		None               void
 10079 ;; Registers used:
 10080 ;;		wreg
 10081 ;; Tracked objects:
 10082 ;;		On entry : 0/0
 10083 ;;		On exit  : 0/0
 10084 ;;		Unchanged: 0/0
 10085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10086 ;;      Params:         0       0       0       0       0       0       0
 10087 ;;      Locals:         0       1       0       0       0       0       0
 10088 ;;      Temps:          0       0       0       0       0       0       0
 10089 ;;      Totals:         0       1       0       0       0       0       0
 10090 ;;Total ram usage:        1 bytes
 10091 ;; Hardware stack levels used:    1
 10092 ;; Hardware stack levels required when called:    5
 10093 ;; This function calls:
 10094 ;;		Nothing
 10095 ;; This function is called by:
 10096 ;;		_Read_X
 10097 ;;		_Read_Y
 10098 ;;		_Read_Z
 10099 ;; This function uses a non-reentrant model
 10100 ;;
 10101                           
 10102                           	psect	text25
 10103  00431C                     __ptext25:
 10104                           	opt stack 0
 10105  00431C                     _Delay10TCYx:
 10106                           	opt stack 23
 10107                           
 10108                           ; BSR set to: 0
 10109                           ;incstack = 0
 10110                           ;Delay10TCYx@unit stored from wreg
 10111  00431C  0100               	movlb	0	; () banked
 10112  00431E  6F9F               	movwf	Delay10TCYx@unit& (0+255),b
 10113  004320                     
 10114                           ; BSR set to: 0
 10115  004320  0E03               	movlw	3
 10116  004322                     u7047:
 10117  004322  2EE8               	decfsz	wreg,f,c
 10118  004324  D7FE               	goto	u7047
 10119  004326  F000               	nop	
 10120  004328  0100               	movlb	0	; () banked
 10121  00432A  2F9F               	decfsz	Delay10TCYx@unit& (0+255),f,b
 10122  00432C  D7F9               	goto	l5296
 10123  00432E  D000               	goto	l1039
 10124  004330                     l1039:
 10125                           
 10126                           ; BSR set to: 0
 10127  004330  0012               	return		;funcret
 10128  004332                     __end_of_Delay10TCYx:
 10129                           	opt stack 0
 10130                           tblptru	equ	0xFF8
 10131                           tblptrh	equ	0xFF7
 10132                           tblptrl	equ	0xFF6
 10133                           tablat	equ	0xFF5
 10134                           postinc0	equ	0xFEE
 10135                           wreg	equ	0xFE8
 10136                           postinc1	equ	0xFE6
 10137                           postdec1	equ	0xFE5
 10138                           plusw1	equ	0xFE3
 10139                           fsr1h	equ	0xFE2
 10140                           fsr1l	equ	0xFE1
 10141                           postinc2	equ	0xFDE
 10142                           postdec2	equ	0xFDD
 10143                           plusw2	equ	0xFDB
 10144                           fsr2h	equ	0xFDA
 10145                           fsr2l	equ	0xFD9
 10146                           status	equ	0xFD8
 10147                           
 10148 ;; *************** function _ConvertADC *****************
 10149 ;; Defined at:
 10150 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcconv.c"
 10151 ;; Parameters:    Size  Location     Type
 10152 ;;		None
 10153 ;; Auto vars:     Size  Location     Type
 10154 ;;		None
 10155 ;; Return value:  Size  Location     Type
 10156 ;;		None               void
 10157 ;; Registers used:
 10158 ;;		None
 10159 ;; Tracked objects:
 10160 ;;		On entry : 0/0
 10161 ;;		On exit  : 0/0
 10162 ;;		Unchanged: 0/0
 10163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10164 ;;      Params:         0       0       0       0       0       0       0
 10165 ;;      Locals:         0       0       0       0       0       0       0
 10166 ;;      Temps:          0       0       0       0       0       0       0
 10167 ;;      Totals:         0       0       0       0       0       0       0
 10168 ;;Total ram usage:        0 bytes
 10169 ;; Hardware stack levels used:    1
 10170 ;; Hardware stack levels required when called:    5
 10171 ;; This function calls:
 10172 ;;		Nothing
 10173 ;; This function is called by:
 10174 ;;		_Read_X
 10175 ;;		_Read_Y
 10176 ;;		_Read_Z
 10177 ;; This function uses a non-reentrant model
 10178 ;;
 10179                           
 10180                           	psect	text26
 10181  0043C6                     __ptext26:
 10182                           	opt stack 0
 10183  0043C6                     _ConvertADC:
 10184                           	opt stack 23
 10185                           
 10186                           ; BSR set to: 0
 10187                           ;incstack = 0
 10188  0043C6  82C2               	bsf	4034,1,c	;volatile
 10189  0043C8  0012               	return		;funcret
 10190  0043CA                     __end_of_ConvertADC:
 10191                           	opt stack 0
 10192                           tblptru	equ	0xFF8
 10193                           tblptrh	equ	0xFF7
 10194                           tblptrl	equ	0xFF6
 10195                           tablat	equ	0xFF5
 10196                           postinc0	equ	0xFEE
 10197                           wreg	equ	0xFE8
 10198                           postinc1	equ	0xFE6
 10199                           postdec1	equ	0xFE5
 10200                           plusw1	equ	0xFE3
 10201                           fsr1h	equ	0xFE2
 10202                           fsr1l	equ	0xFE1
 10203                           postinc2	equ	0xFDE
 10204                           postdec2	equ	0xFDD
 10205                           plusw2	equ	0xFDB
 10206                           fsr2h	equ	0xFDA
 10207                           fsr2l	equ	0xFD9
 10208                           status	equ	0xFD8
 10209                           
 10210 ;; *************** function _BusyADC *****************
 10211 ;; Defined at:
 10212 ;;		line 26 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcbusy.c"
 10213 ;; Parameters:    Size  Location     Type
 10214 ;;		None
 10215 ;; Auto vars:     Size  Location     Type
 10216 ;;		None
 10217 ;; Return value:  Size  Location     Type
 10218 ;;                  1    wreg      unsigned char 
 10219 ;; Registers used:
 10220 ;;		wreg
 10221 ;; Tracked objects:
 10222 ;;		On entry : 0/0
 10223 ;;		On exit  : 0/0
 10224 ;;		Unchanged: 0/0
 10225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10226 ;;      Params:         0       0       0       0       0       0       0
 10227 ;;      Locals:         0       0       0       0       0       0       0
 10228 ;;      Temps:          0       0       0       0       0       0       0
 10229 ;;      Totals:         0       0       0       0       0       0       0
 10230 ;;Total ram usage:        0 bytes
 10231 ;; Hardware stack levels used:    1
 10232 ;; Hardware stack levels required when called:    5
 10233 ;; This function calls:
 10234 ;;		Nothing
 10235 ;; This function is called by:
 10236 ;;		_Read_X
 10237 ;;		_Read_Y
 10238 ;;		_Read_Z
 10239 ;; This function uses a non-reentrant model
 10240 ;;
 10241                           
 10242                           	psect	text27
 10243  004390                     __ptext27:
 10244                           	opt stack 0
 10245  004390                     _BusyADC:
 10246                           	opt stack 23
 10247                           
 10248                           ;incstack = 0
 10249  004390  A2C2               	btfss	4034,1,c	;volatile
 10250  004392  D002               	goto	u5940
 10251  004394  0E01               	movlw	1
 10252  004396  D002               	goto	l686
 10253  004398                     u5940:
 10254  004398  0E00               	movlw	0
 10255  00439A  D000               	goto	l686
 10256  00439C                     l686:
 10257  00439C  0012               	return		;funcret
 10258  00439E                     __end_of_BusyADC:
 10259                           	opt stack 0
 10260                           tblptru	equ	0xFF8
 10261                           tblptrh	equ	0xFF7
 10262                           tblptrl	equ	0xFF6
 10263                           tablat	equ	0xFF5
 10264                           postinc0	equ	0xFEE
 10265                           wreg	equ	0xFE8
 10266                           postinc1	equ	0xFE6
 10267                           postdec1	equ	0xFE5
 10268                           plusw1	equ	0xFE3
 10269                           fsr1h	equ	0xFE2
 10270                           fsr1l	equ	0xFE1
 10271                           postinc2	equ	0xFDE
 10272                           postdec2	equ	0xFDD
 10273                           plusw2	equ	0xFDB
 10274                           fsr2h	equ	0xFDA
 10275                           fsr2l	equ	0xFD9
 10276                           status	equ	0xFD8
 10277                           
 10278 ;; *************** function _PumpDetect *****************
 10279 ;; Defined at:
 10280 ;;		line 88 in file "AccelerationFuncs.c"
 10281 ;; Parameters:    Size  Location     Type
 10282 ;;		None
 10283 ;; Auto vars:     Size  Location     Type
 10284 ;;		None
 10285 ;; Return value:  Size  Location     Type
 10286 ;;                  2   35[BANK0 ] int 
 10287 ;; Registers used:
 10288 ;;		wreg, status,2, status,0, cstack
 10289 ;; Tracked objects:
 10290 ;;		On entry : 0/0
 10291 ;;		On exit  : 0/0
 10292 ;;		Unchanged: 0/0
 10293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10294 ;;      Params:         0       2       0       0       0       0       0
 10295 ;;      Locals:         0       0       0       0       0       0       0
 10296 ;;      Temps:          0       4       0       0       0       0       0
 10297 ;;      Totals:         0       6       0       0       0       0       0
 10298 ;;Total ram usage:        6 bytes
 10299 ;; Hardware stack levels used:    1
 10300 ;; Hardware stack levels required when called:    6
 10301 ;; This function calls:
 10302 ;;		_abs
 10303 ;; This function is called by:
 10304 ;;		_main
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           	psect	text28
 10309  002D56                     __ptext28:
 10310                           	opt stack 0
 10311  002D56                     _PumpDetect:
 10312                           	opt stack 24
 10313                           
 10314                           ;AccelerationFuncs.c: 90: if (offcount>offcountmax+1)
 10315                           
 10316                           ;incstack = 0
 10317  002D56  0E01               	movlw	1
 10318  002D58  245A               	addwf	_offcountmax,w,c
 10319  002D5A  0100               	movlb	0	; () banked
 10320  002D5C  6FA5               	movwf	??_PumpDetect& (0+255),b
 10321  002D5E  0E00               	movlw	0
 10322  002D60  205B               	addwfc	_offcountmax+1,w,c
 10323  002D62  0100               	movlb	0	; () banked
 10324  002D64  6FA6               	movwf	(??_PumpDetect+1)& (0+255),b
 10325  002D66  0100               	movlb	0	; () banked
 10326  002D68  6BA7               	clrf	(??_PumpDetect+2)& (0+255),b
 10327  002D6A  0100               	movlb	0	; () banked
 10328  002D6C  6BA8               	clrf	(??_PumpDetect+3)& (0+255),b
 10329  002D6E  0101               	movlb	1	; () banked
 10330  002D70  51AC               	movf	_offcount& (0+255),w,b
 10331  002D72  0100               	movlb	0	; () banked
 10332  002D74  5DA5               	subwf	??_PumpDetect& (0+255),w,b
 10333  002D76  0101               	movlb	1	; () banked
 10334  002D78  51AD               	movf	(_offcount+1)& (0+255),w,b
 10335  002D7A  0100               	movlb	0	; () banked
 10336  002D7C  59A6               	subwfb	(??_PumpDetect+1)& (0+255),w,b
 10337  002D7E  0101               	movlb	1	; () banked
 10338  002D80  51AE               	movf	(_offcount+2)& (0+255),w,b
 10339  002D82  0100               	movlb	0	; () banked
 10340  002D84  59A7               	subwfb	(??_PumpDetect+2)& (0+255),w,b
 10341  002D86  0101               	movlb	1	; () banked
 10342  002D88  51AF               	movf	(_offcount+3)& (0+255),w,b
 10343  002D8A  0100               	movlb	0	; () banked
 10344  002D8C  59A8               	subwfb	(??_PumpDetect+3)& (0+255),w,b
 10345  002D8E  B0D8               	btfsc	status,0,c
 10346  002D90  D010               	goto	l4188
 10347                           
 10348                           ; BSR set to: 0
 10349                           ;AccelerationFuncs.c: 91: {
 10350                           ;AccelerationFuncs.c: 92: offcount=offcountmax+1;
 10351  002D92  0E01               	movlw	1
 10352  002D94  245A               	addwf	_offcountmax,w,c
 10353  002D96  0100               	movlb	0	; () banked
 10354  002D98  6FA5               	movwf	??_PumpDetect& (0+255),b
 10355  002D9A  0E00               	movlw	0
 10356  002D9C  205B               	addwfc	_offcountmax+1,w,c
 10357  002D9E  0100               	movlb	0	; () banked
 10358  002DA0  6FA6               	movwf	(??_PumpDetect+1)& (0+255),b
 10359  002DA2  C0A5  F1AC         	movff	??_PumpDetect,_offcount
 10360  002DA6  C0A6  F1AD         	movff	??_PumpDetect+1,_offcount+1
 10361  002DAA  0101               	movlb	1	; () banked
 10362  002DAC  6BAE               	clrf	(_offcount+2)& (0+255),b
 10363  002DAE  6BAF               	clrf	(_offcount+3)& (0+255),b
 10364  002DB0  D000               	goto	l4188
 10365  002DB2                     l4188:
 10366                           
 10367                           ;AccelerationFuncs.c: 93: }
 10368                           ;AccelerationFuncs.c: 96: if ((abs(xlongavg-xshortavg)>onthresh)||(abs(ylongavg-yshortav
      +                          g)>onthresh)||(abs(zlongavg-zshortavg)>onthresh))
 10369  002DB2  C1B4  F0A5         	movff	_xshortavg,??_PumpDetect
 10370  002DB6  C1B5  F0A6         	movff	_xshortavg+1,??_PumpDetect+1
 10371  002DBA  0100               	movlb	0	; () banked
 10372  002DBC  1FA5               	comf	??_PumpDetect& (0+255),f,b
 10373  002DBE  1FA6               	comf	(??_PumpDetect+1)& (0+255),f,b
 10374  002DC0  4BA5               	infsnz	??_PumpDetect& (0+255),f,b
 10375  002DC2  2BA6               	incf	(??_PumpDetect+1)& (0+255),f,b
 10376  002DC4  0101               	movlb	1	; () banked
 10377  002DC6  51B0               	movf	_xlongavg& (0+255),w,b
 10378  002DC8  0100               	movlb	0	; () banked
 10379  002DCA  25A5               	addwf	??_PumpDetect& (0+255),w,b
 10380  002DCC  0100               	movlb	0	; () banked
 10381  002DCE  6F9F               	movwf	abs@a& (0+255),b
 10382  002DD0  0101               	movlb	1	; () banked
 10383  002DD2  51B1               	movf	(_xlongavg+1)& (0+255),w,b
 10384  002DD4  0100               	movlb	0	; () banked
 10385  002DD6  21A6               	addwfc	(??_PumpDetect+1)& (0+255),w,b
 10386  002DD8  0100               	movlb	0	; () banked
 10387  002DDA  6FA0               	movwf	(abs@a+1)& (0+255),b
 10388  002DDC  EC02  F021         	call	_abs	;wreg free
 10389  002DE0  0100               	movlb	0	; () banked
 10390  002DE2  519F               	movf	?_abs& (0+255),w,b
 10391  002DE4  5C5C               	subwf	_onthresh,w,c
 10392  002DE6  505D               	movf	_onthresh+1,w,c
 10393  002DE8  0A80               	xorlw	128
 10394  002DEA  0100               	movlb	0	; () banked
 10395  002DEC  6FA7               	movwf	(??_PumpDetect+2)& (0+255),b
 10396  002DEE  0100               	movlb	0	; () banked
 10397  002DF0  51A0               	movf	(?_abs+1)& (0+255),w,b
 10398  002DF2  0A80               	xorlw	128
 10399  002DF4  0100               	movlb	0	; () banked
 10400  002DF6  59A7               	subwfb	(??_PumpDetect+2)& (0+255),w,b
 10401  002DF8  A0D8               	btfss	status,0,c
 10402  002DFA  D04A               	goto	l4194
 10403                           
 10404                           ; BSR set to: 0
 10405  002DFC  C1BC  F0A5         	movff	_yshortavg,??_PumpDetect
 10406  002E00  C1BD  F0A6         	movff	_yshortavg+1,??_PumpDetect+1
 10407  002E04  0100               	movlb	0	; () banked
 10408  002E06  1FA5               	comf	??_PumpDetect& (0+255),f,b
 10409  002E08  1FA6               	comf	(??_PumpDetect+1)& (0+255),f,b
 10410  002E0A  4BA5               	infsnz	??_PumpDetect& (0+255),f,b
 10411  002E0C  2BA6               	incf	(??_PumpDetect+1)& (0+255),f,b
 10412  002E0E  0101               	movlb	1	; () banked
 10413  002E10  51B8               	movf	_ylongavg& (0+255),w,b
 10414  002E12  0100               	movlb	0	; () banked
 10415  002E14  25A5               	addwf	??_PumpDetect& (0+255),w,b
 10416  002E16  0100               	movlb	0	; () banked
 10417  002E18  6F9F               	movwf	abs@a& (0+255),b
 10418  002E1A  0101               	movlb	1	; () banked
 10419  002E1C  51B9               	movf	(_ylongavg+1)& (0+255),w,b
 10420  002E1E  0100               	movlb	0	; () banked
 10421  002E20  21A6               	addwfc	(??_PumpDetect+1)& (0+255),w,b
 10422  002E22  0100               	movlb	0	; () banked
 10423  002E24  6FA0               	movwf	(abs@a+1)& (0+255),b
 10424  002E26  EC02  F021         	call	_abs	;wreg free
 10425  002E2A  0100               	movlb	0	; () banked
 10426  002E2C  519F               	movf	?_abs& (0+255),w,b
 10427  002E2E  5C5C               	subwf	_onthresh,w,c
 10428  002E30  505D               	movf	_onthresh+1,w,c
 10429  002E32  0A80               	xorlw	128
 10430  002E34  0100               	movlb	0	; () banked
 10431  002E36  6FA7               	movwf	(??_PumpDetect+2)& (0+255),b
 10432  002E38  0100               	movlb	0	; () banked
 10433  002E3A  51A0               	movf	(?_abs+1)& (0+255),w,b
 10434  002E3C  0A80               	xorlw	128
 10435  002E3E  0100               	movlb	0	; () banked
 10436  002E40  59A7               	subwfb	(??_PumpDetect+2)& (0+255),w,b
 10437  002E42  A0D8               	btfss	status,0,c
 10438  002E44  D025               	goto	l4194
 10439                           
 10440                           ; BSR set to: 0
 10441  002E46  C1C4  F0A5         	movff	_zshortavg,??_PumpDetect
 10442  002E4A  C1C5  F0A6         	movff	_zshortavg+1,??_PumpDetect+1
 10443  002E4E  0100               	movlb	0	; () banked
 10444  002E50  1FA5               	comf	??_PumpDetect& (0+255),f,b
 10445  002E52  1FA6               	comf	(??_PumpDetect+1)& (0+255),f,b
 10446  002E54  4BA5               	infsnz	??_PumpDetect& (0+255),f,b
 10447  002E56  2BA6               	incf	(??_PumpDetect+1)& (0+255),f,b
 10448  002E58  0101               	movlb	1	; () banked
 10449  002E5A  51C0               	movf	_zlongavg& (0+255),w,b
 10450  002E5C  0100               	movlb	0	; () banked
 10451  002E5E  25A5               	addwf	??_PumpDetect& (0+255),w,b
 10452  002E60  0100               	movlb	0	; () banked
 10453  002E62  6F9F               	movwf	abs@a& (0+255),b
 10454  002E64  0101               	movlb	1	; () banked
 10455  002E66  51C1               	movf	(_zlongavg+1)& (0+255),w,b
 10456  002E68  0100               	movlb	0	; () banked
 10457  002E6A  21A6               	addwfc	(??_PumpDetect+1)& (0+255),w,b
 10458  002E6C  0100               	movlb	0	; () banked
 10459  002E6E  6FA0               	movwf	(abs@a+1)& (0+255),b
 10460  002E70  EC02  F021         	call	_abs	;wreg free
 10461  002E74  0100               	movlb	0	; () banked
 10462  002E76  519F               	movf	?_abs& (0+255),w,b
 10463  002E78  5C5C               	subwf	_onthresh,w,c
 10464  002E7A  505D               	movf	_onthresh+1,w,c
 10465  002E7C  0A80               	xorlw	128
 10466  002E7E  0100               	movlb	0	; () banked
 10467  002E80  6FA7               	movwf	(??_PumpDetect+2)& (0+255),b
 10468  002E82  0100               	movlb	0	; () banked
 10469  002E84  51A0               	movf	(?_abs+1)& (0+255),w,b
 10470  002E86  0A80               	xorlw	128
 10471  002E88  0100               	movlb	0	; () banked
 10472  002E8A  59A7               	subwfb	(??_PumpDetect+2)& (0+255),w,b
 10473  002E8C  B0D8               	btfsc	status,0,c
 10474  002E8E  D00B               	goto	l4200
 10475  002E90                     l4194:
 10476                           
 10477                           ; BSR set to: 0
 10478                           ;AccelerationFuncs.c: 97: {
 10479                           ;AccelerationFuncs.c: 98: offcount=0;
 10480  002E90  0E00               	movlw	0
 10481  002E92  0101               	movlb	1	; () banked
 10482  002E94  6FAC               	movwf	_offcount& (0+255),b
 10483  002E96  0E00               	movlw	0
 10484  002E98  6FAD               	movwf	(_offcount+1)& (0+255),b
 10485  002E9A  0E00               	movlw	0
 10486  002E9C  6FAE               	movwf	(_offcount+2)& (0+255),b
 10487  002E9E  0E00               	movlw	0
 10488  002EA0  6FAF               	movwf	(_offcount+3)& (0+255),b
 10489  002EA2  D02A               	goto	l4210
 10490                           
 10491                           ; BSR set to: 0
 10492                           ;AccelerationFuncs.c: 100: }
 10493                           
 10494                           ; BSR set to: 0
 10495                           
 10496                           ;AccelerationFuncs.c: 99: return 1;
 10497  002EA4  D02F               	goto	l571
 10498  002EA6                     l4200:
 10499                           
 10500                           ; BSR set to: 0
 10501                           ;AccelerationFuncs.c: 101: else
 10502                           ;AccelerationFuncs.c: 102: {
 10503                           ;AccelerationFuncs.c: 103: if (offcount>offcountmax)
 10504  002EA6  505A               	movf	_offcountmax,w,c
 10505  002EA8  0100               	movlb	0	; () banked
 10506  002EAA  6FA5               	movwf	??_PumpDetect& (0+255),b
 10507  002EAC  505B               	movf	_offcountmax+1,w,c
 10508  002EAE  0100               	movlb	0	; () banked
 10509  002EB0  6FA6               	movwf	(??_PumpDetect+1)& (0+255),b
 10510  002EB2  0100               	movlb	0	; () banked
 10511  002EB4  6BA7               	clrf	(??_PumpDetect+2)& (0+255),b
 10512  002EB6  0100               	movlb	0	; () banked
 10513  002EB8  6BA8               	clrf	(??_PumpDetect+3)& (0+255),b
 10514  002EBA  0101               	movlb	1	; () banked
 10515  002EBC  51AC               	movf	_offcount& (0+255),w,b
 10516  002EBE  0100               	movlb	0	; () banked
 10517  002EC0  5DA5               	subwf	??_PumpDetect& (0+255),w,b
 10518  002EC2  0101               	movlb	1	; () banked
 10519  002EC4  51AD               	movf	(_offcount+1)& (0+255),w,b
 10520  002EC6  0100               	movlb	0	; () banked
 10521  002EC8  59A6               	subwfb	(??_PumpDetect+1)& (0+255),w,b
 10522  002ECA  0101               	movlb	1	; () banked
 10523  002ECC  51AE               	movf	(_offcount+2)& (0+255),w,b
 10524  002ECE  0100               	movlb	0	; () banked
 10525  002ED0  59A7               	subwfb	(??_PumpDetect+2)& (0+255),w,b
 10526  002ED2  0101               	movlb	1	; () banked
 10527  002ED4  51AF               	movf	(_offcount+3)& (0+255),w,b
 10528  002ED6  0100               	movlb	0	; () banked
 10529  002ED8  59A8               	subwfb	(??_PumpDetect+3)& (0+255),w,b
 10530  002EDA  B0D8               	btfsc	status,0,c
 10531  002EDC  D006               	goto	l4208
 10532                           
 10533                           ; BSR set to: 0
 10534                           ;AccelerationFuncs.c: 104: {
 10535                           ;AccelerationFuncs.c: 106: return 0;
 10536  002EDE  0E00               	movlw	0
 10537  002EE0  0100               	movlb	0	; () banked
 10538  002EE2  6FA4               	movwf	(?_PumpDetect+1)& (0+255),b
 10539  002EE4  0E00               	movlw	0
 10540  002EE6  D00C               	goto	L6
 10541                           
 10542                           ; BSR set to: 0
 10543                           ;AccelerationFuncs.c: 107: }
 10544                           
 10545                           ; BSR set to: 0
 10546  002EE8  D00D               	goto	l571
 10547  002EEA                     l4208:
 10548                           
 10549                           ; BSR set to: 0
 10550  002EEA  0E01               	movlw	1
 10551  002EEC  0101               	movlb	1	; () banked
 10552  002EEE  27AC               	addwf	_offcount& (0+255),f,b
 10553  002EF0  0E00               	movlw	0
 10554  002EF2  23AD               	addwfc	(_offcount+1)& (0+255),f,b
 10555  002EF4  23AE               	addwfc	(_offcount+2)& (0+255),f,b
 10556  002EF6  23AF               	addwfc	(_offcount+3)& (0+255),f,b
 10557  002EF8                     l4210:
 10558                           
 10559                           ; BSR set to: 1
 10560                           ;AccelerationFuncs.c: 112: return 1;
 10561  002EF8  0E00               	movlw	0
 10562  002EFA  0100               	movlb	0	; () banked
 10563  002EFC  6FA4               	movwf	(?_PumpDetect+1)& (0+255),b
 10564  002EFE  0E01               	movlw	1
 10565  002F00                     L6:
 10566  002F00  6FA3               	movwf	?_PumpDetect& (0+255),b
 10567                           
 10568                           ; BSR set to: 0
 10569                           
 10570                           ; BSR set to: 0
 10571  002F02  D000               	goto	l571
 10572  002F04                     l571:
 10573                           
 10574                           ; BSR set to: 0
 10575  002F04  0012               	return		;funcret
 10576  002F06                     __end_of_PumpDetect:
 10577                           	opt stack 0
 10578                           tblptru	equ	0xFF8
 10579                           tblptrh	equ	0xFF7
 10580                           tblptrl	equ	0xFF6
 10581                           tablat	equ	0xFF5
 10582                           postinc0	equ	0xFEE
 10583                           wreg	equ	0xFE8
 10584                           postinc1	equ	0xFE6
 10585                           postdec1	equ	0xFE5
 10586                           plusw1	equ	0xFE3
 10587                           fsr1h	equ	0xFE2
 10588                           fsr1l	equ	0xFE1
 10589                           postinc2	equ	0xFDE
 10590                           postdec2	equ	0xFDD
 10591                           plusw2	equ	0xFDB
 10592                           fsr2h	equ	0xFDA
 10593                           fsr2l	equ	0xFD9
 10594                           status	equ	0xFD8
 10595                           
 10596 ;; *************** function _abs *****************
 10597 ;; Defined at:
 10598 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\abs.c"
 10599 ;; Parameters:    Size  Location     Type
 10600 ;;  a               2   31[BANK0 ] int 
 10601 ;; Auto vars:     Size  Location     Type
 10602 ;;		None
 10603 ;; Return value:  Size  Location     Type
 10604 ;;                  2   31[BANK0 ] int 
 10605 ;; Registers used:
 10606 ;;		wreg, status,2, status,0
 10607 ;; Tracked objects:
 10608 ;;		On entry : 0/0
 10609 ;;		On exit  : 0/0
 10610 ;;		Unchanged: 0/0
 10611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10612 ;;      Params:         0       2       0       0       0       0       0
 10613 ;;      Locals:         0       0       0       0       0       0       0
 10614 ;;      Temps:          0       2       0       0       0       0       0
 10615 ;;      Totals:         0       4       0       0       0       0       0
 10616 ;;Total ram usage:        4 bytes
 10617 ;; Hardware stack levels used:    1
 10618 ;; Hardware stack levels required when called:    5
 10619 ;; This function calls:
 10620 ;;		Nothing
 10621 ;; This function is called by:
 10622 ;;		_PumpDetect
 10623 ;; This function uses a non-reentrant model
 10624 ;;
 10625                           
 10626                           	psect	text29
 10627  004204                     __ptext29:
 10628                           	opt stack 0
 10629  004204                     _abs:
 10630                           	opt stack 24
 10631                           
 10632                           ; BSR set to: 0
 10633                           ;incstack = 0
 10634  004204  0100               	movlb	0	; () banked
 10635  004206  AFA0               	btfss	(abs@a+1)& (0+255),7,b
 10636  004208  D00E               	goto	l835
 10637                           
 10638                           ; BSR set to: 0
 10639  00420A  C09F  F0A1         	movff	abs@a,??_abs
 10640  00420E  C0A0  F0A2         	movff	abs@a+1,??_abs+1
 10641  004212  0100               	movlb	0	; () banked
 10642  004214  1FA1               	comf	??_abs& (0+255),f,b
 10643  004216  1FA2               	comf	(??_abs+1)& (0+255),f,b
 10644  004218  4BA1               	infsnz	??_abs& (0+255),f,b
 10645  00421A  2BA2               	incf	(??_abs+1)& (0+255),f,b
 10646  00421C  C0A1  F09F         	movff	??_abs,?_abs
 10647  004220  C0A2  F0A0         	movff	??_abs+1,?_abs+1
 10648  004224  D004               	goto	l836
 10649  004226                     l835:
 10650                           
 10651                           ; BSR set to: 0
 10652  004226  C09F  F09F         	movff	abs@a,?_abs
 10653  00422A  C0A0  F0A0         	movff	abs@a+1,?_abs+1
 10654  00422E                     l836:
 10655                           
 10656                           ; BSR set to: 0
 10657  00422E  0012               	return		;funcret
 10658  004230                     __end_of_abs:
 10659                           	opt stack 0
 10660                           tblptru	equ	0xFF8
 10661                           tblptrh	equ	0xFF7
 10662                           tblptrl	equ	0xFF6
 10663                           tablat	equ	0xFF5
 10664                           postinc0	equ	0xFEE
 10665                           wreg	equ	0xFE8
 10666                           postinc1	equ	0xFE6
 10667                           postdec1	equ	0xFE5
 10668                           plusw1	equ	0xFE3
 10669                           fsr1h	equ	0xFE2
 10670                           fsr1l	equ	0xFE1
 10671                           postinc2	equ	0xFDE
 10672                           postdec2	equ	0xFDD
 10673                           plusw2	equ	0xFDB
 10674                           fsr2h	equ	0xFDA
 10675                           fsr2l	equ	0xFD9
 10676                           status	equ	0xFD8
 10677                           
 10678 ;; *************** function _MessageRoutine *****************
 10679 ;; Defined at:
 10680 ;;		line 127 in file "SerialFuncs.c"
 10681 ;; Parameters:    Size  Location     Type
 10682 ;;		None
 10683 ;; Auto vars:     Size  Location     Type
 10684 ;;  str2           20   20[BANK1 ] unsigned char [20]
 10685 ;;  str1           20    0[BANK1 ] unsigned char [20]
 10686 ;;  ret             2   40[BANK1 ] int 
 10687 ;; Return value:  Size  Location     Type
 10688 ;;		None               void
 10689 ;; Registers used:
 10690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10691 ;; Tracked objects:
 10692 ;;		On entry : 0/0
 10693 ;;		On exit  : 0/0
 10694 ;;		Unchanged: 0/0
 10695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10696 ;;      Params:         0       0       0       0       0       0       0
 10697 ;;      Locals:         0       0      42       0       0       0       0
 10698 ;;      Temps:          0       0       0       0       0       0       0
 10699 ;;      Totals:         0       0      42       0       0       0       0
 10700 ;;Total ram usage:       42 bytes
 10701 ;; Hardware stack levels used:    1
 10702 ;; Hardware stack levels required when called:    8
 10703 ;; This function calls:
 10704 ;;		_Delay1KTCYx
 10705 ;;		_SetDateTime
 10706 ;;		_atoi
 10707 ;;		_printf
 10708 ;;		_strcmp
 10709 ;;		_strcpy
 10710 ;; This function is called by:
 10711 ;;		_main
 10712 ;; This function uses a non-reentrant model
 10713 ;;
 10714                           
 10715                           	psect	text30
 10716  000FDA                     __ptext30:
 10717                           	opt stack 0
 10718  000FDA                     _MessageRoutine:
 10719                           	opt stack 22
 10720                           
 10721                           ;SerialFuncs.c: 130: char str1[20];
 10722                           ;SerialFuncs.c: 131: char str2[20];
 10723                           ;SerialFuncs.c: 132: int ret;
 10724                           ;SerialFuncs.c: 134: NewMessage=0;
 10725                           
 10726                           ; BSR set to: 0
 10727                           ;incstack = 0
 10728  000FDA  0E00               	movlw	0
 10729  000FDC  6E2D               	movwf	_NewMessage+1,c
 10730  000FDE  0E00               	movlw	0
 10731  000FE0  6E2C               	movwf	_NewMessage,c
 10732                           
 10733                           ;SerialFuncs.c: 136: strcpy(str1,LastMessage);
 10734  000FE2  0E56               	movlw	low MessageRoutine@str1
 10735  000FE4  0100               	movlb	0	; () banked
 10736  000FE6  6F9F               	movwf	strcpy@to& (0+255),b
 10737  000FE8  0E01               	movlw	high MessageRoutine@str1
 10738  000FEA  0100               	movlb	0	; () banked
 10739  000FEC  6FA0               	movwf	(strcpy@to+1)& (0+255),b
 10740  000FEE  0ED4               	movlw	low _LastMessage
 10741  000FF0  0100               	movlb	0	; () banked
 10742  000FF2  6FA1               	movwf	strcpy@from& (0+255),b
 10743  000FF4  0E01               	movlw	high _LastMessage
 10744  000FF6  0100               	movlb	0	; () banked
 10745  000FF8  6FA2               	movwf	(strcpy@from+1)& (0+255),b
 10746  000FFA  EC4B  F020         	call	_strcpy	;wreg free
 10747                           
 10748                           ;SerialFuncs.c: 137: strcpy(str2,ConfigWord);
 10749  000FFE  0E6A               	movlw	low MessageRoutine@str2
 10750  001000  0100               	movlb	0	; () banked
 10751  001002  6F9F               	movwf	strcpy@to& (0+255),b
 10752  001004  0E01               	movlw	high MessageRoutine@str2
 10753  001006  0100               	movlb	0	; () banked
 10754  001008  6FA0               	movwf	(strcpy@to+1)& (0+255),b
 10755  00100A  0E42               	movlw	low _ConfigWord
 10756  00100C  0100               	movlb	0	; () banked
 10757  00100E  6FA1               	movwf	strcpy@from& (0+255),b
 10758  001010  0E01               	movlw	high _ConfigWord
 10759  001012  0100               	movlb	0	; () banked
 10760  001014  6FA2               	movwf	(strcpy@from+1)& (0+255),b
 10761  001016  EC4B  F020         	call	_strcpy	;wreg free
 10762                           
 10763                           ;SerialFuncs.c: 138: ret = strcmp(str1,str2);
 10764  00101A  0E56               	movlw	low MessageRoutine@str1
 10765  00101C  0100               	movlb	0	; () banked
 10766  00101E  6F9F               	movwf	strcmp@s1& (0+255),b
 10767  001020  0E01               	movlw	high MessageRoutine@str1
 10768  001022  0100               	movlb	0	; () banked
 10769  001024  6FA0               	movwf	(strcmp@s1+1)& (0+255),b
 10770  001026  0E6A               	movlw	low MessageRoutine@str2
 10771  001028  0100               	movlb	0	; () banked
 10772  00102A  6FA1               	movwf	strcmp@s2& (0+255),b
 10773  00102C  0E01               	movlw	high MessageRoutine@str2
 10774  00102E  0100               	movlb	0	; () banked
 10775  001030  6FA2               	movwf	(strcmp@s2+1)& (0+255),b
 10776  001032  EC77  F01F         	call	_strcmp	;wreg free
 10777  001036  C09F  F17E         	movff	?_strcmp,MessageRoutine@ret
 10778  00103A  C0A0  F17F         	movff	?_strcmp+1,MessageRoutine@ret+1
 10779                           
 10780                           ;SerialFuncs.c: 139: if (ret==0)
 10781  00103E  0101               	movlb	1	; () banked
 10782  001040  517E               	movf	MessageRoutine@ret& (0+255),w,b
 10783  001042  0101               	movlb	1	; () banked
 10784  001044  117F               	iorwf	(MessageRoutine@ret+1)& (0+255),w,b
 10785  001046  A4D8               	btfss	status,2,c
 10786  001048  D003               	goto	l5744
 10787                           
 10788                           ; BSR set to: 1
 10789                           ;SerialFuncs.c: 140: {
 10790                           ;SerialFuncs.c: 141: SetDateTime();
 10791  00104A  EC81  F013         	call	_SetDateTime	;wreg free
 10792  00104E  D000               	goto	l5744
 10793  001050                     l5744:
 10794                           
 10795                           ;SerialFuncs.c: 142: }
 10796                           ;SerialFuncs.c: 144: strcpy(str2,"SET\r");
 10797  001050  0E6A               	movlw	low MessageRoutine@str2
 10798  001052  0100               	movlb	0	; () banked
 10799  001054  6F9F               	movwf	strcpy@to& (0+255),b
 10800  001056  0E01               	movlw	high MessageRoutine@str2
 10801  001058  0100               	movlb	0	; () banked
 10802  00105A  6FA0               	movwf	(strcpy@to+1)& (0+255),b
 10803  00105C  0EF6               	movlw	low STR_30
 10804  00105E  0100               	movlb	0	; () banked
 10805  001060  6FA1               	movwf	strcpy@from& (0+255),b
 10806  001062  0E7F               	movlw	high STR_30
 10807  001064  0100               	movlb	0	; () banked
 10808  001066  6FA2               	movwf	(strcpy@from+1)& (0+255),b
 10809  001068  EC4B  F020         	call	_strcpy	;wreg free
 10810                           
 10811                           ;SerialFuncs.c: 145: ret = strcmp(str1,str2);
 10812  00106C  0E56               	movlw	low MessageRoutine@str1
 10813  00106E  0100               	movlb	0	; () banked
 10814  001070  6F9F               	movwf	strcmp@s1& (0+255),b
 10815  001072  0E01               	movlw	high MessageRoutine@str1
 10816  001074  0100               	movlb	0	; () banked
 10817  001076  6FA0               	movwf	(strcmp@s1+1)& (0+255),b
 10818  001078  0E6A               	movlw	low MessageRoutine@str2
 10819  00107A  0100               	movlb	0	; () banked
 10820  00107C  6FA1               	movwf	strcmp@s2& (0+255),b
 10821  00107E  0E01               	movlw	high MessageRoutine@str2
 10822  001080  0100               	movlb	0	; () banked
 10823  001082  6FA2               	movwf	(strcmp@s2+1)& (0+255),b
 10824  001084  EC77  F01F         	call	_strcmp	;wreg free
 10825  001088  C09F  F17E         	movff	?_strcmp,MessageRoutine@ret
 10826  00108C  C0A0  F17F         	movff	?_strcmp+1,MessageRoutine@ret+1
 10827                           
 10828                           ;SerialFuncs.c: 146: if (ret==0)
 10829  001090  0101               	movlb	1	; () banked
 10830  001092  517E               	movf	MessageRoutine@ret& (0+255),w,b
 10831  001094  0101               	movlb	1	; () banked
 10832  001096  117F               	iorwf	(MessageRoutine@ret+1)& (0+255),w,b
 10833  001098  A4D8               	btfss	status,2,c
 10834  00109A  D0CD               	goto	l5792
 10835                           
 10836                           ; BSR set to: 1
 10837                           ;SerialFuncs.c: 147: {
 10838                           ;SerialFuncs.c: 148: printf(MessageBuffer);
 10839  00109C  0EE8               	movlw	low _MessageBuffer
 10840  00109E  0100               	movlb	0	; () banked
 10841  0010A0  6FAB               	movwf	printf@f& (0+255),b
 10842  0010A2  0E01               	movlw	high _MessageBuffer
 10843  0010A4  0100               	movlb	0	; () banked
 10844  0010A6  6FAC               	movwf	(printf@f+1)& (0+255),b
 10845  0010A8  ECEA  F009         	call	_printf	;wreg free
 10846                           
 10847                           ;SerialFuncs.c: 149: printf("\r\n");
 10848  0010AC  0E43               	movlw	low (STR_7+15)
 10849  0010AE  0100               	movlb	0	; () banked
 10850  0010B0  6FAB               	movwf	printf@f& (0+255),b
 10851  0010B2  0E7F               	movlw	high (STR_7+15)
 10852  0010B4  0100               	movlb	0	; () banked
 10853  0010B6  6FAC               	movwf	(printf@f+1)& (0+255),b
 10854  0010B8  ECEA  F009         	call	_printf	;wreg free
 10855                           
 10856                           ;SerialFuncs.c: 150: printf("Set offcountmax (default 2000):\r\n");
 10857  0010BC  0E06               	movlw	low STR_32
 10858  0010BE  0100               	movlb	0	; () banked
 10859  0010C0  6FAB               	movwf	printf@f& (0+255),b
 10860  0010C2  0E7E               	movlw	high STR_32
 10861  0010C4  0100               	movlb	0	; () banked
 10862  0010C6  6FAC               	movwf	(printf@f+1)& (0+255),b
 10863  0010C8  ECEA  F009         	call	_printf	;wreg free
 10864                           
 10865                           ;SerialFuncs.c: 151: while(NewMessage==0){};
 10866  0010CC  D000               	goto	l5752
 10867  0010CE                     l5752:
 10868  0010CE  502C               	movf	_NewMessage,w,c
 10869  0010D0  102D               	iorwf	_NewMessage+1,w,c
 10870  0010D2  B4D8               	btfsc	status,2,c
 10871  0010D4  D7FC               	goto	l5752
 10872                           
 10873                           ;SerialFuncs.c: 152: printf(MessageBuffer);
 10874  0010D6  0EE8               	movlw	low _MessageBuffer
 10875  0010D8  0100               	movlb	0	; () banked
 10876  0010DA  6FAB               	movwf	printf@f& (0+255),b
 10877  0010DC  0E01               	movlw	high _MessageBuffer
 10878  0010DE  0100               	movlb	0	; () banked
 10879  0010E0  6FAC               	movwf	(printf@f+1)& (0+255),b
 10880  0010E2  ECEA  F009         	call	_printf	;wreg free
 10881                           
 10882                           ;SerialFuncs.c: 153: printf("\r\n");
 10883  0010E6  0E43               	movlw	low (STR_7+15)
 10884  0010E8  0100               	movlb	0	; () banked
 10885  0010EA  6FAB               	movwf	printf@f& (0+255),b
 10886  0010EC  0E7F               	movlw	high (STR_7+15)
 10887  0010EE  0100               	movlb	0	; () banked
 10888  0010F0  6FAC               	movwf	(printf@f+1)& (0+255),b
 10889  0010F2  ECEA  F009         	call	_printf	;wreg free
 10890                           
 10891                           ;SerialFuncs.c: 154: offcountmax=atoi(LastMessage);
 10892  0010F6  0ED4               	movlw	low _LastMessage
 10893  0010F8  0100               	movlb	0	; () banked
 10894  0010FA  6FA5               	movwf	atoi@s& (0+255),b
 10895  0010FC  0E01               	movlw	high _LastMessage
 10896  0010FE  0100               	movlb	0	; () banked
 10897  001100  6FA6               	movwf	(atoi@s+1)& (0+255),b
 10898  001102  EC31  F01B         	call	_atoi	;wreg free
 10899  001106  C0A5  F05A         	movff	?_atoi,_offcountmax
 10900  00110A  C0A6  F05B         	movff	?_atoi+1,_offcountmax+1
 10901                           
 10902                           ;SerialFuncs.c: 155: NewMessage=0;
 10903  00110E  0E00               	movlw	0
 10904  001110  6E2D               	movwf	_NewMessage+1,c
 10905  001112  0E00               	movlw	0
 10906  001114  6E2C               	movwf	_NewMessage,c
 10907                           
 10908                           ;SerialFuncs.c: 157: printf("Set Nlong (default 50):\r\n");
 10909  001116  0E62               	movlw	low STR_34
 10910  001118  0100               	movlb	0	; () banked
 10911  00111A  6FAB               	movwf	printf@f& (0+255),b
 10912  00111C  0E7E               	movlw	high STR_34
 10913  00111E  0100               	movlb	0	; () banked
 10914  001120  6FAC               	movwf	(printf@f+1)& (0+255),b
 10915  001122  ECEA  F009         	call	_printf	;wreg free
 10916                           
 10917                           ;SerialFuncs.c: 158: while(NewMessage==0){};
 10918  001126  D000               	goto	l5762
 10919  001128                     l5762:
 10920  001128  502C               	movf	_NewMessage,w,c
 10921  00112A  102D               	iorwf	_NewMessage+1,w,c
 10922  00112C  B4D8               	btfsc	status,2,c
 10923  00112E  D7FC               	goto	l5762
 10924                           
 10925                           ;SerialFuncs.c: 159: printf(MessageBuffer);
 10926  001130  0EE8               	movlw	low _MessageBuffer
 10927  001132  0100               	movlb	0	; () banked
 10928  001134  6FAB               	movwf	printf@f& (0+255),b
 10929  001136  0E01               	movlw	high _MessageBuffer
 10930  001138  0100               	movlb	0	; () banked
 10931  00113A  6FAC               	movwf	(printf@f+1)& (0+255),b
 10932  00113C  ECEA  F009         	call	_printf	;wreg free
 10933                           
 10934                           ;SerialFuncs.c: 160: printf("\r\n");
 10935  001140  0E43               	movlw	low (STR_7+15)
 10936  001142  0100               	movlb	0	; () banked
 10937  001144  6FAB               	movwf	printf@f& (0+255),b
 10938  001146  0E7F               	movlw	high (STR_7+15)
 10939  001148  0100               	movlb	0	; () banked
 10940  00114A  6FAC               	movwf	(printf@f+1)& (0+255),b
 10941  00114C  ECEA  F009         	call	_printf	;wreg free
 10942                           
 10943                           ;SerialFuncs.c: 161: Nlong=atoi(LastMessage);
 10944  001150  0ED4               	movlw	low _LastMessage
 10945  001152  0100               	movlb	0	; () banked
 10946  001154  6FA5               	movwf	atoi@s& (0+255),b
 10947  001156  0E01               	movlw	high _LastMessage
 10948  001158  0100               	movlb	0	; () banked
 10949  00115A  6FA6               	movwf	(atoi@s+1)& (0+255),b
 10950  00115C  EC31  F01B         	call	_atoi	;wreg free
 10951  001160  C0A5  F050         	movff	?_atoi,_Nlong
 10952  001164  C0A6  F051         	movff	?_atoi+1,_Nlong+1
 10953                           
 10954                           ;SerialFuncs.c: 162: NewMessage=0;
 10955  001168  0E00               	movlw	0
 10956  00116A  6E2D               	movwf	_NewMessage+1,c
 10957  00116C  0E00               	movlw	0
 10958  00116E  6E2C               	movwf	_NewMessage,c
 10959                           
 10960                           ;SerialFuncs.c: 164: printf("Set Nshort (default 10):\r\n");
 10961  001170  0E47               	movlw	low STR_36
 10962  001172  0100               	movlb	0	; () banked
 10963  001174  6FAB               	movwf	printf@f& (0+255),b
 10964  001176  0E7E               	movlw	high STR_36
 10965  001178  0100               	movlb	0	; () banked
 10966  00117A  6FAC               	movwf	(printf@f+1)& (0+255),b
 10967  00117C  ECEA  F009         	call	_printf	;wreg free
 10968                           
 10969                           ;SerialFuncs.c: 165: while(NewMessage==0){};
 10970  001180  D000               	goto	l5772
 10971  001182                     l5772:
 10972  001182  502C               	movf	_NewMessage,w,c
 10973  001184  102D               	iorwf	_NewMessage+1,w,c
 10974  001186  B4D8               	btfsc	status,2,c
 10975  001188  D7FC               	goto	l5772
 10976                           
 10977                           ;SerialFuncs.c: 166: printf(MessageBuffer);
 10978  00118A  0EE8               	movlw	low _MessageBuffer
 10979  00118C  0100               	movlb	0	; () banked
 10980  00118E  6FAB               	movwf	printf@f& (0+255),b
 10981  001190  0E01               	movlw	high _MessageBuffer
 10982  001192  0100               	movlb	0	; () banked
 10983  001194  6FAC               	movwf	(printf@f+1)& (0+255),b
 10984  001196  ECEA  F009         	call	_printf	;wreg free
 10985                           
 10986                           ;SerialFuncs.c: 167: printf("\r\n");
 10987  00119A  0E43               	movlw	low (STR_7+15)
 10988  00119C  0100               	movlb	0	; () banked
 10989  00119E  6FAB               	movwf	printf@f& (0+255),b
 10990  0011A0  0E7F               	movlw	high (STR_7+15)
 10991  0011A2  0100               	movlb	0	; () banked
 10992  0011A4  6FAC               	movwf	(printf@f+1)& (0+255),b
 10993  0011A6  ECEA  F009         	call	_printf	;wreg free
 10994                           
 10995                           ;SerialFuncs.c: 168: Nshort=atoi(LastMessage);
 10996  0011AA  0ED4               	movlw	low _LastMessage
 10997  0011AC  0100               	movlb	0	; () banked
 10998  0011AE  6FA5               	movwf	atoi@s& (0+255),b
 10999  0011B0  0E01               	movlw	high _LastMessage
 11000  0011B2  0100               	movlb	0	; () banked
 11001  0011B4  6FA6               	movwf	(atoi@s+1)& (0+255),b
 11002  0011B6  EC31  F01B         	call	_atoi	;wreg free
 11003  0011BA  C0A5  F052         	movff	?_atoi,_Nshort
 11004  0011BE  C0A6  F053         	movff	?_atoi+1,_Nshort+1
 11005                           
 11006                           ;SerialFuncs.c: 169: NewMessage=0;
 11007  0011C2  0E00               	movlw	0
 11008  0011C4  6E2D               	movwf	_NewMessage+1,c
 11009  0011C6  0E00               	movlw	0
 11010  0011C8  6E2C               	movwf	_NewMessage,c
 11011                           
 11012                           ;SerialFuncs.c: 171: printf("Set onthresh (default 2000):\r\n");
 11013  0011CA  0E28               	movlw	low STR_38
 11014  0011CC  0100               	movlb	0	; () banked
 11015  0011CE  6FAB               	movwf	printf@f& (0+255),b
 11016  0011D0  0E7E               	movlw	high STR_38
 11017  0011D2  0100               	movlb	0	; () banked
 11018  0011D4  6FAC               	movwf	(printf@f+1)& (0+255),b
 11019  0011D6  ECEA  F009         	call	_printf	;wreg free
 11020                           
 11021                           ;SerialFuncs.c: 172: while(NewMessage==0){};
 11022  0011DA  D000               	goto	l5782
 11023  0011DC                     l5782:
 11024  0011DC  502C               	movf	_NewMessage,w,c
 11025  0011DE  102D               	iorwf	_NewMessage+1,w,c
 11026  0011E0  B4D8               	btfsc	status,2,c
 11027  0011E2  D7FC               	goto	l5782
 11028                           
 11029                           ;SerialFuncs.c: 173: printf(MessageBuffer);
 11030  0011E4  0EE8               	movlw	low _MessageBuffer
 11031  0011E6  0100               	movlb	0	; () banked
 11032  0011E8  6FAB               	movwf	printf@f& (0+255),b
 11033  0011EA  0E01               	movlw	high _MessageBuffer
 11034  0011EC  0100               	movlb	0	; () banked
 11035  0011EE  6FAC               	movwf	(printf@f+1)& (0+255),b
 11036  0011F0  ECEA  F009         	call	_printf	;wreg free
 11037                           
 11038                           ;SerialFuncs.c: 174: printf("\r\n");
 11039  0011F4  0E43               	movlw	low (STR_7+15)
 11040  0011F6  0100               	movlb	0	; () banked
 11041  0011F8  6FAB               	movwf	printf@f& (0+255),b
 11042  0011FA  0E7F               	movlw	high (STR_7+15)
 11043  0011FC  0100               	movlb	0	; () banked
 11044  0011FE  6FAC               	movwf	(printf@f+1)& (0+255),b
 11045  001200  ECEA  F009         	call	_printf	;wreg free
 11046                           
 11047                           ;SerialFuncs.c: 175: onthresh=atoi(LastMessage);
 11048  001204  0ED4               	movlw	low _LastMessage
 11049  001206  0100               	movlb	0	; () banked
 11050  001208  6FA5               	movwf	atoi@s& (0+255),b
 11051  00120A  0E01               	movlw	high _LastMessage
 11052  00120C  0100               	movlb	0	; () banked
 11053  00120E  6FA6               	movwf	(atoi@s+1)& (0+255),b
 11054  001210  EC31  F01B         	call	_atoi	;wreg free
 11055  001214  C0A5  F05C         	movff	?_atoi,_onthresh
 11056  001218  C0A6  F05D         	movff	?_atoi+1,_onthresh+1
 11057                           
 11058                           ;SerialFuncs.c: 176: NewMessage=0;
 11059  00121C  0E00               	movlw	0
 11060  00121E  6E2D               	movwf	_NewMessage+1,c
 11061  001220  0E00               	movlw	0
 11062  001222  6E2C               	movwf	_NewMessage,c
 11063                           
 11064                           ;SerialFuncs.c: 177: printf("Setting Complete!\r\n");
 11065  001224  0EE5               	movlw	low STR_40
 11066  001226  0100               	movlb	0	; () banked
 11067  001228  6FAB               	movwf	printf@f& (0+255),b
 11068  00122A  0E7E               	movlw	high STR_40
 11069  00122C  0100               	movlb	0	; () banked
 11070  00122E  6FAC               	movwf	(printf@f+1)& (0+255),b
 11071  001230  ECEA  F009         	call	_printf	;wreg free
 11072  001234  D000               	goto	l5792
 11073  001236                     l5792:
 11074                           
 11075                           ;SerialFuncs.c: 178: }
 11076                           ;SerialFuncs.c: 180: strcpy(str2,"Time?\r");
 11077  001236  0E6A               	movlw	low MessageRoutine@str2
 11078  001238  0100               	movlb	0	; () banked
 11079  00123A  6F9F               	movwf	strcpy@to& (0+255),b
 11080  00123C  0E01               	movlw	high MessageRoutine@str2
 11081  00123E  0100               	movlb	0	; () banked
 11082  001240  6FA0               	movwf	(strcpy@to+1)& (0+255),b
 11083  001242  0EE3               	movlw	low STR_41
 11084  001244  0100               	movlb	0	; () banked
 11085  001246  6FA1               	movwf	strcpy@from& (0+255),b
 11086  001248  0E7F               	movlw	high STR_41
 11087  00124A  0100               	movlb	0	; () banked
 11088  00124C  6FA2               	movwf	(strcpy@from+1)& (0+255),b
 11089  00124E  EC4B  F020         	call	_strcpy	;wreg free
 11090                           
 11091                           ;SerialFuncs.c: 181: ret = strcmp(str1,str2);
 11092  001252  0E56               	movlw	low MessageRoutine@str1
 11093  001254  0100               	movlb	0	; () banked
 11094  001256  6F9F               	movwf	strcmp@s1& (0+255),b
 11095  001258  0E01               	movlw	high MessageRoutine@str1
 11096  00125A  0100               	movlb	0	; () banked
 11097  00125C  6FA0               	movwf	(strcmp@s1+1)& (0+255),b
 11098  00125E  0E6A               	movlw	low MessageRoutine@str2
 11099  001260  0100               	movlb	0	; () banked
 11100  001262  6FA1               	movwf	strcmp@s2& (0+255),b
 11101  001264  0E01               	movlw	high MessageRoutine@str2
 11102  001266  0100               	movlb	0	; () banked
 11103  001268  6FA2               	movwf	(strcmp@s2+1)& (0+255),b
 11104  00126A  EC77  F01F         	call	_strcmp	;wreg free
 11105  00126E  C09F  F17E         	movff	?_strcmp,MessageRoutine@ret
 11106  001272  C0A0  F17F         	movff	?_strcmp+1,MessageRoutine@ret+1
 11107                           
 11108                           ;SerialFuncs.c: 182: if (ret==0)
 11109  001276  0101               	movlb	1	; () banked
 11110  001278  517E               	movf	MessageRoutine@ret& (0+255),w,b
 11111  00127A  0101               	movlb	1	; () banked
 11112  00127C  117F               	iorwf	(MessageRoutine@ret+1)& (0+255),w,b
 11113  00127E  A4D8               	btfss	status,2,c
 11114  001280  D025               	goto	l5800
 11115                           
 11116                           ; BSR set to: 1
 11117                           ;SerialFuncs.c: 183: {
 11118                           ;SerialFuncs.c: 184: printf(MessageBuffer);
 11119  001282  0EE8               	movlw	low _MessageBuffer
 11120  001284  0100               	movlb	0	; () banked
 11121  001286  6FAB               	movwf	printf@f& (0+255),b
 11122  001288  0E01               	movlw	high _MessageBuffer
 11123  00128A  0100               	movlb	0	; () banked
 11124  00128C  6FAC               	movwf	(printf@f+1)& (0+255),b
 11125  00128E  ECEA  F009         	call	_printf	;wreg free
 11126                           
 11127                           ;SerialFuncs.c: 185: printf("\r\n");
 11128  001292  0E43               	movlw	low (STR_7+15)
 11129  001294  0100               	movlb	0	; () banked
 11130  001296  6FAB               	movwf	printf@f& (0+255),b
 11131  001298  0E7F               	movlw	high (STR_7+15)
 11132  00129A  0100               	movlb	0	; () banked
 11133  00129C  6FAC               	movwf	(printf@f+1)& (0+255),b
 11134  00129E  ECEA  F009         	call	_printf	;wreg free
 11135                           
 11136                           ;SerialFuncs.c: 186: printf("Time: %2i:%2i:%2i\r\n",hours,minutes,seconds);
 11137  0012A2  0EF9               	movlw	low STR_29
 11138  0012A4  0100               	movlb	0	; () banked
 11139  0012A6  6FAB               	movwf	printf@f& (0+255),b
 11140  0012A8  0E7E               	movlw	high STR_29
 11141  0012AA  0100               	movlb	0	; () banked
 11142  0012AC  6FAC               	movwf	(printf@f+1)& (0+255),b
 11143  0012AE  C032  F0AD         	movff	_hours,?_printf+2
 11144  0012B2  C033  F0AE         	movff	_hours+1,?_printf+3
 11145  0012B6  C036  F0AF         	movff	_minutes,?_printf+4
 11146  0012BA  C037  F0B0         	movff	_minutes+1,?_printf+5
 11147  0012BE  C038  F0B1         	movff	_seconds,?_printf+6
 11148  0012C2  C039  F0B2         	movff	_seconds+1,?_printf+7
 11149  0012C6  ECEA  F009         	call	_printf	;wreg free
 11150  0012CA  D000               	goto	l5800
 11151  0012CC                     l5800:
 11152                           
 11153                           ;SerialFuncs.c: 187: }
 11154                           ;SerialFuncs.c: 188: strcpy(str2,"Date?\r");
 11155  0012CC  0E6A               	movlw	low MessageRoutine@str2
 11156  0012CE  0100               	movlb	0	; () banked
 11157  0012D0  6F9F               	movwf	strcpy@to& (0+255),b
 11158  0012D2  0E01               	movlw	high MessageRoutine@str2
 11159  0012D4  0100               	movlb	0	; () banked
 11160  0012D6  6FA0               	movwf	(strcpy@to+1)& (0+255),b
 11161  0012D8  0EEA               	movlw	low STR_44
 11162  0012DA  0100               	movlb	0	; () banked
 11163  0012DC  6FA1               	movwf	strcpy@from& (0+255),b
 11164  0012DE  0E7F               	movlw	high STR_44
 11165  0012E0  0100               	movlb	0	; () banked
 11166  0012E2  6FA2               	movwf	(strcpy@from+1)& (0+255),b
 11167  0012E4  EC4B  F020         	call	_strcpy	;wreg free
 11168                           
 11169                           ;SerialFuncs.c: 189: ret = strcmp(str1,str2);
 11170  0012E8  0E56               	movlw	low MessageRoutine@str1
 11171  0012EA  0100               	movlb	0	; () banked
 11172  0012EC  6F9F               	movwf	strcmp@s1& (0+255),b
 11173  0012EE  0E01               	movlw	high MessageRoutine@str1
 11174  0012F0  0100               	movlb	0	; () banked
 11175  0012F2  6FA0               	movwf	(strcmp@s1+1)& (0+255),b
 11176  0012F4  0E6A               	movlw	low MessageRoutine@str2
 11177  0012F6  0100               	movlb	0	; () banked
 11178  0012F8  6FA1               	movwf	strcmp@s2& (0+255),b
 11179  0012FA  0E01               	movlw	high MessageRoutine@str2
 11180  0012FC  0100               	movlb	0	; () banked
 11181  0012FE  6FA2               	movwf	(strcmp@s2+1)& (0+255),b
 11182  001300  EC77  F01F         	call	_strcmp	;wreg free
 11183  001304  C09F  F17E         	movff	?_strcmp,MessageRoutine@ret
 11184  001308  C0A0  F17F         	movff	?_strcmp+1,MessageRoutine@ret+1
 11185                           
 11186                           ;SerialFuncs.c: 190: if (ret==0)
 11187  00130C  0101               	movlb	1	; () banked
 11188  00130E  517E               	movf	MessageRoutine@ret& (0+255),w,b
 11189  001310  0101               	movlb	1	; () banked
 11190  001312  117F               	iorwf	(MessageRoutine@ret+1)& (0+255),w,b
 11191  001314  A4D8               	btfss	status,2,c
 11192  001316  D025               	goto	l5808
 11193                           
 11194                           ; BSR set to: 1
 11195                           ;SerialFuncs.c: 191: {
 11196                           ;SerialFuncs.c: 192: printf(MessageBuffer);
 11197  001318  0EE8               	movlw	low _MessageBuffer
 11198  00131A  0100               	movlb	0	; () banked
 11199  00131C  6FAB               	movwf	printf@f& (0+255),b
 11200  00131E  0E01               	movlw	high _MessageBuffer
 11201  001320  0100               	movlb	0	; () banked
 11202  001322  6FAC               	movwf	(printf@f+1)& (0+255),b
 11203  001324  ECEA  F009         	call	_printf	;wreg free
 11204                           
 11205                           ;SerialFuncs.c: 193: printf("\r\n");
 11206  001328  0E43               	movlw	low (STR_7+15)
 11207  00132A  0100               	movlb	0	; () banked
 11208  00132C  6FAB               	movwf	printf@f& (0+255),b
 11209  00132E  0E7F               	movlw	high (STR_7+15)
 11210  001330  0100               	movlb	0	; () banked
 11211  001332  6FAC               	movwf	(printf@f+1)& (0+255),b
 11212  001334  ECEA  F009         	call	_printf	;wreg free
 11213                           
 11214                           ;SerialFuncs.c: 194: printf("Date: %2i/%2i/%4i\r\n",day,month,year);
 11215  001338  0E0D               	movlw	low STR_28
 11216  00133A  0100               	movlb	0	; () banked
 11217  00133C  6FAB               	movwf	printf@f& (0+255),b
 11218  00133E  0E7F               	movlw	high STR_28
 11219  001340  0100               	movlb	0	; () banked
 11220  001342  6FAC               	movwf	(printf@f+1)& (0+255),b
 11221  001344  C056  F0AD         	movff	_day,?_printf+2
 11222  001348  C057  F0AE         	movff	_day+1,?_printf+3
 11223  00134C  C058  F0AF         	movff	_month,?_printf+4
 11224  001350  C059  F0B0         	movff	_month+1,?_printf+5
 11225  001354  C05E  F0B1         	movff	_year,?_printf+6
 11226  001358  C05F  F0B2         	movff	_year+1,?_printf+7
 11227  00135C  ECEA  F009         	call	_printf	;wreg free
 11228  001360  D000               	goto	l5808
 11229  001362                     l5808:
 11230                           
 11231                           ;SerialFuncs.c: 195: }
 11232                           ;SerialFuncs.c: 196: strcpy(str2,"LOG\r");
 11233  001362  0E6A               	movlw	low MessageRoutine@str2
 11234  001364  0100               	movlb	0	; () banked
 11235  001366  6F9F               	movwf	strcpy@to& (0+255),b
 11236  001368  0E01               	movlw	high MessageRoutine@str2
 11237  00136A  0100               	movlb	0	; () banked
 11238  00136C  6FA0               	movwf	(strcpy@to+1)& (0+255),b
 11239  00136E  0EF1               	movlw	low STR_47
 11240  001370  0100               	movlb	0	; () banked
 11241  001372  6FA1               	movwf	strcpy@from& (0+255),b
 11242  001374  0E7F               	movlw	high STR_47
 11243  001376  0100               	movlb	0	; () banked
 11244  001378  6FA2               	movwf	(strcpy@from+1)& (0+255),b
 11245  00137A  EC4B  F020         	call	_strcpy	;wreg free
 11246                           
 11247                           ;SerialFuncs.c: 197: ret = strcmp(str1,str2);
 11248  00137E  0E56               	movlw	low MessageRoutine@str1
 11249  001380  0100               	movlb	0	; () banked
 11250  001382  6F9F               	movwf	strcmp@s1& (0+255),b
 11251  001384  0E01               	movlw	high MessageRoutine@str1
 11252  001386  0100               	movlb	0	; () banked
 11253  001388  6FA0               	movwf	(strcmp@s1+1)& (0+255),b
 11254  00138A  0E6A               	movlw	low MessageRoutine@str2
 11255  00138C  0100               	movlb	0	; () banked
 11256  00138E  6FA1               	movwf	strcmp@s2& (0+255),b
 11257  001390  0E01               	movlw	high MessageRoutine@str2
 11258  001392  0100               	movlb	0	; () banked
 11259  001394  6FA2               	movwf	(strcmp@s2+1)& (0+255),b
 11260  001396  EC77  F01F         	call	_strcmp	;wreg free
 11261  00139A  C09F  F17E         	movff	?_strcmp,MessageRoutine@ret
 11262  00139E  C0A0  F17F         	movff	?_strcmp+1,MessageRoutine@ret+1
 11263                           
 11264                           ;SerialFuncs.c: 198: if (ret==0)
 11265  0013A2  0101               	movlb	1	; () banked
 11266  0013A4  517E               	movf	MessageRoutine@ret& (0+255),w,b
 11267  0013A6  0101               	movlb	1	; () banked
 11268  0013A8  117F               	iorwf	(MessageRoutine@ret+1)& (0+255),w,b
 11269  0013AA  A4D8               	btfss	status,2,c
 11270  0013AC  D012               	goto	l366
 11271                           
 11272                           ; BSR set to: 1
 11273                           ;SerialFuncs.c: 199: {
 11274                           ;SerialFuncs.c: 200: printf("Switching over to Data Logging.\r\n"
 11275                           ;SerialFuncs.c: 201: "To reconnect via bluetooth, the logger must be power cycled.\r\n"
 11276                           ;SerialFuncs.c: 202: "Bluetooth module will be powered down now.\r\n");
 11277  0013AE  0E7A               	movlw	low STR_48
 11278  0013B0  0100               	movlb	0	; () banked
 11279  0013B2  6FAB               	movwf	printf@f& (0+255),b
 11280  0013B4  0E7D               	movlw	high STR_48
 11281  0013B6  0100               	movlb	0	; () banked
 11282  0013B8  6FAC               	movwf	(printf@f+1)& (0+255),b
 11283  0013BA  ECEA  F009         	call	_printf	;wreg free
 11284                           
 11285                           ;SerialFuncs.c: 203: Delay1KTCYx(1000);
 11286  0013BE  0EE8               	movlw	232
 11287  0013C0  EC99  F021         	call	_Delay1KTCYx
 11288                           
 11289                           ;SerialFuncs.c: 204: LATBbits.LATB4=0;
 11290  0013C4  988A               	bcf	3978,4,c	;volatile
 11291                           
 11292                           ;SerialFuncs.c: 231: NewMessage=0;
 11293  0013C6  0E00               	movlw	0
 11294  0013C8  6E2D               	movwf	_NewMessage+1,c
 11295  0013CA  0E00               	movlw	0
 11296  0013CC  6E2C               	movwf	_NewMessage,c
 11297                           
 11298                           ;SerialFuncs.c: 232: LATBbits.LATB3=1;
 11299  0013CE  868A               	bsf	3978,3,c	;volatile
 11300  0013D0  D000               	goto	l366
 11301  0013D2                     l366:
 11302  0013D2  0012               	return		;funcret
 11303  0013D4                     __end_of_MessageRoutine:
 11304                           	opt stack 0
 11305                           tblptru	equ	0xFF8
 11306                           tblptrh	equ	0xFF7
 11307                           tblptrl	equ	0xFF6
 11308                           tablat	equ	0xFF5
 11309                           postinc0	equ	0xFEE
 11310                           wreg	equ	0xFE8
 11311                           postinc1	equ	0xFE6
 11312                           postdec1	equ	0xFE5
 11313                           plusw1	equ	0xFE3
 11314                           fsr1h	equ	0xFE2
 11315                           fsr1l	equ	0xFE1
 11316                           postinc2	equ	0xFDE
 11317                           postdec2	equ	0xFDD
 11318                           plusw2	equ	0xFDB
 11319                           fsr2h	equ	0xFDA
 11320                           fsr2l	equ	0xFD9
 11321                           status	equ	0xFD8
 11322                           
 11323 ;; *************** function _strcpy *****************
 11324 ;; Defined at:
 11325 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 11326 ;; Parameters:    Size  Location     Type
 11327 ;;  to              2   31[BANK0 ] PTR unsigned char 
 11328 ;;		 -> MessageRoutine@str2(20), MessageRoutine@str1(20), LastMessage(20), 
 11329 ;;  from            2   33[BANK0 ] PTR const unsigned char 
 11330 ;;		 -> STR_47(5), STR_44(7), STR_41(7), STR_30(5), 
 11331 ;;		 -> ConfigWord(20), LastMessage(20), MessageBuffer(20), 
 11332 ;; Auto vars:     Size  Location     Type
 11333 ;;  cp              2   35[BANK0 ] PTR unsigned char 
 11334 ;;		 -> MessageRoutine@str2(20), MessageRoutine@str1(20), LastMessage(20), 
 11335 ;; Return value:  Size  Location     Type
 11336 ;;                  2   31[BANK0 ] PTR unsigned char 
 11337 ;; Registers used:
 11338 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11339 ;; Tracked objects:
 11340 ;;		On entry : 0/0
 11341 ;;		On exit  : 0/0
 11342 ;;		Unchanged: 0/0
 11343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11344 ;;      Params:         0       4       0       0       0       0       0
 11345 ;;      Locals:         0       2       0       0       0       0       0
 11346 ;;      Temps:          0       0       0       0       0       0       0
 11347 ;;      Totals:         0       6       0       0       0       0       0
 11348 ;;Total ram usage:        6 bytes
 11349 ;; Hardware stack levels used:    1
 11350 ;; Hardware stack levels required when called:    5
 11351 ;; This function calls:
 11352 ;;		Nothing
 11353 ;; This function is called by:
 11354 ;;		_MessageRoutine
 11355 ;; This function uses a non-reentrant model
 11356 ;;
 11357                           
 11358                           	psect	text31
 11359  004096                     __ptext31:
 11360                           	opt stack 0
 11361  004096                     _strcpy:
 11362                           	opt stack 24
 11363                           
 11364                           ;incstack = 0
 11365  004096  C09F  F0A3         	movff	strcpy@to,strcpy@cp
 11366  00409A  C0A0  F0A4         	movff	strcpy@to+1,strcpy@cp+1
 11367  00409E  D007               	goto	l5506
 11368  0040A0                     l5504:
 11369  0040A0  0100               	movlb	0	; () banked
 11370  0040A2  4BA3               	infsnz	strcpy@cp& (0+255),f,b
 11371  0040A4  2BA4               	incf	(strcpy@cp+1)& (0+255),f,b
 11372  0040A6  0100               	movlb	0	; () banked
 11373  0040A8  4BA1               	infsnz	strcpy@from& (0+255),f,b
 11374  0040AA  2BA2               	incf	(strcpy@from+1)& (0+255),f,b
 11375  0040AC  D000               	goto	l5506
 11376  0040AE                     l5506:
 11377  0040AE  C0A1  FFF6         	movff	strcpy@from,tblptrl
 11378  0040B2  C0A2  FFF7         	movff	strcpy@from+1,tblptrh
 11379  0040B6  6AF8               	clrf	tblptru,c
 11380  0040B8  C0A3  FFD9         	movff	strcpy@cp,fsr2l
 11381  0040BC  C0A4  FFDA         	movff	strcpy@cp+1,fsr2h
 11382  0040C0  0E05               	movlw	(high __ramtop+-1)
 11383  0040C2  64F7               	cpfsgt	tblptrh,c
 11384  0040C4  D003               	bra	u6267
 11385  0040C6  0008               	tblrd		*
 11386  0040C8  50F5               	movf	tablat,w,c
 11387  0040CA  D005               	bra	u6260
 11388  0040CC                     u6267:
 11389  0040CC  CFF6 FFE9          	movff	tblptrl,fsr0l
 11390  0040D0  CFF7 FFEA          	movff	tblptrh,fsr0h
 11391  0040D4  50EF               	movf	indf0,w,c
 11392  0040D6                     u6260:
 11393  0040D6  6EDF               	movwf	indf2,c
 11394  0040D8  50DF               	movf	indf2,w,c
 11395  0040DA  A4D8               	btfss	status,2,c
 11396  0040DC  D7E1               	goto	l5504
 11397                           
 11398                           ;	Return value of _strcpy is never used
 11399  0040DE  0012               	return		;funcret
 11400  0040E0                     __end_of_strcpy:
 11401                           	opt stack 0
 11402                           tblptru	equ	0xFF8
 11403                           tblptrh	equ	0xFF7
 11404                           tblptrl	equ	0xFF6
 11405                           tablat	equ	0xFF5
 11406                           indf0	equ	0xFEF
 11407                           postinc0	equ	0xFEE
 11408                           fsr0h	equ	0xFEA
 11409                           fsr0l	equ	0xFE9
 11410                           wreg	equ	0xFE8
 11411                           postinc1	equ	0xFE6
 11412                           postdec1	equ	0xFE5
 11413                           plusw1	equ	0xFE3
 11414                           fsr1h	equ	0xFE2
 11415                           fsr1l	equ	0xFE1
 11416                           indf2	equ	0xFDF
 11417                           postinc2	equ	0xFDE
 11418                           postdec2	equ	0xFDD
 11419                           plusw2	equ	0xFDB
 11420                           fsr2h	equ	0xFDA
 11421                           fsr2l	equ	0xFD9
 11422                           status	equ	0xFD8
 11423                           
 11424 ;; *************** function _strcmp *****************
 11425 ;; Defined at:
 11426 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcmp.c"
 11427 ;; Parameters:    Size  Location     Type
 11428 ;;  s1              2   31[BANK0 ] PTR const unsigned char 
 11429 ;;		 -> MessageRoutine@str1(20), 
 11430 ;;  s2              2   33[BANK0 ] PTR const unsigned char 
 11431 ;;		 -> MessageRoutine@str2(20), 
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;  r               1   36[BANK0 ] char 
 11434 ;; Return value:  Size  Location     Type
 11435 ;;                  2   31[BANK0 ] int 
 11436 ;; Registers used:
 11437 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11438 ;; Tracked objects:
 11439 ;;		On entry : 0/0
 11440 ;;		On exit  : 0/0
 11441 ;;		Unchanged: 0/0
 11442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11443 ;;      Params:         0       4       0       0       0       0       0
 11444 ;;      Locals:         0       1       0       0       0       0       0
 11445 ;;      Temps:          0       1       0       0       0       0       0
 11446 ;;      Totals:         0       6       0       0       0       0       0
 11447 ;;Total ram usage:        6 bytes
 11448 ;; Hardware stack levels used:    1
 11449 ;; Hardware stack levels required when called:    5
 11450 ;; This function calls:
 11451 ;;		Nothing
 11452 ;; This function is called by:
 11453 ;;		_MessageRoutine
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           	psect	text32
 11458  003EEE                     __ptext32:
 11459                           	opt stack 0
 11460  003EEE                     _strcmp:
 11461                           	opt stack 24
 11462                           
 11463                           ;incstack = 0
 11464  003EEE  D007               	goto	l5574
 11465  003EF0                     l5572:
 11466  003EF0  0100               	movlb	0	; () banked
 11467  003EF2  4B9F               	infsnz	strcmp@s1& (0+255),f,b
 11468  003EF4  2BA0               	incf	(strcmp@s1+1)& (0+255),f,b
 11469  003EF6  0100               	movlb	0	; () banked
 11470  003EF8  4BA1               	infsnz	strcmp@s2& (0+255),f,b
 11471  003EFA  2BA2               	incf	(strcmp@s2+1)& (0+255),f,b
 11472  003EFC  D000               	goto	l5574
 11473  003EFE                     l5574:
 11474  003EFE  C09F  FFD9         	movff	strcmp@s1,fsr2l
 11475  003F02  C0A0  FFDA         	movff	strcmp@s1+1,fsr2h
 11476  003F06  50DF               	movf	indf2,w,c
 11477  003F08  0100               	movlb	0	; () banked
 11478  003F0A  6FA3               	movwf	??_strcmp& (0+255),b
 11479  003F0C  C0A1  FFD9         	movff	strcmp@s2,fsr2l
 11480  003F10  C0A2  FFDA         	movff	strcmp@s2+1,fsr2h
 11481  003F14  50DF               	movf	indf2,w,c
 11482  003F16  0800               	sublw	0
 11483  003F18  0100               	movlb	0	; () banked
 11484  003F1A  25A3               	addwf	??_strcmp& (0+255),w,b
 11485  003F1C  0100               	movlb	0	; () banked
 11486  003F1E  6FA4               	movwf	strcmp@r& (0+255),b
 11487  003F20  0100               	movlb	0	; () banked
 11488  003F22  51A4               	movf	strcmp@r& (0+255),w,b
 11489  003F24  A4D8               	btfss	status,2,c
 11490  003F26  D009               	goto	l5578
 11491                           
 11492                           ; BSR set to: 0
 11493  003F28  C09F  FFD9         	movff	strcmp@s1,fsr2l
 11494  003F2C  C0A0  FFDA         	movff	strcmp@s1+1,fsr2h
 11495  003F30  50DF               	movf	indf2,w,c
 11496  003F32  B4D8               	btfsc	status,2,c
 11497  003F34  D002               	goto	l5578
 11498  003F36  D7DC               	goto	l5572
 11499                           
 11500                           ; BSR set to: 0
 11501  003F38  D000               	goto	l5578
 11502  003F3A                     l5578:
 11503                           
 11504                           ; BSR set to: 0
 11505  003F3A  0100               	movlb	0	; () banked
 11506  003F3C  51A4               	movf	strcmp@r& (0+255),w,b
 11507  003F3E  0100               	movlb	0	; () banked
 11508  003F40  6F9F               	movwf	?_strcmp& (0+255),b
 11509  003F42  6BA0               	clrf	(?_strcmp+1)& (0+255),b
 11510  003F44  BF9F               	btfsc	?_strcmp& (0+255),7,b
 11511  003F46  07A0               	decf	(?_strcmp+1)& (0+255),f,b
 11512  003F48  D000               	goto	l1408
 11513  003F4A                     l1408:
 11514                           
 11515                           ; BSR set to: 0
 11516  003F4A  0012               	return		;funcret
 11517  003F4C                     __end_of_strcmp:
 11518                           	opt stack 0
 11519                           tblptru	equ	0xFF8
 11520                           tblptrh	equ	0xFF7
 11521                           tblptrl	equ	0xFF6
 11522                           tablat	equ	0xFF5
 11523                           indf0	equ	0xFEF
 11524                           postinc0	equ	0xFEE
 11525                           fsr0h	equ	0xFEA
 11526                           fsr0l	equ	0xFE9
 11527                           wreg	equ	0xFE8
 11528                           postinc1	equ	0xFE6
 11529                           postdec1	equ	0xFE5
 11530                           plusw1	equ	0xFE3
 11531                           fsr1h	equ	0xFE2
 11532                           fsr1l	equ	0xFE1
 11533                           indf2	equ	0xFDF
 11534                           postinc2	equ	0xFDE
 11535                           postdec2	equ	0xFDD
 11536                           plusw2	equ	0xFDB
 11537                           fsr2h	equ	0xFDA
 11538                           fsr2l	equ	0xFD9
 11539                           status	equ	0xFD8
 11540                           
 11541 ;; *************** function _SetDateTime *****************
 11542 ;; Defined at:
 11543 ;;		line 83 in file "SerialFuncs.c"
 11544 ;; Parameters:    Size  Location     Type
 11545 ;;		None
 11546 ;; Auto vars:     Size  Location     Type
 11547 ;;		None
 11548 ;; Return value:  Size  Location     Type
 11549 ;;		None               void
 11550 ;; Registers used:
 11551 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11552 ;; Tracked objects:
 11553 ;;		On entry : 0/0
 11554 ;;		On exit  : 0/0
 11555 ;;		Unchanged: 0/0
 11556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11557 ;;      Params:         0       0       0       0       0       0       0
 11558 ;;      Locals:         0       0       0       0       0       0       0
 11559 ;;      Temps:          0       0       0       0       0       0       0
 11560 ;;      Totals:         0       0       0       0       0       0       0
 11561 ;;Total ram usage:        0 bytes
 11562 ;; Hardware stack levels used:    1
 11563 ;; Hardware stack levels required when called:    7
 11564 ;; This function calls:
 11565 ;;		_atoi
 11566 ;;		_printf
 11567 ;; This function is called by:
 11568 ;;		_MessageRoutine
 11569 ;; This function uses a non-reentrant model
 11570 ;;
 11571                           
 11572                           	psect	text33
 11573  002702                     __ptext33:
 11574                           	opt stack 0
 11575  002702                     _SetDateTime:
 11576                           	opt stack 22
 11577                           
 11578                           ;SerialFuncs.c: 85: printf("Set Year: ");
 11579                           
 11580                           ; BSR set to: 0
 11581                           ;incstack = 0
 11582  002702  0EC3               	movlw	low STR_17
 11583  002704  0100               	movlb	0	; () banked
 11584  002706  6FAB               	movwf	printf@f& (0+255),b
 11585  002708  0E7F               	movlw	high STR_17
 11586  00270A  0100               	movlb	0	; () banked
 11587  00270C  6FAC               	movwf	(printf@f+1)& (0+255),b
 11588  00270E  ECEA  F009         	call	_printf	;wreg free
 11589                           
 11590                           ;SerialFuncs.c: 86: while(NewMessage==0){};
 11591  002712  D000               	goto	l5510
 11592  002714                     l5510:
 11593  002714  502C               	movf	_NewMessage,w,c
 11594  002716  102D               	iorwf	_NewMessage+1,w,c
 11595  002718  B4D8               	btfsc	status,2,c
 11596  00271A  D7FC               	goto	l5510
 11597                           
 11598                           ;SerialFuncs.c: 87: printf(MessageBuffer);
 11599  00271C  0EE8               	movlw	low _MessageBuffer
 11600  00271E  0100               	movlb	0	; () banked
 11601  002720  6FAB               	movwf	printf@f& (0+255),b
 11602  002722  0E01               	movlw	high _MessageBuffer
 11603  002724  0100               	movlb	0	; () banked
 11604  002726  6FAC               	movwf	(printf@f+1)& (0+255),b
 11605  002728  ECEA  F009         	call	_printf	;wreg free
 11606                           
 11607                           ;SerialFuncs.c: 88: printf("\r\n");
 11608  00272C  0E43               	movlw	low (STR_7+15)
 11609  00272E  0100               	movlb	0	; () banked
 11610  002730  6FAB               	movwf	printf@f& (0+255),b
 11611  002732  0E7F               	movlw	high (STR_7+15)
 11612  002734  0100               	movlb	0	; () banked
 11613  002736  6FAC               	movwf	(printf@f+1)& (0+255),b
 11614  002738  ECEA  F009         	call	_printf	;wreg free
 11615                           
 11616                           ;SerialFuncs.c: 89: year=atoi(LastMessage);
 11617  00273C  0ED4               	movlw	low _LastMessage
 11618  00273E  0100               	movlb	0	; () banked
 11619  002740  6FA5               	movwf	atoi@s& (0+255),b
 11620  002742  0E01               	movlw	high _LastMessage
 11621  002744  0100               	movlb	0	; () banked
 11622  002746  6FA6               	movwf	(atoi@s+1)& (0+255),b
 11623  002748  EC31  F01B         	call	_atoi	;wreg free
 11624  00274C  C0A5  F05E         	movff	?_atoi,_year
 11625  002750  C0A6  F05F         	movff	?_atoi+1,_year+1
 11626                           
 11627                           ;SerialFuncs.c: 90: NewMessage=0;
 11628  002754  0E00               	movlw	0
 11629  002756  6E2D               	movwf	_NewMessage+1,c
 11630  002758  0E00               	movlw	0
 11631  00275A  6E2C               	movwf	_NewMessage,c
 11632                           
 11633                           ;SerialFuncs.c: 91: printf("Set Month: ");
 11634  00275C  0EAB               	movlw	low STR_19
 11635  00275E  0100               	movlb	0	; () banked
 11636  002760  6FAB               	movwf	printf@f& (0+255),b
 11637  002762  0E7F               	movlw	high STR_19
 11638  002764  0100               	movlb	0	; () banked
 11639  002766  6FAC               	movwf	(printf@f+1)& (0+255),b
 11640  002768  ECEA  F009         	call	_printf	;wreg free
 11641                           
 11642                           ;SerialFuncs.c: 92: while(NewMessage==0){};
 11643  00276C  D000               	goto	l5520
 11644  00276E                     l5520:
 11645  00276E  502C               	movf	_NewMessage,w,c
 11646  002770  102D               	iorwf	_NewMessage+1,w,c
 11647  002772  B4D8               	btfsc	status,2,c
 11648  002774  D7FC               	goto	l5520
 11649                           
 11650                           ;SerialFuncs.c: 93: printf(MessageBuffer);
 11651  002776  0EE8               	movlw	low _MessageBuffer
 11652  002778  0100               	movlb	0	; () banked
 11653  00277A  6FAB               	movwf	printf@f& (0+255),b
 11654  00277C  0E01               	movlw	high _MessageBuffer
 11655  00277E  0100               	movlb	0	; () banked
 11656  002780  6FAC               	movwf	(printf@f+1)& (0+255),b
 11657  002782  ECEA  F009         	call	_printf	;wreg free
 11658                           
 11659                           ;SerialFuncs.c: 94: printf("\r\n");
 11660  002786  0E43               	movlw	low (STR_7+15)
 11661  002788  0100               	movlb	0	; () banked
 11662  00278A  6FAB               	movwf	printf@f& (0+255),b
 11663  00278C  0E7F               	movlw	high (STR_7+15)
 11664  00278E  0100               	movlb	0	; () banked
 11665  002790  6FAC               	movwf	(printf@f+1)& (0+255),b
 11666  002792  ECEA  F009         	call	_printf	;wreg free
 11667                           
 11668                           ;SerialFuncs.c: 95: month=atoi(LastMessage);
 11669  002796  0ED4               	movlw	low _LastMessage
 11670  002798  0100               	movlb	0	; () banked
 11671  00279A  6FA5               	movwf	atoi@s& (0+255),b
 11672  00279C  0E01               	movlw	high _LastMessage
 11673  00279E  0100               	movlb	0	; () banked
 11674  0027A0  6FA6               	movwf	(atoi@s+1)& (0+255),b
 11675  0027A2  EC31  F01B         	call	_atoi	;wreg free
 11676  0027A6  C0A5  F058         	movff	?_atoi,_month
 11677  0027AA  C0A6  F059         	movff	?_atoi+1,_month+1
 11678                           
 11679                           ;SerialFuncs.c: 96: NewMessage=0;
 11680  0027AE  0E00               	movlw	0
 11681  0027B0  6E2D               	movwf	_NewMessage+1,c
 11682  0027B2  0E00               	movlw	0
 11683  0027B4  6E2C               	movwf	_NewMessage,c
 11684                           
 11685                           ;SerialFuncs.c: 97: printf("Set Day: ");
 11686  0027B6  0ED9               	movlw	low STR_21
 11687  0027B8  0100               	movlb	0	; () banked
 11688  0027BA  6FAB               	movwf	printf@f& (0+255),b
 11689  0027BC  0E7F               	movlw	high STR_21
 11690  0027BE  0100               	movlb	0	; () banked
 11691  0027C0  6FAC               	movwf	(printf@f+1)& (0+255),b
 11692  0027C2  ECEA  F009         	call	_printf	;wreg free
 11693                           
 11694                           ;SerialFuncs.c: 98: while(NewMessage==0){};
 11695  0027C6  D000               	goto	l5530
 11696  0027C8                     l5530:
 11697  0027C8  502C               	movf	_NewMessage,w,c
 11698  0027CA  102D               	iorwf	_NewMessage+1,w,c
 11699  0027CC  B4D8               	btfsc	status,2,c
 11700  0027CE  D7FC               	goto	l5530
 11701                           
 11702                           ;SerialFuncs.c: 99: printf(MessageBuffer);
 11703  0027D0  0EE8               	movlw	low _MessageBuffer
 11704  0027D2  0100               	movlb	0	; () banked
 11705  0027D4  6FAB               	movwf	printf@f& (0+255),b
 11706  0027D6  0E01               	movlw	high _MessageBuffer
 11707  0027D8  0100               	movlb	0	; () banked
 11708  0027DA  6FAC               	movwf	(printf@f+1)& (0+255),b
 11709  0027DC  ECEA  F009         	call	_printf	;wreg free
 11710                           
 11711                           ;SerialFuncs.c: 100: printf("\r\n");
 11712  0027E0  0E43               	movlw	low (STR_7+15)
 11713  0027E2  0100               	movlb	0	; () banked
 11714  0027E4  6FAB               	movwf	printf@f& (0+255),b
 11715  0027E6  0E7F               	movlw	high (STR_7+15)
 11716  0027E8  0100               	movlb	0	; () banked
 11717  0027EA  6FAC               	movwf	(printf@f+1)& (0+255),b
 11718  0027EC  ECEA  F009         	call	_printf	;wreg free
 11719                           
 11720                           ;SerialFuncs.c: 101: day=atoi(LastMessage);
 11721  0027F0  0ED4               	movlw	low _LastMessage
 11722  0027F2  0100               	movlb	0	; () banked
 11723  0027F4  6FA5               	movwf	atoi@s& (0+255),b
 11724  0027F6  0E01               	movlw	high _LastMessage
 11725  0027F8  0100               	movlb	0	; () banked
 11726  0027FA  6FA6               	movwf	(atoi@s+1)& (0+255),b
 11727  0027FC  EC31  F01B         	call	_atoi	;wreg free
 11728  002800  C0A5  F056         	movff	?_atoi,_day
 11729  002804  C0A6  F057         	movff	?_atoi+1,_day+1
 11730                           
 11731                           ;SerialFuncs.c: 102: NewMessage=0;
 11732  002808  0E00               	movlw	0
 11733  00280A  6E2D               	movwf	_NewMessage+1,c
 11734  00280C  0E00               	movlw	0
 11735  00280E  6E2C               	movwf	_NewMessage,c
 11736                           
 11737                           ;SerialFuncs.c: 103: printf("Set Hours: ");
 11738  002810  0EB7               	movlw	low STR_23
 11739  002812  0100               	movlb	0	; () banked
 11740  002814  6FAB               	movwf	printf@f& (0+255),b
 11741  002816  0E7F               	movlw	high STR_23
 11742  002818  0100               	movlb	0	; () banked
 11743  00281A  6FAC               	movwf	(printf@f+1)& (0+255),b
 11744  00281C  ECEA  F009         	call	_printf	;wreg free
 11745                           
 11746                           ;SerialFuncs.c: 104: while(NewMessage==0){};
 11747  002820  D000               	goto	l5540
 11748  002822                     l5540:
 11749  002822  502C               	movf	_NewMessage,w,c
 11750  002824  102D               	iorwf	_NewMessage+1,w,c
 11751  002826  B4D8               	btfsc	status,2,c
 11752  002828  D7FC               	goto	l5540
 11753                           
 11754                           ;SerialFuncs.c: 105: printf(MessageBuffer);
 11755  00282A  0EE8               	movlw	low _MessageBuffer
 11756  00282C  0100               	movlb	0	; () banked
 11757  00282E  6FAB               	movwf	printf@f& (0+255),b
 11758  002830  0E01               	movlw	high _MessageBuffer
 11759  002832  0100               	movlb	0	; () banked
 11760  002834  6FAC               	movwf	(printf@f+1)& (0+255),b
 11761  002836  ECEA  F009         	call	_printf	;wreg free
 11762                           
 11763                           ;SerialFuncs.c: 106: printf("\r\n");
 11764  00283A  0E43               	movlw	low (STR_7+15)
 11765  00283C  0100               	movlb	0	; () banked
 11766  00283E  6FAB               	movwf	printf@f& (0+255),b
 11767  002840  0E7F               	movlw	high (STR_7+15)
 11768  002842  0100               	movlb	0	; () banked
 11769  002844  6FAC               	movwf	(printf@f+1)& (0+255),b
 11770  002846  ECEA  F009         	call	_printf	;wreg free
 11771                           
 11772                           ;SerialFuncs.c: 107: hours=atoi(LastMessage);
 11773  00284A  0ED4               	movlw	low _LastMessage
 11774  00284C  0100               	movlb	0	; () banked
 11775  00284E  6FA5               	movwf	atoi@s& (0+255),b
 11776  002850  0E01               	movlw	high _LastMessage
 11777  002852  0100               	movlb	0	; () banked
 11778  002854  6FA6               	movwf	(atoi@s+1)& (0+255),b
 11779  002856  EC31  F01B         	call	_atoi	;wreg free
 11780  00285A  C0A5  F032         	movff	?_atoi,_hours
 11781  00285E  C0A6  F033         	movff	?_atoi+1,_hours+1
 11782                           
 11783                           ;SerialFuncs.c: 108: NewMessage=0;
 11784  002862  0E00               	movlw	0
 11785  002864  6E2D               	movwf	_NewMessage+1,c
 11786  002866  0E00               	movlw	0
 11787  002868  6E2C               	movwf	_NewMessage,c
 11788                           
 11789                           ;SerialFuncs.c: 109: printf("Set Minutes: ");
 11790  00286A  0E9D               	movlw	low STR_25
 11791  00286C  0100               	movlb	0	; () banked
 11792  00286E  6FAB               	movwf	printf@f& (0+255),b
 11793  002870  0E7F               	movlw	high STR_25
 11794  002872  0100               	movlb	0	; () banked
 11795  002874  6FAC               	movwf	(printf@f+1)& (0+255),b
 11796  002876  ECEA  F009         	call	_printf	;wreg free
 11797                           
 11798                           ;SerialFuncs.c: 110: while(NewMessage==0){};
 11799  00287A  D000               	goto	l5550
 11800  00287C                     l5550:
 11801  00287C  502C               	movf	_NewMessage,w,c
 11802  00287E  102D               	iorwf	_NewMessage+1,w,c
 11803  002880  B4D8               	btfsc	status,2,c
 11804  002882  D7FC               	goto	l5550
 11805                           
 11806                           ;SerialFuncs.c: 111: printf(MessageBuffer);
 11807  002884  0EE8               	movlw	low _MessageBuffer
 11808  002886  0100               	movlb	0	; () banked
 11809  002888  6FAB               	movwf	printf@f& (0+255),b
 11810  00288A  0E01               	movlw	high _MessageBuffer
 11811  00288C  0100               	movlb	0	; () banked
 11812  00288E  6FAC               	movwf	(printf@f+1)& (0+255),b
 11813  002890  ECEA  F009         	call	_printf	;wreg free
 11814                           
 11815                           ;SerialFuncs.c: 112: printf("\r\n");
 11816  002894  0E43               	movlw	low (STR_7+15)
 11817  002896  0100               	movlb	0	; () banked
 11818  002898  6FAB               	movwf	printf@f& (0+255),b
 11819  00289A  0E7F               	movlw	high (STR_7+15)
 11820  00289C  0100               	movlb	0	; () banked
 11821  00289E  6FAC               	movwf	(printf@f+1)& (0+255),b
 11822  0028A0  ECEA  F009         	call	_printf	;wreg free
 11823                           
 11824                           ;SerialFuncs.c: 113: minutes=atoi(LastMessage);
 11825  0028A4  0ED4               	movlw	low _LastMessage
 11826  0028A6  0100               	movlb	0	; () banked
 11827  0028A8  6FA5               	movwf	atoi@s& (0+255),b
 11828  0028AA  0E01               	movlw	high _LastMessage
 11829  0028AC  0100               	movlb	0	; () banked
 11830  0028AE  6FA6               	movwf	(atoi@s+1)& (0+255),b
 11831  0028B0  EC31  F01B         	call	_atoi	;wreg free
 11832  0028B4  C0A5  F036         	movff	?_atoi,_minutes
 11833  0028B8  C0A6  F037         	movff	?_atoi+1,_minutes+1
 11834                           
 11835                           ;SerialFuncs.c: 114: NewMessage=0;
 11836  0028BC  0E00               	movlw	0
 11837  0028BE  6E2D               	movwf	_NewMessage+1,c
 11838  0028C0  0E00               	movlw	0
 11839  0028C2  6E2C               	movwf	_NewMessage,c
 11840                           
 11841                           ;SerialFuncs.c: 119: seconds=0;
 11842  0028C4  0E00               	movlw	0
 11843  0028C6  6E39               	movwf	_seconds+1,c
 11844  0028C8  0E00               	movlw	0
 11845  0028CA  6E38               	movwf	_seconds,c
 11846                           
 11847                           ;SerialFuncs.c: 120: printf("Date and Time Set!\r\n");
 11848  0028CC  0E7C               	movlw	low STR_27
 11849  0028CE  0100               	movlb	0	; () banked
 11850  0028D0  6FAB               	movwf	printf@f& (0+255),b
 11851  0028D2  0E7E               	movlw	high STR_27
 11852  0028D4  0100               	movlb	0	; () banked
 11853  0028D6  6FAC               	movwf	(printf@f+1)& (0+255),b
 11854  0028D8  ECEA  F009         	call	_printf	;wreg free
 11855                           
 11856                           ;SerialFuncs.c: 121: printf("Date: %2i/%2i/%4i\r\n",day,month,year);
 11857  0028DC  0E0D               	movlw	low STR_28
 11858  0028DE  0100               	movlb	0	; () banked
 11859  0028E0  6FAB               	movwf	printf@f& (0+255),b
 11860  0028E2  0E7F               	movlw	high STR_28
 11861  0028E4  0100               	movlb	0	; () banked
 11862  0028E6  6FAC               	movwf	(printf@f+1)& (0+255),b
 11863  0028E8  C056  F0AD         	movff	_day,?_printf+2
 11864  0028EC  C057  F0AE         	movff	_day+1,?_printf+3
 11865  0028F0  C058  F0AF         	movff	_month,?_printf+4
 11866  0028F4  C059  F0B0         	movff	_month+1,?_printf+5
 11867  0028F8  C05E  F0B1         	movff	_year,?_printf+6
 11868  0028FC  C05F  F0B2         	movff	_year+1,?_printf+7
 11869  002900  ECEA  F009         	call	_printf	;wreg free
 11870                           
 11871                           ;SerialFuncs.c: 122: printf("Time: %2i:%2i:%2i\r\n",hours,minutes,seconds);
 11872  002904  0EF9               	movlw	low STR_29
 11873  002906  0100               	movlb	0	; () banked
 11874  002908  6FAB               	movwf	printf@f& (0+255),b
 11875  00290A  0E7E               	movlw	high STR_29
 11876  00290C  0100               	movlb	0	; () banked
 11877  00290E  6FAC               	movwf	(printf@f+1)& (0+255),b
 11878  002910  C032  F0AD         	movff	_hours,?_printf+2
 11879  002914  C033  F0AE         	movff	_hours+1,?_printf+3
 11880  002918  C036  F0AF         	movff	_minutes,?_printf+4
 11881  00291C  C037  F0B0         	movff	_minutes+1,?_printf+5
 11882  002920  C038  F0B1         	movff	_seconds,?_printf+6
 11883  002924  C039  F0B2         	movff	_seconds+1,?_printf+7
 11884  002928  ECEA  F009         	call	_printf	;wreg free
 11885                           
 11886                           ;SerialFuncs.c: 123: NewDay=1;
 11887  00292C  0E00               	movlw	0
 11888  00292E  6E4F               	movwf	_NewDay+1,c
 11889  002930  0E01               	movlw	1
 11890  002932  6E4E               	movwf	_NewDay,c
 11891                           
 11892                           ;SerialFuncs.c: 124: NewMonth=1;
 11893  002934  0E00               	movlw	0
 11894  002936  0101               	movlb	1	; () banked
 11895  002938  6F17               	movwf	(_NewMonth+1)& (0+255),b
 11896  00293A  0E01               	movlw	1
 11897  00293C  6F16               	movwf	_NewMonth& (0+255),b
 11898                           
 11899                           ; BSR set to: 1
 11900  00293E  0012               	return		;funcret
 11901  002940                     __end_of_SetDateTime:
 11902                           	opt stack 0
 11903                           tblptru	equ	0xFF8
 11904                           tblptrh	equ	0xFF7
 11905                           tblptrl	equ	0xFF6
 11906                           tablat	equ	0xFF5
 11907                           indf0	equ	0xFEF
 11908                           postinc0	equ	0xFEE
 11909                           fsr0h	equ	0xFEA
 11910                           fsr0l	equ	0xFE9
 11911                           wreg	equ	0xFE8
 11912                           postinc1	equ	0xFE6
 11913                           postdec1	equ	0xFE5
 11914                           plusw1	equ	0xFE3
 11915                           fsr1h	equ	0xFE2
 11916                           fsr1l	equ	0xFE1
 11917                           indf2	equ	0xFDF
 11918                           postinc2	equ	0xFDE
 11919                           postdec2	equ	0xFDD
 11920                           plusw2	equ	0xFDB
 11921                           fsr2h	equ	0xFDA
 11922                           fsr2l	equ	0xFD9
 11923                           status	equ	0xFD8
 11924                           
 11925 ;; *************** function _printf *****************
 11926 ;; Defined at:
 11927 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 11928 ;; Parameters:    Size  Location     Type
 11929 ;;  f               2   43[BANK0 ] PTR const unsigned char 
 11930 ;;		 -> STR_48(140), STR_46(20), STR_45(3), STR_43(20), 
 11931 ;;		 -> STR_42(3), STR_40(20), STR_39(3), STR_38(31), 
 11932 ;;		 -> STR_37(3), STR_36(27), STR_35(3), STR_34(26), 
 11933 ;;		 -> STR_33(3), STR_32(34), STR_31(3), STR_29(20), 
 11934 ;;		 -> STR_28(20), STR_27(21), STR_26(3), STR_25(14), 
 11935 ;;		 -> STR_24(3), STR_23(12), STR_22(3), STR_21(10), 
 11936 ;;		 -> STR_20(3), STR_19(12), STR_18(3), STR_17(11), 
 11937 ;;		 -> MessageBuffer(20), STR_16(21), STR_15(11), STR_14(18), 
 11938 ;;		 -> STR_13(4), STR_12(15), STR_11(14), STR_10(19), 
 11939 ;;		 -> STR_9(15), STR_8(14), STR_7(18), STR_6(21), 
 11940 ;;		 -> STR_5(18), STR_4(21), STR_3(18), STR_2(21), 
 11941 ;;		 -> STR_1(18), 
 11942 ;; Auto vars:     Size  Location     Type
 11943 ;;  tmpval          4    0        struct .
 11944 ;;  width           2   69[BANK0 ] int 
 11945 ;;  val             2   67[BANK0 ] unsigned int 
 11946 ;;  len             2   64[BANK0 ] unsigned int 
 11947 ;;  ap              2   62[BANK0 ] PTR void [1]
 11948 ;;		 -> ?i1_printf(2), ?_printf(2), 
 11949 ;;  cp              2   59[BANK0 ] PTR const unsigned char 
 11950 ;;		 -> printf@c(1), 
 11951 ;;  c               1   71[BANK0 ] char 
 11952 ;;  flag            1   66[BANK0 ] unsigned char 
 11953 ;;  prec            1   61[BANK0 ] char 
 11954 ;; Return value:  Size  Location     Type
 11955 ;;                  2   43[BANK0 ] int 
 11956 ;; Registers used:
 11957 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11958 ;; Tracked objects:
 11959 ;;		On entry : 0/0
 11960 ;;		On exit  : 0/0
 11961 ;;		Unchanged: 0/0
 11962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11963 ;;      Params:         0      12       0       0       0       0       0
 11964 ;;      Locals:         0      13       0       0       0       0       0
 11965 ;;      Temps:          0       4       0       0       0       0       0
 11966 ;;      Totals:         0      29       0       0       0       0       0
 11967 ;;Total ram usage:       29 bytes
 11968 ;; Hardware stack levels used:    1
 11969 ;; Hardware stack levels required when called:    6
 11970 ;; This function calls:
 11971 ;;		___lwdiv
 11972 ;;		___lwmod
 11973 ;;		___wmul
 11974 ;;		_isdigit
 11975 ;;		_putch
 11976 ;; This function is called by:
 11977 ;;		_main
 11978 ;;		_cmStuffsWrapperFun
 11979 ;;		_SetDateTime
 11980 ;;		_MessageRoutine
 11981 ;; This function uses a non-reentrant model
 11982 ;;
 11983                           
 11984                           	psect	text34
 11985  0013D4                     __ptext34:
 11986                           	opt stack 0
 11987  0013D4                     _printf:
 11988                           	opt stack 24
 11989                           
 11990                           ;doprnt.c: 466: va_list ap;
 11991                           ;doprnt.c: 499: signed char c;
 11992                           ;doprnt.c: 501: int width;
 11993                           ;doprnt.c: 506: signed char prec;
 11994                           ;doprnt.c: 508: unsigned char flag;
 11995                           ;doprnt.c: 523: union {
 11996                           ;doprnt.c: 524: unsigned long vd;
 11997                           ;doprnt.c: 525: double integ;
 11998                           ;doprnt.c: 526: } tmpval;
 11999                           ;doprnt.c: 528: unsigned int val;
 12000                           ;doprnt.c: 529: unsigned len;
 12001                           ;doprnt.c: 530: const char * cp;
 12002                           ;doprnt.c: 533: *ap = __va_start();
 12003                           
 12004                           ; BSR set to: 1
 12005                           ;incstack = 0
 12006  0013D4  0EAD               	movlw	low (?_printf+2)
 12007  0013D6  0100               	movlb	0	; () banked
 12008  0013D8  6FBE               	movwf	printf@ap& (0+255),b
 12009  0013DA  0E00               	movlw	high (?_printf+2)
 12010  0013DC  0100               	movlb	0	; () banked
 12011  0013DE  6FBF               	movwf	(printf@ap+1)& (0+255),b
 12012                           
 12013                           ;doprnt.c: 536: while(c = *f++) {
 12014  0013E0  D1D1               	goto	l5150
 12015  0013E2                     l5048:
 12016                           
 12017                           ; BSR set to: 0
 12018                           ;doprnt.c: 538: if(c != '%')
 12019  0013E2  0E25               	movlw	37
 12020  0013E4  0100               	movlb	0	; () banked
 12021  0013E6  19C7               	xorwf	printf@c& (0+255),w,b
 12022  0013E8  B4D8               	btfsc	status,2,c
 12023  0013EA  D005               	goto	l5052
 12024                           
 12025                           ; BSR set to: 0
 12026                           ;doprnt.c: 540: {
 12027                           ;doprnt.c: 541: (putch(c) );
 12028  0013EC  0100               	movlb	0	; () banked
 12029  0013EE  51C7               	movf	printf@c& (0+255),w,b
 12030  0013F0  ECC0  F021         	call	_putch
 12031                           
 12032                           ;doprnt.c: 542: continue;
 12033  0013F4  D1C7               	goto	l5150
 12034  0013F6                     l5052:
 12035                           
 12036                           ;doprnt.c: 543: }
 12037                           ;doprnt.c: 546: width = 0;
 12038  0013F6  0E00               	movlw	0
 12039  0013F8  0100               	movlb	0	; () banked
 12040  0013FA  6FC6               	movwf	(printf@width+1)& (0+255),b
 12041  0013FC  0E00               	movlw	0
 12042  0013FE  6FC5               	movwf	printf@width& (0+255),b
 12043                           
 12044                           ;doprnt.c: 548: flag = 0;
 12045  001400  0E00               	movlw	0
 12046  001402  0100               	movlb	0	; () banked
 12047  001404  6FC2               	movwf	printf@flag& (0+255),b
 12048                           
 12049                           ; BSR set to: 0
 12050                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12051  001406  C0AB  FFF6         	movff	printf@f,tblptrl
 12052  00140A  C0AC  FFF7         	movff	printf@f+1,tblptrh
 12053  00140E  6AF8               	clrf	tblptru,c
 12054  001410  0E05               	movlw	(high __ramtop+-1)
 12055  001412  64F7               	cpfsgt	tblptrh,c
 12056  001414  D003               	bra	u5517
 12057  001416  0008               	tblrd		*
 12058  001418  50F5               	movf	tablat,w,c
 12059  00141A  D005               	bra	u5510
 12060  00141C                     u5517:
 12061  00141C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12062  001420  CFF7 FFEA          	movff	tblptrh,fsr0h
 12063  001424  50EF               	movf	indf0,w,c
 12064  001426                     u5510:
 12065  001426  ECEB  F020         	call	_isdigit
 12066  00142A  A0D8               	btfss	status,0,c
 12067  00142C  D0AA               	goto	l5090
 12068                           
 12069                           ;doprnt.c: 598: width = 0;
 12070  00142E  0E00               	movlw	0
 12071  001430  0100               	movlb	0	; () banked
 12072  001432  6FC6               	movwf	(printf@width+1)& (0+255),b
 12073  001434  0E00               	movlw	0
 12074  001436  6FC5               	movwf	printf@width& (0+255),b
 12075  001438  D000               	goto	l5058
 12076  00143A                     l5058:
 12077                           
 12078                           ;doprnt.c: 600: width *= 10;
 12079  00143A  C0C5  F09F         	movff	printf@width,___wmul@multiplier
 12080  00143E  C0C6  F0A0         	movff	printf@width+1,___wmul@multiplier+1
 12081  001442  0E00               	movlw	0
 12082  001444  0100               	movlb	0	; () banked
 12083  001446  6FA2               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12084  001448  0E0A               	movlw	10
 12085  00144A  6FA1               	movwf	___wmul@multiplicand& (0+255),b
 12086  00144C  ECB7  F020         	call	___wmul	;wreg free
 12087  001450  C09F  F0C5         	movff	?___wmul,printf@width
 12088  001454  C0A0  F0C6         	movff	?___wmul+1,printf@width+1
 12089                           
 12090                           ;doprnt.c: 601: width += *f++ - '0';
 12091  001458  0ED0               	movlw	208
 12092  00145A  0100               	movlb	0	; () banked
 12093  00145C  6FB7               	movwf	??_printf& (0+255),b
 12094  00145E  0EFF               	movlw	255
 12095  001460  0100               	movlb	0	; () banked
 12096  001462  6FB8               	movwf	(??_printf+1)& (0+255),b
 12097  001464  C0AB  FFF6         	movff	printf@f,tblptrl
 12098  001468  C0AC  FFF7         	movff	printf@f+1,tblptrh
 12099  00146C  6AF8               	clrf	tblptru,c
 12100  00146E  0E05               	movlw	(high __ramtop+-1)
 12101  001470  64F7               	cpfsgt	tblptrh,c
 12102  001472  D003               	bra	u5537
 12103  001474  0008               	tblrd		*
 12104  001476  50F5               	movf	tablat,w,c
 12105  001478  D005               	bra	u5530
 12106  00147A                     u5537:
 12107  00147A  CFF6 FFE9          	movff	tblptrl,fsr0l
 12108  00147E  CFF7 FFEA          	movff	tblptrh,fsr0h
 12109  001482  50EF               	movf	indf0,w,c
 12110  001484                     u5530:
 12111  001484  0100               	movlb	0	; () banked
 12112  001486  6FB9               	movwf	(??_printf+2)& (0+255),b
 12113  001488  6BBA               	clrf	(??_printf+3)& (0+255),b
 12114  00148A  0100               	movlb	0	; () banked
 12115  00148C  51B7               	movf	??_printf& (0+255),w,b
 12116  00148E  0100               	movlb	0	; () banked
 12117  001490  27B9               	addwf	(??_printf+2)& (0+255),f,b
 12118  001492  0100               	movlb	0	; () banked
 12119  001494  51B8               	movf	(??_printf+1)& (0+255),w,b
 12120  001496  0100               	movlb	0	; () banked
 12121  001498  23BA               	addwfc	(??_printf+3)& (0+255),f,b
 12122  00149A  0100               	movlb	0	; () banked
 12123  00149C  51B9               	movf	(??_printf+2)& (0+255),w,b
 12124  00149E  0100               	movlb	0	; () banked
 12125  0014A0  27C5               	addwf	printf@width& (0+255),f,b
 12126  0014A2  0100               	movlb	0	; () banked
 12127  0014A4  51BA               	movf	(??_printf+3)& (0+255),w,b
 12128  0014A6  0100               	movlb	0	; () banked
 12129  0014A8  23C6               	addwfc	(printf@width+1)& (0+255),f,b
 12130                           
 12131                           ; BSR set to: 0
 12132  0014AA  0100               	movlb	0	; () banked
 12133  0014AC  4BAB               	infsnz	printf@f& (0+255),f,b
 12134  0014AE  2BAC               	incf	(printf@f+1)& (0+255),f,b
 12135                           
 12136                           ; BSR set to: 0
 12137                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12138  0014B0  C0AB  FFF6         	movff	printf@f,tblptrl
 12139  0014B4  C0AC  FFF7         	movff	printf@f+1,tblptrh
 12140  0014B8  6AF8               	clrf	tblptru,c
 12141  0014BA  0E05               	movlw	(high __ramtop+-1)
 12142  0014BC  64F7               	cpfsgt	tblptrh,c
 12143  0014BE  D003               	bra	u5547
 12144  0014C0  0008               	tblrd		*
 12145  0014C2  50F5               	movf	tablat,w,c
 12146  0014C4  D005               	bra	u5540
 12147  0014C6                     u5547:
 12148  0014C6  CFF6 FFE9          	movff	tblptrl,fsr0l
 12149  0014CA  CFF7 FFEA          	movff	tblptrh,fsr0h
 12150  0014CE  50EF               	movf	indf0,w,c
 12151  0014D0                     u5540:
 12152  0014D0  ECEB  F020         	call	_isdigit
 12153  0014D4  A0D8               	btfss	status,0,c
 12154  0014D6  D055               	goto	l5090
 12155  0014D8  D7B0               	goto	l5058
 12156                           
 12157                           ;doprnt.c: 608: }
 12158                           ;doprnt.c: 635: switch(c = *f++) {
 12159  0014DA  D053               	goto	l5090
 12160                           
 12161                           ;doprnt.c: 638: goto alldone;
 12162                           
 12163                           ;doprnt.c: 637: case 0:
 12164  0014DC  D176               	goto	l681
 12165                           
 12166                           ;doprnt.c: 698: case 'i':
 12167                           ;doprnt.c: 699: break;
 12168                           
 12169                           ;doprnt.c: 697: case 'd':
 12170  0014DE  D07D               	goto	l652
 12171  0014E0                     l5066:
 12172                           
 12173                           ;doprnt.c: 757: if(width > len)
 12174  0014E0  0100               	movlb	0	; () banked
 12175  0014E2  51C5               	movf	printf@width& (0+255),w,b
 12176  0014E4  0100               	movlb	0	; () banked
 12177  0014E6  5DC0               	subwf	printf@len& (0+255),w,b
 12178  0014E8  0100               	movlb	0	; () banked
 12179  0014EA  51C6               	movf	(printf@width+1)& (0+255),w,b
 12180  0014EC  0100               	movlb	0	; () banked
 12181  0014EE  59C1               	subwfb	(printf@len+1)& (0+255),w,b
 12182  0014F0  B0D8               	btfsc	status,0,c
 12183  0014F2  D009               	goto	l5070
 12184                           
 12185                           ; BSR set to: 0
 12186                           ;doprnt.c: 758: width -= len;
 12187  0014F4  0100               	movlb	0	; () banked
 12188  0014F6  51C0               	movf	printf@len& (0+255),w,b
 12189  0014F8  0100               	movlb	0	; () banked
 12190  0014FA  5FC5               	subwf	printf@width& (0+255),f,b
 12191  0014FC  0100               	movlb	0	; () banked
 12192  0014FE  51C1               	movf	(printf@len+1)& (0+255),w,b
 12193  001500  0100               	movlb	0	; () banked
 12194  001502  5BC6               	subwfb	(printf@width+1)& (0+255),f,b
 12195  001504  D00A               	goto	l5074
 12196  001506                     l5070:
 12197                           
 12198                           ; BSR set to: 0
 12199                           ;doprnt.c: 759: else
 12200                           ;doprnt.c: 760: width = 0;
 12201  001506  0E00               	movlw	0
 12202  001508  0100               	movlb	0	; () banked
 12203  00150A  6FC6               	movwf	(printf@width+1)& (0+255),b
 12204  00150C  0E00               	movlw	0
 12205  00150E  6FC5               	movwf	printf@width& (0+255),b
 12206                           
 12207                           ; BSR set to: 0
 12208                           ;doprnt.c: 764: while(width--)
 12209  001510  D004               	goto	l5074
 12210  001512                     l5072:
 12211                           
 12212                           ; BSR set to: 0
 12213                           ;doprnt.c: 765: (putch(' ') );
 12214  001512  0E20               	movlw	32
 12215  001514  ECC0  F021         	call	_putch
 12216  001518  D000               	goto	l5074
 12217  00151A                     l5074:
 12218  00151A  0100               	movlb	0	; () banked
 12219  00151C  07C5               	decf	printf@width& (0+255),f,b
 12220  00151E  A0D8               	btfss	status,0,c
 12221  001520  07C6               	decf	(printf@width+1)& (0+255),f,b
 12222  001522  0100               	movlb	0	; () banked
 12223  001524  29C5               	incf	printf@width& (0+255),w,b
 12224  001526  E1F5               	bnz	l5072
 12225  001528  0100               	movlb	0	; () banked
 12226  00152A  29C6               	incf	(printf@width+1)& (0+255),w,b
 12227  00152C  B4D8               	btfsc	status,2,c
 12228  00152E  D00D               	goto	l5080
 12229  001530  D7F0               	goto	l5072
 12230                           
 12231                           ; BSR set to: 0
 12232                           ;doprnt.c: 767: while(len--)
 12233  001532  D00B               	goto	l5080
 12234  001534                     l5076:
 12235                           
 12236                           ; BSR set to: 0
 12237                           ;doprnt.c: 768: (putch(*cp++) );
 12238  001534  C0BB  FFD9         	movff	printf@cp,fsr2l
 12239  001538  C0BC  FFDA         	movff	printf@cp+1,fsr2h
 12240  00153C  50DF               	movf	indf2,w,c
 12241  00153E  ECC0  F021         	call	_putch
 12242  001542  0100               	movlb	0	; () banked
 12243  001544  4BBB               	infsnz	printf@cp& (0+255),f,b
 12244  001546  2BBC               	incf	(printf@cp+1)& (0+255),f,b
 12245  001548  D000               	goto	l5080
 12246  00154A                     l5080:
 12247                           
 12248                           ; BSR set to: 0
 12249  00154A  0100               	movlb	0	; () banked
 12250  00154C  07C0               	decf	printf@len& (0+255),f,b
 12251  00154E  A0D8               	btfss	status,0,c
 12252  001550  07C1               	decf	(printf@len+1)& (0+255),f,b
 12253  001552  0100               	movlb	0	; () banked
 12254  001554  29C0               	incf	printf@len& (0+255),w,b
 12255  001556  E1EE               	bnz	l5076
 12256  001558  0100               	movlb	0	; () banked
 12257  00155A  29C1               	incf	(printf@len+1)& (0+255),w,b
 12258  00155C  B4D8               	btfsc	status,2,c
 12259  00155E  D112               	goto	l5150
 12260  001560  D7E9               	goto	l5076
 12261                           
 12262                           ; BSR set to: 0
 12263                           ;doprnt.c: 774: continue;
 12264  001562  D110               	goto	l5150
 12265  001564                     l5082:
 12266                           
 12267                           ; BSR set to: 0
 12268                           ;doprnt.c: 805: cp = (char *)&c;
 12269  001564  0EC7               	movlw	low printf@c
 12270  001566  0100               	movlb	0	; () banked
 12271  001568  6FBB               	movwf	printf@cp& (0+255),b
 12272  00156A  0E00               	movlw	high printf@c
 12273  00156C  0100               	movlb	0	; () banked
 12274  00156E  6FBC               	movwf	(printf@cp+1)& (0+255),b
 12275                           
 12276                           ; BSR set to: 0
 12277                           ;doprnt.c: 806: len = 1;
 12278  001570  0E00               	movlw	0
 12279  001572  0100               	movlb	0	; () banked
 12280  001574  6FC1               	movwf	(printf@len+1)& (0+255),b
 12281  001576  0E01               	movlw	1
 12282  001578  6FC0               	movwf	printf@len& (0+255),b
 12283                           
 12284                           ;doprnt.c: 807: goto dostring;
 12285  00157A  D7B2               	goto	l5066
 12286  00157C                     l5086:
 12287                           
 12288                           ; BSR set to: 0
 12289                           ;doprnt.c: 818: flag |= 0x40;
 12290  00157C  0100               	movlb	0	; () banked
 12291  00157E  8DC2               	bsf	printf@flag& (0+255),6,b
 12292                           
 12293                           ; BSR set to: 0
 12294                           ;doprnt.c: 822: }
 12295                           
 12296                           ;doprnt.c: 819: break;
 12297  001580  D02C               	goto	l652
 12298  001582                     l5090:
 12299  001582  0100               	movlb	0	; () banked
 12300  001584  51AB               	movf	printf@f& (0+255),w,b
 12301  001586  0100               	movlb	0	; () banked
 12302  001588  6FB7               	movwf	??_printf& (0+255),b
 12303  00158A  0100               	movlb	0	; () banked
 12304  00158C  51AC               	movf	(printf@f+1)& (0+255),w,b
 12305  00158E  0100               	movlb	0	; () banked
 12306  001590  6FB8               	movwf	(??_printf+1)& (0+255),b
 12307  001592  0100               	movlb	0	; () banked
 12308  001594  4BAB               	infsnz	printf@f& (0+255),f,b
 12309  001596  2BAC               	incf	(printf@f+1)& (0+255),f,b
 12310  001598  C0B7  FFF6         	movff	??_printf,tblptrl
 12311  00159C  C0B8  FFF7         	movff	??_printf+1,tblptrh
 12312  0015A0  6AF8               	clrf	tblptru,c
 12313  0015A2  0E05               	movlw	(high __ramtop+-1)
 12314  0015A4  64F7               	cpfsgt	tblptrh,c
 12315  0015A6  D003               	bra	u5597
 12316  0015A8  0008               	tblrd		*
 12317  0015AA  50F5               	movf	tablat,w,c
 12318  0015AC  D005               	bra	u5590
 12319  0015AE                     u5597:
 12320  0015AE  CFF6 FFE9          	movff	tblptrl,fsr0l
 12321  0015B2  CFF7 FFEA          	movff	tblptrh,fsr0h
 12322  0015B6  50EF               	movf	indf0,w,c
 12323  0015B8                     u5590:
 12324  0015B8  0100               	movlb	0	; () banked
 12325  0015BA  6FC7               	movwf	printf@c& (0+255),b
 12326  0015BC  0100               	movlb	0	; () banked
 12327  0015BE  51C7               	movf	printf@c& (0+255),w,b
 12328                           
 12329                           ; Switch size 1, requested type "space"
 12330                           ; Number of cases is 4, Range of values is 0 to 117
 12331                           ; switch strategies available:
 12332                           ; Name         Instructions Cycles
 12333                           ; simple_byte           13     7 (average)
 12334                           ;	Chosen strategy is simple_byte
 12335  0015C0  0A00               	xorlw	0	; case 0
 12336  0015C2  B4D8               	btfsc	status,2,c
 12337  0015C4  D102               	goto	l681
 12338  0015C6  0A64               	xorlw	100	; case 100
 12339  0015C8  B4D8               	btfsc	status,2,c
 12340  0015CA  D007               	goto	l652
 12341  0015CC  0A0D               	xorlw	13	; case 105
 12342  0015CE  B4D8               	btfsc	status,2,c
 12343  0015D0  D004               	goto	l652
 12344  0015D2  0A1C               	xorlw	28	; case 117
 12345  0015D4  B4D8               	btfsc	status,2,c
 12346  0015D6  D7D2               	goto	l5086
 12347  0015D8  D7C5               	goto	l5082
 12348  0015DA                     l652:
 12349                           
 12350                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 12351  0015DA  0100               	movlb	0	; () banked
 12352  0015DC  BDC2               	btfsc	printf@flag& (0+255),6,b
 12353  0015DE  D019               	goto	l5102
 12354                           
 12355                           ; BSR set to: 0
 12356                           ;doprnt.c: 1253: {
 12357                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12358  0015E0  C0BE  FFD9         	movff	printf@ap,fsr2l
 12359  0015E4  C0BF  FFDA         	movff	printf@ap+1,fsr2h
 12360  0015E8  CFDE F0C3          	movff	postinc2,printf@val
 12361  0015EC  CFDD F0C4          	movff	postdec2,printf@val+1
 12362                           
 12363                           ; BSR set to: 0
 12364  0015F0  0E02               	movlw	2
 12365  0015F2  0100               	movlb	0	; () banked
 12366  0015F4  27BE               	addwf	printf@ap& (0+255),f,b
 12367  0015F6  0E00               	movlw	0
 12368  0015F8  23BF               	addwfc	(printf@ap+1)& (0+255),f,b
 12369                           
 12370                           ; BSR set to: 0
 12371                           ;doprnt.c: 1261: if((int)val < 0) {
 12372  0015FA  0100               	movlb	0	; () banked
 12373  0015FC  AFC4               	btfss	(printf@val+1)& (0+255),7,b
 12374  0015FE  D017               	goto	l5106
 12375                           
 12376                           ; BSR set to: 0
 12377                           ;doprnt.c: 1262: flag |= 0x03;
 12378  001600  0E03               	movlw	3
 12379  001602  0100               	movlb	0	; () banked
 12380  001604  13C2               	iorwf	printf@flag& (0+255),f,b
 12381                           
 12382                           ; BSR set to: 0
 12383                           ;doprnt.c: 1263: val = -val;
 12384  001606  0100               	movlb	0	; () banked
 12385  001608  6DC3               	negf	printf@val& (0+255),b
 12386  00160A  1FC4               	comf	(printf@val+1)& (0+255),f,b
 12387  00160C  B0D8               	btfsc	status,0,c
 12388  00160E  2BC4               	incf	(printf@val+1)& (0+255),f,b
 12389                           
 12390                           ; BSR set to: 0
 12391                           ;doprnt.c: 1264: }
 12392                           ;doprnt.c: 1266: }
 12393  001610  D00E               	goto	l5106
 12394  001612                     l5102:
 12395                           
 12396                           ; BSR set to: 0
 12397                           ;doprnt.c: 1268: else
 12398                           ;doprnt.c: 1273: {
 12399                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12400  001612  C0BE  FFD9         	movff	printf@ap,fsr2l
 12401  001616  C0BF  FFDA         	movff	printf@ap+1,fsr2h
 12402  00161A  CFDE F0C3          	movff	postinc2,printf@val
 12403  00161E  CFDD F0C4          	movff	postdec2,printf@val+1
 12404                           
 12405                           ; BSR set to: 0
 12406  001622  0E02               	movlw	2
 12407  001624  0100               	movlb	0	; () banked
 12408  001626  27BE               	addwf	printf@ap& (0+255),f,b
 12409  001628  0E00               	movlw	0
 12410  00162A  23BF               	addwfc	(printf@ap+1)& (0+255),f,b
 12411  00162C  D000               	goto	l5106
 12412  00162E                     l5106:
 12413                           
 12414                           ; BSR set to: 0
 12415                           ;doprnt.c: 1287: }
 12416                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12417  00162E  0E01               	movlw	1
 12418  001630  0100               	movlb	0	; () banked
 12419  001632  6FC7               	movwf	printf@c& (0+255),b
 12420  001634                     l5108:
 12421                           
 12422                           ; BSR set to: 0
 12423  001634  0E05               	movlw	5
 12424  001636  0100               	movlb	0	; () banked
 12425  001638  19C7               	xorwf	printf@c& (0+255),w,b
 12426  00163A  B4D8               	btfsc	status,2,c
 12427  00163C  D01A               	goto	l5120
 12428  00163E  D001               	goto	l5112
 12429                           
 12430                           ; BSR set to: 0
 12431  001640  D018               	goto	l5120
 12432  001642                     l5112:
 12433                           
 12434                           ; BSR set to: 0
 12435                           ;doprnt.c: 1306: if(val < dpowers[c])
 12436  001642  0100               	movlb	0	; () banked
 12437  001644  51C7               	movf	printf@c& (0+255),w,b
 12438  001646  0D02               	mullw	2
 12439  001648  0E55               	movlw	low _dpowers
 12440  00164A  24F3               	addwf	prodl,w,c
 12441  00164C  6EF6               	movwf	tblptrl,c
 12442  00164E  0E7D               	movlw	high _dpowers
 12443  001650  20F4               	addwfc	prodh,w,c
 12444  001652  6EF7               	movwf	tblptrh,c
 12445  001654                     	if	0	;There are less than 3 active tblptr bytes
 12446  001654                     	endif
 12447  001654  0009               	tblrd		*+
 12448  001656  50F5               	movf	tablat,w,c
 12449  001658  0100               	movlb	0	; () banked
 12450  00165A  5DC3               	subwf	printf@val& (0+255),w,b
 12451  00165C  0009               	tblrd		*+
 12452  00165E  50F5               	movf	tablat,w,c
 12453  001660  0100               	movlb	0	; () banked
 12454  001662  59C4               	subwfb	(printf@val+1)& (0+255),w,b
 12455  001664  A0D8               	btfss	status,0,c
 12456  001666  D005               	goto	l5120
 12457  001668  D001               	goto	l5116
 12458                           
 12459                           ; BSR set to: 0
 12460                           ;doprnt.c: 1307: break;
 12461  00166A  D003               	goto	l5120
 12462  00166C                     l5116:
 12463                           
 12464                           ; BSR set to: 0
 12465  00166C  0100               	movlb	0	; () banked
 12466  00166E  2BC7               	incf	printf@c& (0+255),f,b
 12467  001670  D7E1               	goto	l5108
 12468  001672                     l5120:
 12469                           
 12470                           ; BSR set to: 0
 12471                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12472  001672  0100               	movlb	0	; () banked
 12473  001674  51C5               	movf	printf@width& (0+255),w,b
 12474  001676  0100               	movlb	0	; () banked
 12475  001678  11C6               	iorwf	(printf@width+1)& (0+255),w,b
 12476  00167A  B4D8               	btfsc	status,2,c
 12477  00167C  D00C               	goto	l5126
 12478                           
 12479                           ; BSR set to: 0
 12480  00167E  C0C2  F0B7         	movff	printf@flag,??_printf
 12481  001682  0E03               	movlw	3
 12482  001684  0100               	movlb	0	; () banked
 12483  001686  17B7               	andwf	??_printf& (0+255),f,b
 12484  001688  B4D8               	btfsc	status,2,c
 12485  00168A  D005               	goto	l5126
 12486                           
 12487                           ; BSR set to: 0
 12488                           ;doprnt.c: 1346: width--;
 12489  00168C  0100               	movlb	0	; () banked
 12490  00168E  07C5               	decf	printf@width& (0+255),f,b
 12491  001690  A0D8               	btfss	status,0,c
 12492  001692  07C6               	decf	(printf@width+1)& (0+255),f,b
 12493  001694  D000               	goto	l5126
 12494  001696                     l5126:
 12495                           
 12496                           ; BSR set to: 0
 12497                           ;doprnt.c: 1381: if(width > c)
 12498  001696  0E80               	movlw	128
 12499  001698  0100               	movlb	0	; () banked
 12500  00169A  BFC7               	btfsc	printf@c& (0+255),7,b
 12501  00169C  0E7F               	movlw	127
 12502  00169E  0100               	movlb	0	; () banked
 12503  0016A0  6FB7               	movwf	??_printf& (0+255),b
 12504  0016A2  0100               	movlb	0	; () banked
 12505  0016A4  51C5               	movf	printf@width& (0+255),w,b
 12506  0016A6  0100               	movlb	0	; () banked
 12507  0016A8  5DC7               	subwf	printf@c& (0+255),w,b
 12508  0016AA  0100               	movlb	0	; () banked
 12509  0016AC  51C6               	movf	(printf@width+1)& (0+255),w,b
 12510  0016AE  0A80               	xorlw	128
 12511  0016B0  0100               	movlb	0	; () banked
 12512  0016B2  59B7               	subwfb	??_printf& (0+255),w,b
 12513  0016B4  B0D8               	btfsc	status,0,c
 12514  0016B6  D00B               	goto	l5130
 12515                           
 12516                           ; BSR set to: 0
 12517                           ;doprnt.c: 1382: width -= c;
 12518  0016B8  0100               	movlb	0	; () banked
 12519  0016BA  51C7               	movf	printf@c& (0+255),w,b
 12520  0016BC  0100               	movlb	0	; () banked
 12521  0016BE  5FC5               	subwf	printf@width& (0+255),f,b
 12522  0016C0  0E00               	movlw	0
 12523  0016C2  0100               	movlb	0	; () banked
 12524  0016C4  BFC7               	btfsc	printf@c& (0+255),7,b
 12525  0016C6  0EFF               	movlw	255
 12526  0016C8  0100               	movlb	0	; () banked
 12527  0016CA  5BC6               	subwfb	(printf@width+1)& (0+255),f,b
 12528  0016CC  D006               	goto	l5132
 12529  0016CE                     l5130:
 12530                           
 12531                           ; BSR set to: 0
 12532                           ;doprnt.c: 1383: else
 12533                           ;doprnt.c: 1384: width = 0;
 12534  0016CE  0E00               	movlw	0
 12535  0016D0  0100               	movlb	0	; () banked
 12536  0016D2  6FC6               	movwf	(printf@width+1)& (0+255),b
 12537  0016D4  0E00               	movlw	0
 12538  0016D6  6FC5               	movwf	printf@width& (0+255),b
 12539  0016D8  D000               	goto	l5132
 12540  0016DA                     l5132:
 12541                           
 12542                           ; BSR set to: 0
 12543                           ;doprnt.c: 1422: {
 12544                           ;doprnt.c: 1424: if(width
 12545                           ;doprnt.c: 1428: )
 12546  0016DA  0100               	movlb	0	; () banked
 12547  0016DC  51C5               	movf	printf@width& (0+255),w,b
 12548  0016DE  0100               	movlb	0	; () banked
 12549  0016E0  11C6               	iorwf	(printf@width+1)& (0+255),w,b
 12550  0016E2  B4D8               	btfsc	status,2,c
 12551  0016E4  D00F               	goto	l5138
 12552  0016E6                     l5134:
 12553                           
 12554                           ; BSR set to: 0
 12555                           ;doprnt.c: 1430: (putch(' ') );
 12556  0016E6  0E20               	movlw	32
 12557  0016E8  ECC0  F021         	call	_putch
 12558                           
 12559                           ;doprnt.c: 1431: while(--width);
 12560  0016EC  0100               	movlb	0	; () banked
 12561  0016EE  07C5               	decf	printf@width& (0+255),f,b
 12562  0016F0  A0D8               	btfss	status,0,c
 12563  0016F2  07C6               	decf	(printf@width+1)& (0+255),f,b
 12564  0016F4  0100               	movlb	0	; () banked
 12565  0016F6  51C5               	movf	printf@width& (0+255),w,b
 12566  0016F8  0100               	movlb	0	; () banked
 12567  0016FA  11C6               	iorwf	(printf@width+1)& (0+255),w,b
 12568  0016FC  B4D8               	btfsc	status,2,c
 12569  0016FE  D002               	goto	l5138
 12570  001700  D7F2               	goto	l5134
 12571                           
 12572                           ; BSR set to: 0
 12573  001702  D000               	goto	l5138
 12574  001704                     l5138:
 12575                           
 12576                           ; BSR set to: 0
 12577                           ;doprnt.c: 1438: if(flag & 0x03)
 12578  001704  C0C2  F0B7         	movff	printf@flag,??_printf
 12579  001708  0E03               	movlw	3
 12580  00170A  0100               	movlb	0	; () banked
 12581  00170C  17B7               	andwf	??_printf& (0+255),f,b
 12582  00170E  B4D8               	btfsc	status,2,c
 12583  001710  D004               	goto	l5142
 12584                           
 12585                           ; BSR set to: 0
 12586                           ;doprnt.c: 1439: (putch('-') );
 12587  001712  0E2D               	movlw	45
 12588  001714  ECC0  F021         	call	_putch
 12589  001718  D000               	goto	l5142
 12590  00171A                     l5142:
 12591                           
 12592                           ;doprnt.c: 1469: }
 12593                           ;doprnt.c: 1472: prec = c;
 12594  00171A  C0C7  F0BD         	movff	printf@c,printf@prec
 12595                           
 12596                           ;doprnt.c: 1474: while(prec--) {
 12597  00171E  D02A               	goto	l5148
 12598  001720                     l5144:
 12599                           
 12600                           ;doprnt.c: 1478: {
 12601                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12602  001720  0100               	movlb	0	; () banked
 12603  001722  51BD               	movf	printf@prec& (0+255),w,b
 12604  001724  0D02               	mullw	2
 12605  001726  0E55               	movlw	low _dpowers
 12606  001728  24F3               	addwf	prodl,w,c
 12607  00172A  6EF6               	movwf	tblptrl,c
 12608  00172C  0E7D               	movlw	high _dpowers
 12609  00172E  20F4               	addwfc	prodh,w,c
 12610  001730  6EF7               	movwf	tblptrh,c
 12611  001732                     	if	0	;There are less than 3 active tblptr bytes
 12612  001732                     	endif
 12613  001732  0009               	tblrd		*+
 12614  001734  CFF5 F0A1          	movff	tablat,___lwdiv@divisor
 12615  001738  000A               	tblrd		*-
 12616  00173A  CFF5 F0A2          	movff	tablat,___lwdiv@divisor+1
 12617  00173E  C0C3  F09F         	movff	printf@val,___lwdiv@dividend
 12618  001742  C0C4  F0A0         	movff	printf@val+1,___lwdiv@dividend+1
 12619  001746  ECC3  F01E         	call	___lwdiv	;wreg free
 12620  00174A  C09F  F0A6         	movff	?___lwdiv,___lwmod@dividend
 12621  00174E  C0A0  F0A7         	movff	?___lwdiv+1,___lwmod@dividend+1
 12622  001752  0E00               	movlw	0
 12623  001754  0100               	movlb	0	; () banked
 12624  001756  6FA9               	movwf	(___lwmod@divisor+1)& (0+255),b
 12625  001758  0E0A               	movlw	10
 12626  00175A  6FA8               	movwf	___lwmod@divisor& (0+255),b
 12627  00175C  EC41  F01F         	call	___lwmod	;wreg free
 12628  001760  0100               	movlb	0	; () banked
 12629  001762  51A6               	movf	?___lwmod& (0+255),w,b
 12630  001764  0F30               	addlw	48
 12631  001766  0100               	movlb	0	; () banked
 12632  001768  6FC7               	movwf	printf@c& (0+255),b
 12633                           
 12634                           ; BSR set to: 0
 12635                           ;doprnt.c: 1523: }
 12636                           ;doprnt.c: 1524: (putch(c) );
 12637  00176A  0100               	movlb	0	; () banked
 12638  00176C  51C7               	movf	printf@c& (0+255),w,b
 12639  00176E  ECC0  F021         	call	_putch
 12640  001772  D000               	goto	l5148
 12641  001774                     l5148:
 12642  001774  0100               	movlb	0	; () banked
 12643  001776  07BD               	decf	printf@prec& (0+255),f,b
 12644  001778  0100               	movlb	0	; () banked
 12645  00177A  29BD               	incf	printf@prec& (0+255),w,b
 12646  00177C  B4D8               	btfsc	status,2,c
 12647  00177E  D002               	goto	l5150
 12648  001780  D7CF               	goto	l5144
 12649                           
 12650                           ; BSR set to: 0
 12651  001782  D000               	goto	l5150
 12652  001784                     l5150:
 12653  001784  0100               	movlb	0	; () banked
 12654  001786  51AB               	movf	printf@f& (0+255),w,b
 12655  001788  0100               	movlb	0	; () banked
 12656  00178A  6FB7               	movwf	??_printf& (0+255),b
 12657  00178C  0100               	movlb	0	; () banked
 12658  00178E  51AC               	movf	(printf@f+1)& (0+255),w,b
 12659  001790  0100               	movlb	0	; () banked
 12660  001792  6FB8               	movwf	(??_printf+1)& (0+255),b
 12661  001794  0100               	movlb	0	; () banked
 12662  001796  4BAB               	infsnz	printf@f& (0+255),f,b
 12663  001798  2BAC               	incf	(printf@f+1)& (0+255),f,b
 12664  00179A  C0B7  FFF6         	movff	??_printf,tblptrl
 12665  00179E  C0B8  FFF7         	movff	??_printf+1,tblptrh
 12666  0017A2  6AF8               	clrf	tblptru,c
 12667  0017A4  0E05               	movlw	(high __ramtop+-1)
 12668  0017A6  64F7               	cpfsgt	tblptrh,c
 12669  0017A8  D003               	bra	u5727
 12670  0017AA  0008               	tblrd		*
 12671  0017AC  50F5               	movf	tablat,w,c
 12672  0017AE  D005               	bra	u5720
 12673  0017B0                     u5727:
 12674  0017B0  CFF6 FFE9          	movff	tblptrl,fsr0l
 12675  0017B4  CFF7 FFEA          	movff	tblptrh,fsr0h
 12676  0017B8  50EF               	movf	indf0,w,c
 12677  0017BA                     u5720:
 12678  0017BA  0100               	movlb	0	; () banked
 12679  0017BC  6FC7               	movwf	printf@c& (0+255),b
 12680  0017BE  0100               	movlb	0	; () banked
 12681  0017C0  51C7               	movf	printf@c& (0+255),w,b
 12682  0017C2  B4D8               	btfsc	status,2,c
 12683  0017C4  D002               	goto	l681
 12684  0017C6  D60D               	goto	l5048
 12685                           
 12686                           ; BSR set to: 0
 12687  0017C8  D000               	goto	l681
 12688  0017CA                     l681:
 12689  0017CA  0012               	return		;funcret
 12690  0017CC                     __end_of_printf:
 12691                           	opt stack 0
 12692                           tblptru	equ	0xFF8
 12693                           tblptrh	equ	0xFF7
 12694                           tblptrl	equ	0xFF6
 12695                           tablat	equ	0xFF5
 12696                           prodh	equ	0xFF4
 12697                           prodl	equ	0xFF3
 12698                           indf0	equ	0xFEF
 12699                           postinc0	equ	0xFEE
 12700                           fsr0h	equ	0xFEA
 12701                           fsr0l	equ	0xFE9
 12702                           wreg	equ	0xFE8
 12703                           postinc1	equ	0xFE6
 12704                           postdec1	equ	0xFE5
 12705                           plusw1	equ	0xFE3
 12706                           fsr1h	equ	0xFE2
 12707                           fsr1l	equ	0xFE1
 12708                           indf2	equ	0xFDF
 12709                           postinc2	equ	0xFDE
 12710                           postdec2	equ	0xFDD
 12711                           plusw2	equ	0xFDB
 12712                           fsr2h	equ	0xFDA
 12713                           fsr2l	equ	0xFD9
 12714                           status	equ	0xFD8
 12715                           
 12716 ;; *************** function _putch *****************
 12717 ;; Defined at:
 12718 ;;		line 77 in file "SerialFuncs.c"
 12719 ;; Parameters:    Size  Location     Type
 12720 ;;  c               1    wreg     unsigned char 
 12721 ;; Auto vars:     Size  Location     Type
 12722 ;;  c               1   31[BANK0 ] unsigned char 
 12723 ;; Return value:  Size  Location     Type
 12724 ;;		None               void
 12725 ;; Registers used:
 12726 ;;		wreg
 12727 ;; Tracked objects:
 12728 ;;		On entry : 0/0
 12729 ;;		On exit  : 0/0
 12730 ;;		Unchanged: 0/0
 12731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12732 ;;      Params:         0       0       0       0       0       0       0
 12733 ;;      Locals:         0       1       0       0       0       0       0
 12734 ;;      Temps:          0       0       0       0       0       0       0
 12735 ;;      Totals:         0       1       0       0       0       0       0
 12736 ;;Total ram usage:        1 bytes
 12737 ;; Hardware stack levels used:    1
 12738 ;; Hardware stack levels required when called:    5
 12739 ;; This function calls:
 12740 ;;		Nothing
 12741 ;; This function is called by:
 12742 ;;		_printf
 12743 ;; This function uses a non-reentrant model
 12744 ;;
 12745                           
 12746                           	psect	text35
 12747  004380                     __ptext35:
 12748                           	opt stack 0
 12749  004380                     _putch:
 12750                           	opt stack 24
 12751                           
 12752                           ;incstack = 0
 12753                           ;putch@c stored from wreg
 12754  004380  0100               	movlb	0	; () banked
 12755  004382  6F9F               	movwf	putch@c& (0+255),b
 12756                           
 12757                           ; BSR set to: 0
 12758                           ;SerialFuncs.c: 79: while (!TXIF);
 12759  004384  D000               	goto	l325
 12760  004386                     l325:
 12761  004386  A89E               	btfss	3998,4,c	;volatile
 12762  004388  D7FE               	goto	l325
 12763                           
 12764                           ;SerialFuncs.c: 80: TXREG = c;
 12765  00438A  C09F  FFAD         	movff	putch@c,4013	;volatile
 12766  00438E  0012               	return		;funcret
 12767  004390                     __end_of_putch:
 12768                           	opt stack 0
 12769                           tblptru	equ	0xFF8
 12770                           tblptrh	equ	0xFF7
 12771                           tblptrl	equ	0xFF6
 12772                           tablat	equ	0xFF5
 12773                           prodh	equ	0xFF4
 12774                           prodl	equ	0xFF3
 12775                           indf0	equ	0xFEF
 12776                           postinc0	equ	0xFEE
 12777                           fsr0h	equ	0xFEA
 12778                           fsr0l	equ	0xFE9
 12779                           wreg	equ	0xFE8
 12780                           postinc1	equ	0xFE6
 12781                           postdec1	equ	0xFE5
 12782                           plusw1	equ	0xFE3
 12783                           fsr1h	equ	0xFE2
 12784                           fsr1l	equ	0xFE1
 12785                           indf2	equ	0xFDF
 12786                           postinc2	equ	0xFDE
 12787                           postdec2	equ	0xFDD
 12788                           plusw2	equ	0xFDB
 12789                           fsr2h	equ	0xFDA
 12790                           fsr2l	equ	0xFD9
 12791                           status	equ	0xFD8
 12792                           
 12793 ;; *************** function ___lwmod *****************
 12794 ;; Defined at:
 12795 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 12796 ;; Parameters:    Size  Location     Type
 12797 ;;  dividend        2   38[BANK0 ] unsigned int 
 12798 ;;  divisor         2   40[BANK0 ] unsigned int 
 12799 ;; Auto vars:     Size  Location     Type
 12800 ;;  counter         1   42[BANK0 ] unsigned char 
 12801 ;; Return value:  Size  Location     Type
 12802 ;;                  2   38[BANK0 ] unsigned int 
 12803 ;; Registers used:
 12804 ;;		wreg, status,2, status,0
 12805 ;; Tracked objects:
 12806 ;;		On entry : 0/0
 12807 ;;		On exit  : 0/0
 12808 ;;		Unchanged: 0/0
 12809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12810 ;;      Params:         0       4       0       0       0       0       0
 12811 ;;      Locals:         0       1       0       0       0       0       0
 12812 ;;      Temps:          0       0       0       0       0       0       0
 12813 ;;      Totals:         0       5       0       0       0       0       0
 12814 ;;Total ram usage:        5 bytes
 12815 ;; Hardware stack levels used:    1
 12816 ;; Hardware stack levels required when called:    5
 12817 ;; This function calls:
 12818 ;;		Nothing
 12819 ;; This function is called by:
 12820 ;;		_printf
 12821 ;; This function uses a non-reentrant model
 12822 ;;
 12823                           
 12824                           	psect	text36
 12825  003E82                     __ptext36:
 12826                           	opt stack 0
 12827  003E82                     ___lwmod:
 12828                           	opt stack 24
 12829                           
 12830                           ;incstack = 0
 12831  003E82  0100               	movlb	0	; () banked
 12832  003E84  51A8               	movf	___lwmod@divisor& (0+255),w,b
 12833  003E86  0100               	movlb	0	; () banked
 12834  003E88  11A9               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 12835  003E8A  B4D8               	btfsc	status,2,c
 12836  003E8C  D02B               	goto	l1377
 12837                           
 12838                           ; BSR set to: 0
 12839  003E8E  0E01               	movlw	1
 12840  003E90  0100               	movlb	0	; () banked
 12841  003E92  6FAA               	movwf	___lwmod@counter& (0+255),b
 12842  003E94  D007               	goto	l5036
 12843  003E96                     l5034:
 12844                           
 12845                           ; BSR set to: 0
 12846  003E96  0100               	movlb	0	; () banked
 12847  003E98  90D8               	bcf	status,0,c
 12848  003E9A  37A8               	rlcf	___lwmod@divisor& (0+255),f,b
 12849  003E9C  37A9               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 12850  003E9E  0100               	movlb	0	; () banked
 12851  003EA0  2BAA               	incf	___lwmod@counter& (0+255),f,b
 12852  003EA2  D000               	goto	l5036
 12853  003EA4                     l5036:
 12854                           
 12855                           ; BSR set to: 0
 12856  003EA4  0100               	movlb	0	; () banked
 12857  003EA6  BFA9               	btfsc	(___lwmod@divisor+1)& (0+255),7,b
 12858  003EA8  D002               	goto	l5038
 12859  003EAA  D7F5               	goto	l5034
 12860                           
 12861                           ; BSR set to: 0
 12862  003EAC  D000               	goto	l5038
 12863  003EAE                     l5038:
 12864                           
 12865                           ; BSR set to: 0
 12866  003EAE  0100               	movlb	0	; () banked
 12867  003EB0  51A8               	movf	___lwmod@divisor& (0+255),w,b
 12868  003EB2  0100               	movlb	0	; () banked
 12869  003EB4  5DA6               	subwf	___lwmod@dividend& (0+255),w,b
 12870  003EB6  0100               	movlb	0	; () banked
 12871  003EB8  51A9               	movf	(___lwmod@divisor+1)& (0+255),w,b
 12872  003EBA  0100               	movlb	0	; () banked
 12873  003EBC  59A7               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 12874  003EBE  A0D8               	btfss	status,0,c
 12875  003EC0  D009               	goto	l5042
 12876                           
 12877                           ; BSR set to: 0
 12878  003EC2  0100               	movlb	0	; () banked
 12879  003EC4  51A8               	movf	___lwmod@divisor& (0+255),w,b
 12880  003EC6  0100               	movlb	0	; () banked
 12881  003EC8  5FA6               	subwf	___lwmod@dividend& (0+255),f,b
 12882  003ECA  0100               	movlb	0	; () banked
 12883  003ECC  51A9               	movf	(___lwmod@divisor+1)& (0+255),w,b
 12884  003ECE  0100               	movlb	0	; () banked
 12885  003ED0  5BA7               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 12886  003ED2  D000               	goto	l5042
 12887  003ED4                     l5042:
 12888                           
 12889                           ; BSR set to: 0
 12890  003ED4  0100               	movlb	0	; () banked
 12891  003ED6  90D8               	bcf	status,0,c
 12892  003ED8  33A9               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 12893  003EDA  33A8               	rrcf	___lwmod@divisor& (0+255),f,b
 12894                           
 12895                           ; BSR set to: 0
 12896  003EDC  0100               	movlb	0	; () banked
 12897  003EDE  2FAA               	decfsz	___lwmod@counter& (0+255),f,b
 12898  003EE0  D7E6               	goto	l5038
 12899  003EE2  D000               	goto	l1377
 12900  003EE4                     l1377:
 12901                           
 12902                           ; BSR set to: 0
 12903  003EE4  C0A6  F0A6         	movff	___lwmod@dividend,?___lwmod
 12904  003EE8  C0A7  F0A7         	movff	___lwmod@dividend+1,?___lwmod+1
 12905                           
 12906                           ; BSR set to: 0
 12907  003EEC  0012               	return		;funcret
 12908  003EEE                     __end_of___lwmod:
 12909                           	opt stack 0
 12910                           tblptru	equ	0xFF8
 12911                           tblptrh	equ	0xFF7
 12912                           tblptrl	equ	0xFF6
 12913                           tablat	equ	0xFF5
 12914                           prodh	equ	0xFF4
 12915                           prodl	equ	0xFF3
 12916                           indf0	equ	0xFEF
 12917                           postinc0	equ	0xFEE
 12918                           fsr0h	equ	0xFEA
 12919                           fsr0l	equ	0xFE9
 12920                           wreg	equ	0xFE8
 12921                           postinc1	equ	0xFE6
 12922                           postdec1	equ	0xFE5
 12923                           plusw1	equ	0xFE3
 12924                           fsr1h	equ	0xFE2
 12925                           fsr1l	equ	0xFE1
 12926                           indf2	equ	0xFDF
 12927                           postinc2	equ	0xFDE
 12928                           postdec2	equ	0xFDD
 12929                           plusw2	equ	0xFDB
 12930                           fsr2h	equ	0xFDA
 12931                           fsr2l	equ	0xFD9
 12932                           status	equ	0xFD8
 12933                           
 12934 ;; *************** function ___lwdiv *****************
 12935 ;; Defined at:
 12936 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 12937 ;; Parameters:    Size  Location     Type
 12938 ;;  dividend        2   31[BANK0 ] unsigned int 
 12939 ;;  divisor         2   33[BANK0 ] unsigned int 
 12940 ;; Auto vars:     Size  Location     Type
 12941 ;;  quotient        2   36[BANK0 ] unsigned int 
 12942 ;;  counter         1   35[BANK0 ] unsigned char 
 12943 ;; Return value:  Size  Location     Type
 12944 ;;                  2   31[BANK0 ] unsigned int 
 12945 ;; Registers used:
 12946 ;;		wreg, status,2, status,0
 12947 ;; Tracked objects:
 12948 ;;		On entry : 0/0
 12949 ;;		On exit  : 0/0
 12950 ;;		Unchanged: 0/0
 12951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12952 ;;      Params:         0       4       0       0       0       0       0
 12953 ;;      Locals:         0       3       0       0       0       0       0
 12954 ;;      Temps:          0       0       0       0       0       0       0
 12955 ;;      Totals:         0       7       0       0       0       0       0
 12956 ;;Total ram usage:        7 bytes
 12957 ;; Hardware stack levels used:    1
 12958 ;; Hardware stack levels required when called:    5
 12959 ;; This function calls:
 12960 ;;		Nothing
 12961 ;; This function is called by:
 12962 ;;		_printf
 12963 ;; This function uses a non-reentrant model
 12964 ;;
 12965                           
 12966                           	psect	text37
 12967  003D86                     __ptext37:
 12968                           	opt stack 0
 12969  003D86                     ___lwdiv:
 12970                           	opt stack 24
 12971                           
 12972                           ; BSR set to: 0
 12973                           ;incstack = 0
 12974  003D86  0E00               	movlw	0
 12975  003D88  0100               	movlb	0	; () banked
 12976  003D8A  6FA5               	movwf	(___lwdiv@quotient+1)& (0+255),b
 12977  003D8C  0E00               	movlw	0
 12978  003D8E  6FA4               	movwf	___lwdiv@quotient& (0+255),b
 12979                           
 12980                           ; BSR set to: 0
 12981  003D90  0100               	movlb	0	; () banked
 12982  003D92  51A1               	movf	___lwdiv@divisor& (0+255),w,b
 12983  003D94  0100               	movlb	0	; () banked
 12984  003D96  11A2               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 12985  003D98  B4D8               	btfsc	status,2,c
 12986  003D9A  D031               	goto	l1367
 12987                           
 12988                           ; BSR set to: 0
 12989  003D9C  0E01               	movlw	1
 12990  003D9E  0100               	movlb	0	; () banked
 12991  003DA0  6FA3               	movwf	___lwdiv@counter& (0+255),b
 12992  003DA2  D007               	goto	l5016
 12993  003DA4                     l5014:
 12994                           
 12995                           ; BSR set to: 0
 12996  003DA4  0100               	movlb	0	; () banked
 12997  003DA6  90D8               	bcf	status,0,c
 12998  003DA8  37A1               	rlcf	___lwdiv@divisor& (0+255),f,b
 12999  003DAA  37A2               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 13000  003DAC  0100               	movlb	0	; () banked
 13001  003DAE  2BA3               	incf	___lwdiv@counter& (0+255),f,b
 13002  003DB0  D000               	goto	l5016
 13003  003DB2                     l5016:
 13004                           
 13005                           ; BSR set to: 0
 13006  003DB2  0100               	movlb	0	; () banked
 13007  003DB4  BFA2               	btfsc	(___lwdiv@divisor+1)& (0+255),7,b
 13008  003DB6  D002               	goto	l5018
 13009  003DB8  D7F5               	goto	l5014
 13010                           
 13011                           ; BSR set to: 0
 13012  003DBA  D000               	goto	l5018
 13013  003DBC                     l5018:
 13014                           
 13015                           ; BSR set to: 0
 13016  003DBC  0100               	movlb	0	; () banked
 13017  003DBE  90D8               	bcf	status,0,c
 13018  003DC0  37A4               	rlcf	___lwdiv@quotient& (0+255),f,b
 13019  003DC2  37A5               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 13020                           
 13021                           ; BSR set to: 0
 13022  003DC4  0100               	movlb	0	; () banked
 13023  003DC6  51A1               	movf	___lwdiv@divisor& (0+255),w,b
 13024  003DC8  0100               	movlb	0	; () banked
 13025  003DCA  5D9F               	subwf	___lwdiv@dividend& (0+255),w,b
 13026  003DCC  0100               	movlb	0	; () banked
 13027  003DCE  51A2               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13028  003DD0  0100               	movlb	0	; () banked
 13029  003DD2  59A0               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 13030  003DD4  A0D8               	btfss	status,0,c
 13031  003DD6  D00B               	goto	l5026
 13032                           
 13033                           ; BSR set to: 0
 13034  003DD8  0100               	movlb	0	; () banked
 13035  003DDA  51A1               	movf	___lwdiv@divisor& (0+255),w,b
 13036  003DDC  0100               	movlb	0	; () banked
 13037  003DDE  5F9F               	subwf	___lwdiv@dividend& (0+255),f,b
 13038  003DE0  0100               	movlb	0	; () banked
 13039  003DE2  51A2               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13040  003DE4  0100               	movlb	0	; () banked
 13041  003DE6  5BA0               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 13042                           
 13043                           ; BSR set to: 0
 13044  003DE8  0100               	movlb	0	; () banked
 13045  003DEA  81A4               	bsf	___lwdiv@quotient& (0+255),0,b
 13046  003DEC  D000               	goto	l5026
 13047  003DEE                     l5026:
 13048                           
 13049                           ; BSR set to: 0
 13050  003DEE  0100               	movlb	0	; () banked
 13051  003DF0  90D8               	bcf	status,0,c
 13052  003DF2  33A2               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 13053  003DF4  33A1               	rrcf	___lwdiv@divisor& (0+255),f,b
 13054                           
 13055                           ; BSR set to: 0
 13056  003DF6  0100               	movlb	0	; () banked
 13057  003DF8  2FA3               	decfsz	___lwdiv@counter& (0+255),f,b
 13058  003DFA  D7E0               	goto	l5018
 13059  003DFC  D000               	goto	l1367
 13060  003DFE                     l1367:
 13061                           
 13062                           ; BSR set to: 0
 13063  003DFE  C0A4  F09F         	movff	___lwdiv@quotient,?___lwdiv
 13064  003E02  C0A5  F0A0         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13065                           
 13066                           ; BSR set to: 0
 13067  003E06  0012               	return		;funcret
 13068  003E08                     __end_of___lwdiv:
 13069                           	opt stack 0
 13070                           tblptru	equ	0xFF8
 13071                           tblptrh	equ	0xFF7
 13072                           tblptrl	equ	0xFF6
 13073                           tablat	equ	0xFF5
 13074                           prodh	equ	0xFF4
 13075                           prodl	equ	0xFF3
 13076                           indf0	equ	0xFEF
 13077                           postinc0	equ	0xFEE
 13078                           fsr0h	equ	0xFEA
 13079                           fsr0l	equ	0xFE9
 13080                           wreg	equ	0xFE8
 13081                           postinc1	equ	0xFE6
 13082                           postdec1	equ	0xFE5
 13083                           plusw1	equ	0xFE3
 13084                           fsr1h	equ	0xFE2
 13085                           fsr1l	equ	0xFE1
 13086                           indf2	equ	0xFDF
 13087                           postinc2	equ	0xFDE
 13088                           postdec2	equ	0xFDD
 13089                           plusw2	equ	0xFDB
 13090                           fsr2h	equ	0xFDA
 13091                           fsr2l	equ	0xFD9
 13092                           status	equ	0xFD8
 13093                           
 13094 ;; *************** function _atoi *****************
 13095 ;; Defined at:
 13096 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atoi.c"
 13097 ;; Parameters:    Size  Location     Type
 13098 ;;  s               2   37[BANK0 ] PTR const unsigned char 
 13099 ;;		 -> LastMessage(20), 
 13100 ;; Auto vars:     Size  Location     Type
 13101 ;;  a               2   42[BANK0 ] int 
 13102 ;;  sign            1   41[BANK0 ] unsigned char 
 13103 ;; Return value:  Size  Location     Type
 13104 ;;                  2   37[BANK0 ] int 
 13105 ;; Registers used:
 13106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13107 ;; Tracked objects:
 13108 ;;		On entry : 0/0
 13109 ;;		On exit  : 0/0
 13110 ;;		Unchanged: 0/0
 13111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13112 ;;      Params:         0       2       0       0       0       0       0
 13113 ;;      Locals:         0       3       0       0       0       0       0
 13114 ;;      Temps:          0       2       0       0       0       0       0
 13115 ;;      Totals:         0       7       0       0       0       0       0
 13116 ;;Total ram usage:        7 bytes
 13117 ;; Hardware stack levels used:    1
 13118 ;; Hardware stack levels required when called:    6
 13119 ;; This function calls:
 13120 ;;		___wmul
 13121 ;;		_isdigit
 13122 ;; This function is called by:
 13123 ;;		_SetDateTime
 13124 ;;		_MessageRoutine
 13125 ;; This function uses a non-reentrant model
 13126 ;;
 13127                           
 13128                           	psect	text38
 13129  003662                     __ptext38:
 13130                           	opt stack 0
 13131  003662                     _atoi:
 13132                           	opt stack 23
 13133                           
 13134                           ; BSR set to: 0
 13135                           ;incstack = 0
 13136  003662  D004               	goto	l5272
 13137  003664                     l5270:
 13138  003664  0100               	movlb	0	; () banked
 13139  003666  4BA5               	infsnz	atoi@s& (0+255),f,b
 13140  003668  2BA6               	incf	(atoi@s+1)& (0+255),f,b
 13141  00366A  D000               	goto	l5272
 13142  00366C                     l5272:
 13143  00366C  C0A5  FFD9         	movff	atoi@s,fsr2l
 13144  003670  C0A6  FFDA         	movff	atoi@s+1,fsr2h
 13145  003674  0E20               	movlw	32
 13146  003676  18DE               	xorwf	postinc2,w,c
 13147  003678  B4D8               	btfsc	status,2,c
 13148  00367A  D7F4               	goto	l5270
 13149  00367C  C0A5  FFD9         	movff	atoi@s,fsr2l
 13150  003680  C0A6  FFDA         	movff	atoi@s+1,fsr2h
 13151  003684  0E09               	movlw	9
 13152  003686  18DE               	xorwf	postinc2,w,c
 13153  003688  B4D8               	btfsc	status,2,c
 13154  00368A  D7EC               	goto	l5270
 13155  00368C  0E00               	movlw	0
 13156  00368E  0100               	movlb	0	; () banked
 13157  003690  6FAB               	movwf	(atoi@a+1)& (0+255),b
 13158  003692  0E00               	movlw	0
 13159  003694  6FAA               	movwf	atoi@a& (0+255),b
 13160  003696  0E00               	movlw	0
 13161  003698  0100               	movlb	0	; () banked
 13162  00369A  6FA9               	movwf	atoi@sign& (0+255),b
 13163                           
 13164                           ; BSR set to: 0
 13165  00369C  C0A5  FFD9         	movff	atoi@s,fsr2l
 13166  0036A0  C0A6  FFDA         	movff	atoi@s+1,fsr2h
 13167  0036A4  0E2D               	movlw	45
 13168  0036A6  18DE               	xorwf	postinc2,w,c
 13169  0036A8  A4D8               	btfss	status,2,c
 13170  0036AA  D003               	goto	l5282
 13171                           
 13172                           ; BSR set to: 0
 13173  0036AC  0100               	movlb	0	; () banked
 13174  0036AE  2BA9               	incf	atoi@sign& (0+255),f,b
 13175  0036B0  D02F               	goto	l5288
 13176  0036B2                     l5282:
 13177                           
 13178                           ; BSR set to: 0
 13179  0036B2  C0A5  FFD9         	movff	atoi@s,fsr2l
 13180  0036B6  C0A6  FFDA         	movff	atoi@s+1,fsr2h
 13181  0036BA  0E2B               	movlw	43
 13182  0036BC  18DE               	xorwf	postinc2,w,c
 13183  0036BE  A4D8               	btfss	status,2,c
 13184  0036C0  D02B               	goto	l5290
 13185  0036C2  D026               	goto	l5288
 13186                           
 13187                           ; BSR set to: 0
 13188                           
 13189                           ; BSR set to: 0
 13190                           
 13191                           ; BSR set to: 0
 13192  0036C4  D029               	goto	l5290
 13193  0036C6                     l5286:
 13194  0036C6  C0AA  F09F         	movff	atoi@a,___wmul@multiplier
 13195  0036CA  C0AB  F0A0         	movff	atoi@a+1,___wmul@multiplier+1
 13196  0036CE  0E00               	movlw	0
 13197  0036D0  0100               	movlb	0	; () banked
 13198  0036D2  6FA2               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13199  0036D4  0E0A               	movlw	10
 13200  0036D6  6FA1               	movwf	___wmul@multiplicand& (0+255),b
 13201  0036D8  ECB7  F020         	call	___wmul	;wreg free
 13202  0036DC  C0A5  FFD9         	movff	atoi@s,fsr2l
 13203  0036E0  C0A6  FFDA         	movff	atoi@s+1,fsr2h
 13204  0036E4  50DF               	movf	indf2,w,c
 13205  0036E6  0100               	movlb	0	; () banked
 13206  0036E8  6FA7               	movwf	??_atoi& (0+255),b
 13207  0036EA  6BA8               	clrf	(??_atoi+1)& (0+255),b
 13208  0036EC  0100               	movlb	0	; () banked
 13209  0036EE  519F               	movf	?___wmul& (0+255),w,b
 13210  0036F0  0100               	movlb	0	; () banked
 13211  0036F2  27A7               	addwf	??_atoi& (0+255),f,b
 13212  0036F4  0100               	movlb	0	; () banked
 13213  0036F6  51A0               	movf	(?___wmul+1)& (0+255),w,b
 13214  0036F8  0100               	movlb	0	; () banked
 13215  0036FA  23A8               	addwfc	(??_atoi+1)& (0+255),f,b
 13216  0036FC  0ED0               	movlw	208
 13217  0036FE  0100               	movlb	0	; () banked
 13218  003700  25A7               	addwf	??_atoi& (0+255),w,b
 13219  003702  0100               	movlb	0	; () banked
 13220  003704  6FAA               	movwf	atoi@a& (0+255),b
 13221  003706  0EFF               	movlw	255
 13222  003708  0100               	movlb	0	; () banked
 13223  00370A  21A8               	addwfc	(??_atoi+1)& (0+255),w,b
 13224  00370C  0100               	movlb	0	; () banked
 13225  00370E  6FAB               	movwf	(atoi@a+1)& (0+255),b
 13226  003710                     l5288:
 13227                           
 13228                           ; BSR set to: 0
 13229  003710  0100               	movlb	0	; () banked
 13230  003712  4BA5               	infsnz	atoi@s& (0+255),f,b
 13231  003714  2BA6               	incf	(atoi@s+1)& (0+255),f,b
 13232  003716  D000               	goto	l5290
 13233  003718                     l5290:
 13234                           
 13235                           ; BSR set to: 0
 13236  003718  C0A5  FFD9         	movff	atoi@s,fsr2l
 13237  00371C  C0A6  FFDA         	movff	atoi@s+1,fsr2h
 13238  003720  50DF               	movf	indf2,w,c
 13239  003722  ECEB  F020         	call	_isdigit
 13240  003726  B0D8               	btfsc	status,0,c
 13241  003728  D7CE               	goto	l5286
 13242  00372A  0100               	movlb	0	; () banked
 13243  00372C  51A9               	movf	atoi@sign& (0+255),w,b
 13244  00372E  0100               	movlb	0	; () banked
 13245  003730  B4D8               	btfsc	status,2,c
 13246  003732  D00E               	goto	l974
 13247                           
 13248                           ; BSR set to: 0
 13249  003734  C0AA  F0A7         	movff	atoi@a,??_atoi
 13250  003738  C0AB  F0A8         	movff	atoi@a+1,??_atoi+1
 13251  00373C  0100               	movlb	0	; () banked
 13252  00373E  1FA7               	comf	??_atoi& (0+255),f,b
 13253  003740  1FA8               	comf	(??_atoi+1)& (0+255),f,b
 13254  003742  4BA7               	infsnz	??_atoi& (0+255),f,b
 13255  003744  2BA8               	incf	(??_atoi+1)& (0+255),f,b
 13256  003746  C0A7  F0A5         	movff	??_atoi,?_atoi
 13257  00374A  C0A8  F0A6         	movff	??_atoi+1,?_atoi+1
 13258  00374E  D004               	goto	l975
 13259  003750                     l974:
 13260                           
 13261                           ; BSR set to: 0
 13262  003750  C0AA  F0A5         	movff	atoi@a,?_atoi
 13263  003754  C0AB  F0A6         	movff	atoi@a+1,?_atoi+1
 13264  003758                     l975:
 13265                           
 13266                           ; BSR set to: 0
 13267  003758  0012               	return		;funcret
 13268  00375A                     __end_of_atoi:
 13269                           	opt stack 0
 13270                           tblptru	equ	0xFF8
 13271                           tblptrh	equ	0xFF7
 13272                           tblptrl	equ	0xFF6
 13273                           tablat	equ	0xFF5
 13274                           prodh	equ	0xFF4
 13275                           prodl	equ	0xFF3
 13276                           indf0	equ	0xFEF
 13277                           postinc0	equ	0xFEE
 13278                           fsr0h	equ	0xFEA
 13279                           fsr0l	equ	0xFE9
 13280                           wreg	equ	0xFE8
 13281                           postinc1	equ	0xFE6
 13282                           postdec1	equ	0xFE5
 13283                           plusw1	equ	0xFE3
 13284                           fsr1h	equ	0xFE2
 13285                           fsr1l	equ	0xFE1
 13286                           indf2	equ	0xFDF
 13287                           postinc2	equ	0xFDE
 13288                           postdec2	equ	0xFDD
 13289                           plusw2	equ	0xFDB
 13290                           fsr2h	equ	0xFDA
 13291                           fsr2l	equ	0xFD9
 13292                           status	equ	0xFD8
 13293                           
 13294 ;; *************** function _isdigit *****************
 13295 ;; Defined at:
 13296 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 13297 ;; Parameters:    Size  Location     Type
 13298 ;;  c               1    wreg     unsigned char 
 13299 ;; Auto vars:     Size  Location     Type
 13300 ;;  c               1   33[BANK0 ] unsigned char 
 13301 ;; Return value:  Size  Location     Type
 13302 ;;		None               void
 13303 ;; Registers used:
 13304 ;;		wreg, status,2, status,0
 13305 ;; Tracked objects:
 13306 ;;		On entry : 0/0
 13307 ;;		On exit  : 0/0
 13308 ;;		Unchanged: 0/0
 13309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13310 ;;      Params:         0       0       0       0       0       0       0
 13311 ;;      Locals:         0       2       0       0       0       0       0
 13312 ;;      Temps:          0       1       0       0       0       0       0
 13313 ;;      Totals:         0       3       0       0       0       0       0
 13314 ;;Total ram usage:        3 bytes
 13315 ;; Hardware stack levels used:    1
 13316 ;; Hardware stack levels required when called:    5
 13317 ;; This function calls:
 13318 ;;		Nothing
 13319 ;; This function is called by:
 13320 ;;		_printf
 13321 ;;		_atoi
 13322 ;; This function uses a non-reentrant model
 13323 ;;
 13324                           
 13325                           	psect	text39
 13326  0041D6                     __ptext39:
 13327                           	opt stack 0
 13328  0041D6                     _isdigit:
 13329                           	opt stack 24
 13330                           
 13331                           ; BSR set to: 0
 13332                           ;incstack = 0
 13333                           ;isdigit@c stored from wreg
 13334  0041D6  0100               	movlb	0	; () banked
 13335  0041D8  6FA1               	movwf	isdigit@c& (0+255),b
 13336                           
 13337                           ; BSR set to: 0
 13338  0041DA  0E00               	movlw	0
 13339  0041DC  0100               	movlb	0	; () banked
 13340  0041DE  6FA0               	movwf	_isdigit$2238& (0+255),b
 13341                           
 13342                           ; BSR set to: 0
 13343  0041E0  0E3A               	movlw	58
 13344  0041E2  0100               	movlb	0	; () banked
 13345  0041E4  61A1               	cpfslt	isdigit@c& (0+255),b
 13346  0041E6  D008               	goto	l4956
 13347                           
 13348                           ; BSR set to: 0
 13349  0041E8  0E2F               	movlw	47
 13350  0041EA  0100               	movlb	0	; () banked
 13351  0041EC  65A1               	cpfsgt	isdigit@c& (0+255),b
 13352  0041EE  D004               	goto	l4956
 13353                           
 13354                           ; BSR set to: 0
 13355  0041F0  0E01               	movlw	1
 13356  0041F2  0100               	movlb	0	; () banked
 13357  0041F4  6FA0               	movwf	_isdigit$2238& (0+255),b
 13358  0041F6  D000               	goto	l4956
 13359  0041F8                     l4956:
 13360                           
 13361                           ; BSR set to: 0
 13362  0041F8  C0A0  F09F         	movff	_isdigit$2238,??_isdigit
 13363  0041FC  0100               	movlb	0	; () banked
 13364  0041FE  319F               	rrcf	??_isdigit& (0+255),w,b
 13365  004200  D000               	goto	l1259
 13366  004202                     l1259:
 13367                           
 13368                           ; BSR set to: 0
 13369  004202  0012               	return		;funcret
 13370  004204                     __end_of_isdigit:
 13371                           	opt stack 0
 13372                           tblptru	equ	0xFF8
 13373                           tblptrh	equ	0xFF7
 13374                           tblptrl	equ	0xFF6
 13375                           tablat	equ	0xFF5
 13376                           prodh	equ	0xFF4
 13377                           prodl	equ	0xFF3
 13378                           indf0	equ	0xFEF
 13379                           postinc0	equ	0xFEE
 13380                           fsr0h	equ	0xFEA
 13381                           fsr0l	equ	0xFE9
 13382                           wreg	equ	0xFE8
 13383                           postinc1	equ	0xFE6
 13384                           postdec1	equ	0xFE5
 13385                           plusw1	equ	0xFE3
 13386                           fsr1h	equ	0xFE2
 13387                           fsr1l	equ	0xFE1
 13388                           indf2	equ	0xFDF
 13389                           postinc2	equ	0xFDE
 13390                           postdec2	equ	0xFDD
 13391                           plusw2	equ	0xFDB
 13392                           fsr2h	equ	0xFDA
 13393                           fsr2l	equ	0xFD9
 13394                           status	equ	0xFD8
 13395                           
 13396 ;; *************** function ___wmul *****************
 13397 ;; Defined at:
 13398 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 13399 ;; Parameters:    Size  Location     Type
 13400 ;;  multiplier      2   31[BANK0 ] unsigned int 
 13401 ;;  multiplicand    2   33[BANK0 ] unsigned int 
 13402 ;; Auto vars:     Size  Location     Type
 13403 ;;  product         2   35[BANK0 ] unsigned int 
 13404 ;; Return value:  Size  Location     Type
 13405 ;;                  2   31[BANK0 ] unsigned int 
 13406 ;; Registers used:
 13407 ;;		wreg, status,2, status,0, prodl, prodh
 13408 ;; Tracked objects:
 13409 ;;		On entry : 0/0
 13410 ;;		On exit  : 0/0
 13411 ;;		Unchanged: 0/0
 13412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13413 ;;      Params:         0       4       0       0       0       0       0
 13414 ;;      Locals:         0       2       0       0       0       0       0
 13415 ;;      Temps:          0       0       0       0       0       0       0
 13416 ;;      Totals:         0       6       0       0       0       0       0
 13417 ;;Total ram usage:        6 bytes
 13418 ;; Hardware stack levels used:    1
 13419 ;; Hardware stack levels required when called:    5
 13420 ;; This function calls:
 13421 ;;		Nothing
 13422 ;; This function is called by:
 13423 ;;		_cmStuffsWrapperFun
 13424 ;;		_cmFilterHighPassUsingLowPass
 13425 ;;		_cmFftFun
 13426 ;;		_printf
 13427 ;;		_atoi
 13428 ;;		_eval_poly
 13429 ;; This function uses a non-reentrant model
 13430 ;;
 13431                           
 13432                           	psect	text40
 13433  00416E                     __ptext40:
 13434                           	opt stack 0
 13435  00416E                     ___wmul:
 13436                           	opt stack 24
 13437                           
 13438                           ; BSR set to: 0
 13439                           ;incstack = 0
 13440  00416E  0100               	movlb	0	; () banked
 13441  004170  519F               	movf	___wmul@multiplier& (0+255),w,b
 13442  004172  0100               	movlb	0	; () banked
 13443  004174  03A1               	mulwf	___wmul@multiplicand& (0+255),b
 13444  004176  CFF3 F0A3          	movff	prodl,___wmul@product
 13445  00417A  CFF4 F0A4          	movff	prodh,___wmul@product+1
 13446  00417E  0100               	movlb	0	; () banked
 13447  004180  519F               	movf	___wmul@multiplier& (0+255),w,b
 13448  004182  0100               	movlb	0	; () banked
 13449  004184  03A2               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13450  004186  50F3               	movf	prodl,w,c
 13451  004188  0100               	movlb	0	; () banked
 13452  00418A  27A4               	addwf	(___wmul@product+1)& (0+255),f,b
 13453  00418C  0100               	movlb	0	; () banked
 13454  00418E  51A0               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13455  004190  0100               	movlb	0	; () banked
 13456  004192  03A1               	mulwf	___wmul@multiplicand& (0+255),b
 13457  004194  50F3               	movf	prodl,w,c
 13458  004196  0100               	movlb	0	; () banked
 13459  004198  27A4               	addwf	(___wmul@product+1)& (0+255),f,b
 13460                           
 13461                           ; BSR set to: 0
 13462  00419A  C0A3  F09F         	movff	___wmul@product,?___wmul
 13463  00419E  C0A4  F0A0         	movff	___wmul@product+1,?___wmul+1
 13464  0041A2  D000               	goto	l788
 13465  0041A4                     l788:
 13466                           
 13467                           ; BSR set to: 0
 13468  0041A4  0012               	return		;funcret
 13469  0041A6                     __end_of___wmul:
 13470                           	opt stack 0
 13471                           tblptru	equ	0xFF8
 13472                           tblptrh	equ	0xFF7
 13473                           tblptrl	equ	0xFF6
 13474                           tablat	equ	0xFF5
 13475                           prodh	equ	0xFF4
 13476                           prodl	equ	0xFF3
 13477                           indf0	equ	0xFEF
 13478                           postinc0	equ	0xFEE
 13479                           fsr0h	equ	0xFEA
 13480                           fsr0l	equ	0xFE9
 13481                           wreg	equ	0xFE8
 13482                           postinc1	equ	0xFE6
 13483                           postdec1	equ	0xFE5
 13484                           plusw1	equ	0xFE3
 13485                           fsr1h	equ	0xFE2
 13486                           fsr1l	equ	0xFE1
 13487                           indf2	equ	0xFDF
 13488                           postinc2	equ	0xFDE
 13489                           postdec2	equ	0xFDD
 13490                           plusw2	equ	0xFDB
 13491                           fsr2h	equ	0xFDA
 13492                           fsr2l	equ	0xFD9
 13493                           status	equ	0xFD8
 13494                           
 13495 ;; *************** function _Delay1KTCYx *****************
 13496 ;; Defined at:
 13497 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
 13498 ;; Parameters:    Size  Location     Type
 13499 ;;  unit            1    wreg     unsigned char 
 13500 ;; Auto vars:     Size  Location     Type
 13501 ;;  unit            1   31[BANK0 ] unsigned char 
 13502 ;; Return value:  Size  Location     Type
 13503 ;;		None               void
 13504 ;; Registers used:
 13505 ;;		wreg
 13506 ;; Tracked objects:
 13507 ;;		On entry : 0/0
 13508 ;;		On exit  : 0/0
 13509 ;;		Unchanged: 0/0
 13510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13511 ;;      Params:         0       0       0       0       0       0       0
 13512 ;;      Locals:         0       1       0       0       0       0       0
 13513 ;;      Temps:          0       0       0       0       0       0       0
 13514 ;;      Totals:         0       1       0       0       0       0       0
 13515 ;;Total ram usage:        1 bytes
 13516 ;; Hardware stack levels used:    1
 13517 ;; Hardware stack levels required when called:    5
 13518 ;; This function calls:
 13519 ;;		Nothing
 13520 ;; This function is called by:
 13521 ;;		_MessageRoutine
 13522 ;; This function uses a non-reentrant model
 13523 ;;
 13524                           
 13525                           	psect	text41
 13526  004332                     __ptext41:
 13527                           	opt stack 0
 13528  004332                     _Delay1KTCYx:
 13529                           	opt stack 24
 13530                           
 13531                           ; BSR set to: 0
 13532                           ;incstack = 0
 13533                           ;Delay1KTCYx@unit stored from wreg
 13534  004332  0100               	movlb	0	; () banked
 13535  004334  6F9F               	movwf	Delay1KTCYx@unit& (0+255),b
 13536  004336                     
 13537                           ; BSR set to: 0
 13538  004336  0EFA               	movlw	250
 13539  004338                     u7057:
 13540  004338  F000               	nop	
 13541  00433A  2EE8               	decfsz	wreg,f,c
 13542  00433C  D7FD               	goto	u7057
 13543  00433E  0100               	movlb	0	; () banked
 13544  004340  2F9F               	decfsz	Delay1KTCYx@unit& (0+255),f,b
 13545  004342  D7F9               	goto	l5582
 13546  004344  D000               	goto	l1046
 13547  004346                     l1046:
 13548                           
 13549                           ; BSR set to: 0
 13550  004346  0012               	return		;funcret
 13551  004348                     __end_of_Delay1KTCYx:
 13552                           	opt stack 0
 13553                           tblptru	equ	0xFF8
 13554                           tblptrh	equ	0xFF7
 13555                           tblptrl	equ	0xFF6
 13556                           tablat	equ	0xFF5
 13557                           prodh	equ	0xFF4
 13558                           prodl	equ	0xFF3
 13559                           indf0	equ	0xFEF
 13560                           postinc0	equ	0xFEE
 13561                           fsr0h	equ	0xFEA
 13562                           fsr0l	equ	0xFE9
 13563                           wreg	equ	0xFE8
 13564                           postinc1	equ	0xFE6
 13565                           postdec1	equ	0xFE5
 13566                           plusw1	equ	0xFE3
 13567                           fsr1h	equ	0xFE2
 13568                           fsr1l	equ	0xFE1
 13569                           indf2	equ	0xFDF
 13570                           postinc2	equ	0xFDE
 13571                           postdec2	equ	0xFDD
 13572                           plusw2	equ	0xFDB
 13573                           fsr2h	equ	0xFDA
 13574                           fsr2l	equ	0xFD9
 13575                           status	equ	0xFD8
 13576                           
 13577 ;; *************** function _InitUSART *****************
 13578 ;; Defined at:
 13579 ;;		line 55 in file "SerialFuncs.c"
 13580 ;; Parameters:    Size  Location     Type
 13581 ;;		None
 13582 ;; Auto vars:     Size  Location     Type
 13583 ;;		None
 13584 ;; Return value:  Size  Location     Type
 13585 ;;		None               void
 13586 ;; Registers used:
 13587 ;;		wreg, status,2, cstack
 13588 ;; Tracked objects:
 13589 ;;		On entry : 0/0
 13590 ;;		On exit  : 0/0
 13591 ;;		Unchanged: 0/0
 13592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13593 ;;      Params:         0       0       0       0       0       0       0
 13594 ;;      Locals:         0       0       0       0       0       0       0
 13595 ;;      Temps:          0       0       0       0       0       0       0
 13596 ;;      Totals:         0       0       0       0       0       0       0
 13597 ;;Total ram usage:        0 bytes
 13598 ;; Hardware stack levels used:    1
 13599 ;; Hardware stack levels required when called:    6
 13600 ;; This function calls:
 13601 ;;		_OpenUSART
 13602 ;; This function is called by:
 13603 ;;		_main
 13604 ;; This function uses a non-reentrant model
 13605 ;;
 13606                           
 13607                           	psect	text42
 13608  0042A2                     __ptext42:
 13609                           	opt stack 0
 13610  0042A2                     _InitUSART:
 13611                           	opt stack 24
 13612                           
 13613                           ;SerialFuncs.c: 57: TRISCbits.RC6 = 0;
 13614                           
 13615                           ; BSR set to: 0
 13616                           ;incstack = 0
 13617  0042A2  9C94               	bcf	3988,6,c	;volatile
 13618                           
 13619                           ;SerialFuncs.c: 58: TRISCbits.RC7 = 1;
 13620  0042A4  8E94               	bsf	3988,7,c	;volatile
 13621                           
 13622                           ;SerialFuncs.c: 60: UART1Config = 0b01111111 & 0b11111111 & 0b11111110 & 0b11111101 & 0b
      +                          11111111 ;
 13623  0042A6  0E7C               	movlw	124
 13624  0042A8  0100               	movlb	0	; () banked
 13625  0042AA  6FE0               	movwf	_UART1Config& (0+255),b
 13626                           
 13627                           ;SerialFuncs.c: 61: baud = 35;
 13628  0042AC  0E23               	movlw	35
 13629  0042AE  6E60               	movwf	_baud,c
 13630                           
 13631                           ; BSR set to: 0
 13632                           ;SerialFuncs.c: 62: OpenUSART(UART1Config,baud);
 13633  0042B0  C060  F09F         	movff	_baud,OpenUSART@spbrg
 13634  0042B4  0100               	movlb	0	; () banked
 13635  0042B6  6BA0               	clrf	(OpenUSART@spbrg+1)& (0+255),b
 13636  0042B8  0100               	movlb	0	; () banked
 13637  0042BA  51E0               	movf	_UART1Config& (0+255),w,b
 13638  0042BC  EC81  F01E         	call	_OpenUSART
 13639                           
 13640                           ;SerialFuncs.c: 63: BAUDCONbits.BRG16=1;
 13641  0042C0  86B8               	bsf	4024,3,c	;volatile
 13642  0042C2  0012               	return		;funcret
 13643  0042C4                     __end_of_InitUSART:
 13644                           	opt stack 0
 13645                           tblptru	equ	0xFF8
 13646                           tblptrh	equ	0xFF7
 13647                           tblptrl	equ	0xFF6
 13648                           tablat	equ	0xFF5
 13649                           prodh	equ	0xFF4
 13650                           prodl	equ	0xFF3
 13651                           indf0	equ	0xFEF
 13652                           postinc0	equ	0xFEE
 13653                           fsr0h	equ	0xFEA
 13654                           fsr0l	equ	0xFE9
 13655                           wreg	equ	0xFE8
 13656                           postinc1	equ	0xFE6
 13657                           postdec1	equ	0xFE5
 13658                           plusw1	equ	0xFE3
 13659                           fsr1h	equ	0xFE2
 13660                           fsr1l	equ	0xFE1
 13661                           indf2	equ	0xFDF
 13662                           postinc2	equ	0xFDE
 13663                           postdec2	equ	0xFDD
 13664                           plusw2	equ	0xFDB
 13665                           fsr2h	equ	0xFDA
 13666                           fsr2l	equ	0xFD9
 13667                           status	equ	0xFD8
 13668                           
 13669 ;; *************** function _OpenUSART *****************
 13670 ;; Defined at:
 13671 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 13672 ;; Parameters:    Size  Location     Type
 13673 ;;  config          1    wreg     unsigned char 
 13674 ;;  spbrg           2   31[BANK0 ] unsigned int 
 13675 ;; Auto vars:     Size  Location     Type
 13676 ;;  config          1   33[BANK0 ] unsigned char 
 13677 ;; Return value:  Size  Location     Type
 13678 ;;		None               void
 13679 ;; Registers used:
 13680 ;;		wreg, status,2
 13681 ;; Tracked objects:
 13682 ;;		On entry : 0/0
 13683 ;;		On exit  : 0/0
 13684 ;;		Unchanged: 0/0
 13685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13686 ;;      Params:         0       2       0       0       0       0       0
 13687 ;;      Locals:         0       1       0       0       0       0       0
 13688 ;;      Temps:          0       0       0       0       0       0       0
 13689 ;;      Totals:         0       3       0       0       0       0       0
 13690 ;;Total ram usage:        3 bytes
 13691 ;; Hardware stack levels used:    1
 13692 ;; Hardware stack levels required when called:    5
 13693 ;; This function calls:
 13694 ;;		Nothing
 13695 ;; This function is called by:
 13696 ;;		_InitUSART
 13697 ;; This function uses a non-reentrant model
 13698 ;;
 13699                           
 13700                           	psect	text43
 13701  003D02                     __ptext43:
 13702                           	opt stack 0
 13703  003D02                     _OpenUSART:
 13704                           	opt stack 24
 13705                           
 13706                           ;incstack = 0
 13707                           ;OpenUSART@config stored from wreg
 13708  003D02  0100               	movlb	0	; () banked
 13709  003D04  6FA1               	movwf	OpenUSART@config& (0+255),b
 13710                           
 13711                           ; BSR set to: 0
 13712  003D06  0E00               	movlw	0
 13713  003D08  6EAC               	movwf	4012,c	;volatile
 13714  003D0A  0E00               	movlw	0
 13715  003D0C  6EAB               	movwf	4011,c	;volatile
 13716                           
 13717                           ; BSR set to: 0
 13718  003D0E  0100               	movlb	0	; () banked
 13719  003D10  A1A1               	btfss	OpenUSART@config& (0+255),0,b
 13720  003D12  D002               	goto	l3910
 13721                           
 13722                           ; BSR set to: 0
 13723  003D14  88AC               	bsf	4012,4,c	;volatile
 13724  003D16  D000               	goto	l3910
 13725  003D18                     l3910:
 13726                           
 13727                           ; BSR set to: 0
 13728  003D18  0100               	movlb	0	; () banked
 13729  003D1A  A3A1               	btfss	OpenUSART@config& (0+255),1,b
 13730  003D1C  D003               	goto	l3914
 13731                           
 13732                           ; BSR set to: 0
 13733  003D1E  8CAC               	bsf	4012,6,c	;volatile
 13734  003D20  8CAB               	bsf	4011,6,c	;volatile
 13735  003D22  D000               	goto	l3914
 13736  003D24                     l3914:
 13737                           
 13738                           ; BSR set to: 0
 13739  003D24  0100               	movlb	0	; () banked
 13740  003D26  A5A1               	btfss	OpenUSART@config& (0+255),2,b
 13741  003D28  D002               	goto	l3918
 13742                           
 13743                           ; BSR set to: 0
 13744  003D2A  8EAC               	bsf	4012,7,c	;volatile
 13745  003D2C  D000               	goto	l3918
 13746  003D2E                     l3918:
 13747                           
 13748                           ; BSR set to: 0
 13749  003D2E  0100               	movlb	0	; () banked
 13750  003D30  A7A1               	btfss	OpenUSART@config& (0+255),3,b
 13751  003D32  D002               	goto	l763
 13752                           
 13753                           ; BSR set to: 0
 13754  003D34  88AB               	bsf	4011,4,c	;volatile
 13755  003D36  D002               	goto	l3922
 13756  003D38                     l763:
 13757                           
 13758                           ; BSR set to: 0
 13759  003D38  8AAB               	bsf	4011,5,c	;volatile
 13760  003D3A  D000               	goto	l3922
 13761  003D3C                     l3922:
 13762                           
 13763                           ; BSR set to: 0
 13764  003D3C  0100               	movlb	0	; () banked
 13765  003D3E  B9A1               	btfsc	OpenUSART@config& (0+255),4,b
 13766                           
 13767                           ; BSR set to: 0
 13768  003D40  84AC               	bsf	4012,2,c	;volatile
 13769                           
 13770                           ; BSR set to: 0
 13771  003D42  989E               	bcf	3998,4,c	;volatile
 13772                           
 13773                           ; BSR set to: 0
 13774  003D44  0100               	movlb	0	; () banked
 13775  003D46  ABA1               	btfss	OpenUSART@config& (0+255),5,b
 13776  003D48  D002               	goto	l3930
 13777                           
 13778                           ; BSR set to: 0
 13779  003D4A  86AB               	bsf	4011,3,c	;volatile
 13780  003D4C  D000               	goto	l3930
 13781  003D4E                     l3930:
 13782                           
 13783                           ; BSR set to: 0
 13784  003D4E  0100               	movlb	0	; () banked
 13785  003D50  ADA1               	btfss	OpenUSART@config& (0+255),6,b
 13786  003D52  D002               	goto	l767
 13787                           
 13788                           ; BSR set to: 0
 13789  003D54  8A9D               	bsf	3997,5,c	;volatile
 13790  003D56  D001               	goto	l768
 13791  003D58                     l767:
 13792                           
 13793                           ; BSR set to: 0
 13794  003D58  9A9D               	bcf	3997,5,c	;volatile
 13795  003D5A                     l768:
 13796                           
 13797                           ; BSR set to: 0
 13798  003D5A  9A9E               	bcf	3998,5,c	;volatile
 13799                           
 13800                           ; BSR set to: 0
 13801  003D5C  0100               	movlb	0	; () banked
 13802  003D5E  AFA1               	btfss	OpenUSART@config& (0+255),7,b
 13803  003D60  D002               	goto	l769
 13804                           
 13805                           ; BSR set to: 0
 13806  003D62  889D               	bsf	3997,4,c	;volatile
 13807  003D64  D001               	goto	l770
 13808  003D66                     l769:
 13809                           
 13810                           ; BSR set to: 0
 13811  003D66  989D               	bcf	3997,4,c	;volatile
 13812  003D68                     l770:
 13813                           
 13814                           ; BSR set to: 0
 13815  003D68  C09F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 13816                           
 13817                           ; BSR set to: 0
 13818  003D6C  0100               	movlb	0	; () banked
 13819  003D6E  51A0               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 13820  003D70  6EB0               	movwf	4016,c	;volatile
 13821                           
 13822                           ; BSR set to: 0
 13823  003D72  8AAC               	bsf	4012,5,c	;volatile
 13824                           
 13825                           ; BSR set to: 0
 13826  003D74  8EAB               	bsf	4011,7,c	;volatile
 13827                           
 13828                           ; BSR set to: 0
 13829  003D76  9C94               	bcf	3988,6,c	;volatile
 13830                           
 13831                           ; BSR set to: 0
 13832  003D78  8E94               	bsf	3988,7,c	;volatile
 13833                           
 13834                           ; BSR set to: 0
 13835  003D7A  B8AC               	btfsc	4012,4,c	;volatile
 13836                           
 13837                           ; BSR set to: 0
 13838  003D7C  BEAC               	btfsc	4012,7,c	;volatile
 13839  003D7E  D002               	goto	l772
 13840                           
 13841                           ; BSR set to: 0
 13842  003D80  8C94               	bsf	3988,6,c	;volatile
 13843  003D82  D000               	goto	l772
 13844  003D84                     l772:
 13845                           
 13846                           ; BSR set to: 0
 13847  003D84  0012               	return		;funcret
 13848  003D86                     __end_of_OpenUSART:
 13849                           	opt stack 0
 13850                           tblptru	equ	0xFF8
 13851                           tblptrh	equ	0xFF7
 13852                           tblptrl	equ	0xFF6
 13853                           tablat	equ	0xFF5
 13854                           prodh	equ	0xFF4
 13855                           prodl	equ	0xFF3
 13856                           indf0	equ	0xFEF
 13857                           postinc0	equ	0xFEE
 13858                           fsr0h	equ	0xFEA
 13859                           fsr0l	equ	0xFE9
 13860                           wreg	equ	0xFE8
 13861                           postinc1	equ	0xFE6
 13862                           postdec1	equ	0xFE5
 13863                           plusw1	equ	0xFE3
 13864                           fsr1h	equ	0xFE2
 13865                           fsr1l	equ	0xFE1
 13866                           indf2	equ	0xFDF
 13867                           postinc2	equ	0xFDE
 13868                           postdec2	equ	0xFDD
 13869                           plusw2	equ	0xFDB
 13870                           fsr2h	equ	0xFDA
 13871                           fsr2l	equ	0xFD9
 13872                           status	equ	0xFD8
 13873                           
 13874 ;; *************** function _InitTimer0 *****************
 13875 ;; Defined at:
 13876 ;;		line 10 in file "TimingFuncs.c"
 13877 ;; Parameters:    Size  Location     Type
 13878 ;;		None
 13879 ;; Auto vars:     Size  Location     Type
 13880 ;;		None
 13881 ;; Return value:  Size  Location     Type
 13882 ;;		None               void
 13883 ;; Registers used:
 13884 ;;		wreg, status,2, status,0, cstack
 13885 ;; Tracked objects:
 13886 ;;		On entry : 0/0
 13887 ;;		On exit  : 0/0
 13888 ;;		Unchanged: 0/0
 13889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13890 ;;      Params:         0       0       0       0       0       0       0
 13891 ;;      Locals:         0       0       0       0       0       0       0
 13892 ;;      Temps:          0       0       0       0       0       0       0
 13893 ;;      Totals:         0       0       0       0       0       0       0
 13894 ;;Total ram usage:        0 bytes
 13895 ;; Hardware stack levels used:    1
 13896 ;; Hardware stack levels required when called:    6
 13897 ;; This function calls:
 13898 ;;		_OpenTimer0
 13899 ;; This function is called by:
 13900 ;;		_main
 13901 ;; This function uses a non-reentrant model
 13902 ;;
 13903                           
 13904                           	psect	text44
 13905  0043BA                     __ptext44:
 13906                           	opt stack 0
 13907  0043BA                     _InitTimer0:
 13908                           	opt stack 24
 13909                           
 13910                           ;TimingFuncs.c: 12: Timer0Config = 0b11111111 & 0b10111111 & 0b11011111 & 0b11111111 ;
 13911                           
 13912                           ; BSR set to: 0
 13913                           ;incstack = 0
 13914  0043BA  0E9F               	movlw	159
 13915  0043BC  6E44               	movwf	_Timer0Config,c
 13916                           
 13917                           ;TimingFuncs.c: 13: OpenTimer0(Timer0Config);
 13918  0043BE  5044               	movf	_Timer0Config,w,c
 13919  0043C0  EC2C  F021         	call	_OpenTimer0
 13920  0043C4  0012               	return		;funcret
 13921  0043C6                     __end_of_InitTimer0:
 13922                           	opt stack 0
 13923                           tblptru	equ	0xFF8
 13924                           tblptrh	equ	0xFF7
 13925                           tblptrl	equ	0xFF6
 13926                           tablat	equ	0xFF5
 13927                           prodh	equ	0xFF4
 13928                           prodl	equ	0xFF3
 13929                           indf0	equ	0xFEF
 13930                           postinc0	equ	0xFEE
 13931                           fsr0h	equ	0xFEA
 13932                           fsr0l	equ	0xFE9
 13933                           wreg	equ	0xFE8
 13934                           postinc1	equ	0xFE6
 13935                           postdec1	equ	0xFE5
 13936                           plusw1	equ	0xFE3
 13937                           fsr1h	equ	0xFE2
 13938                           fsr1l	equ	0xFE1
 13939                           indf2	equ	0xFDF
 13940                           postinc2	equ	0xFDE
 13941                           postdec2	equ	0xFDD
 13942                           plusw2	equ	0xFDB
 13943                           fsr2h	equ	0xFDA
 13944                           fsr2l	equ	0xFD9
 13945                           status	equ	0xFD8
 13946                           
 13947 ;; *************** function _OpenTimer0 *****************
 13948 ;; Defined at:
 13949 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\Timers\t0open.c"
 13950 ;; Parameters:    Size  Location     Type
 13951 ;;  config          1    wreg     unsigned char 
 13952 ;; Auto vars:     Size  Location     Type
 13953 ;;  config          1   31[BANK0 ] unsigned char 
 13954 ;; Return value:  Size  Location     Type
 13955 ;;		None               void
 13956 ;; Registers used:
 13957 ;;		wreg, status,2, status,0
 13958 ;; Tracked objects:
 13959 ;;		On entry : 0/0
 13960 ;;		On exit  : 0/0
 13961 ;;		Unchanged: 0/0
 13962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13963 ;;      Params:         0       0       0       0       0       0       0
 13964 ;;      Locals:         0       1       0       0       0       0       0
 13965 ;;      Temps:          0       0       0       0       0       0       0
 13966 ;;      Totals:         0       1       0       0       0       0       0
 13967 ;;Total ram usage:        1 bytes
 13968 ;; Hardware stack levels used:    1
 13969 ;; Hardware stack levels required when called:    5
 13970 ;; This function calls:
 13971 ;;		Nothing
 13972 ;; This function is called by:
 13973 ;;		_InitTimer0
 13974 ;; This function uses a non-reentrant model
 13975 ;;
 13976                           
 13977                           	psect	text45
 13978  004258                     __ptext45:
 13979                           	opt stack 0
 13980  004258                     _OpenTimer0:
 13981                           	opt stack 24
 13982                           
 13983                           ;incstack = 0
 13984                           ;OpenTimer0@config stored from wreg
 13985  004258  0100               	movlb	0	; () banked
 13986  00425A  6F9F               	movwf	OpenTimer0@config& (0+255),b
 13987                           
 13988                           ; BSR set to: 0
 13989  00425C  0100               	movlb	0	; () banked
 13990  00425E  519F               	movf	OpenTimer0@config& (0+255),w,b
 13991  004260  0B7F               	andlw	127
 13992  004262  6ED5               	movwf	4053,c	;volatile
 13993                           
 13994                           ; BSR set to: 0
 13995  004264  0E00               	movlw	0
 13996  004266  6ED7               	movwf	4055,c	;volatile
 13997                           
 13998                           ; BSR set to: 0
 13999  004268  0E00               	movlw	0
 14000  00426A  6ED6               	movwf	4054,c	;volatile
 14001                           
 14002                           ; BSR set to: 0
 14003  00426C  94F2               	bcf	intcon,2,c	;volatile
 14004                           
 14005                           ; BSR set to: 0
 14006  00426E  0100               	movlb	0	; () banked
 14007  004270  AF9F               	btfss	OpenTimer0@config& (0+255),7,b
 14008  004272  D002               	goto	l711
 14009                           
 14010                           ; BSR set to: 0
 14011  004274  8AF2               	bsf	intcon,5,c	;volatile
 14012  004276  D001               	goto	l712
 14013  004278                     l711:
 14014                           
 14015                           ; BSR set to: 0
 14016  004278  9AF2               	bcf	intcon,5,c	;volatile
 14017  00427A                     l712:
 14018                           
 14019                           ; BSR set to: 0
 14020  00427A  8ED5               	bsf	4053,7,c	;volatile
 14021                           
 14022                           ; BSR set to: 0
 14023  00427C  0012               	return		;funcret
 14024  00427E                     __end_of_OpenTimer0:
 14025                           	opt stack 0
 14026                           tblptru	equ	0xFF8
 14027                           tblptrh	equ	0xFF7
 14028                           tblptrl	equ	0xFF6
 14029                           tablat	equ	0xFF5
 14030                           prodh	equ	0xFF4
 14031                           prodl	equ	0xFF3
 14032                           intcon	equ	0xFF2
 14033                           indf0	equ	0xFEF
 14034                           postinc0	equ	0xFEE
 14035                           fsr0h	equ	0xFEA
 14036                           fsr0l	equ	0xFE9
 14037                           wreg	equ	0xFE8
 14038                           postinc1	equ	0xFE6
 14039                           postdec1	equ	0xFE5
 14040                           plusw1	equ	0xFE3
 14041                           fsr1h	equ	0xFE2
 14042                           fsr1l	equ	0xFE1
 14043                           indf2	equ	0xFDF
 14044                           postinc2	equ	0xFDE
 14045                           postdec2	equ	0xFDD
 14046                           plusw2	equ	0xFDB
 14047                           fsr2h	equ	0xFDA
 14048                           fsr2l	equ	0xFD9
 14049                           status	equ	0xFD8
 14050                           
 14051 ;; *************** function _InitInterrupts *****************
 14052 ;; Defined at:
 14053 ;;		line 13 in file "InterruptFuncs.c"
 14054 ;; Parameters:    Size  Location     Type
 14055 ;;		None
 14056 ;; Auto vars:     Size  Location     Type
 14057 ;;		None
 14058 ;; Return value:  Size  Location     Type
 14059 ;;		None               void
 14060 ;; Registers used:
 14061 ;;		None
 14062 ;; Tracked objects:
 14063 ;;		On entry : 0/0
 14064 ;;		On exit  : 0/0
 14065 ;;		Unchanged: 0/0
 14066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14067 ;;      Params:         0       0       0       0       0       0       0
 14068 ;;      Locals:         0       0       0       0       0       0       0
 14069 ;;      Temps:          0       0       0       0       0       0       0
 14070 ;;      Totals:         0       0       0       0       0       0       0
 14071 ;;Total ram usage:        0 bytes
 14072 ;; Hardware stack levels used:    1
 14073 ;; Hardware stack levels required when called:    5
 14074 ;; This function calls:
 14075 ;;		Nothing
 14076 ;; This function is called by:
 14077 ;;		_main
 14078 ;; This function uses a non-reentrant model
 14079 ;;
 14080                           
 14081                           	psect	text46
 14082  00436E                     __ptext46:
 14083                           	opt stack 0
 14084  00436E                     _InitInterrupts:
 14085                           	opt stack 25
 14086                           
 14087                           ;InterruptFuncs.c: 15: INTCONbits.PEIE=1;
 14088                           
 14089                           ; BSR set to: 0
 14090                           ;incstack = 0
 14091  00436E  8CF2               	bsf	intcon,6,c	;volatile
 14092                           
 14093                           ;InterruptFuncs.c: 16: RCONbits.IPEN=1;
 14094  004370  8ED0               	bsf	4048,7,c	;volatile
 14095                           
 14096                           ;InterruptFuncs.c: 17: INTCONbits.GIE=1;
 14097  004372  8EF2               	bsf	intcon,7,c	;volatile
 14098                           
 14099                           ;InterruptFuncs.c: 18: INTCONbits.GIEH=1;
 14100  004374  8EF2               	bsf	intcon,7,c	;volatile
 14101                           
 14102                           ;InterruptFuncs.c: 19: INTCONbits.GIEL=1;
 14103  004376  8CF2               	bsf	intcon,6,c	;volatile
 14104                           
 14105                           ;InterruptFuncs.c: 20: INTCON2bits.TMR0IP=1;
 14106  004378  84F1               	bsf	intcon2,2,c	;volatile
 14107                           
 14108                           ;InterruptFuncs.c: 21: PIR1bits.RCIF=1;
 14109  00437A  8A9E               	bsf	3998,5,c	;volatile
 14110                           
 14111                           ;InterruptFuncs.c: 22: IPR1bits.RCIP=0;
 14112  00437C  9A9F               	bcf	3999,5,c	;volatile
 14113  00437E  0012               	return		;funcret
 14114  004380                     __end_of_InitInterrupts:
 14115                           	opt stack 0
 14116                           tblptru	equ	0xFF8
 14117                           tblptrh	equ	0xFF7
 14118                           tblptrl	equ	0xFF6
 14119                           tablat	equ	0xFF5
 14120                           prodh	equ	0xFF4
 14121                           prodl	equ	0xFF3
 14122                           intcon	equ	0xFF2
 14123                           intcon2	equ	0xFF1
 14124                           indf0	equ	0xFEF
 14125                           postinc0	equ	0xFEE
 14126                           fsr0h	equ	0xFEA
 14127                           fsr0l	equ	0xFE9
 14128                           wreg	equ	0xFE8
 14129                           postinc1	equ	0xFE6
 14130                           postdec1	equ	0xFE5
 14131                           plusw1	equ	0xFE3
 14132                           fsr1h	equ	0xFE2
 14133                           fsr1l	equ	0xFE1
 14134                           indf2	equ	0xFDF
 14135                           postinc2	equ	0xFDE
 14136                           postdec2	equ	0xFDD
 14137                           plusw2	equ	0xFDB
 14138                           fsr2h	equ	0xFDA
 14139                           fsr2l	equ	0xFD9
 14140                           status	equ	0xFD8
 14141                           
 14142 ;; *************** function _Delay10KTCYx *****************
 14143 ;; Defined at:
 14144 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d10ktcyx.c"
 14145 ;; Parameters:    Size  Location     Type
 14146 ;;  unit            1    wreg     unsigned char 
 14147 ;; Auto vars:     Size  Location     Type
 14148 ;;  unit            1   32[BANK0 ] unsigned char 
 14149 ;; Return value:  Size  Location     Type
 14150 ;;		None               void
 14151 ;; Registers used:
 14152 ;;		wreg
 14153 ;; Tracked objects:
 14154 ;;		On entry : 0/0
 14155 ;;		On exit  : 0/0
 14156 ;;		Unchanged: 0/0
 14157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14158 ;;      Params:         0       0       0       0       0       0       0
 14159 ;;      Locals:         0       1       0       0       0       0       0
 14160 ;;      Temps:          0       1       0       0       0       0       0
 14161 ;;      Totals:         0       2       0       0       0       0       0
 14162 ;;Total ram usage:        2 bytes
 14163 ;; Hardware stack levels used:    1
 14164 ;; Hardware stack levels required when called:    5
 14165 ;; This function calls:
 14166 ;;		Nothing
 14167 ;; This function is called by:
 14168 ;;		_main
 14169 ;; This function uses a non-reentrant model
 14170 ;;
 14171                           
 14172                           	psect	text47
 14173  0042E6                     __ptext47:
 14174                           	opt stack 0
 14175  0042E6                     _Delay10KTCYx:
 14176                           	opt stack 25
 14177                           
 14178                           ;incstack = 0
 14179                           ;Delay10KTCYx@unit stored from wreg
 14180  0042E6  0100               	movlb	0	; () banked
 14181  0042E8  6FA0               	movwf	Delay10KTCYx@unit& (0+255),b
 14182  0042EA                     
 14183                           ; BSR set to: 0
 14184  0042EA  0E0D               	movlw	13
 14185  0042EC  0100               	movlb	0	; () banked
 14186  0042EE  6F9F               	movwf	??_Delay10KTCYx& (0+255),b
 14187  0042F0  0EFC               	movlw	252
 14188  0042F2                     u7067:
 14189  0042F2  2EE8               	decfsz	wreg,f,c
 14190  0042F4  D7FE               	goto	u7067
 14191  0042F6  2F9F               	decfsz	??_Delay10KTCYx& (0+255),f,b
 14192  0042F8  D7FC               	goto	u7067
 14193  0042FA  0100               	movlb	0	; () banked
 14194  0042FC  2FA0               	decfsz	Delay10KTCYx@unit& (0+255),f,b
 14195  0042FE  D7F5               	goto	l4214
 14196  004300  D000               	goto	l1032
 14197  004302                     l1032:
 14198                           
 14199                           ; BSR set to: 0
 14200  004302  0012               	return		;funcret
 14201  004304                     __end_of_Delay10KTCYx:
 14202                           	opt stack 0
 14203                           tblptru	equ	0xFF8
 14204                           tblptrh	equ	0xFF7
 14205                           tblptrl	equ	0xFF6
 14206                           tablat	equ	0xFF5
 14207                           prodh	equ	0xFF4
 14208                           prodl	equ	0xFF3
 14209                           intcon	equ	0xFF2
 14210                           intcon2	equ	0xFF1
 14211                           indf0	equ	0xFEF
 14212                           postinc0	equ	0xFEE
 14213                           fsr0h	equ	0xFEA
 14214                           fsr0l	equ	0xFE9
 14215                           wreg	equ	0xFE8
 14216                           postinc1	equ	0xFE6
 14217                           postdec1	equ	0xFE5
 14218                           plusw1	equ	0xFE3
 14219                           fsr1h	equ	0xFE2
 14220                           fsr1l	equ	0xFE1
 14221                           indf2	equ	0xFDF
 14222                           postinc2	equ	0xFDE
 14223                           postdec2	equ	0xFDD
 14224                           plusw2	equ	0xFDB
 14225                           fsr2h	equ	0xFDA
 14226                           fsr2l	equ	0xFD9
 14227                           status	equ	0xFD8
 14228                           
 14229 ;; *************** function _ConfigADC *****************
 14230 ;; Defined at:
 14231 ;;		line 17 in file "AccelerationFuncs.c"
 14232 ;; Parameters:    Size  Location     Type
 14233 ;;		None
 14234 ;; Auto vars:     Size  Location     Type
 14235 ;;		None
 14236 ;; Return value:  Size  Location     Type
 14237 ;;		None               void
 14238 ;; Registers used:
 14239 ;;		wreg, status,2
 14240 ;; Tracked objects:
 14241 ;;		On entry : 0/0
 14242 ;;		On exit  : 0/0
 14243 ;;		Unchanged: 0/0
 14244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14245 ;;      Params:         0       0       0       0       0       0       0
 14246 ;;      Locals:         0       0       0       0       0       0       0
 14247 ;;      Temps:          0       0       0       0       0       0       0
 14248 ;;      Totals:         0       0       0       0       0       0       0
 14249 ;;Total ram usage:        0 bytes
 14250 ;; Hardware stack levels used:    1
 14251 ;; Hardware stack levels required when called:    5
 14252 ;; This function calls:
 14253 ;;		Nothing
 14254 ;; This function is called by:
 14255 ;;		_main
 14256 ;; This function uses a non-reentrant model
 14257 ;;
 14258                           
 14259                           	psect	text48
 14260  00439E                     __ptext48:
 14261                           	opt stack 0
 14262  00439E                     _ConfigADC:
 14263                           	opt stack 25
 14264                           
 14265                           ;AccelerationFuncs.c: 19: ADCON1=0b00011000;
 14266                           
 14267                           ; BSR set to: 0
 14268                           ;incstack = 0
 14269  00439E  0E18               	movlw	24
 14270  0043A0  6EC1               	movwf	4033,c	;volatile
 14271                           
 14272                           ;AccelerationFuncs.c: 20: ADCON2=0b10111111;
 14273  0043A2  0EBF               	movlw	191
 14274  0043A4  6EC0               	movwf	4032,c	;volatile
 14275                           
 14276                           ;AccelerationFuncs.c: 21: ADCON0=0b00010001;
 14277  0043A6  0E11               	movlw	17
 14278  0043A8  6EC2               	movwf	4034,c	;volatile
 14279  0043AA  0012               	return		;funcret
 14280  0043AC                     __end_of_ConfigADC:
 14281                           	opt stack 0
 14282                           tblptru	equ	0xFF8
 14283                           tblptrh	equ	0xFF7
 14284                           tblptrl	equ	0xFF6
 14285                           tablat	equ	0xFF5
 14286                           prodh	equ	0xFF4
 14287                           prodl	equ	0xFF3
 14288                           intcon	equ	0xFF2
 14289                           intcon2	equ	0xFF1
 14290                           indf0	equ	0xFEF
 14291                           postinc0	equ	0xFEE
 14292                           fsr0h	equ	0xFEA
 14293                           fsr0l	equ	0xFE9
 14294                           wreg	equ	0xFE8
 14295                           postinc1	equ	0xFE6
 14296                           postdec1	equ	0xFE5
 14297                           plusw1	equ	0xFE3
 14298                           fsr1h	equ	0xFE2
 14299                           fsr1l	equ	0xFE1
 14300                           indf2	equ	0xFDF
 14301                           postinc2	equ	0xFDE
 14302                           postdec2	equ	0xFDD
 14303                           plusw2	equ	0xFDB
 14304                           fsr2h	equ	0xFDA
 14305                           fsr2l	equ	0xFD9
 14306                           status	equ	0xFD8
 14307                           
 14308 ;; *************** function _SerialRxPinInterrupt *****************
 14309 ;; Defined at:
 14310 ;;		line 15 in file "SerialFuncs.c"
 14311 ;; Parameters:    Size  Location     Type
 14312 ;;		None
 14313 ;; Auto vars:     Size  Location     Type
 14314 ;;		None
 14315 ;; Return value:  Size  Location     Type
 14316 ;;		None               void
 14317 ;; Registers used:
 14318 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14319 ;; Tracked objects:
 14320 ;;		On entry : 0/0
 14321 ;;		On exit  : 0/0
 14322 ;;		Unchanged: 0/0
 14323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14324 ;;      Params:         0       0       0       0       0       0       0
 14325 ;;      Locals:         0       0       0       0       0       0       0
 14326 ;;      Temps:          0      18       0       0       0       0       0
 14327 ;;      Totals:         0      18       0       0       0       0       0
 14328 ;;Total ram usage:       18 bytes
 14329 ;; Hardware stack levels used:    1
 14330 ;; Hardware stack levels required when called:    4
 14331 ;; This function calls:
 14332 ;;		_ReadUSART
 14333 ;;		i1_printf
 14334 ;;		i1_strcpy
 14335 ;; This function is called by:
 14336 ;;		Interrupt level 1
 14337 ;; This function uses a non-reentrant model
 14338 ;;
 14339                           
 14340                           	psect	intcodelo
 14341  000018                     __pintcodelo:
 14342                           	opt stack 0
 14343  000018                     _SerialRxPinInterrupt:
 14344                           	opt stack 20
 14345                           
 14346                           ;incstack = 0
 14347  000018  CFD8 F08E          	movff	status,??_SerialRxPinInterrupt+1
 14348  00001C  CFE8 F08F          	movff	wreg,??_SerialRxPinInterrupt+2
 14349  000020  CFE0 F090          	movff	bsr,??_SerialRxPinInterrupt+3
 14350  000024  CFFA F091          	movff	pclath,??_SerialRxPinInterrupt+4
 14351  000028  CFFB F092          	movff	pclatu,??_SerialRxPinInterrupt+5
 14352  00002C  CFE9 F093          	movff	fsr0l,??_SerialRxPinInterrupt+6
 14353  000030  CFEA F094          	movff	fsr0h,??_SerialRxPinInterrupt+7
 14354  000034  CFE1 F095          	movff	fsr1l,??_SerialRxPinInterrupt+8
 14355  000038  CFE2 F096          	movff	fsr1h,??_SerialRxPinInterrupt+9
 14356  00003C  CFD9 F097          	movff	fsr2l,??_SerialRxPinInterrupt+10
 14357  000040  CFDA F098          	movff	fsr2h,??_SerialRxPinInterrupt+11
 14358  000044  CFF3 F099          	movff	prodl,??_SerialRxPinInterrupt+12
 14359  000048  CFF4 F09A          	movff	prodh,??_SerialRxPinInterrupt+13
 14360  00004C  CFF6 F09B          	movff	tblptrl,??_SerialRxPinInterrupt+14
 14361  000050  CFF7 F09C          	movff	tblptrh,??_SerialRxPinInterrupt+15
 14362  000054  CFF8 F09D          	movff	tblptru,??_SerialRxPinInterrupt+16
 14363  000058  CFF5 F09E          	movff	tablat,??_SerialRxPinInterrupt+17
 14364                           
 14365                           ;SerialFuncs.c: 18: if(PIR1bits.RCIF == 1)
 14366  00005C  AA9E               	btfss	3998,5,c	;volatile
 14367  00005E  D06F               	goto	i1l313
 14368                           
 14369                           ;SerialFuncs.c: 19: {
 14370                           ;SerialFuncs.c: 20: if(i<100)
 14371  000060  BE35               	btfsc	_i+1,7,c
 14372  000062  D006               	goto	i1l6068
 14373  000064  5035               	movf	_i+1,w,c
 14374  000066  E148               	bnz	i1l6092
 14375  000068  0E64               	movlw	100
 14376  00006A  5C34               	subwf	_i,w,c
 14377  00006C  B0D8               	btfsc	status,0,c
 14378  00006E  D044               	goto	i1l6092
 14379  000070                     i1l6068:
 14380                           
 14381                           ;SerialFuncs.c: 21: {
 14382                           ;SerialFuncs.c: 22: MessageBuffer[i] = ReadUSART();
 14383  000070  0EE8               	movlw	low _MessageBuffer
 14384  000072  2434               	addwf	_i,w,c
 14385  000074  6ED9               	movwf	fsr2l,c
 14386  000076  0E01               	movlw	high _MessageBuffer
 14387  000078  2035               	addwfc	_i+1,w,c
 14388  00007A  6EDA               	movwf	fsr2h,c
 14389  00007C  EC3F  F021         	call	_ReadUSART	;wreg free
 14390  000080  6EDF               	movwf	indf2,c
 14391                           
 14392                           ;SerialFuncs.c: 26: if(MessageBuffer[i] == 0x0D)
 14393  000082  0EE8               	movlw	low _MessageBuffer
 14394  000084  2434               	addwf	_i,w,c
 14395  000086  6ED9               	movwf	fsr2l,c
 14396  000088  0E01               	movlw	high _MessageBuffer
 14397  00008A  2035               	addwfc	_i+1,w,c
 14398  00008C  6EDA               	movwf	fsr2h,c
 14399  00008E  0E0D               	movlw	13
 14400  000090  18DE               	xorwf	postinc2,w,c
 14401  000092  A4D8               	btfss	status,2,c
 14402  000094  D02D               	goto	i1l6088
 14403                           
 14404                           ;SerialFuncs.c: 27: {
 14405                           ;SerialFuncs.c: 28: NewMessage=1;
 14406  000096  0E00               	movlw	0
 14407  000098  6E2D               	movwf	_NewMessage+1,c
 14408  00009A  0E01               	movlw	1
 14409  00009C  6E2C               	movwf	_NewMessage,c
 14410                           
 14411                           ;SerialFuncs.c: 29: printf(MessageBuffer);
 14412  00009E  0EE8               	movlw	low _MessageBuffer
 14413  0000A0  6E22               	movwf	i1printf@f,c
 14414  0000A2  0E01               	movlw	high _MessageBuffer
 14415  0000A4  6E23               	movwf	i1printf@f+1,c
 14416  0000A6  ECE6  F00B         	call	i1_printf	;wreg free
 14417                           
 14418                           ;SerialFuncs.c: 30: strcpy(LastMessage,MessageBuffer);
 14419  0000AA  0ED4               	movlw	low _LastMessage
 14420  0000AC  6E16               	movwf	i1strcpy@to,c
 14421  0000AE  0E01               	movlw	high _LastMessage
 14422  0000B0  6E17               	movwf	i1strcpy@to+1,c
 14423  0000B2  0EE8               	movlw	low _MessageBuffer
 14424  0000B4  6E18               	movwf	i1strcpy@from,c
 14425  0000B6  0E01               	movlw	high _MessageBuffer
 14426  0000B8  6E19               	movwf	i1strcpy@from+1,c
 14427  0000BA  EC94  F020         	call	i1_strcpy	;wreg free
 14428                           
 14429                           ;SerialFuncs.c: 31: for(;i>0;i--)
 14430  0000BE  D00C               	goto	i1l6082
 14431  0000C0                     i1l6078:
 14432                           
 14433                           ;SerialFuncs.c: 32: MessageBuffer[i] = 0x00;
 14434  0000C0  0EE8               	movlw	low _MessageBuffer
 14435  0000C2  2434               	addwf	_i,w,c
 14436  0000C4  6ED9               	movwf	fsr2l,c
 14437  0000C6  0E01               	movlw	high _MessageBuffer
 14438  0000C8  2035               	addwfc	_i+1,w,c
 14439  0000CA  6EDA               	movwf	fsr2h,c
 14440  0000CC  0E00               	movlw	0
 14441  0000CE  6EDF               	movwf	indf2,c
 14442  0000D0  0634               	decf	_i,f,c
 14443  0000D2  A0D8               	btfss	status,0,c
 14444  0000D4  0635               	decf	_i+1,f,c
 14445  0000D6  D000               	goto	i1l6082
 14446  0000D8                     i1l6082:
 14447  0000D8  BE35               	btfsc	_i+1,7,c
 14448  0000DA  D005               	goto	i1l6084
 14449  0000DC  5035               	movf	_i+1,w,c
 14450  0000DE  E1F0               	bnz	i1l6078
 14451  0000E0  0434               	decf	_i,w,c
 14452  0000E2  B0D8               	btfsc	status,0,c
 14453  0000E4  D7ED               	goto	i1l6078
 14454  0000E6                     i1l6084:
 14455                           
 14456                           ;SerialFuncs.c: 33: i=0;
 14457  0000E6  0E00               	movlw	0
 14458  0000E8  6E35               	movwf	_i+1,c
 14459  0000EA  0E00               	movlw	0
 14460  0000EC  6E34               	movwf	_i,c
 14461                           
 14462                           ;SerialFuncs.c: 34: return;
 14463  0000EE  D027               	goto	i1l313
 14464  0000F0                     i1l6088:
 14465                           
 14466                           ;SerialFuncs.c: 35: }
 14467                           ;SerialFuncs.c: 36: i++;
 14468  0000F0  4A34               	infsnz	_i,f,c
 14469  0000F2  2A35               	incf	_i+1,f,c
 14470                           
 14471                           ;SerialFuncs.c: 37: PIR1bits.RCIF = 0;
 14472  0000F4  9A9E               	bcf	3998,5,c	;volatile
 14473                           
 14474                           ;SerialFuncs.c: 38: }
 14475  0000F6  D023               	goto	i1l313
 14476  0000F8                     i1l6092:
 14477                           
 14478                           ;SerialFuncs.c: 39: else
 14479                           ;SerialFuncs.c: 40: {
 14480                           ;SerialFuncs.c: 41: NewMessage=0;
 14481  0000F8  0E00               	movlw	0
 14482  0000FA  6E2D               	movwf	_NewMessage+1,c
 14483  0000FC  0E00               	movlw	0
 14484  0000FE  6E2C               	movwf	_NewMessage,c
 14485                           
 14486                           ;SerialFuncs.c: 45: for(i=20;i>0;i--)
 14487  000100  0E00               	movlw	0
 14488  000102  6E35               	movwf	_i+1,c
 14489  000104  0E14               	movlw	20
 14490  000106  6E34               	movwf	_i,c
 14491  000108                     i1l6094:
 14492  000108  BE35               	btfsc	_i+1,7,c
 14493  00010A  D019               	goto	i1l313
 14494  00010C  5035               	movf	_i+1,w,c
 14495  00010E  E105               	bnz	i1l6098
 14496  000110  0434               	decf	_i,w,c
 14497  000112  A0D8               	btfss	status,0,c
 14498  000114  D014               	goto	i1l313
 14499  000116  D001               	goto	i1l6098
 14500  000118  D012               	goto	i1l313
 14501  00011A                     i1l6098:
 14502                           
 14503                           ;SerialFuncs.c: 46: {
 14504                           ;SerialFuncs.c: 47: MessageBuffer[i] = 0x00;
 14505  00011A  0EE8               	movlw	low _MessageBuffer
 14506  00011C  2434               	addwf	_i,w,c
 14507  00011E  6ED9               	movwf	fsr2l,c
 14508  000120  0E01               	movlw	high _MessageBuffer
 14509  000122  2035               	addwfc	_i+1,w,c
 14510  000124  6EDA               	movwf	fsr2h,c
 14511  000126  0E00               	movlw	0
 14512  000128  6EDF               	movwf	indf2,c
 14513                           
 14514                           ;SerialFuncs.c: 48: i=0;
 14515  00012A  0E00               	movlw	0
 14516  00012C  6E35               	movwf	_i+1,c
 14517  00012E  0E00               	movlw	0
 14518  000130  6E34               	movwf	_i,c
 14519  000132  0634               	decf	_i,f,c
 14520  000134  A0D8               	btfss	status,0,c
 14521  000136  0635               	decf	_i+1,f,c
 14522  000138  D7E7               	goto	i1l6094
 14523  00013A  D7EF               	goto	i1l6098
 14524                           
 14525                           ;SerialFuncs.c: 49: }
 14526                           ;SerialFuncs.c: 50: return;
 14527  00013C  D000               	goto	i1l313
 14528  00013E                     i1l313:
 14529  00013E  C09E  FFF5         	movff	??_SerialRxPinInterrupt+17,tablat
 14530  000142  C09D  FFF8         	movff	??_SerialRxPinInterrupt+16,tblptru
 14531  000146  C09C  FFF7         	movff	??_SerialRxPinInterrupt+15,tblptrh
 14532  00014A  C09B  FFF6         	movff	??_SerialRxPinInterrupt+14,tblptrl
 14533  00014E  C09A  FFF4         	movff	??_SerialRxPinInterrupt+13,prodh
 14534  000152  C099  FFF3         	movff	??_SerialRxPinInterrupt+12,prodl
 14535  000156  C098  FFDA         	movff	??_SerialRxPinInterrupt+11,fsr2h
 14536  00015A  C097  FFD9         	movff	??_SerialRxPinInterrupt+10,fsr2l
 14537  00015E  C096  FFE2         	movff	??_SerialRxPinInterrupt+9,fsr1h
 14538  000162  C095  FFE1         	movff	??_SerialRxPinInterrupt+8,fsr1l
 14539  000166  C094  FFEA         	movff	??_SerialRxPinInterrupt+7,fsr0h
 14540  00016A  C093  FFE9         	movff	??_SerialRxPinInterrupt+6,fsr0l
 14541  00016E  C092  FFFB         	movff	??_SerialRxPinInterrupt+5,pclatu
 14542  000172  C091  FFFA         	movff	??_SerialRxPinInterrupt+4,pclath
 14543  000176  C090  FFE0         	movff	??_SerialRxPinInterrupt+3,bsr
 14544  00017A  C08F  FFE8         	movff	??_SerialRxPinInterrupt+2,wreg
 14545  00017E  C08E  FFD8         	movff	??_SerialRxPinInterrupt+1,status
 14546  000182  0010               	retfie	
 14547  000184                     __end_of_SerialRxPinInterrupt:
 14548                           	opt stack 0
 14549                           pclatu	equ	0xFFB
 14550                           pclath	equ	0xFFA
 14551                           tblptru	equ	0xFF8
 14552                           tblptrh	equ	0xFF7
 14553                           tblptrl	equ	0xFF6
 14554                           tablat	equ	0xFF5
 14555                           prodh	equ	0xFF4
 14556                           prodl	equ	0xFF3
 14557                           intcon	equ	0xFF2
 14558                           intcon2	equ	0xFF1
 14559                           indf0	equ	0xFEF
 14560                           postinc0	equ	0xFEE
 14561                           fsr0h	equ	0xFEA
 14562                           fsr0l	equ	0xFE9
 14563                           wreg	equ	0xFE8
 14564                           postinc1	equ	0xFE6
 14565                           postdec1	equ	0xFE5
 14566                           plusw1	equ	0xFE3
 14567                           fsr1h	equ	0xFE2
 14568                           fsr1l	equ	0xFE1
 14569                           bsr	equ	0xFE0
 14570                           indf2	equ	0xFDF
 14571                           postinc2	equ	0xFDE
 14572                           postdec2	equ	0xFDD
 14573                           plusw2	equ	0xFDB
 14574                           fsr2h	equ	0xFDA
 14575                           fsr2l	equ	0xFD9
 14576                           status	equ	0xFD8
 14577                           
 14578 ;; *************** function i1_strcpy *****************
 14579 ;; Defined at:
 14580 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 14581 ;; Parameters:    Size  Location     Type
 14582 ;;  to              2   21[COMRAM] PTR unsigned char 
 14583 ;;		 -> MessageRoutine@str2(20), MessageRoutine@str1(20), LastMessage(20), 
 14584 ;;  from            2   23[COMRAM] PTR const unsigned char 
 14585 ;;		 -> STR_47(5), STR_44(7), STR_41(7), STR_30(5), 
 14586 ;;		 -> ConfigWord(20), LastMessage(20), MessageBuffer(20), 
 14587 ;; Auto vars:     Size  Location     Type
 14588 ;;  strcpy          2   25[COMRAM] PTR unsigned char 
 14589 ;;		 -> MessageRoutine@str2(20), MessageRoutine@str1(20), LastMessage(20), 
 14590 ;; Return value:  Size  Location     Type
 14591 ;;                  2   21[COMRAM] PTR unsigned char 
 14592 ;; Registers used:
 14593 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14594 ;; Tracked objects:
 14595 ;;		On entry : 0/0
 14596 ;;		On exit  : 0/0
 14597 ;;		Unchanged: 0/0
 14598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14599 ;;      Params:         4       0       0       0       0       0       0
 14600 ;;      Locals:         2       0       0       0       0       0       0
 14601 ;;      Temps:          0       0       0       0       0       0       0
 14602 ;;      Totals:         6       0       0       0       0       0       0
 14603 ;;Total ram usage:        6 bytes
 14604 ;; Hardware stack levels used:    1
 14605 ;; Hardware stack levels required when called:    2
 14606 ;; This function calls:
 14607 ;;		Nothing
 14608 ;; This function is called by:
 14609 ;;		_SerialRxPinInterrupt
 14610 ;; This function uses a non-reentrant model
 14611 ;;
 14612                           
 14613                           	psect	text50
 14614  004128                     __ptext50:
 14615                           	opt stack 0
 14616  004128                     i1_strcpy:
 14617                           	opt stack 21
 14618                           
 14619                           ;incstack = 0
 14620  004128  C016  F01A         	movff	i1strcpy@to,i1strcpy@cp
 14621  00412C  C017  F01B         	movff	i1strcpy@to+1,i1strcpy@cp+1
 14622  004130  D005               	goto	i1l5934
 14623  004132                     i1l5932:
 14624  004132  4A1A               	infsnz	i1strcpy@cp,f,c
 14625  004134  2A1B               	incf	i1strcpy@cp+1,f,c
 14626  004136  4A18               	infsnz	i1strcpy@from,f,c
 14627  004138  2A19               	incf	i1strcpy@from+1,f,c
 14628  00413A  D000               	goto	i1l5934
 14629  00413C                     i1l5934:
 14630  00413C  C018  FFF6         	movff	i1strcpy@from,tblptrl
 14631  004140  C019  FFF7         	movff	i1strcpy@from+1,tblptrh
 14632  004144  6AF8               	clrf	tblptru,c
 14633  004146  C01A  FFD9         	movff	i1strcpy@cp,fsr2l
 14634  00414A  C01B  FFDA         	movff	i1strcpy@cp+1,fsr2h
 14635  00414E  0E05               	movlw	(high __ramtop+-1)
 14636  004150  64F7               	cpfsgt	tblptrh,c
 14637  004152  D003               	bra	i1u683_27
 14638  004154  0008               	tblrd		*
 14639  004156  50F5               	movf	tablat,w,c
 14640  004158  D005               	bra	i1u683_20
 14641  00415A                     i1u683_27:
 14642  00415A  CFF6 FFE9          	movff	tblptrl,fsr0l
 14643  00415E  CFF7 FFEA          	movff	tblptrh,fsr0h
 14644  004162  50EF               	movf	indf0,w,c
 14645  004164                     i1u683_20:
 14646  004164  6EDF               	movwf	indf2,c
 14647  004166  50DF               	movf	indf2,w,c
 14648  004168  A4D8               	btfss	status,2,c
 14649  00416A  D7E3               	goto	i1l5932
 14650                           
 14651                           ;	Return value of i1_strcpy is never used
 14652  00416C  0012               	return		;funcret
 14653  00416E                     __end_ofi1_strcpy:
 14654                           	opt stack 0
 14655                           pclatu	equ	0xFFB
 14656                           pclath	equ	0xFFA
 14657                           tblptru	equ	0xFF8
 14658                           tblptrh	equ	0xFF7
 14659                           tblptrl	equ	0xFF6
 14660                           tablat	equ	0xFF5
 14661                           prodh	equ	0xFF4
 14662                           prodl	equ	0xFF3
 14663                           intcon	equ	0xFF2
 14664                           intcon2	equ	0xFF1
 14665                           indf0	equ	0xFEF
 14666                           postinc0	equ	0xFEE
 14667                           fsr0h	equ	0xFEA
 14668                           fsr0l	equ	0xFE9
 14669                           wreg	equ	0xFE8
 14670                           postinc1	equ	0xFE6
 14671                           postdec1	equ	0xFE5
 14672                           plusw1	equ	0xFE3
 14673                           fsr1h	equ	0xFE2
 14674                           fsr1l	equ	0xFE1
 14675                           bsr	equ	0xFE0
 14676                           indf2	equ	0xFDF
 14677                           postinc2	equ	0xFDE
 14678                           postdec2	equ	0xFDD
 14679                           plusw2	equ	0xFDB
 14680                           fsr2h	equ	0xFDA
 14681                           fsr2l	equ	0xFD9
 14682                           status	equ	0xFD8
 14683                           
 14684 ;; *************** function i1_printf *****************
 14685 ;; Defined at:
 14686 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 14687 ;; Parameters:    Size  Location     Type
 14688 ;;  f               2   33[COMRAM] PTR const unsigned char 
 14689 ;;		 -> STR_48(140), STR_46(20), STR_45(3), STR_43(20), 
 14690 ;;		 -> STR_42(3), STR_40(20), STR_39(3), STR_38(31), 
 14691 ;;		 -> STR_37(3), STR_36(27), STR_35(3), STR_34(26), 
 14692 ;;		 -> STR_33(3), STR_32(34), STR_31(3), STR_29(20), 
 14693 ;;		 -> STR_28(20), STR_27(21), STR_26(3), STR_25(14), 
 14694 ;;		 -> STR_24(3), STR_23(12), STR_22(3), STR_21(10), 
 14695 ;;		 -> STR_20(3), STR_19(12), STR_18(3), STR_17(11), 
 14696 ;;		 -> MessageBuffer(20), STR_16(21), STR_15(11), STR_14(18), 
 14697 ;;		 -> STR_13(4), STR_12(15), STR_11(14), STR_10(19), 
 14698 ;;		 -> STR_9(15), STR_8(14), STR_7(18), STR_6(21), 
 14699 ;;		 -> STR_5(18), STR_4(21), STR_3(18), STR_2(21), 
 14700 ;;		 -> STR_1(18), 
 14701 ;; Auto vars:     Size  Location     Type
 14702 ;;  printf          4    0        struct .
 14703 ;;  printf          2   10[BANK0 ] int 
 14704 ;;  printf          2    8[BANK0 ] unsigned int 
 14705 ;;  printf          2    5[BANK0 ] unsigned int 
 14706 ;;  printf          2    3[BANK0 ] PTR void [1]
 14707 ;;		 -> ?i1_printf(2), ?_printf(2), 
 14708 ;;  printf          2    0[BANK0 ] PTR const unsigned char 
 14709 ;;		 -> printf@c(1), 
 14710 ;;  printf          1   12[BANK0 ] char 
 14711 ;;  printf          1    7[BANK0 ] unsigned char 
 14712 ;;  printf          1    2[BANK0 ] char 
 14713 ;; Return value:  Size  Location     Type
 14714 ;;                  2   33[COMRAM] int 
 14715 ;; Registers used:
 14716 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14717 ;; Tracked objects:
 14718 ;;		On entry : 0/0
 14719 ;;		On exit  : 0/0
 14720 ;;		Unchanged: 0/0
 14721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14722 ;;      Params:         2       0       0       0       0       0       0
 14723 ;;      Locals:         0      13       0       0       0       0       0
 14724 ;;      Temps:          4       0       0       0       0       0       0
 14725 ;;      Totals:         6      13       0       0       0       0       0
 14726 ;;Total ram usage:       19 bytes
 14727 ;; Hardware stack levels used:    1
 14728 ;; Hardware stack levels required when called:    3
 14729 ;; This function calls:
 14730 ;;		i1___lwdiv
 14731 ;;		i1___lwmod
 14732 ;;		i1___wmul
 14733 ;;		i1_isdigit
 14734 ;;		i1_putch
 14735 ;; This function is called by:
 14736 ;;		_SerialRxPinInterrupt
 14737 ;; This function uses a non-reentrant model
 14738 ;;
 14739                           
 14740                           	psect	text51
 14741  0017CC                     __ptext51:
 14742                           	opt stack 0
 14743  0017CC                     i1_printf:
 14744                           	opt stack 20
 14745                           
 14746                           ;doprnt.c: 466: va_list ap;
 14747                           ;doprnt.c: 499: signed char c;
 14748                           ;doprnt.c: 501: int width;
 14749                           ;doprnt.c: 506: signed char prec;
 14750                           ;doprnt.c: 508: unsigned char flag;
 14751                           ;doprnt.c: 523: union {
 14752                           ;doprnt.c: 524: unsigned long vd;
 14753                           ;doprnt.c: 525: double integ;
 14754                           ;doprnt.c: 526: } tmpval;
 14755                           ;doprnt.c: 528: unsigned int val;
 14756                           ;doprnt.c: 529: unsigned len;
 14757                           ;doprnt.c: 530: const char * cp;
 14758                           ;doprnt.c: 533: *ap = __va_start();
 14759                           
 14760                           ;incstack = 0
 14761  0017CC  0E24               	movlw	low (?i1_printf+2)
 14762  0017CE  0100               	movlb	0	; () banked
 14763  0017D0  6F83               	movwf	i1printf@ap& (0+255),b
 14764  0017D2  0E00               	movlw	high (?i1_printf+2)
 14765  0017D4  0100               	movlb	0	; () banked
 14766  0017D6  6F84               	movwf	(i1printf@ap+1)& (0+255),b
 14767                           
 14768                           ;doprnt.c: 536: while(c = *f++) {
 14769  0017D8  D1BB               	goto	i1l5928
 14770  0017DA                     i1l5826:
 14771                           
 14772                           ; BSR set to: 0
 14773                           ;doprnt.c: 538: if(c != '%')
 14774  0017DA  0E25               	movlw	37
 14775  0017DC  0100               	movlb	0	; () banked
 14776  0017DE  198C               	xorwf	i1printf@c& (0+255),w,b
 14777  0017E0  B4D8               	btfsc	status,2,c
 14778  0017E2  D005               	goto	i1l5830
 14779                           
 14780                           ; BSR set to: 0
 14781                           ;doprnt.c: 540: {
 14782                           ;doprnt.c: 541: (putch(c) );
 14783  0017E4  0100               	movlb	0	; () banked
 14784  0017E6  518C               	movf	i1printf@c& (0+255),w,b
 14785  0017E8  ECD6  F021         	call	i1_putch
 14786                           
 14787                           ;doprnt.c: 542: continue;
 14788  0017EC  D1B1               	goto	i1l5928
 14789  0017EE                     i1l5830:
 14790                           
 14791                           ;doprnt.c: 543: }
 14792                           ;doprnt.c: 546: width = 0;
 14793  0017EE  0E00               	movlw	0
 14794  0017F0  0100               	movlb	0	; () banked
 14795  0017F2  6F8B               	movwf	(i1printf@width+1)& (0+255),b
 14796  0017F4  0E00               	movlw	0
 14797  0017F6  6F8A               	movwf	i1printf@width& (0+255),b
 14798                           
 14799                           ;doprnt.c: 548: flag = 0;
 14800  0017F8  0E00               	movlw	0
 14801  0017FA  0100               	movlb	0	; () banked
 14802  0017FC  6F87               	movwf	i1printf@flag& (0+255),b
 14803                           
 14804                           ; BSR set to: 0
 14805                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14806  0017FE  C022  FFF6         	movff	i1printf@f,tblptrl
 14807  001802  C023  FFF7         	movff	i1printf@f+1,tblptrh
 14808  001806  6AF8               	clrf	tblptru,c
 14809  001808  0E05               	movlw	(high __ramtop+-1)
 14810  00180A  64F7               	cpfsgt	tblptrh,c
 14811  00180C  D003               	bra	i1u660_27
 14812  00180E  0008               	tblrd		*
 14813  001810  50F5               	movf	tablat,w,c
 14814  001812  D005               	bra	i1u660_20
 14815  001814                     i1u660_27:
 14816  001814  CFF6 FFE9          	movff	tblptrl,fsr0l
 14817  001818  CFF7 FFEA          	movff	tblptrh,fsr0h
 14818  00181C  50EF               	movf	indf0,w,c
 14819  00181E                     i1u660_20:
 14820  00181E  EC62  F021         	call	i1_isdigit
 14821  001822  A0D8               	btfss	status,0,c
 14822  001824  D09F               	goto	i1l5868
 14823                           
 14824                           ;doprnt.c: 598: width = 0;
 14825  001826  0E00               	movlw	0
 14826  001828  0100               	movlb	0	; () banked
 14827  00182A  6F8B               	movwf	(i1printf@width+1)& (0+255),b
 14828  00182C  0E00               	movlw	0
 14829  00182E  6F8A               	movwf	i1printf@width& (0+255),b
 14830  001830  D000               	goto	i1l5836
 14831  001832                     i1l5836:
 14832                           
 14833                           ;doprnt.c: 600: width *= 10;
 14834  001832  C08A  F016         	movff	i1printf@width,i1___wmul@multiplier
 14835  001836  C08B  F017         	movff	i1printf@width+1,i1___wmul@multiplier+1
 14836  00183A  0E00               	movlw	0
 14837  00183C  6E19               	movwf	i1___wmul@multiplicand+1,c
 14838  00183E  0E0A               	movlw	10
 14839  001840  6E18               	movwf	i1___wmul@multiplicand,c
 14840  001842  EC18  F021         	call	i1___wmul	;wreg free
 14841  001846  C016  F08A         	movff	?i1___wmul,i1printf@width
 14842  00184A  C017  F08B         	movff	?i1___wmul+1,i1printf@width+1
 14843                           
 14844                           ;doprnt.c: 601: width += *f++ - '0';
 14845  00184E  0ED0               	movlw	208
 14846  001850  6E24               	movwf	??i1_printf& (0+255),c
 14847  001852  0EFF               	movlw	255
 14848  001854  6E25               	movwf	(??i1_printf+1)& (0+255),c
 14849  001856  C022  FFF6         	movff	i1printf@f,tblptrl
 14850  00185A  C023  FFF7         	movff	i1printf@f+1,tblptrh
 14851  00185E  6AF8               	clrf	tblptru,c
 14852  001860  0E05               	movlw	(high __ramtop+-1)
 14853  001862  64F7               	cpfsgt	tblptrh,c
 14854  001864  D003               	bra	i1u662_27
 14855  001866  0008               	tblrd		*
 14856  001868  50F5               	movf	tablat,w,c
 14857  00186A  D005               	bra	i1u662_20
 14858  00186C                     i1u662_27:
 14859  00186C  CFF6 FFE9          	movff	tblptrl,fsr0l
 14860  001870  CFF7 FFEA          	movff	tblptrh,fsr0h
 14861  001874  50EF               	movf	indf0,w,c
 14862  001876                     i1u662_20:
 14863  001876  6E26               	movwf	(??i1_printf+2)& (0+255),c
 14864  001878  6A27               	clrf	(??i1_printf+3)& (0+255),c
 14865  00187A  5024               	movf	??i1_printf,w,c
 14866  00187C  2626               	addwf	??i1_printf+2,f,c
 14867  00187E  5025               	movf	??i1_printf+1,w,c
 14868  001880  2227               	addwfc	??i1_printf+3,f,c
 14869  001882  5026               	movf	??i1_printf+2,w,c
 14870  001884  0100               	movlb	0	; () banked
 14871  001886  278A               	addwf	i1printf@width& (0+255),f,b
 14872  001888  5027               	movf	??i1_printf+3,w,c
 14873  00188A  0100               	movlb	0	; () banked
 14874  00188C  238B               	addwfc	(i1printf@width+1)& (0+255),f,b
 14875                           
 14876                           ; BSR set to: 0
 14877  00188E  4A22               	infsnz	i1printf@f,f,c
 14878  001890  2A23               	incf	i1printf@f+1,f,c
 14879                           
 14880                           ; BSR set to: 0
 14881                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14882  001892  C022  FFF6         	movff	i1printf@f,tblptrl
 14883  001896  C023  FFF7         	movff	i1printf@f+1,tblptrh
 14884  00189A  6AF8               	clrf	tblptru,c
 14885  00189C  0E05               	movlw	(high __ramtop+-1)
 14886  00189E  64F7               	cpfsgt	tblptrh,c
 14887  0018A0  D003               	bra	i1u663_27
 14888  0018A2  0008               	tblrd		*
 14889  0018A4  50F5               	movf	tablat,w,c
 14890  0018A6  D005               	bra	i1u663_20
 14891  0018A8                     i1u663_27:
 14892  0018A8  CFF6 FFE9          	movff	tblptrl,fsr0l
 14893  0018AC  CFF7 FFEA          	movff	tblptrh,fsr0h
 14894  0018B0  50EF               	movf	indf0,w,c
 14895  0018B2                     i1u663_20:
 14896  0018B2  EC62  F021         	call	i1_isdigit
 14897  0018B6  A0D8               	btfss	status,0,c
 14898  0018B8  D055               	goto	i1l5868
 14899  0018BA  D7BB               	goto	i1l5836
 14900                           
 14901                           ;doprnt.c: 608: }
 14902                           ;doprnt.c: 635: switch(c = *f++) {
 14903  0018BC  D053               	goto	i1l5868
 14904                           
 14905                           ;doprnt.c: 638: goto alldone;
 14906                           
 14907                           ;doprnt.c: 637: case 0:
 14908  0018BE  D166               	goto	i1l681
 14909                           
 14910                           ;doprnt.c: 698: case 'i':
 14911                           ;doprnt.c: 699: break;
 14912                           
 14913                           ;doprnt.c: 697: case 'd':
 14914  0018C0  D078               	goto	i1l652
 14915  0018C2                     i1l5844:
 14916                           
 14917                           ;doprnt.c: 757: if(width > len)
 14918  0018C2  0100               	movlb	0	; () banked
 14919  0018C4  518A               	movf	i1printf@width& (0+255),w,b
 14920  0018C6  0100               	movlb	0	; () banked
 14921  0018C8  5D85               	subwf	i1printf@len& (0+255),w,b
 14922  0018CA  0100               	movlb	0	; () banked
 14923  0018CC  518B               	movf	(i1printf@width+1)& (0+255),w,b
 14924  0018CE  0100               	movlb	0	; () banked
 14925  0018D0  5986               	subwfb	(i1printf@len+1)& (0+255),w,b
 14926  0018D2  B0D8               	btfsc	status,0,c
 14927  0018D4  D009               	goto	i1l5848
 14928                           
 14929                           ; BSR set to: 0
 14930                           ;doprnt.c: 758: width -= len;
 14931  0018D6  0100               	movlb	0	; () banked
 14932  0018D8  5185               	movf	i1printf@len& (0+255),w,b
 14933  0018DA  0100               	movlb	0	; () banked
 14934  0018DC  5F8A               	subwf	i1printf@width& (0+255),f,b
 14935  0018DE  0100               	movlb	0	; () banked
 14936  0018E0  5186               	movf	(i1printf@len+1)& (0+255),w,b
 14937  0018E2  0100               	movlb	0	; () banked
 14938  0018E4  5B8B               	subwfb	(i1printf@width+1)& (0+255),f,b
 14939  0018E6  D00A               	goto	i1l5852
 14940  0018E8                     i1l5848:
 14941                           
 14942                           ; BSR set to: 0
 14943                           ;doprnt.c: 759: else
 14944                           ;doprnt.c: 760: width = 0;
 14945  0018E8  0E00               	movlw	0
 14946  0018EA  0100               	movlb	0	; () banked
 14947  0018EC  6F8B               	movwf	(i1printf@width+1)& (0+255),b
 14948  0018EE  0E00               	movlw	0
 14949  0018F0  6F8A               	movwf	i1printf@width& (0+255),b
 14950                           
 14951                           ; BSR set to: 0
 14952                           ;doprnt.c: 764: while(width--)
 14953  0018F2  D004               	goto	i1l5852
 14954  0018F4                     i1l5850:
 14955                           
 14956                           ; BSR set to: 0
 14957                           ;doprnt.c: 765: (putch(' ') );
 14958  0018F4  0E20               	movlw	32
 14959  0018F6  ECD6  F021         	call	i1_putch
 14960  0018FA  D000               	goto	i1l5852
 14961  0018FC                     i1l5852:
 14962  0018FC  0100               	movlb	0	; () banked
 14963  0018FE  078A               	decf	i1printf@width& (0+255),f,b
 14964  001900  A0D8               	btfss	status,0,c
 14965  001902  078B               	decf	(i1printf@width+1)& (0+255),f,b
 14966  001904  0100               	movlb	0	; () banked
 14967  001906  298A               	incf	i1printf@width& (0+255),w,b
 14968  001908  E1F5               	bnz	i1l5850
 14969  00190A  0100               	movlb	0	; () banked
 14970  00190C  298B               	incf	(i1printf@width+1)& (0+255),w,b
 14971  00190E  B4D8               	btfsc	status,2,c
 14972  001910  D00D               	goto	i1l5858
 14973  001912  D7F0               	goto	i1l5850
 14974                           
 14975                           ; BSR set to: 0
 14976                           ;doprnt.c: 767: while(len--)
 14977  001914  D00B               	goto	i1l5858
 14978  001916                     i1l5854:
 14979                           
 14980                           ; BSR set to: 0
 14981                           ;doprnt.c: 768: (putch(*cp++) );
 14982  001916  C080  FFD9         	movff	i1printf@cp,fsr2l
 14983  00191A  C081  FFDA         	movff	i1printf@cp+1,fsr2h
 14984  00191E  50DF               	movf	indf2,w,c
 14985  001920  ECD6  F021         	call	i1_putch
 14986  001924  0100               	movlb	0	; () banked
 14987  001926  4B80               	infsnz	i1printf@cp& (0+255),f,b
 14988  001928  2B81               	incf	(i1printf@cp+1)& (0+255),f,b
 14989  00192A  D000               	goto	i1l5858
 14990  00192C                     i1l5858:
 14991                           
 14992                           ; BSR set to: 0
 14993  00192C  0100               	movlb	0	; () banked
 14994  00192E  0785               	decf	i1printf@len& (0+255),f,b
 14995  001930  A0D8               	btfss	status,0,c
 14996  001932  0786               	decf	(i1printf@len+1)& (0+255),f,b
 14997  001934  0100               	movlb	0	; () banked
 14998  001936  2985               	incf	i1printf@len& (0+255),w,b
 14999  001938  E1EE               	bnz	i1l5854
 15000  00193A  0100               	movlb	0	; () banked
 15001  00193C  2986               	incf	(i1printf@len+1)& (0+255),w,b
 15002  00193E  B4D8               	btfsc	status,2,c
 15003  001940  D107               	goto	i1l5928
 15004  001942  D7E9               	goto	i1l5854
 15005                           
 15006                           ; BSR set to: 0
 15007                           ;doprnt.c: 774: continue;
 15008  001944  D105               	goto	i1l5928
 15009  001946                     i1l5860:
 15010                           
 15011                           ; BSR set to: 0
 15012                           ;doprnt.c: 805: cp = (char *)&c;
 15013  001946  0E8C               	movlw	low i1printf@c
 15014  001948  0100               	movlb	0	; () banked
 15015  00194A  6F80               	movwf	i1printf@cp& (0+255),b
 15016  00194C  0E00               	movlw	high i1printf@c
 15017  00194E  0100               	movlb	0	; () banked
 15018  001950  6F81               	movwf	(i1printf@cp+1)& (0+255),b
 15019                           
 15020                           ; BSR set to: 0
 15021                           ;doprnt.c: 806: len = 1;
 15022  001952  0E00               	movlw	0
 15023  001954  0100               	movlb	0	; () banked
 15024  001956  6F86               	movwf	(i1printf@len+1)& (0+255),b
 15025  001958  0E01               	movlw	1
 15026  00195A  6F85               	movwf	i1printf@len& (0+255),b
 15027                           
 15028                           ;doprnt.c: 807: goto dostring;
 15029  00195C  D7B2               	goto	i1l5844
 15030  00195E                     i1l5864:
 15031                           
 15032                           ; BSR set to: 0
 15033                           ;doprnt.c: 818: flag |= 0x40;
 15034  00195E  0100               	movlb	0	; () banked
 15035  001960  8D87               	bsf	i1printf@flag& (0+255),6,b
 15036                           
 15037                           ; BSR set to: 0
 15038                           ;doprnt.c: 822: }
 15039                           
 15040                           ;doprnt.c: 819: break;
 15041  001962  D027               	goto	i1l652
 15042  001964                     i1l5868:
 15043  001964  5022               	movf	i1printf@f,w,c
 15044  001966  6E24               	movwf	??i1_printf& (0+255),c
 15045  001968  5023               	movf	i1printf@f+1,w,c
 15046  00196A  6E25               	movwf	(??i1_printf+1)& (0+255),c
 15047  00196C  4A22               	infsnz	i1printf@f,f,c
 15048  00196E  2A23               	incf	i1printf@f+1,f,c
 15049  001970  C024  FFF6         	movff	??i1_printf,tblptrl
 15050  001974  C025  FFF7         	movff	??i1_printf+1,tblptrh
 15051  001978  6AF8               	clrf	tblptru,c
 15052  00197A  0E05               	movlw	(high __ramtop+-1)
 15053  00197C  64F7               	cpfsgt	tblptrh,c
 15054  00197E  D003               	bra	i1u668_27
 15055  001980  0008               	tblrd		*
 15056  001982  50F5               	movf	tablat,w,c
 15057  001984  D005               	bra	i1u668_20
 15058  001986                     i1u668_27:
 15059  001986  CFF6 FFE9          	movff	tblptrl,fsr0l
 15060  00198A  CFF7 FFEA          	movff	tblptrh,fsr0h
 15061  00198E  50EF               	movf	indf0,w,c
 15062  001990                     i1u668_20:
 15063  001990  0100               	movlb	0	; () banked
 15064  001992  6F8C               	movwf	i1printf@c& (0+255),b
 15065  001994  0100               	movlb	0	; () banked
 15066  001996  518C               	movf	i1printf@c& (0+255),w,b
 15067                           
 15068                           ; Switch size 1, requested type "space"
 15069                           ; Number of cases is 4, Range of values is 0 to 117
 15070                           ; switch strategies available:
 15071                           ; Name         Instructions Cycles
 15072                           ; simple_byte           13     7 (average)
 15073                           ;	Chosen strategy is simple_byte
 15074  001998  0A00               	xorlw	0	; case 0
 15075  00199A  B4D8               	btfsc	status,2,c
 15076  00199C  D0F7               	goto	i1l681
 15077  00199E  0A64               	xorlw	100	; case 100
 15078  0019A0  B4D8               	btfsc	status,2,c
 15079  0019A2  D007               	goto	i1l652
 15080  0019A4  0A0D               	xorlw	13	; case 105
 15081  0019A6  B4D8               	btfsc	status,2,c
 15082  0019A8  D004               	goto	i1l652
 15083  0019AA  0A1C               	xorlw	28	; case 117
 15084  0019AC  B4D8               	btfsc	status,2,c
 15085  0019AE  D7D7               	goto	i1l5864
 15086  0019B0  D7CA               	goto	i1l5860
 15087  0019B2                     i1l652:
 15088                           
 15089                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 15090  0019B2  0100               	movlb	0	; () banked
 15091  0019B4  BD87               	btfsc	i1printf@flag& (0+255),6,b
 15092  0019B6  D019               	goto	i1l5880
 15093                           
 15094                           ; BSR set to: 0
 15095                           ;doprnt.c: 1253: {
 15096                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15097  0019B8  C083  FFD9         	movff	i1printf@ap,fsr2l
 15098  0019BC  C084  FFDA         	movff	i1printf@ap+1,fsr2h
 15099  0019C0  CFDE F088          	movff	postinc2,i1printf@val
 15100  0019C4  CFDD F089          	movff	postdec2,i1printf@val+1
 15101                           
 15102                           ; BSR set to: 0
 15103  0019C8  0E02               	movlw	2
 15104  0019CA  0100               	movlb	0	; () banked
 15105  0019CC  2783               	addwf	i1printf@ap& (0+255),f,b
 15106  0019CE  0E00               	movlw	0
 15107  0019D0  2384               	addwfc	(i1printf@ap+1)& (0+255),f,b
 15108                           
 15109                           ; BSR set to: 0
 15110                           ;doprnt.c: 1261: if((int)val < 0) {
 15111  0019D2  0100               	movlb	0	; () banked
 15112  0019D4  AF89               	btfss	(i1printf@val+1)& (0+255),7,b
 15113  0019D6  D017               	goto	i1l5884
 15114                           
 15115                           ; BSR set to: 0
 15116                           ;doprnt.c: 1262: flag |= 0x03;
 15117  0019D8  0E03               	movlw	3
 15118  0019DA  0100               	movlb	0	; () banked
 15119  0019DC  1387               	iorwf	i1printf@flag& (0+255),f,b
 15120                           
 15121                           ; BSR set to: 0
 15122                           ;doprnt.c: 1263: val = -val;
 15123  0019DE  0100               	movlb	0	; () banked
 15124  0019E0  6D88               	negf	i1printf@val& (0+255),b
 15125  0019E2  1F89               	comf	(i1printf@val+1)& (0+255),f,b
 15126  0019E4  B0D8               	btfsc	status,0,c
 15127  0019E6  2B89               	incf	(i1printf@val+1)& (0+255),f,b
 15128                           
 15129                           ; BSR set to: 0
 15130                           ;doprnt.c: 1264: }
 15131                           ;doprnt.c: 1266: }
 15132  0019E8  D00E               	goto	i1l5884
 15133  0019EA                     i1l5880:
 15134                           
 15135                           ; BSR set to: 0
 15136                           ;doprnt.c: 1268: else
 15137                           ;doprnt.c: 1273: {
 15138                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15139  0019EA  C083  FFD9         	movff	i1printf@ap,fsr2l
 15140  0019EE  C084  FFDA         	movff	i1printf@ap+1,fsr2h
 15141  0019F2  CFDE F088          	movff	postinc2,i1printf@val
 15142  0019F6  CFDD F089          	movff	postdec2,i1printf@val+1
 15143                           
 15144                           ; BSR set to: 0
 15145  0019FA  0E02               	movlw	2
 15146  0019FC  0100               	movlb	0	; () banked
 15147  0019FE  2783               	addwf	i1printf@ap& (0+255),f,b
 15148  001A00  0E00               	movlw	0
 15149  001A02  2384               	addwfc	(i1printf@ap+1)& (0+255),f,b
 15150  001A04  D000               	goto	i1l5884
 15151  001A06                     i1l5884:
 15152                           
 15153                           ; BSR set to: 0
 15154                           ;doprnt.c: 1287: }
 15155                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15156  001A06  0E01               	movlw	1
 15157  001A08  0100               	movlb	0	; () banked
 15158  001A0A  6F8C               	movwf	i1printf@c& (0+255),b
 15159  001A0C                     i1l5886:
 15160                           
 15161                           ; BSR set to: 0
 15162  001A0C  0E05               	movlw	5
 15163  001A0E  0100               	movlb	0	; () banked
 15164  001A10  198C               	xorwf	i1printf@c& (0+255),w,b
 15165  001A12  B4D8               	btfsc	status,2,c
 15166  001A14  D01A               	goto	i1l5898
 15167  001A16  D001               	goto	i1l5890
 15168                           
 15169                           ; BSR set to: 0
 15170  001A18  D018               	goto	i1l5898
 15171  001A1A                     i1l5890:
 15172                           
 15173                           ; BSR set to: 0
 15174                           ;doprnt.c: 1306: if(val < dpowers[c])
 15175  001A1A  0100               	movlb	0	; () banked
 15176  001A1C  518C               	movf	i1printf@c& (0+255),w,b
 15177  001A1E  0D02               	mullw	2
 15178  001A20  0E55               	movlw	low _dpowers
 15179  001A22  24F3               	addwf	prodl,w,c
 15180  001A24  6EF6               	movwf	tblptrl,c
 15181  001A26  0E7D               	movlw	high _dpowers
 15182  001A28  20F4               	addwfc	prodh,w,c
 15183  001A2A  6EF7               	movwf	tblptrh,c
 15184  001A2C                     	if	0	;There are less than 3 active tblptr bytes
 15185  001A2C                     	endif
 15186  001A2C  0009               	tblrd		*+
 15187  001A2E  50F5               	movf	tablat,w,c
 15188  001A30  0100               	movlb	0	; () banked
 15189  001A32  5D88               	subwf	i1printf@val& (0+255),w,b
 15190  001A34  0009               	tblrd		*+
 15191  001A36  50F5               	movf	tablat,w,c
 15192  001A38  0100               	movlb	0	; () banked
 15193  001A3A  5989               	subwfb	(i1printf@val+1)& (0+255),w,b
 15194  001A3C  A0D8               	btfss	status,0,c
 15195  001A3E  D005               	goto	i1l5898
 15196  001A40  D001               	goto	i1l5894
 15197                           
 15198                           ; BSR set to: 0
 15199                           ;doprnt.c: 1307: break;
 15200  001A42  D003               	goto	i1l5898
 15201  001A44                     i1l5894:
 15202                           
 15203                           ; BSR set to: 0
 15204  001A44  0100               	movlb	0	; () banked
 15205  001A46  2B8C               	incf	i1printf@c& (0+255),f,b
 15206  001A48  D7E1               	goto	i1l5886
 15207  001A4A                     i1l5898:
 15208                           
 15209                           ; BSR set to: 0
 15210                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15211  001A4A  0100               	movlb	0	; () banked
 15212  001A4C  518A               	movf	i1printf@width& (0+255),w,b
 15213  001A4E  0100               	movlb	0	; () banked
 15214  001A50  118B               	iorwf	(i1printf@width+1)& (0+255),w,b
 15215  001A52  B4D8               	btfsc	status,2,c
 15216  001A54  D00B               	goto	i1l5904
 15217                           
 15218                           ; BSR set to: 0
 15219  001A56  C087  F024         	movff	i1printf@flag,??i1_printf
 15220  001A5A  0E03               	movlw	3
 15221  001A5C  1624               	andwf	??i1_printf,f,c
 15222  001A5E  B4D8               	btfsc	status,2,c
 15223  001A60  D005               	goto	i1l5904
 15224                           
 15225                           ; BSR set to: 0
 15226                           ;doprnt.c: 1346: width--;
 15227  001A62  0100               	movlb	0	; () banked
 15228  001A64  078A               	decf	i1printf@width& (0+255),f,b
 15229  001A66  A0D8               	btfss	status,0,c
 15230  001A68  078B               	decf	(i1printf@width+1)& (0+255),f,b
 15231  001A6A  D000               	goto	i1l5904
 15232  001A6C                     i1l5904:
 15233                           
 15234                           ; BSR set to: 0
 15235                           ;doprnt.c: 1381: if(width > c)
 15236  001A6C  0E80               	movlw	128
 15237  001A6E  0100               	movlb	0	; () banked
 15238  001A70  BF8C               	btfsc	i1printf@c& (0+255),7,b
 15239  001A72  0E7F               	movlw	127
 15240  001A74  6E24               	movwf	??i1_printf& (0+255),c
 15241  001A76  0100               	movlb	0	; () banked
 15242  001A78  518A               	movf	i1printf@width& (0+255),w,b
 15243  001A7A  0100               	movlb	0	; () banked
 15244  001A7C  5D8C               	subwf	i1printf@c& (0+255),w,b
 15245  001A7E  0100               	movlb	0	; () banked
 15246  001A80  518B               	movf	(i1printf@width+1)& (0+255),w,b
 15247  001A82  0A80               	xorlw	128
 15248  001A84  5824               	subwfb	??i1_printf& (0+255),w,c
 15249  001A86  B0D8               	btfsc	status,0,c
 15250  001A88  D00B               	goto	i1l5908
 15251                           
 15252                           ; BSR set to: 0
 15253                           ;doprnt.c: 1382: width -= c;
 15254  001A8A  0100               	movlb	0	; () banked
 15255  001A8C  518C               	movf	i1printf@c& (0+255),w,b
 15256  001A8E  0100               	movlb	0	; () banked
 15257  001A90  5F8A               	subwf	i1printf@width& (0+255),f,b
 15258  001A92  0E00               	movlw	0
 15259  001A94  0100               	movlb	0	; () banked
 15260  001A96  BF8C               	btfsc	i1printf@c& (0+255),7,b
 15261  001A98  0EFF               	movlw	255
 15262  001A9A  0100               	movlb	0	; () banked
 15263  001A9C  5B8B               	subwfb	(i1printf@width+1)& (0+255),f,b
 15264  001A9E  D006               	goto	i1l5910
 15265  001AA0                     i1l5908:
 15266                           
 15267                           ; BSR set to: 0
 15268                           ;doprnt.c: 1383: else
 15269                           ;doprnt.c: 1384: width = 0;
 15270  001AA0  0E00               	movlw	0
 15271  001AA2  0100               	movlb	0	; () banked
 15272  001AA4  6F8B               	movwf	(i1printf@width+1)& (0+255),b
 15273  001AA6  0E00               	movlw	0
 15274  001AA8  6F8A               	movwf	i1printf@width& (0+255),b
 15275  001AAA  D000               	goto	i1l5910
 15276  001AAC                     i1l5910:
 15277                           
 15278                           ; BSR set to: 0
 15279                           ;doprnt.c: 1422: {
 15280                           ;doprnt.c: 1424: if(width
 15281                           ;doprnt.c: 1428: )
 15282  001AAC  0100               	movlb	0	; () banked
 15283  001AAE  518A               	movf	i1printf@width& (0+255),w,b
 15284  001AB0  0100               	movlb	0	; () banked
 15285  001AB2  118B               	iorwf	(i1printf@width+1)& (0+255),w,b
 15286  001AB4  B4D8               	btfsc	status,2,c
 15287  001AB6  D00F               	goto	i1l5916
 15288  001AB8                     i1l5912:
 15289                           
 15290                           ; BSR set to: 0
 15291                           ;doprnt.c: 1430: (putch(' ') );
 15292  001AB8  0E20               	movlw	32
 15293  001ABA  ECD6  F021         	call	i1_putch
 15294                           
 15295                           ;doprnt.c: 1431: while(--width);
 15296  001ABE  0100               	movlb	0	; () banked
 15297  001AC0  078A               	decf	i1printf@width& (0+255),f,b
 15298  001AC2  A0D8               	btfss	status,0,c
 15299  001AC4  078B               	decf	(i1printf@width+1)& (0+255),f,b
 15300  001AC6  0100               	movlb	0	; () banked
 15301  001AC8  518A               	movf	i1printf@width& (0+255),w,b
 15302  001ACA  0100               	movlb	0	; () banked
 15303  001ACC  118B               	iorwf	(i1printf@width+1)& (0+255),w,b
 15304  001ACE  B4D8               	btfsc	status,2,c
 15305  001AD0  D002               	goto	i1l5916
 15306  001AD2  D7F2               	goto	i1l5912
 15307                           
 15308                           ; BSR set to: 0
 15309  001AD4  D000               	goto	i1l5916
 15310  001AD6                     i1l5916:
 15311                           
 15312                           ; BSR set to: 0
 15313                           ;doprnt.c: 1438: if(flag & 0x03)
 15314  001AD6  C087  F024         	movff	i1printf@flag,??i1_printf
 15315  001ADA  0E03               	movlw	3
 15316  001ADC  1624               	andwf	??i1_printf,f,c
 15317  001ADE  B4D8               	btfsc	status,2,c
 15318  001AE0  D004               	goto	i1l5920
 15319                           
 15320                           ; BSR set to: 0
 15321                           ;doprnt.c: 1439: (putch('-') );
 15322  001AE2  0E2D               	movlw	45
 15323  001AE4  ECD6  F021         	call	i1_putch
 15324  001AE8  D000               	goto	i1l5920
 15325  001AEA                     i1l5920:
 15326                           
 15327                           ;doprnt.c: 1469: }
 15328                           ;doprnt.c: 1472: prec = c;
 15329  001AEA  C08C  F082         	movff	i1printf@c,i1printf@prec
 15330                           
 15331                           ;doprnt.c: 1474: while(prec--) {
 15332  001AEE  D028               	goto	i1l5926
 15333  001AF0                     i1l5922:
 15334                           
 15335                           ;doprnt.c: 1478: {
 15336                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15337  001AF0  0100               	movlb	0	; () banked
 15338  001AF2  5182               	movf	i1printf@prec& (0+255),w,b
 15339  001AF4  0D02               	mullw	2
 15340  001AF6  0E55               	movlw	low _dpowers
 15341  001AF8  24F3               	addwf	prodl,w,c
 15342  001AFA  6EF6               	movwf	tblptrl,c
 15343  001AFC  0E7D               	movlw	high _dpowers
 15344  001AFE  20F4               	addwfc	prodh,w,c
 15345  001B00  6EF7               	movwf	tblptrh,c
 15346  001B02                     	if	0	;There are less than 3 active tblptr bytes
 15347  001B02                     	endif
 15348  001B02  0009               	tblrd		*+
 15349  001B04  CFF5 F018          	movff	tablat,i1___lwdiv@divisor
 15350  001B08  000A               	tblrd		*-
 15351  001B0A  CFF5 F019          	movff	tablat,i1___lwdiv@divisor+1
 15352  001B0E  C088  F016         	movff	i1printf@val,i1___lwdiv@dividend
 15353  001B12  C089  F017         	movff	i1printf@val+1,i1___lwdiv@dividend+1
 15354  001B16  ECA6  F01F         	call	i1___lwdiv	;wreg free
 15355  001B1A  C016  F01D         	movff	?i1___lwdiv,i1___lwmod@dividend
 15356  001B1E  C017  F01E         	movff	?i1___lwdiv+1,i1___lwmod@dividend+1
 15357  001B22  0E00               	movlw	0
 15358  001B24  6E20               	movwf	i1___lwmod@divisor+1,c
 15359  001B26  0E0A               	movlw	10
 15360  001B28  6E1F               	movwf	i1___lwmod@divisor,c
 15361  001B2A  ECFF  F01F         	call	i1___lwmod	;wreg free
 15362  001B2E  501D               	movf	?i1___lwmod,w,c
 15363  001B30  0F30               	addlw	48
 15364  001B32  0100               	movlb	0	; () banked
 15365  001B34  6F8C               	movwf	i1printf@c& (0+255),b
 15366                           
 15367                           ; BSR set to: 0
 15368                           ;doprnt.c: 1523: }
 15369                           ;doprnt.c: 1524: (putch(c) );
 15370  001B36  0100               	movlb	0	; () banked
 15371  001B38  518C               	movf	i1printf@c& (0+255),w,b
 15372  001B3A  ECD6  F021         	call	i1_putch
 15373  001B3E  D000               	goto	i1l5926
 15374  001B40                     i1l5926:
 15375  001B40  0100               	movlb	0	; () banked
 15376  001B42  0782               	decf	i1printf@prec& (0+255),f,b
 15377  001B44  0100               	movlb	0	; () banked
 15378  001B46  2982               	incf	i1printf@prec& (0+255),w,b
 15379  001B48  B4D8               	btfsc	status,2,c
 15380  001B4A  D002               	goto	i1l5928
 15381  001B4C  D7D1               	goto	i1l5922
 15382                           
 15383                           ; BSR set to: 0
 15384  001B4E  D000               	goto	i1l5928
 15385  001B50                     i1l5928:
 15386  001B50  5022               	movf	i1printf@f,w,c
 15387  001B52  6E24               	movwf	??i1_printf& (0+255),c
 15388  001B54  5023               	movf	i1printf@f+1,w,c
 15389  001B56  6E25               	movwf	(??i1_printf+1)& (0+255),c
 15390  001B58  4A22               	infsnz	i1printf@f,f,c
 15391  001B5A  2A23               	incf	i1printf@f+1,f,c
 15392  001B5C  C024  FFF6         	movff	??i1_printf,tblptrl
 15393  001B60  C025  FFF7         	movff	??i1_printf+1,tblptrh
 15394  001B64  6AF8               	clrf	tblptru,c
 15395  001B66  0E05               	movlw	(high __ramtop+-1)
 15396  001B68  64F7               	cpfsgt	tblptrh,c
 15397  001B6A  D003               	bra	i1u681_27
 15398  001B6C  0008               	tblrd		*
 15399  001B6E  50F5               	movf	tablat,w,c
 15400  001B70  D005               	bra	i1u681_20
 15401  001B72                     i1u681_27:
 15402  001B72  CFF6 FFE9          	movff	tblptrl,fsr0l
 15403  001B76  CFF7 FFEA          	movff	tblptrh,fsr0h
 15404  001B7A  50EF               	movf	indf0,w,c
 15405  001B7C                     i1u681_20:
 15406  001B7C  0100               	movlb	0	; () banked
 15407  001B7E  6F8C               	movwf	i1printf@c& (0+255),b
 15408  001B80  0100               	movlb	0	; () banked
 15409  001B82  518C               	movf	i1printf@c& (0+255),w,b
 15410  001B84  B4D8               	btfsc	status,2,c
 15411  001B86  D002               	goto	i1l681
 15412  001B88  D628               	goto	i1l5826
 15413                           
 15414                           ; BSR set to: 0
 15415  001B8A  D000               	goto	i1l681
 15416  001B8C                     i1l681:
 15417  001B8C  0012               	return		;funcret
 15418  001B8E                     __end_ofi1_printf:
 15419                           	opt stack 0
 15420                           pclatu	equ	0xFFB
 15421                           pclath	equ	0xFFA
 15422                           tblptru	equ	0xFF8
 15423                           tblptrh	equ	0xFF7
 15424                           tblptrl	equ	0xFF6
 15425                           tablat	equ	0xFF5
 15426                           prodh	equ	0xFF4
 15427                           prodl	equ	0xFF3
 15428                           intcon	equ	0xFF2
 15429                           intcon2	equ	0xFF1
 15430                           indf0	equ	0xFEF
 15431                           postinc0	equ	0xFEE
 15432                           fsr0h	equ	0xFEA
 15433                           fsr0l	equ	0xFE9
 15434                           wreg	equ	0xFE8
 15435                           postinc1	equ	0xFE6
 15436                           postdec1	equ	0xFE5
 15437                           plusw1	equ	0xFE3
 15438                           fsr1h	equ	0xFE2
 15439                           fsr1l	equ	0xFE1
 15440                           bsr	equ	0xFE0
 15441                           indf2	equ	0xFDF
 15442                           postinc2	equ	0xFDE
 15443                           postdec2	equ	0xFDD
 15444                           plusw2	equ	0xFDB
 15445                           fsr2h	equ	0xFDA
 15446                           fsr2l	equ	0xFD9
 15447                           status	equ	0xFD8
 15448                           
 15449 ;; *************** function i1_putch *****************
 15450 ;; Defined at:
 15451 ;;		line 77 in file "SerialFuncs.c"
 15452 ;; Parameters:    Size  Location     Type
 15453 ;;  c               1    wreg     unsigned char 
 15454 ;; Auto vars:     Size  Location     Type
 15455 ;;  c               1   21[COMRAM] unsigned char 
 15456 ;; Return value:  Size  Location     Type
 15457 ;;		None               void
 15458 ;; Registers used:
 15459 ;;		wreg
 15460 ;; Tracked objects:
 15461 ;;		On entry : 0/0
 15462 ;;		On exit  : 0/0
 15463 ;;		Unchanged: 0/0
 15464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15465 ;;      Params:         0       0       0       0       0       0       0
 15466 ;;      Locals:         1       0       0       0       0       0       0
 15467 ;;      Temps:          0       0       0       0       0       0       0
 15468 ;;      Totals:         1       0       0       0       0       0       0
 15469 ;;Total ram usage:        1 bytes
 15470 ;; Hardware stack levels used:    1
 15471 ;; Hardware stack levels required when called:    2
 15472 ;; This function calls:
 15473 ;;		Nothing
 15474 ;; This function is called by:
 15475 ;;		i1_printf
 15476 ;; This function uses a non-reentrant model
 15477 ;;
 15478                           
 15479                           	psect	text52
 15480  0043AC                     __ptext52:
 15481                           	opt stack 0
 15482  0043AC                     i1_putch:
 15483                           	opt stack 20
 15484                           
 15485                           ;incstack = 0
 15486                           ;i1putch@c stored from wreg
 15487  0043AC  6E16               	movwf	i1putch@c,c
 15488                           
 15489                           ;SerialFuncs.c: 79: while (!TXIF);
 15490  0043AE  D000               	goto	i1l325
 15491  0043B0                     i1l325:
 15492  0043B0  A89E               	btfss	3998,4,c	;volatile
 15493  0043B2  D7FE               	goto	i1l325
 15494                           
 15495                           ;SerialFuncs.c: 80: TXREG = c;
 15496  0043B4  C016  FFAD         	movff	i1putch@c,4013	;volatile
 15497  0043B8  0012               	return		;funcret
 15498  0043BA                     __end_ofi1_putch:
 15499                           	opt stack 0
 15500                           pclatu	equ	0xFFB
 15501                           pclath	equ	0xFFA
 15502                           tblptru	equ	0xFF8
 15503                           tblptrh	equ	0xFF7
 15504                           tblptrl	equ	0xFF6
 15505                           tablat	equ	0xFF5
 15506                           prodh	equ	0xFF4
 15507                           prodl	equ	0xFF3
 15508                           intcon	equ	0xFF2
 15509                           intcon2	equ	0xFF1
 15510                           indf0	equ	0xFEF
 15511                           postinc0	equ	0xFEE
 15512                           fsr0h	equ	0xFEA
 15513                           fsr0l	equ	0xFE9
 15514                           wreg	equ	0xFE8
 15515                           postinc1	equ	0xFE6
 15516                           postdec1	equ	0xFE5
 15517                           plusw1	equ	0xFE3
 15518                           fsr1h	equ	0xFE2
 15519                           fsr1l	equ	0xFE1
 15520                           bsr	equ	0xFE0
 15521                           indf2	equ	0xFDF
 15522                           postinc2	equ	0xFDE
 15523                           postdec2	equ	0xFDD
 15524                           plusw2	equ	0xFDB
 15525                           fsr2h	equ	0xFDA
 15526                           fsr2l	equ	0xFD9
 15527                           status	equ	0xFD8
 15528                           
 15529 ;; *************** function i1_isdigit *****************
 15530 ;; Defined at:
 15531 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 15532 ;; Parameters:    Size  Location     Type
 15533 ;;  c               1    wreg     unsigned char 
 15534 ;; Auto vars:     Size  Location     Type
 15535 ;;  c               1   23[COMRAM] unsigned char 
 15536 ;; Return value:  Size  Location     Type
 15537 ;;		None               void
 15538 ;; Registers used:
 15539 ;;		wreg, status,2, status,0
 15540 ;; Tracked objects:
 15541 ;;		On entry : 0/0
 15542 ;;		On exit  : 0/0
 15543 ;;		Unchanged: 0/0
 15544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15545 ;;      Params:         0       0       0       0       0       0       0
 15546 ;;      Locals:         2       0       0       0       0       0       0
 15547 ;;      Temps:          1       0       0       0       0       0       0
 15548 ;;      Totals:         3       0       0       0       0       0       0
 15549 ;;Total ram usage:        3 bytes
 15550 ;; Hardware stack levels used:    1
 15551 ;; Hardware stack levels required when called:    2
 15552 ;; This function calls:
 15553 ;;		Nothing
 15554 ;; This function is called by:
 15555 ;;		i1_printf
 15556 ;; This function uses a non-reentrant model
 15557 ;;
 15558                           
 15559                           	psect	text53
 15560  0042C4                     __ptext53:
 15561                           	opt stack 0
 15562  0042C4                     i1_isdigit:
 15563                           	opt stack 20
 15564                           
 15565                           ;incstack = 0
 15566                           ;i1isdigit@c stored from wreg
 15567  0042C4  6E18               	movwf	i1isdigit@c,c
 15568  0042C6  0E00               	movlw	0
 15569  0042C8  6E17               	movwf	i1_isdigit$2238,c
 15570  0042CA  0E3A               	movlw	58
 15571  0042CC  6018               	cpfslt	i1isdigit@c,c
 15572  0042CE  D006               	goto	i1l5646
 15573  0042D0  0E2F               	movlw	47
 15574  0042D2  6418               	cpfsgt	i1isdigit@c,c
 15575  0042D4  D003               	goto	i1l5646
 15576  0042D6  0E01               	movlw	1
 15577  0042D8  6E17               	movwf	i1_isdigit$2238,c
 15578  0042DA  D000               	goto	i1l5646
 15579  0042DC                     i1l5646:
 15580  0042DC  C017  F016         	movff	i1_isdigit$2238,??i1_isdigit
 15581  0042E0  3016               	rrcf	??i1_isdigit,w,c
 15582  0042E2  D000               	goto	i1l1259
 15583  0042E4                     i1l1259:
 15584  0042E4  0012               	return		;funcret
 15585  0042E6                     __end_ofi1_isdigit:
 15586                           	opt stack 0
 15587                           pclatu	equ	0xFFB
 15588                           pclath	equ	0xFFA
 15589                           tblptru	equ	0xFF8
 15590                           tblptrh	equ	0xFF7
 15591                           tblptrl	equ	0xFF6
 15592                           tablat	equ	0xFF5
 15593                           prodh	equ	0xFF4
 15594                           prodl	equ	0xFF3
 15595                           intcon	equ	0xFF2
 15596                           intcon2	equ	0xFF1
 15597                           indf0	equ	0xFEF
 15598                           postinc0	equ	0xFEE
 15599                           fsr0h	equ	0xFEA
 15600                           fsr0l	equ	0xFE9
 15601                           wreg	equ	0xFE8
 15602                           postinc1	equ	0xFE6
 15603                           postdec1	equ	0xFE5
 15604                           plusw1	equ	0xFE3
 15605                           fsr1h	equ	0xFE2
 15606                           fsr1l	equ	0xFE1
 15607                           bsr	equ	0xFE0
 15608                           indf2	equ	0xFDF
 15609                           postinc2	equ	0xFDE
 15610                           postdec2	equ	0xFDD
 15611                           plusw2	equ	0xFDB
 15612                           fsr2h	equ	0xFDA
 15613                           fsr2l	equ	0xFD9
 15614                           status	equ	0xFD8
 15615                           
 15616 ;; *************** function i1___wmul *****************
 15617 ;; Defined at:
 15618 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 15619 ;; Parameters:    Size  Location     Type
 15620 ;;  multiplier      2   21[COMRAM] unsigned int 
 15621 ;;  multiplicand    2   23[COMRAM] unsigned int 
 15622 ;; Auto vars:     Size  Location     Type
 15623 ;;  __wmul          2   25[COMRAM] unsigned int 
 15624 ;; Return value:  Size  Location     Type
 15625 ;;                  2   21[COMRAM] unsigned int 
 15626 ;; Registers used:
 15627 ;;		wreg, status,2, status,0, prodl, prodh
 15628 ;; Tracked objects:
 15629 ;;		On entry : 0/0
 15630 ;;		On exit  : 0/0
 15631 ;;		Unchanged: 0/0
 15632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15633 ;;      Params:         4       0       0       0       0       0       0
 15634 ;;      Locals:         2       0       0       0       0       0       0
 15635 ;;      Temps:          0       0       0       0       0       0       0
 15636 ;;      Totals:         6       0       0       0       0       0       0
 15637 ;;Total ram usage:        6 bytes
 15638 ;; Hardware stack levels used:    1
 15639 ;; Hardware stack levels required when called:    2
 15640 ;; This function calls:
 15641 ;;		Nothing
 15642 ;; This function is called by:
 15643 ;;		i1_printf
 15644 ;; This function uses a non-reentrant model
 15645 ;;
 15646                           
 15647                           	psect	text54
 15648  004230                     __ptext54:
 15649                           	opt stack 0
 15650  004230                     i1___wmul:
 15651                           	opt stack 20
 15652                           
 15653                           ;incstack = 0
 15654  004230  5016               	movf	i1___wmul@multiplier,w,c
 15655  004232  0218               	mulwf	i1___wmul@multiplicand,c
 15656  004234  CFF3 F01A          	movff	prodl,i1___wmul@product
 15657  004238  CFF4 F01B          	movff	prodh,i1___wmul@product+1
 15658  00423C  5016               	movf	i1___wmul@multiplier,w,c
 15659  00423E  0219               	mulwf	i1___wmul@multiplicand+1,c
 15660  004240  50F3               	movf	prodl,w,c
 15661  004242  261B               	addwf	i1___wmul@product+1,f,c
 15662  004244  5017               	movf	i1___wmul@multiplier+1,w,c
 15663  004246  0218               	mulwf	i1___wmul@multiplicand,c
 15664  004248  50F3               	movf	prodl,w,c
 15665  00424A  261B               	addwf	i1___wmul@product+1,f,c
 15666  00424C  C01A  F016         	movff	i1___wmul@product,?i1___wmul
 15667  004250  C01B  F017         	movff	i1___wmul@product+1,?i1___wmul+1
 15668  004254  D000               	goto	i1l788
 15669  004256                     i1l788:
 15670  004256  0012               	return		;funcret
 15671  004258                     __end_ofi1___wmul:
 15672                           	opt stack 0
 15673                           pclatu	equ	0xFFB
 15674                           pclath	equ	0xFFA
 15675                           tblptru	equ	0xFF8
 15676                           tblptrh	equ	0xFF7
 15677                           tblptrl	equ	0xFF6
 15678                           tablat	equ	0xFF5
 15679                           prodh	equ	0xFF4
 15680                           prodl	equ	0xFF3
 15681                           intcon	equ	0xFF2
 15682                           intcon2	equ	0xFF1
 15683                           indf0	equ	0xFEF
 15684                           postinc0	equ	0xFEE
 15685                           fsr0h	equ	0xFEA
 15686                           fsr0l	equ	0xFE9
 15687                           wreg	equ	0xFE8
 15688                           postinc1	equ	0xFE6
 15689                           postdec1	equ	0xFE5
 15690                           plusw1	equ	0xFE3
 15691                           fsr1h	equ	0xFE2
 15692                           fsr1l	equ	0xFE1
 15693                           bsr	equ	0xFE0
 15694                           indf2	equ	0xFDF
 15695                           postinc2	equ	0xFDE
 15696                           postdec2	equ	0xFDD
 15697                           plusw2	equ	0xFDB
 15698                           fsr2h	equ	0xFDA
 15699                           fsr2l	equ	0xFD9
 15700                           status	equ	0xFD8
 15701                           
 15702 ;; *************** function i1___lwmod *****************
 15703 ;; Defined at:
 15704 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 15705 ;; Parameters:    Size  Location     Type
 15706 ;;  dividend        2   28[COMRAM] unsigned int 
 15707 ;;  divisor         2   30[COMRAM] unsigned int 
 15708 ;; Auto vars:     Size  Location     Type
 15709 ;;  __lwmod         1   32[COMRAM] unsigned char 
 15710 ;; Return value:  Size  Location     Type
 15711 ;;                  2   28[COMRAM] unsigned int 
 15712 ;; Registers used:
 15713 ;;		wreg, status,2, status,0
 15714 ;; Tracked objects:
 15715 ;;		On entry : 0/0
 15716 ;;		On exit  : 0/0
 15717 ;;		Unchanged: 0/0
 15718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15719 ;;      Params:         4       0       0       0       0       0       0
 15720 ;;      Locals:         1       0       0       0       0       0       0
 15721 ;;      Temps:          0       0       0       0       0       0       0
 15722 ;;      Totals:         5       0       0       0       0       0       0
 15723 ;;Total ram usage:        5 bytes
 15724 ;; Hardware stack levels used:    1
 15725 ;; Hardware stack levels required when called:    2
 15726 ;; This function calls:
 15727 ;;		Nothing
 15728 ;; This function is called by:
 15729 ;;		i1_printf
 15730 ;; This function uses a non-reentrant model
 15731 ;;
 15732                           
 15733                           	psect	text55
 15734  003FFE                     __ptext55:
 15735                           	opt stack 0
 15736  003FFE                     i1___lwmod:
 15737                           	opt stack 20
 15738                           
 15739                           ;incstack = 0
 15740  003FFE  501F               	movf	i1___lwmod@divisor,w,c
 15741  004000  1020               	iorwf	i1___lwmod@divisor+1,w,c
 15742  004002  B4D8               	btfsc	status,2,c
 15743  004004  D01D               	goto	i1l1377
 15744  004006  0E01               	movlw	1
 15745  004008  6E21               	movwf	i1___lwmod@counter,c
 15746  00400A  D005               	goto	i1l5678
 15747  00400C                     i1l5676:
 15748  00400C  90D8               	bcf	status,0,c
 15749  00400E  361F               	rlcf	i1___lwmod@divisor,f,c
 15750  004010  3620               	rlcf	i1___lwmod@divisor+1,f,c
 15751  004012  2A21               	incf	i1___lwmod@counter,f,c
 15752  004014  D000               	goto	i1l5678
 15753  004016                     i1l5678:
 15754  004016  BE20               	btfsc	i1___lwmod@divisor+1,7,c
 15755  004018  D002               	goto	i1l5680
 15756  00401A  D7F8               	goto	i1l5676
 15757  00401C  D000               	goto	i1l5680
 15758  00401E                     i1l5680:
 15759  00401E  501F               	movf	i1___lwmod@divisor,w,c
 15760  004020  5C1D               	subwf	i1___lwmod@dividend,w,c
 15761  004022  5020               	movf	i1___lwmod@divisor+1,w,c
 15762  004024  581E               	subwfb	i1___lwmod@dividend+1,w,c
 15763  004026  A0D8               	btfss	status,0,c
 15764  004028  D005               	goto	i1l5684
 15765  00402A  501F               	movf	i1___lwmod@divisor,w,c
 15766  00402C  5E1D               	subwf	i1___lwmod@dividend,f,c
 15767  00402E  5020               	movf	i1___lwmod@divisor+1,w,c
 15768  004030  5A1E               	subwfb	i1___lwmod@dividend+1,f,c
 15769  004032  D000               	goto	i1l5684
 15770  004034                     i1l5684:
 15771  004034  90D8               	bcf	status,0,c
 15772  004036  3220               	rrcf	i1___lwmod@divisor+1,f,c
 15773  004038  321F               	rrcf	i1___lwmod@divisor,f,c
 15774  00403A  2E21               	decfsz	i1___lwmod@counter,f,c
 15775  00403C  D7F0               	goto	i1l5680
 15776  00403E  D000               	goto	i1l1377
 15777  004040                     i1l1377:
 15778  004040  C01D  F01D         	movff	i1___lwmod@dividend,?i1___lwmod
 15779  004044  C01E  F01E         	movff	i1___lwmod@dividend+1,?i1___lwmod+1
 15780  004048  0012               	return		;funcret
 15781  00404A                     __end_ofi1___lwmod:
 15782                           	opt stack 0
 15783                           pclatu	equ	0xFFB
 15784                           pclath	equ	0xFFA
 15785                           tblptru	equ	0xFF8
 15786                           tblptrh	equ	0xFF7
 15787                           tblptrl	equ	0xFF6
 15788                           tablat	equ	0xFF5
 15789                           prodh	equ	0xFF4
 15790                           prodl	equ	0xFF3
 15791                           intcon	equ	0xFF2
 15792                           intcon2	equ	0xFF1
 15793                           indf0	equ	0xFEF
 15794                           postinc0	equ	0xFEE
 15795                           fsr0h	equ	0xFEA
 15796                           fsr0l	equ	0xFE9
 15797                           wreg	equ	0xFE8
 15798                           postinc1	equ	0xFE6
 15799                           postdec1	equ	0xFE5
 15800                           plusw1	equ	0xFE3
 15801                           fsr1h	equ	0xFE2
 15802                           fsr1l	equ	0xFE1
 15803                           bsr	equ	0xFE0
 15804                           indf2	equ	0xFDF
 15805                           postinc2	equ	0xFDE
 15806                           postdec2	equ	0xFDD
 15807                           plusw2	equ	0xFDB
 15808                           fsr2h	equ	0xFDA
 15809                           fsr2l	equ	0xFD9
 15810                           status	equ	0xFD8
 15811                           
 15812 ;; *************** function i1___lwdiv *****************
 15813 ;; Defined at:
 15814 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 15815 ;; Parameters:    Size  Location     Type
 15816 ;;  dividend        2   21[COMRAM] unsigned int 
 15817 ;;  divisor         2   23[COMRAM] unsigned int 
 15818 ;; Auto vars:     Size  Location     Type
 15819 ;;  __lwdiv         2   26[COMRAM] unsigned int 
 15820 ;;  __lwdiv         1   25[COMRAM] unsigned char 
 15821 ;; Return value:  Size  Location     Type
 15822 ;;                  2   21[COMRAM] unsigned int 
 15823 ;; Registers used:
 15824 ;;		wreg, status,2, status,0
 15825 ;; Tracked objects:
 15826 ;;		On entry : 0/0
 15827 ;;		On exit  : 0/0
 15828 ;;		Unchanged: 0/0
 15829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15830 ;;      Params:         4       0       0       0       0       0       0
 15831 ;;      Locals:         3       0       0       0       0       0       0
 15832 ;;      Temps:          0       0       0       0       0       0       0
 15833 ;;      Totals:         7       0       0       0       0       0       0
 15834 ;;Total ram usage:        7 bytes
 15835 ;; Hardware stack levels used:    1
 15836 ;; Hardware stack levels required when called:    2
 15837 ;; This function calls:
 15838 ;;		Nothing
 15839 ;; This function is called by:
 15840 ;;		i1_printf
 15841 ;; This function uses a non-reentrant model
 15842 ;;
 15843                           
 15844                           	psect	text56
 15845  003F4C                     __ptext56:
 15846                           	opt stack 0
 15847  003F4C                     i1___lwdiv:
 15848                           	opt stack 20
 15849                           
 15850                           ;incstack = 0
 15851  003F4C  0E00               	movlw	0
 15852  003F4E  6E1C               	movwf	i1___lwdiv@quotient+1,c
 15853  003F50  0E00               	movlw	0
 15854  003F52  6E1B               	movwf	i1___lwdiv@quotient,c
 15855  003F54  5018               	movf	i1___lwdiv@divisor,w,c
 15856  003F56  1019               	iorwf	i1___lwdiv@divisor+1,w,c
 15857  003F58  B4D8               	btfsc	status,2,c
 15858  003F5A  D021               	goto	i1l1367
 15859  003F5C  0E01               	movlw	1
 15860  003F5E  6E1A               	movwf	i1___lwdiv@counter,c
 15861  003F60  D005               	goto	i1l5658
 15862  003F62                     i1l5656:
 15863  003F62  90D8               	bcf	status,0,c
 15864  003F64  3618               	rlcf	i1___lwdiv@divisor,f,c
 15865  003F66  3619               	rlcf	i1___lwdiv@divisor+1,f,c
 15866  003F68  2A1A               	incf	i1___lwdiv@counter,f,c
 15867  003F6A  D000               	goto	i1l5658
 15868  003F6C                     i1l5658:
 15869  003F6C  BE19               	btfsc	i1___lwdiv@divisor+1,7,c
 15870  003F6E  D002               	goto	i1l5660
 15871  003F70  D7F8               	goto	i1l5656
 15872  003F72  D000               	goto	i1l5660
 15873  003F74                     i1l5660:
 15874  003F74  90D8               	bcf	status,0,c
 15875  003F76  361B               	rlcf	i1___lwdiv@quotient,f,c
 15876  003F78  361C               	rlcf	i1___lwdiv@quotient+1,f,c
 15877  003F7A  5018               	movf	i1___lwdiv@divisor,w,c
 15878  003F7C  5C16               	subwf	i1___lwdiv@dividend,w,c
 15879  003F7E  5019               	movf	i1___lwdiv@divisor+1,w,c
 15880  003F80  5817               	subwfb	i1___lwdiv@dividend+1,w,c
 15881  003F82  A0D8               	btfss	status,0,c
 15882  003F84  D006               	goto	i1l5668
 15883  003F86  5018               	movf	i1___lwdiv@divisor,w,c
 15884  003F88  5E16               	subwf	i1___lwdiv@dividend,f,c
 15885  003F8A  5019               	movf	i1___lwdiv@divisor+1,w,c
 15886  003F8C  5A17               	subwfb	i1___lwdiv@dividend+1,f,c
 15887  003F8E  801B               	bsf	i1___lwdiv@quotient,0,c
 15888  003F90  D000               	goto	i1l5668
 15889  003F92                     i1l5668:
 15890  003F92  90D8               	bcf	status,0,c
 15891  003F94  3219               	rrcf	i1___lwdiv@divisor+1,f,c
 15892  003F96  3218               	rrcf	i1___lwdiv@divisor,f,c
 15893  003F98  2E1A               	decfsz	i1___lwdiv@counter,f,c
 15894  003F9A  D7EC               	goto	i1l5660
 15895  003F9C  D000               	goto	i1l1367
 15896  003F9E                     i1l1367:
 15897  003F9E  C01B  F016         	movff	i1___lwdiv@quotient,?i1___lwdiv
 15898  003FA2  C01C  F017         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
 15899  003FA6  0012               	return		;funcret
 15900  003FA8                     __end_ofi1___lwdiv:
 15901                           	opt stack 0
 15902                           pclatu	equ	0xFFB
 15903                           pclath	equ	0xFFA
 15904                           tblptru	equ	0xFF8
 15905                           tblptrh	equ	0xFF7
 15906                           tblptrl	equ	0xFF6
 15907                           tablat	equ	0xFF5
 15908                           prodh	equ	0xFF4
 15909                           prodl	equ	0xFF3
 15910                           intcon	equ	0xFF2
 15911                           intcon2	equ	0xFF1
 15912                           indf0	equ	0xFEF
 15913                           postinc0	equ	0xFEE
 15914                           fsr0h	equ	0xFEA
 15915                           fsr0l	equ	0xFE9
 15916                           wreg	equ	0xFE8
 15917                           postinc1	equ	0xFE6
 15918                           postdec1	equ	0xFE5
 15919                           plusw1	equ	0xFE3
 15920                           fsr1h	equ	0xFE2
 15921                           fsr1l	equ	0xFE1
 15922                           bsr	equ	0xFE0
 15923                           indf2	equ	0xFDF
 15924                           postinc2	equ	0xFDE
 15925                           postdec2	equ	0xFDD
 15926                           plusw2	equ	0xFDB
 15927                           fsr2h	equ	0xFDA
 15928                           fsr2l	equ	0xFD9
 15929                           status	equ	0xFD8
 15930                           
 15931 ;; *************** function _ReadUSART *****************
 15932 ;; Defined at:
 15933 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uread.c"
 15934 ;; Parameters:    Size  Location     Type
 15935 ;;		None
 15936 ;; Auto vars:     Size  Location     Type
 15937 ;;  data            1   21[COMRAM] unsigned char 
 15938 ;; Return value:  Size  Location     Type
 15939 ;;                  1    wreg      unsigned char 
 15940 ;; Registers used:
 15941 ;;		wreg, status,2, status,0
 15942 ;; Tracked objects:
 15943 ;;		On entry : 0/0
 15944 ;;		On exit  : 0/0
 15945 ;;		Unchanged: 0/0
 15946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15947 ;;      Params:         0       0       0       0       0       0       0
 15948 ;;      Locals:         1       0       0       0       0       0       0
 15949 ;;      Temps:          0       0       0       0       0       0       0
 15950 ;;      Totals:         1       0       0       0       0       0       0
 15951 ;;Total ram usage:        1 bytes
 15952 ;; Hardware stack levels used:    1
 15953 ;; Hardware stack levels required when called:    2
 15954 ;; This function calls:
 15955 ;;		Nothing
 15956 ;; This function is called by:
 15957 ;;		_SerialRxPinInterrupt
 15958 ;; This function uses a non-reentrant model
 15959 ;;
 15960                           
 15961                           	psect	text57
 15962  00427E                     __ptext57:
 15963                           	opt stack 0
 15964  00427E                     _ReadUSART:
 15965                           	opt stack 21
 15966                           
 15967                           ;incstack = 0
 15968  00427E  0EF2               	movlw	242
 15969  004280  1646               	andwf	_USART_Status,f,c
 15970  004282  ACAB               	btfss	4011,6,c	;volatile
 15971  004284  D005               	goto	i1l781
 15972  004286  9046               	bcf	_USART_Status,0,c
 15973  004288  A0AB               	btfss	4011,0,c	;volatile
 15974  00428A  D002               	goto	i1l781
 15975  00428C  8046               	bsf	_USART_Status,0,c
 15976  00428E  D000               	goto	i1l781
 15977  004290                     i1l781:
 15978  004290  B4AB               	btfsc	4011,2,c	;volatile
 15979  004292  8446               	bsf	_USART_Status,2,c
 15980  004294  B2AB               	btfsc	4011,1,c	;volatile
 15981  004296  8646               	bsf	_USART_Status,3,c
 15982  004298  CFAE F016          	movff	4014,ReadUSART@data	;volatile
 15983  00429C  5016               	movf	ReadUSART@data,w,c
 15984  00429E  D000               	goto	i1l785
 15985  0042A0                     i1l785:
 15986  0042A0  0012               	return		;funcret
 15987  0042A2                     __end_of_ReadUSART:
 15988                           	opt stack 0
 15989                           pclatu	equ	0xFFB
 15990                           pclath	equ	0xFFA
 15991                           tblptru	equ	0xFF8
 15992                           tblptrh	equ	0xFF7
 15993                           tblptrl	equ	0xFF6
 15994                           tablat	equ	0xFF5
 15995                           prodh	equ	0xFF4
 15996                           prodl	equ	0xFF3
 15997                           intcon	equ	0xFF2
 15998                           intcon2	equ	0xFF1
 15999                           indf0	equ	0xFEF
 16000                           postinc0	equ	0xFEE
 16001                           fsr0h	equ	0xFEA
 16002                           fsr0l	equ	0xFE9
 16003                           wreg	equ	0xFE8
 16004                           postinc1	equ	0xFE6
 16005                           postdec1	equ	0xFE5
 16006                           plusw1	equ	0xFE3
 16007                           fsr1h	equ	0xFE2
 16008                           fsr1l	equ	0xFE1
 16009                           bsr	equ	0xFE0
 16010                           indf2	equ	0xFDF
 16011                           postinc2	equ	0xFDE
 16012                           postdec2	equ	0xFDD
 16013                           plusw2	equ	0xFDB
 16014                           fsr2h	equ	0xFDA
 16015                           fsr2l	equ	0xFD9
 16016                           status	equ	0xFD8
 16017                           
 16018 ;; *************** function _TimingISR *****************
 16019 ;; Defined at:
 16020 ;;		line 26 in file "InterruptFuncs.c"
 16021 ;; Parameters:    Size  Location     Type
 16022 ;;		None
 16023 ;; Auto vars:     Size  Location     Type
 16024 ;;		None
 16025 ;; Return value:  Size  Location     Type
 16026 ;;		None               void
 16027 ;; Registers used:
 16028 ;;		wreg, status,2, status,0, cstack
 16029 ;; Tracked objects:
 16030 ;;		On entry : 0/0
 16031 ;;		On exit  : 0/0
 16032 ;;		Unchanged: 0/0
 16033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16034 ;;      Params:         0       0       0       0       0       0       0
 16035 ;;      Locals:         0       0       0       0       0       0       0
 16036 ;;      Temps:         16       0       0       0       0       0       0
 16037 ;;      Totals:        16       0       0       0       0       0       0
 16038 ;;Total ram usage:       16 bytes
 16039 ;; Hardware stack levels used:    1
 16040 ;; Hardware stack levels required when called:    1
 16041 ;; This function calls:
 16042 ;;		i2___lwmod
 16043 ;; This function is called by:
 16044 ;;		Interrupt level 2
 16045 ;; This function uses a non-reentrant model
 16046 ;;
 16047                           
 16048                           	psect	intcode
 16049  000008                     __pintcode:
 16050                           	opt stack 0
 16051  000008                     _TimingISR:
 16052                           	opt stack 20
 16053                           
 16054                           ;incstack = 0
 16055  000008  CFFA F008          	movff	pclath,??_TimingISR+2
 16056  00000C  CFFB F009          	movff	pclatu,??_TimingISR+3
 16057  000010  CFE9 F00A          	movff	fsr0l,??_TimingISR+4
 16058  000014  EDA0  F014         	call	int_func,f	;refresh shadow registers
 16059                           pclatu	equ	0xFFB
 16060                           pclath	equ	0xFFA
 16061                           tblptru	equ	0xFF8
 16062                           tblptrh	equ	0xFF7
 16063                           tblptrl	equ	0xFF6
 16064                           tablat	equ	0xFF5
 16065                           prodh	equ	0xFF4
 16066                           prodl	equ	0xFF3
 16067                           intcon	equ	0xFF2
 16068                           intcon2	equ	0xFF1
 16069                           indf0	equ	0xFEF
 16070                           postinc0	equ	0xFEE
 16071                           fsr0h	equ	0xFEA
 16072                           fsr0l	equ	0xFE9
 16073                           wreg	equ	0xFE8
 16074                           postinc1	equ	0xFE6
 16075                           postdec1	equ	0xFE5
 16076                           plusw1	equ	0xFE3
 16077                           fsr1h	equ	0xFE2
 16078                           fsr1l	equ	0xFE1
 16079                           bsr	equ	0xFE0
 16080                           indf2	equ	0xFDF
 16081                           postinc2	equ	0xFDE
 16082                           postdec2	equ	0xFDD
 16083                           plusw2	equ	0xFDB
 16084                           fsr2h	equ	0xFDA
 16085                           fsr2l	equ	0xFD9
 16086                           status	equ	0xFD8
 16087                           
 16088                           	psect	intcode_body
 16089  002940                     __pintcode_body:
 16090                           	opt stack 20
 16091  002940                     int_func:
 16092                           	opt stack 20
 16093  002940  0006               	pop		; remove dummy address from shadow register refresh
 16094  002942  CFEA F00B          	movff	fsr0h,??_TimingISR+5
 16095  002946  CFE1 F00C          	movff	fsr1l,??_TimingISR+6
 16096  00294A  CFE2 F00D          	movff	fsr1h,??_TimingISR+7
 16097  00294E  CFD9 F00E          	movff	fsr2l,??_TimingISR+8
 16098  002952  CFDA F00F          	movff	fsr2h,??_TimingISR+9
 16099  002956  CFF3 F010          	movff	prodl,??_TimingISR+10
 16100  00295A  CFF4 F011          	movff	prodh,??_TimingISR+11
 16101  00295E  CFF6 F012          	movff	tblptrl,??_TimingISR+12
 16102  002962  CFF7 F013          	movff	tblptrh,??_TimingISR+13
 16103  002966  CFF8 F014          	movff	tblptru,??_TimingISR+14
 16104  00296A  CFF5 F015          	movff	tablat,??_TimingISR+15
 16105                           
 16106                           ;InterruptFuncs.c: 29: TMR0H = 0x03;
 16107  00296E  0E03               	movlw	3
 16108  002970  6ED7               	movwf	4055,c	;volatile
 16109                           
 16110                           ;InterruptFuncs.c: 30: TMR0L = 0xF9;
 16111  002972  0EF9               	movlw	249
 16112  002974  6ED6               	movwf	4054,c	;volatile
 16113                           
 16114                           ;InterruptFuncs.c: 33: counter++;
 16115  002976  0101               	movlb	1	; () banked
 16116  002978  4BCC               	infsnz	_counter& (0+255),f,b
 16117  00297A  2BCD               	incf	(_counter+1)& (0+255),f,b
 16118                           
 16119                           ; BSR set to: 1
 16120                           ;InterruptFuncs.c: 36: if(counter==62)
 16121  00297C  0E3E               	movlw	62
 16122  00297E  0101               	movlb	1	; () banked
 16123  002980  19CC               	xorwf	_counter& (0+255),w,b
 16124  002982  0101               	movlb	1	; () banked
 16125  002984  11CD               	iorwf	(_counter+1)& (0+255),w,b
 16126  002986  A4D8               	btfss	status,2,c
 16127  002988  D0CF               	goto	i2l442
 16128                           
 16129                           ; BSR set to: 1
 16130                           ;InterruptFuncs.c: 39: seconds=seconds++;
 16131  00298A  0E00               	movlw	0
 16132  00298C  0101               	movlb	1	; () banked
 16133  00298E  6FCD               	movwf	(_counter+1)& (0+255),b
 16134  002990  0E00               	movlw	0
 16135  002992  6FCC               	movwf	_counter& (0+255),b
 16136                           
 16137                           ; BSR set to: 1
 16138  002994  4A38               	infsnz	_seconds,f,c
 16139  002996  2A39               	incf	_seconds+1,f,c
 16140                           
 16141                           ; BSR set to: 1
 16142                           ;InterruptFuncs.c: 40: if (seconds>59){
 16143  002998  5039               	movf	_seconds+1,w,c
 16144  00299A  E104               	bnz	i2u487_40
 16145  00299C  0E3C               	movlw	60
 16146  00299E  5C38               	subwf	_seconds,w,c
 16147  0029A0  A0D8               	btfss	status,0,c
 16148  0029A2  D0C2               	goto	i2l442
 16149  0029A4                     i2u487_40:
 16150                           
 16151                           ; BSR set to: 1
 16152                           ;InterruptFuncs.c: 42: minutes = minutes++;
 16153  0029A4  0E00               	movlw	0
 16154  0029A6  6E39               	movwf	_seconds+1,c
 16155  0029A8  0E00               	movlw	0
 16156  0029AA  6E38               	movwf	_seconds,c
 16157                           
 16158                           ; BSR set to: 1
 16159  0029AC  4A36               	infsnz	_minutes,f,c
 16160  0029AE  2A37               	incf	_minutes+1,f,c
 16161                           
 16162                           ; BSR set to: 1
 16163                           ;InterruptFuncs.c: 43: if (BTcountdown==1)
 16164  0029B0  0101               	movlb	1	; () banked
 16165  0029B2  05C8               	decf	_BTcountdown& (0+255),w,b
 16166  0029B4  0101               	movlb	1	; () banked
 16167  0029B6  11C9               	iorwf	(_BTcountdown+1)& (0+255),w,b
 16168  0029B8  A4D8               	btfss	status,2,c
 16169  0029BA  D015               	goto	i2l4698
 16170                           
 16171                           ; BSR set to: 1
 16172                           ;InterruptFuncs.c: 44: {
 16173                           ;InterruptFuncs.c: 45: BTcount=BTcount-1;
 16174  0029BC  0EFF               	movlw	255
 16175  0029BE  2428               	addwf	_BTcount,w,c
 16176  0029C0  6E28               	movwf	_BTcount,c
 16177  0029C2  0EFF               	movlw	255
 16178  0029C4  2029               	addwfc	_BTcount+1,w,c
 16179  0029C6  6E29               	movwf	_BTcount+1,c
 16180                           
 16181                           ;InterruptFuncs.c: 46: if (BTcount==0)
 16182  0029C8  5028               	movf	_BTcount,w,c
 16183  0029CA  1029               	iorwf	_BTcount+1,w,c
 16184  0029CC  A4D8               	btfss	status,2,c
 16185  0029CE  D00B               	goto	i2l4698
 16186                           
 16187                           ; BSR set to: 1
 16188                           ;InterruptFuncs.c: 47: {
 16189                           ;InterruptFuncs.c: 48: BTcountdown=0;
 16190  0029D0  0E00               	movlw	0
 16191  0029D2  0101               	movlb	1	; () banked
 16192  0029D4  6FC9               	movwf	(_BTcountdown+1)& (0+255),b
 16193  0029D6  0E00               	movlw	0
 16194  0029D8  6FC8               	movwf	_BTcountdown& (0+255),b
 16195                           
 16196                           ;InterruptFuncs.c: 49: BTpower=0;
 16197  0029DA  0E00               	movlw	0
 16198  0029DC  0101               	movlb	1	; () banked
 16199  0029DE  6FCB               	movwf	(_BTpower+1)& (0+255),b
 16200  0029E0  0E00               	movlw	0
 16201  0029E2  6FCA               	movwf	_BTpower& (0+255),b
 16202                           
 16203                           ; BSR set to: 1
 16204  0029E4  D000               	goto	i2l4698
 16205  0029E6                     i2l4698:
 16206                           
 16207                           ; BSR set to: 1
 16208                           ;InterruptFuncs.c: 50: }
 16209                           ;InterruptFuncs.c: 51: }
 16210                           ;InterruptFuncs.c: 52: if (minutes>59){
 16211  0029E6  5037               	movf	_minutes+1,w,c
 16212  0029E8  E104               	bnz	i2u490_40
 16213  0029EA  0E3C               	movlw	60
 16214  0029EC  5C36               	subwf	_minutes,w,c
 16215  0029EE  A0D8               	btfss	status,0,c
 16216  0029F0  D09B               	goto	i2l442
 16217  0029F2                     i2u490_40:
 16218                           
 16219                           ; BSR set to: 1
 16220                           ;InterruptFuncs.c: 54: hours = hours++;
 16221  0029F2  0E00               	movlw	0
 16222  0029F4  6E37               	movwf	_minutes+1,c
 16223  0029F6  0E00               	movlw	0
 16224  0029F8  6E36               	movwf	_minutes,c
 16225                           
 16226                           ; BSR set to: 1
 16227  0029FA  4A32               	infsnz	_hours,f,c
 16228  0029FC  2A33               	incf	_hours+1,f,c
 16229                           
 16230                           ; BSR set to: 1
 16231                           ;InterruptFuncs.c: 55: if (hours>23){
 16232  0029FE  5033               	movf	_hours+1,w,c
 16233  002A00  E104               	bnz	i2u491_40
 16234  002A02  0E18               	movlw	24
 16235  002A04  5C32               	subwf	_hours,w,c
 16236  002A06  A0D8               	btfss	status,0,c
 16237  002A08  D08F               	goto	i2l442
 16238  002A0A                     i2u491_40:
 16239                           
 16240                           ; BSR set to: 1
 16241                           ;InterruptFuncs.c: 57: day=day++;
 16242  002A0A  0E00               	movlw	0
 16243  002A0C  6E33               	movwf	_hours+1,c
 16244  002A0E  0E00               	movlw	0
 16245  002A10  6E32               	movwf	_hours,c
 16246                           
 16247                           ; BSR set to: 1
 16248  002A12  4A56               	infsnz	_day,f,c
 16249  002A14  2A57               	incf	_day+1,f,c
 16250                           
 16251                           ; BSR set to: 1
 16252                           ;InterruptFuncs.c: 58: NewDay=1;
 16253  002A16  0E00               	movlw	0
 16254  002A18  6E4F               	movwf	_NewDay+1,c
 16255  002A1A  0E01               	movlw	1
 16256  002A1C  6E4E               	movwf	_NewDay,c
 16257                           
 16258                           ;InterruptFuncs.c: 59: switch(month){
 16259  002A1E  D056               	goto	i2l4758
 16260                           
 16261                           ; BSR set to: 1
 16262                           
 16263                           ; BSR set to: 1
 16264                           
 16265                           ; BSR set to: 1
 16266                           
 16267                           ; BSR set to: 1
 16268                           
 16269                           ;InterruptFuncs.c: 60: case 1: case 3: case 5: case 7 ... 8: case 10:
 16270  002A20  D000               	goto	i2l4712
 16271  002A22                     i2l4712:
 16272                           
 16273                           ;InterruptFuncs.c: 61: if (day==32){
 16274  002A22  0E20               	movlw	32
 16275  002A24                     L7:
 16276  002A24  1856               	xorwf	_day,w,c
 16277  002A26  1057               	iorwf	_day+1,w,c
 16278  002A28  A4D8               	btfss	status,2,c
 16279  002A2A  D07E               	goto	i2l442
 16280                           
 16281                           ;InterruptFuncs.c: 63: month=month++;
 16282  002A2C  0E00               	movlw	0
 16283  002A2E  6E57               	movwf	_day+1,c
 16284  002A30  0E01               	movlw	1
 16285  002A32  6E56               	movwf	_day,c
 16286  002A34  D009               	goto	i2l4724
 16287  002A36                     i2l4718:
 16288                           
 16289                           ;InterruptFuncs.c: 64: NewMonth=1;
 16290  002A36  0E00               	movlw	0
 16291  002A38  0101               	movlb	1	; () banked
 16292  002A3A  6F17               	movwf	(_NewMonth+1)& (0+255),b
 16293  002A3C  0E01               	movlw	1
 16294  002A3E  6F16               	movwf	_NewMonth& (0+255),b
 16295                           
 16296                           ; BSR set to: 1
 16297                           ;InterruptFuncs.c: 65: }
 16298                           ;InterruptFuncs.c: 66: break;
 16299  002A40  D073               	goto	i2l442
 16300                           
 16301                           ; BSR set to: 1
 16302                           
 16303                           ; BSR set to: 1
 16304                           
 16305                           ; BSR set to: 1
 16306                           
 16307                           ;InterruptFuncs.c: 67: case 4: case 6: case 9: case 11:
 16308  002A42  D000               	goto	i2l4720
 16309  002A44                     i2l4720:
 16310                           
 16311                           ;InterruptFuncs.c: 68: if (day==31){
 16312  002A44  0E1F               	movlw	31
 16313  002A46  D7EE               	goto	L7
 16314  002A48                     i2l4724:
 16315  002A48  4A58               	infsnz	_month,f,c
 16316  002A4A  2A59               	incf	_month+1,f,c
 16317  002A4C  D7F4               	goto	i2l4718
 16318                           
 16319                           ; BSR set to: 1
 16320                           ;InterruptFuncs.c: 72: }
 16321                           ;InterruptFuncs.c: 73: break;
 16322                           
 16323                           ;InterruptFuncs.c: 71: NewMonth=1;
 16324  002A4E  D06C               	goto	i2l442
 16325  002A50                     i2l4728:
 16326                           
 16327                           ;InterruptFuncs.c: 75: if ((year & 3) == 0 && ((year % 25) != 0 || (year & 15) == 0)){
 16328  002A50  0E03               	movlw	3
 16329  002A52  145E               	andwf	_year,w,c
 16330  002A54  6E06               	movwf	??_TimingISR& (0+255),c
 16331  002A56  0E00               	movlw	0
 16332  002A58  145F               	andwf	_year+1,w,c
 16333  002A5A  6E07               	movwf	(??_TimingISR+1)& (0+255),c
 16334  002A5C  5006               	movf	??_TimingISR,w,c
 16335  002A5E  1007               	iorwf	??_TimingISR+1,w,c
 16336  002A60  A4D8               	btfss	status,2,c
 16337  002A62  D01E               	goto	i2l4742
 16338  002A64  C05E  F001         	movff	_year,i2___lwmod@dividend
 16339  002A68  C05F  F002         	movff	_year+1,i2___lwmod@dividend+1
 16340  002A6C  0E00               	movlw	0
 16341  002A6E  6E04               	movwf	i2___lwmod@divisor+1,c
 16342  002A70  0E19               	movlw	25
 16343  002A72  6E03               	movwf	i2___lwmod@divisor,c
 16344  002A74  EC25  F020         	call	i2___lwmod	;wreg free
 16345  002A78  5001               	movf	?i2___lwmod,w,c
 16346  002A7A  1002               	iorwf	?i2___lwmod+1,w,c
 16347  002A7C  A4D8               	btfss	status,2,c
 16348  002A7E  D00A               	goto	i2l4734
 16349  002A80  0E0F               	movlw	15
 16350  002A82  145E               	andwf	_year,w,c
 16351  002A84  6E06               	movwf	??_TimingISR& (0+255),c
 16352  002A86  0E00               	movlw	0
 16353  002A88  145F               	andwf	_year+1,w,c
 16354  002A8A  6E07               	movwf	(??_TimingISR+1)& (0+255),c
 16355  002A8C  5006               	movf	??_TimingISR,w,c
 16356  002A8E  1007               	iorwf	??_TimingISR+1,w,c
 16357  002A90  A4D8               	btfss	status,2,c
 16358  002A92  D006               	goto	i2l4742
 16359  002A94                     i2l4734:
 16360                           
 16361                           ;InterruptFuncs.c: 76: if (day==30){
 16362  002A94  0E1E               	movlw	30
 16363  002A96  D7C6               	goto	L7
 16364                           
 16365                           ;InterruptFuncs.c: 78: month=month++;
 16366  002A98  4A58               	infsnz	_month,f,c
 16367  002A9A  2A59               	incf	_month+1,f,c
 16368  002A9C  D7CC               	goto	i2l4718
 16369                           
 16370                           ; BSR set to: 1
 16371                           ;InterruptFuncs.c: 80: }
 16372                           ;InterruptFuncs.c: 81: }
 16373                           
 16374                           ;InterruptFuncs.c: 79: NewMonth=1;
 16375  002A9E  D044               	goto	i2l442
 16376  002AA0                     i2l4742:
 16377                           
 16378                           ;InterruptFuncs.c: 82: else {
 16379                           ;InterruptFuncs.c: 83: if (day==29){
 16380  002AA0  0E1D               	movlw	29
 16381  002AA2  D7C0               	goto	L7
 16382                           
 16383                           ;InterruptFuncs.c: 85: month=month++;
 16384  002AA4  4A58               	infsnz	_month,f,c
 16385  002AA6  2A59               	incf	_month+1,f,c
 16386  002AA8  D7C6               	goto	i2l4718
 16387                           
 16388                           ; BSR set to: 1
 16389                           ;InterruptFuncs.c: 87: }
 16390                           ;InterruptFuncs.c: 88: }
 16391                           ;InterruptFuncs.c: 89: break;
 16392                           
 16393                           ; BSR set to: 1
 16394                           
 16395                           ;InterruptFuncs.c: 86: NewMonth=1;
 16396  002AAA  D03E               	goto	i2l442
 16397  002AAC                     i2l4750:
 16398                           
 16399                           ;InterruptFuncs.c: 91: if (day==32){
 16400  002AAC  0E20               	movlw	32
 16401  002AAE  1856               	xorwf	_day,w,c
 16402  002AB0  1057               	iorwf	_day+1,w,c
 16403  002AB2  A4D8               	btfss	status,2,c
 16404  002AB4  D039               	goto	i2l442
 16405                           
 16406                           ;InterruptFuncs.c: 92: day=1;
 16407  002AB6  0E00               	movlw	0
 16408  002AB8  6E57               	movwf	_day+1,c
 16409  002ABA  0E01               	movlw	1
 16410  002ABC  6E56               	movwf	_day,c
 16411                           
 16412                           ;InterruptFuncs.c: 94: year=year++;
 16413  002ABE  0E00               	movlw	0
 16414  002AC0  6E59               	movwf	_month+1,c
 16415  002AC2  0E01               	movlw	1
 16416  002AC4  6E58               	movwf	_month,c
 16417  002AC6  4A5E               	infsnz	_year,f,c
 16418  002AC8  2A5F               	incf	_year+1,f,c
 16419                           
 16420                           ;InterruptFuncs.c: 100: }
 16421                           ;InterruptFuncs.c: 102: }
 16422                           
 16423                           ;InterruptFuncs.c: 98: {
 16424                           ;InterruptFuncs.c: 99: break;
 16425                           
 16426                           ;InterruptFuncs.c: 97: default:
 16427                           
 16428                           ;InterruptFuncs.c: 95: }
 16429                           ;InterruptFuncs.c: 96: break;
 16430  002ACA  D02E               	goto	i2l442
 16431  002ACC                     i2l4758:
 16432  002ACC  C058  F006         	movff	_month,??_TimingISR
 16433  002AD0  C059  F007         	movff	_month+1,??_TimingISR+1
 16434                           
 16435                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16436                           ; Switch size 1, requested type "space"
 16437                           ; Number of cases is 1, Range of values is 0 to 0
 16438                           ; switch strategies available:
 16439                           ; Name         Instructions Cycles
 16440                           ; simple_byte            4     3 (average)
 16441                           ;	Chosen strategy is simple_byte
 16442  002AD4  5007               	movf	??_TimingISR+1,w,c
 16443  002AD6  0A00               	xorlw	0	; case 0
 16444  002AD8  A4D8               	btfss	status,2,c
 16445  002ADA  D026               	goto	i2l442
 16446                           
 16447                           ; Switch size 1, requested type "space"
 16448                           ; Number of cases is 12, Range of values is 1 to 12
 16449                           ; switch strategies available:
 16450                           ; Name         Instructions Cycles
 16451                           ; simple_byte           37    19 (average)
 16452                           ;	Chosen strategy is simple_byte
 16453  002ADC  5006               	movf	??_TimingISR,w,c
 16454  002ADE  0A01               	xorlw	1	; case 1
 16455  002AE0  B4D8               	btfsc	status,2,c
 16456  002AE2  D79F               	goto	i2l4712
 16457  002AE4  0A03               	xorlw	3	; case 2
 16458  002AE6  B4D8               	btfsc	status,2,c
 16459  002AE8  D7B3               	goto	i2l4728
 16460  002AEA  0A01               	xorlw	1	; case 3
 16461  002AEC  B4D8               	btfsc	status,2,c
 16462  002AEE  D799               	goto	i2l4712
 16463  002AF0  0A07               	xorlw	7	; case 4
 16464  002AF2  B4D8               	btfsc	status,2,c
 16465  002AF4  D7A7               	goto	i2l4720
 16466  002AF6  0A01               	xorlw	1	; case 5
 16467  002AF8  B4D8               	btfsc	status,2,c
 16468  002AFA  D793               	goto	i2l4712
 16469  002AFC  0A03               	xorlw	3	; case 6
 16470  002AFE  B4D8               	btfsc	status,2,c
 16471  002B00  D7A1               	goto	i2l4720
 16472  002B02  0A01               	xorlw	1	; case 7
 16473  002B04  B4D8               	btfsc	status,2,c
 16474  002B06  D78D               	goto	i2l4712
 16475  002B08  0A0F               	xorlw	15	; case 8
 16476  002B0A  B4D8               	btfsc	status,2,c
 16477  002B0C  D78A               	goto	i2l4712
 16478  002B0E  0A01               	xorlw	1	; case 9
 16479  002B10  B4D8               	btfsc	status,2,c
 16480  002B12  D798               	goto	i2l4720
 16481  002B14  0A03               	xorlw	3	; case 10
 16482  002B16  B4D8               	btfsc	status,2,c
 16483  002B18  D784               	goto	i2l4712
 16484  002B1A  0A01               	xorlw	1	; case 11
 16485  002B1C  B4D8               	btfsc	status,2,c
 16486  002B1E  D792               	goto	i2l4720
 16487  002B20  0A07               	xorlw	7	; case 12
 16488  002B22  B4D8               	btfsc	status,2,c
 16489  002B24  D7C3               	goto	i2l4750
 16490  002B26  D000               	goto	i2l442
 16491  002B28                     i2l442:
 16492                           
 16493                           ;InterruptFuncs.c: 103: }
 16494                           ;InterruptFuncs.c: 104: }
 16495                           ;InterruptFuncs.c: 105: }
 16496                           ;InterruptFuncs.c: 106: }
 16497                           ;InterruptFuncs.c: 108: TMR0IF=0;
 16498  002B28  94F2               	bcf	intcon,2,c	;volatile
 16499  002B2A  C015  FFF5         	movff	??_TimingISR+15,tablat
 16500  002B2E  C014  FFF8         	movff	??_TimingISR+14,tblptru
 16501  002B32  C013  FFF7         	movff	??_TimingISR+13,tblptrh
 16502  002B36  C012  FFF6         	movff	??_TimingISR+12,tblptrl
 16503  002B3A  C011  FFF4         	movff	??_TimingISR+11,prodh
 16504  002B3E  C010  FFF3         	movff	??_TimingISR+10,prodl
 16505  002B42  C00F  FFDA         	movff	??_TimingISR+9,fsr2h
 16506  002B46  C00E  FFD9         	movff	??_TimingISR+8,fsr2l
 16507  002B4A  C00D  FFE2         	movff	??_TimingISR+7,fsr1h
 16508  002B4E  C00C  FFE1         	movff	??_TimingISR+6,fsr1l
 16509  002B52  C00B  FFEA         	movff	??_TimingISR+5,fsr0h
 16510  002B56  C00A  FFE9         	movff	??_TimingISR+4,fsr0l
 16511  002B5A  C009  FFFB         	movff	??_TimingISR+3,pclatu
 16512  002B5E  C008  FFFA         	movff	??_TimingISR+2,pclath
 16513  002B62  0011               	retfie		f
 16514  002B64                     __end_of_TimingISR:
 16515                           	opt stack 0
 16516                           pclatu	equ	0xFFB
 16517                           pclath	equ	0xFFA
 16518                           tblptru	equ	0xFF8
 16519                           tblptrh	equ	0xFF7
 16520                           tblptrl	equ	0xFF6
 16521                           tablat	equ	0xFF5
 16522                           prodh	equ	0xFF4
 16523                           prodl	equ	0xFF3
 16524                           intcon	equ	0xFF2
 16525                           intcon2	equ	0xFF1
 16526                           indf0	equ	0xFEF
 16527                           postinc0	equ	0xFEE
 16528                           fsr0h	equ	0xFEA
 16529                           fsr0l	equ	0xFE9
 16530                           wreg	equ	0xFE8
 16531                           postinc1	equ	0xFE6
 16532                           postdec1	equ	0xFE5
 16533                           plusw1	equ	0xFE3
 16534                           fsr1h	equ	0xFE2
 16535                           fsr1l	equ	0xFE1
 16536                           bsr	equ	0xFE0
 16537                           indf2	equ	0xFDF
 16538                           postinc2	equ	0xFDE
 16539                           postdec2	equ	0xFDD
 16540                           plusw2	equ	0xFDB
 16541                           fsr2h	equ	0xFDA
 16542                           fsr2l	equ	0xFD9
 16543                           status	equ	0xFD8
 16544                           
 16545 ;; *************** function i2___lwmod *****************
 16546 ;; Defined at:
 16547 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 16548 ;; Parameters:    Size  Location     Type
 16549 ;;  dividend        2    0[COMRAM] unsigned int 
 16550 ;;  divisor         2    2[COMRAM] unsigned int 
 16551 ;; Auto vars:     Size  Location     Type
 16552 ;;  __lwmod         1    4[COMRAM] unsigned char 
 16553 ;; Return value:  Size  Location     Type
 16554 ;;                  2    0[COMRAM] unsigned int 
 16555 ;; Registers used:
 16556 ;;		wreg, status,2, status,0
 16557 ;; Tracked objects:
 16558 ;;		On entry : 0/0
 16559 ;;		On exit  : 0/0
 16560 ;;		Unchanged: 0/0
 16561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16562 ;;      Params:         4       0       0       0       0       0       0
 16563 ;;      Locals:         1       0       0       0       0       0       0
 16564 ;;      Temps:          0       0       0       0       0       0       0
 16565 ;;      Totals:         5       0       0       0       0       0       0
 16566 ;;Total ram usage:        5 bytes
 16567 ;; Hardware stack levels used:    1
 16568 ;; This function calls:
 16569 ;;		Nothing
 16570 ;; This function is called by:
 16571 ;;		_TimingISR
 16572 ;; This function uses a non-reentrant model
 16573 ;;
 16574                           
 16575                           	psect	text59
 16576  00404A                     __ptext59:
 16577                           	opt stack 0
 16578  00404A                     i2___lwmod:
 16579                           	opt stack 20
 16580                           
 16581                           ;incstack = 0
 16582  00404A  5003               	movf	i2___lwmod@divisor,w,c
 16583  00404C  1004               	iorwf	i2___lwmod@divisor+1,w,c
 16584  00404E  B4D8               	btfsc	status,2,c
 16585  004050  D01D               	goto	i2l1377
 16586  004052  0E01               	movlw	1
 16587  004054  6E05               	movwf	i2___lwmod@counter,c
 16588  004056  D005               	goto	i2l4480
 16589  004058                     i2l4478:
 16590  004058  90D8               	bcf	status,0,c
 16591  00405A  3603               	rlcf	i2___lwmod@divisor,f,c
 16592  00405C  3604               	rlcf	i2___lwmod@divisor+1,f,c
 16593  00405E  2A05               	incf	i2___lwmod@counter,f,c
 16594  004060  D000               	goto	i2l4480
 16595  004062                     i2l4480:
 16596  004062  BE04               	btfsc	i2___lwmod@divisor+1,7,c
 16597  004064  D002               	goto	i2l4482
 16598  004066  D7F8               	goto	i2l4478
 16599  004068  D000               	goto	i2l4482
 16600  00406A                     i2l4482:
 16601  00406A  5003               	movf	i2___lwmod@divisor,w,c
 16602  00406C  5C01               	subwf	i2___lwmod@dividend,w,c
 16603  00406E  5004               	movf	i2___lwmod@divisor+1,w,c
 16604  004070  5802               	subwfb	i2___lwmod@dividend+1,w,c
 16605  004072  A0D8               	btfss	status,0,c
 16606  004074  D005               	goto	i2l4486
 16607  004076  5003               	movf	i2___lwmod@divisor,w,c
 16608  004078  5E01               	subwf	i2___lwmod@dividend,f,c
 16609  00407A  5004               	movf	i2___lwmod@divisor+1,w,c
 16610  00407C  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 16611  00407E  D000               	goto	i2l4486
 16612  004080                     i2l4486:
 16613  004080  90D8               	bcf	status,0,c
 16614  004082  3204               	rrcf	i2___lwmod@divisor+1,f,c
 16615  004084  3203               	rrcf	i2___lwmod@divisor,f,c
 16616  004086  2E05               	decfsz	i2___lwmod@counter,f,c
 16617  004088  D7F0               	goto	i2l4482
 16618  00408A  D000               	goto	i2l1377
 16619  00408C                     i2l1377:
 16620  00408C  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 16621  004090  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 16622  004094  0012               	return		;funcret
 16623  004096                     __end_ofi2___lwmod:
 16624                           	opt stack 0
 16625                           pclatu	equ	0xFFB
 16626                           pclath	equ	0xFFA
 16627                           tblptru	equ	0xFF8
 16628                           tblptrh	equ	0xFF7
 16629                           tblptrl	equ	0xFF6
 16630                           tablat	equ	0xFF5
 16631                           prodh	equ	0xFF4
 16632                           prodl	equ	0xFF3
 16633                           intcon	equ	0xFF2
 16634                           intcon2	equ	0xFF1
 16635                           indf0	equ	0xFEF
 16636                           postinc0	equ	0xFEE
 16637                           fsr0h	equ	0xFEA
 16638                           fsr0l	equ	0xFE9
 16639                           wreg	equ	0xFE8
 16640                           postinc1	equ	0xFE6
 16641                           postdec1	equ	0xFE5
 16642                           plusw1	equ	0xFE3
 16643                           fsr1h	equ	0xFE2
 16644                           fsr1l	equ	0xFE1
 16645                           bsr	equ	0xFE0
 16646                           indf2	equ	0xFDF
 16647                           postinc2	equ	0xFDE
 16648                           postdec2	equ	0xFDD
 16649                           plusw2	equ	0xFDB
 16650                           fsr2h	equ	0xFDA
 16651                           fsr2l	equ	0xFD9
 16652                           status	equ	0xFD8
 16653                           pclatu	equ	0xFFB
 16654                           pclath	equ	0xFFA
 16655                           tblptru	equ	0xFF8
 16656                           tblptrh	equ	0xFF7
 16657                           tblptrl	equ	0xFF6
 16658                           tablat	equ	0xFF5
 16659                           prodh	equ	0xFF4
 16660                           prodl	equ	0xFF3
 16661                           intcon	equ	0xFF2
 16662                           intcon2	equ	0xFF1
 16663                           indf0	equ	0xFEF
 16664                           postinc0	equ	0xFEE
 16665                           fsr0h	equ	0xFEA
 16666                           fsr0l	equ	0xFE9
 16667                           wreg	equ	0xFE8
 16668                           postinc1	equ	0xFE6
 16669                           postdec1	equ	0xFE5
 16670                           plusw1	equ	0xFE3
 16671                           fsr1h	equ	0xFE2
 16672                           fsr1l	equ	0xFE1
 16673                           bsr	equ	0xFE0
 16674                           indf2	equ	0xFDF
 16675                           postinc2	equ	0xFDE
 16676                           postdec2	equ	0xFDD
 16677                           plusw2	equ	0xFDB
 16678                           fsr2h	equ	0xFDA
 16679                           fsr2l	equ	0xFD9
 16680                           status	equ	0xFD8
 16681                           
 16682                           	psect	rparam
 16683  0000                     pclatu	equ	0xFFB
 16684                           pclath	equ	0xFFA
 16685                           tblptru	equ	0xFF8
 16686                           tblptrh	equ	0xFF7
 16687                           tblptrl	equ	0xFF6
 16688                           tablat	equ	0xFF5
 16689                           prodh	equ	0xFF4
 16690                           prodl	equ	0xFF3
 16691                           intcon	equ	0xFF2
 16692                           intcon2	equ	0xFF1
 16693                           indf0	equ	0xFEF
 16694                           postinc0	equ	0xFEE
 16695                           fsr0h	equ	0xFEA
 16696                           fsr0l	equ	0xFE9
 16697                           wreg	equ	0xFE8
 16698                           postinc1	equ	0xFE6
 16699                           postdec1	equ	0xFE5
 16700                           plusw1	equ	0xFE3
 16701                           fsr1h	equ	0xFE2
 16702                           fsr1l	equ	0xFE1
 16703                           bsr	equ	0xFE0
 16704                           indf2	equ	0xFDF
 16705                           postinc2	equ	0xFDE
 16706                           postdec2	equ	0xFDD
 16707                           plusw2	equ	0xFDB
 16708                           fsr2h	equ	0xFDA
 16709                           fsr2l	equ	0xFD9
 16710                           status	equ	0xFD8


Data Sizes:
    Strings     645
    Constant    1573
    Data        110
    BSS         624
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     39      96
    BANK0           128     96      97
    BANK1           256     86     252
    BANK2           256      0     256
    BANK3           256      0     256
    BANK4           256      5       5
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_47(CODE[5]), STR_44(CODE[7]), STR_41(CODE[7]), STR_30(CODE[5]), 
		 -> ConfigWord(BANK1[20]), LastMessage(BANK1[20]), MessageBuffer(BANK1[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 20
		 -> MessageRoutine@str2(BANK1[20]), MessageRoutine@str1(BANK1[20]), LastMessage(BANK1[20]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 20
		 -> MessageRoutine@str2(BANK1[20]), MessageRoutine@str1(BANK1[20]), LastMessage(BANK1[20]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 20
		 -> MessageRoutine@str2(BANK1[20]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 20
		 -> MessageRoutine@str1(BANK1[20]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> LastMessage(BANK1[20]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 140
		 -> STR_48(CODE[140]), STR_46(CODE[20]), STR_45(CODE[3]), STR_43(CODE[20]), 
		 -> STR_42(CODE[3]), STR_40(CODE[20]), STR_39(CODE[3]), STR_38(CODE[31]), 
		 -> STR_37(CODE[3]), STR_36(CODE[27]), STR_35(CODE[3]), STR_34(CODE[26]), 
		 -> STR_33(CODE[3]), STR_32(CODE[34]), STR_31(CODE[3]), STR_29(CODE[20]), 
		 -> STR_28(CODE[20]), STR_27(CODE[21]), STR_26(CODE[3]), STR_25(CODE[14]), 
		 -> STR_24(CODE[3]), STR_23(CODE[12]), STR_22(CODE[3]), STR_21(CODE[10]), 
		 -> STR_20(CODE[3]), STR_19(CODE[12]), STR_18(CODE[3]), STR_17(CODE[11]), 
		 -> MessageBuffer(BANK1[20]), STR_16(CODE[21]), STR_15(CODE[11]), STR_14(CODE[18]), 
		 -> STR_13(CODE[4]), STR_12(CODE[15]), STR_11(CODE[14]), STR_10(CODE[19]), 
		 -> STR_9(CODE[15]), STR_8(CODE[14]), STR_7(CODE[18]), STR_6(CODE[21]), 
		 -> STR_5(CODE[18]), STR_4(CODE[21]), STR_3(CODE[18]), STR_2(CODE[21]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    fix_fft@fi	PTR short  size(2) Largest target is 256
		 -> cmYimag(BANK3[256]), 

    fix_fft@fr	PTR short  size(2) Largest target is 256
		 -> cmYreal(BANK2[256]), 

    sp__memset	PTR void  size(2) Largest target is 20
		 -> MessageBuffer(BANK1[20]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> MessageRoutine@str2(BANK1[20]), MessageRoutine@str1(BANK1[20]), LastMessage(BANK1[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _SerialRxPinInterrupt in COMRAM

    _SerialRxPinInterrupt->i1_printf
    i1_printf->i1___lwmod
    i1___lwmod->i1___lwdiv

Critical Paths under _TimingISR in COMRAM

    _TimingISR->i2___lwmod

Critical Paths under _main in BANK0

    _cmStuffsWrapperFun->___ftdiv
    _cmFilterHighPassUsingLowPass->___wmul
    _cmFftFun->___ftdiv
    _log->_eval_poly
    _eval_poly->___ftadd
    _fix_fft->___lmul
    ___ftdiv->_log
    _approxRollingAverage->___aldiv
    _TimeLoop->_ReadTimer0
    ___fttol->___ftdiv
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    _PumpDetect->_abs
    _MessageRoutine->_printf
    _SetDateTime->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    _atoi->___wmul
    _InitUSART->_OpenUSART
    _InitTimer0->_OpenTimer0

Critical Paths under _SerialRxPinInterrupt in BANK0

    _SerialRxPinInterrupt->i1_printf

Critical Paths under _TimingISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_cmStuffsWrapperFun
    _cmStuffsWrapperFun->_cmFftFun
    _cmFftFun->_fix_fft
    _ReadAndTime->_Read_X
    _ReadAndTime->_Read_Y
    _ReadAndTime->_Read_Z
    _Read_Z->___fttol
    _Read_Y->___fttol
    _Read_X->___fttol
    ___fttol->___ftdiv

Critical Paths under _SerialRxPinInterrupt in BANK1

    None.

Critical Paths under _TimingISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _SerialRxPinInterrupt in BANK2

    None.

Critical Paths under _TimingISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _SerialRxPinInterrupt in BANK3

    None.

Critical Paths under _TimingISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _SerialRxPinInterrupt in BANK4

    None.

Critical Paths under _TimingISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _SerialRxPinInterrupt in BANK5

    None.

Critical Paths under _TimingISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5  148417
                                              0 BANK4      5     0      5
                          _ConfigADC
                       _Delay10KTCYx
                     _InitInterrupts
                         _InitTimer0
                          _InitUSART
                     _MessageRoutine
                         _PumpDetect
                        _ReadAndTime
                 _cmStuffsWrapperFun
                             _printf
 ---------------------------------------------------------------------------------
 (1) _cmStuffsWrapperFun                                  13    13      0   80363
                                             73 BANK1     13    13      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                             ___wmul
                           _cmFftFun
       _cmFilterHighPassUsingLowPass
                                _log
                             _printf
 ---------------------------------------------------------------------------------
 (2) _cmFilterHighPassUsingLowPass                        34    34      0    2327
                                             37 BANK0     34    34      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _cmFftFun                                            23    23      0   32154
                                             50 BANK1     23    23      0
                            ___ftdiv
                            ___fttol
                             ___wmul
                            _fix_fft
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   22358
                                             82 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     452
                                             31 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   10276
                                             70 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _fix_fft                                             68    62      6    4083
                                             43 BANK0     14     8      6
                                              0 BANK1     50    50      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     746
                                             31 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    2838
                                             87 BANK0      9     3      6
                                              0 BANK1      6     6      0
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (1) _ReadAndTime                                          0     0      0   38462
                             _Read_X
                             _Read_Y
                             _Read_Z
                           _TimeLoop
               _approxRollingAverage
 ---------------------------------------------------------------------------------
 (2) _approxRollingAverage                                14     4     10    1449
                                             45 BANK0     14     4     10
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     406
                                             31 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _TimeLoop                                             4     4      0      47
                                             35 BANK0      4     4      0
                         _ReadTimer0
 ---------------------------------------------------------------------------------
 (3) _ReadTimer0                                           4     2      2      47
                                             31 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _Read_Z                                              11     5      6   12322
                                             21 BANK1     11     5      6
                            _BusyADC
                         _ConvertADC
                        _Delay10TCYx
                            _ReadADC
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _Read_Y                                              11     5      6   12322
                                             21 BANK1     11     5      6
                            _BusyADC
                         _ConvertADC
                        _Delay10TCYx
                            _ReadADC
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _Read_X                                              11     5      6   12322
                                             21 BANK1     11     5      6
                            _BusyADC
                         _ConvertADC
                        _Delay10TCYx
                            _ReadADC
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     696
                                              6 BANK1     15    11      4
                            _ReadADC (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                             ___wmul (ARG)
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     260
                                             31 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4036
                                             43 BANK0     15     9      6
                            _ReadADC (ARG)
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4383
                                             58 BANK0     12     6      6
                            _ReadADC (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2656
                                             39 BANK0      4     1      3
                            _ReadADC (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2068
                                             31 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _ReadADC                                              4     2      2       0
                                             31 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _Delay10TCYx                                          1     1      0      31
                                             31 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PumpDetect                                           6     4      2     225
                                             35 BANK0      6     4      2
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     225
                                             31 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _MessageRoutine                                      42    42      0   21790
                                              0 BANK1     42    42      0
                        _Delay1KTCYx
                        _SetDateTime
                               _atoi
                             _printf
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     949
                                             31 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4     783
                                             31 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _SetDateTime                                          0     0      0    9664
                               _atoi
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              33    21     12    7238
                                             43 BANK0     29    17     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             31 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     422
                                             38 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     371
                                             31 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2    2426
                                             37 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             31 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1408
                                             31 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _Delay1KTCYx                                          1     1      0      31
                                             31 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitUSART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                             31 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitTimer0                                           0     0      0      44
                         _OpenTimer0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             31 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay10KTCYx                                         2     2      0      22
                                             31 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ConfigADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _SerialRxPinInterrupt                                18    18      0    2507
                                             13 BANK0     18    18      0
                          _ReadUSART
                           i1_printf
                           i1_strcpy
 ---------------------------------------------------------------------------------
 (8) i1_strcpy                                             6     2      4     179
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i1_printf                                            23    21      2    2305
                                             33 COMRAM     6     4      2
                                              0 BANK0     13    13      0
                          i1___lwdiv
                          i1___lwmod
                           i1___wmul
                          i1_isdigit
                            i1_putch
 ---------------------------------------------------------------------------------
 (9) i1_putch                                              1     1      0      31
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1_isdigit                                            3     3      0      99
                                             21 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) i1___wmul                                             6     2      4     296
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) i1___lwmod                                            5     1      4     302
                                             28 COMRAM     5     1      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i1___lwdiv                                            7     3      4     311
                                             21 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (8) _ReadUSART                                            1     1      0      23
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _TimingISR                                          16    16      0     211
                                              5 COMRAM    16    16      0
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     211
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigADC
   _Delay10KTCYx
   _InitInterrupts
   _InitTimer0
     _OpenTimer0
   _InitUSART
     _OpenUSART
   _MessageRoutine
     _Delay1KTCYx
     _SetDateTime
       _atoi
         ___wmul
         _isdigit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _atoi
       ___wmul
       _isdigit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
     _strcmp
     _strcpy
   _PumpDetect
     _abs
   _ReadAndTime
     _Read_X
       _BusyADC
       _ConvertADC
       _Delay10TCYx
       _ReadADC
       ___awtoft
         _ReadADC (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _log (ARG)
             ___awtoft
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___wmul (ARG)
         _log (ARG)
           ___awtoft
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
     _Read_Y
       _BusyADC
       _ConvertADC
       _Delay10TCYx
       _ReadADC
       ___awtoft
         _ReadADC (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _log (ARG)
             ___awtoft
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___wmul (ARG)
         _log (ARG)
           ___awtoft
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
     _Read_Z
       _BusyADC
       _ConvertADC
       _Delay10TCYx
       _ReadADC
       ___awtoft
         _ReadADC (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _log (ARG)
             ___awtoft
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___wmul (ARG)
         _log (ARG)
           ___awtoft
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
     _TimeLoop
       _ReadTimer0
     _approxRollingAverage
       ___aldiv
   _cmStuffsWrapperFun
     ___awtoft
       _ReadADC (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftadd
       _ReadADC (ARG)
       ___awtoft (ARG)
         _ReadADC (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         _ReadADC (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd (ARG)
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _log (ARG)
         ___awtoft
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul
         _frexp
     ___ftmul
       _ReadADC (ARG)
       ___awtoft (ARG)
         _ReadADC (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___fttol
       _ReadADC (ARG)
       ___awtoft (ARG)
         _ReadADC (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd (ARG)
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _log (ARG)
           ___awtoft
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       ___ftmul (ARG)
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___wmul (ARG)
       _log (ARG)
         ___awtoft
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul
         _frexp
     ___wmul
     _cmFftFun
       ___ftdiv
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _log (ARG)
           ___awtoft
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       ___fttol
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _log (ARG)
             ___awtoft
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___wmul (ARG)
         _log (ARG)
           ___awtoft
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       ___wmul
       _fix_fft
         ___lmul
       _log
         ___awtoft
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___wmul
         _frexp
     _cmFilterHighPassUsingLowPass
       ___wmul
     _log
       ___awtoft
         _ReadADC (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul
       _frexp
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _SerialRxPinInterrupt (ROOT)
   _ReadUSART
   i1_printf
     i1___lwdiv
     i1___lwmod
       i1___lwdiv (ARG)
     i1___wmul
     i1_isdigit
     i1_putch
   i1_strcpy

 _TimingISR (ROOT)
   i2___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      5       5      13        2.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     56      FC       7       98.4%
BITBANK0            80      0       0       4        0.0%
BANK0               80     60      61       5       75.8%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     27      60       1       75.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3C2      15        0.0%
DATA                 0      0     3C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Feb 21 15:25:05 2017

                                        _i 0034                                          _x 003E  
                                        _y 0040                                          _z 0042  
                                       _tl 003A                                         _tr 003C  
                                       _rx 0047                                         _tt 01D2  
                                       bsr 000FE0                        ___wmul@multiplicand 00A1  
                         i1___wmul@product 001A              cmFilterHighPassUsingLowPass@i 00C5  
            cmFilterHighPassUsingLowPass@j 00BD              cmFilterHighPassUsingLowPass@k 00B9  
                             ___ftadd@exp1 00C5                               ___ftadd@exp2 00C4  
                             ___ftadd@sign 00C3                                        l200 0FD8  
                                      l146 1F76                                        l171 2700  
                                      l325 4386                                        l613 0206  
                                      l366 13D2                                        l711 4278  
                                      l712 427A                                        l552 39D6  
                                      l546 3A9E                                        l571 2F04  
                                      l619 0B94                                        l652 15DA  
                                      l564 3BEC                                        l558 390E  
                                      l681 17CA                                        l770 3D68  
                                      l763 3D38                                        l835 4226  
                                      l772 3D84                                        l836 422E  
                                      l861 3540                                        l686 439C  
                                      l767 3D58                                        l768 3D5A  
                                      l769 3D66                                        l698 435A  
                                      l788 41A4                                        l974 3750  
                                      l975 3758                                        _abs 4204  
                                      _day 0056                                        _log 31A4  
                       MessageRoutine@str1 0156                         MessageRoutine@str2 016A  
                                      wreg 000FE8                            ReadTimer0@timer 00A1  
                             __CFG_LVP$OFF 000000                               ___ftdiv@cntr 0156  
                             ___ftdiv@sign 015B                               __CFG_WDT$OFF 000000  
                                     l1032 4302                                       l1200 2404  
                                     l1025 4126                                       l1211 316A  
                                     ?_abs 009F                                       l1046 4346  
                                     l1039 4330                                       l1223 3060  
                                     l1136 3660                                       l1208 31A2  
                                     l1233 41C8                                       l1330 32E2  
                                     l1147 3628                                       l1180 22CC  
                                     l1244 3414                                       l1182 22F6  
                                     l1430 3B4C                                       l1191 23DA  
                                     l1408 3F4A                                       l1176 2292  
                                     l1177 24A6                                       l1259 4202  
                                     l1367 3DFE                                       l4200 2EA6  
                                     l1377 3EE4                                       l4210 2EF8  
                                     l5004 37A4                                       l4214 42EA  
                                     l5014 3DA4                                       l5102 1612  
                                     l5006 382E                                       l5016 3DB2  
                                     l5120 1672                                       l5112 1642  
                                     l4208 2EEA                                       l5026 3DEE  
                                     l5018 3DBC                                       l5042 3ED4  
                                     l5034 3E96                                       l5130 16CE  
                                     l5106 162E                                       l5202 04C8  
                                     l5036 3EA4                                       l5132 16DA  
                                     l5116 166C                                       l5108 1634  
                                     l5052 13F6                                       l5038 3EAE  
                                     l5142 171A                                       l5134 16E6  
                                     l5126 1696                                       l5070 1506  
                                     l5150 1784                                       l4086 3CD0  
                                     l3702 352E                                       l5214 05CA  
                                     l5206 04F6                                       l6014 209C  
                                     l5144 1720                                       l5080 154A  
                                     l5072 1512                                       l5048 13E2  
                                     l4088 3CF8                                       l6040 216E  
                                     l6016 20AC                                       l6008 2076  
                                     l5138 1704                                       l5082 1564  
                                     l5074 151A                                       l5066 14E0  
                                     l5058 143A                                       l5090 1582  
                                     l4194 2E90                                       l5402 3402  
                                     l5322 30C6                                       l6034 210C  
                                     l5148 1774                                       l5076 1534  
                                     l4188 2DB2                                       l5316 308C  
                                     l5180 0218                                       l5164 31E4  
                                     l6028 20E6                                       l6060 2218  
                                     l3910 3D18                                       l5270 3664  
                                     l5086 157C                                       l5510 2714  
                                     l3670 343C                                       l5342 3128  
                                     l5318 30B2                                       l5262 0B2E  
                                     l5158 31B6                                       l5422 1C06  
                                     l5414 1BC0                                       l6046 2184  
                                     l5272 366C                                       l5520 276E  
                                     l5504 40A0                                       l4800 35D6  
                                     l5352 317C                                       l5440 1C9E  
                                     l3930 3D4E                                       l3922 3D3C  
                                     l3914 3D24                                       l5290 3718  
                                     l5282 36B2                                       l5530 27C8  
                                     l5506 40AE                                       l4810 3634  
                                     l4802 3608                                       l3682 348A  
                                     l5258 0AF6                                       l5186 0354  
                                     l5426 1C10                                       l5418 1BF4  
                                     l5434 1C7A                                       l5540 2822  
                                     l4804 3618                                       l5620 385C  
                                     l3684 349C                                       l3676 345C  
                                     l5196 0456                                       l5452 1E3A  
                                     l5444 1D5E                                       l5436 1C84  
                                     l3918 3D2E                                       l5286 36C6  
                                     l5550 287C                                       l4902 2F30  
                                     l5390 33AE                                       l5366 330E  
                                     l5606 3924                                       l3694 34FC  
                                     l3686 34A6                                       l5198 045E  
                                     l5470 0C6E                                       l5288 3710  
                                     l5800 12CC                                       l5296 4320  
                                     l4816 3652                                       l4840 22DA  
                                     l4904 2F56                                       l5384 3392  
                                     l5480 0D68                                       l5448 1D68  
                                     l5456 1E4A                                       l4834 22A0  
                                     l4930 2FF6                                       l4922 2FBA  
                                     l5394 33C4                                       l3698 3510  
                                     l5490 0F1E                                       l5482 0DAA  
                                     l5714 2578                                       l5572 3EF0  
                                     l4940 303A                                       l4932 2FFE  
                                     l4908 2F6A                                       l5396 33D6  
                                     l5388 33A6                                       l5484 0E10  
                                     ?_log 00D2                                       l5582 4336  
                                     l5574 3EFE                                       l4862 235E  
                                     l4846 22EC                                       l4926 2FDA  
                                     l5398 33E4                                       l5494 0F8C  
                                     l5808 1362                                       l5752 10CE  
                                     l5744 1050                                       l4792 3572  
                                     l4864 236E                                       l4856 232E  
                                     l4936 301E                                       l5592 39EC  
                                     l5496 0FA4                                       l5728 26BE  
                                     l5578 3F3A                                       l5762 1128  
                                     l4794 3582                                       l4882 2430  
                                     l4874 23BA                                       l4866 237E  
                                     l4962 3E1C                                       l4956 41F8  
                                     l5772 1182                                       l4796 35B4  
                                     l4788 355C                                       l4892 2480  
                                     l4876 23CA                                       l4868 238A  
                                     l5692 24B8                                       l5782 11DC  
                                     l4966 3E44                                       l4990 3AD4  
                                     l5792 1236                                       l4978 40FE  
                                     l5698 2510                                       l5964 1F8C  
                                     l5956 1F5C                                       l5958 1F6E  
                                     l5976 1FCC                                       l5994 202C  
                                     l5996 203C                                       l5988 2006  
                                     STR_1 7F46                                       STR_2 7EA6  
                                     STR_3 7F58                                       STR_4 7EBB  
                                     STR_5 7F6A                                       STR_6 7ED0  
                                     STR_7 7F34                                       STR_8 7EFF  
                                     STR_9 7F8E                                       u6011 32FA  
                                     u6030 3334                                       u5311 2F46  
                                     u5081 2240                                       u5091 225E  
                                     u6035 332A                                       u5420 3B06  
                                     u6205 0D7E                                       u5510 1426  
                                     u6206 0D86                                       u6207 0D98  
                                     u6160 1D7E                                       u5530 1484  
                                     u5291 2F1C                                       u6235 0F60  
                                     u6091 1B98                                       u5540 14D0  
                                     u6260 40D6                                       u5428 3B0A  
                                     u6236 0F68                                       u6180 0C6C  
                                     u5517 141C                                       u6237 0F7A  
                                     u7047 4322                                       u5720 17BA  
                                     u7057 4338                                       u5537 147A  
                                     u7067 42F2                                       u5547 14C6  
                                     u6267 40CC                                       u5804 0510  
                                     u5805 0508                                       u5590 15B8  
                                     u5727 17B0                                       u5815 0666  
                                     u5816 066E                                       u6480 2576  
                                     u5825 073E                                       u5817 0680  
                                     u5826 0746                                       u5835 0830  
                                     u5827 0758                                       u5940 4398  
                                     u5836 0838                                       u5764 01B8  
                                     u5597 15AE                                       u5845 0908  
                                     u5837 084A                                       u5765 01B0  
                                     u5846 0910                                       u5951 3078  
                                     u5847 0922                                       u5971 30A2  
                                     u6870 1F86                                       _TXIF 007CF4  
                                     abs@a 009F                                       _baud 0060  
                                     _atoi 3662                                       _main 1F3A  
                             ___ftpack@arg 009F                               ___ftpack@exp 00A2  
                                     _year 005E                                       fsr0h 000FEA  
                                     fsr1h 000FE2                                       indf0 000FEF  
                                     fsr0l 000FE9                                       fsr2h 000FDA  
                                     fsr1l 000FE1                                       indf2 000FDF  
                                     fsr2l 000FD9                                       log@x 00D2  
                                     pclat 000FFA                              ??_ReadAndTime 00E0  
                                     prodh 000FF4                                       prodl 000FF3  
                            i1printf@width 008A                                       start 0184  
                          __end_ofi1_putch 43BA                               ___ftmul@cntr 00B8  
                             ___param_bank 000010                               ___ftmul@sign 00B9  
                          __end_of_BusyADC 439E                            __end_of_ReadADC 435C  
                              _Delay10TCYx 431C                               ___fttol@exp1 016A  
                                    ??_abs 00A1                                      ??_log 00D5  
                             ___fttol@lval 0166                                _Delay1KTCYx 4332  
                          __end_of___aldiv 3542                                      ?_atoi 00A5  
                                    ?_main 0400                            __end_of___ftadd 24A8  
                                    STR_10 7F21                                      STR_11 7EFF  
                                    STR_12 7F8E                                      STR_20 7F43  
                                    STR_13 7FFB                                      STR_21 7FD9  
                                    STR_22 7F43                                      STR_30 7FF6  
                                    STR_14 7F7C                                      STR_31 7F43  
                                    STR_15 7FCE                                      STR_23 7FB7  
                                    STR_24 7F43                                      STR_40 7EE5  
                                    STR_16 7E91                                      STR_32 7E06  
                                    STR_33 7F43                                      STR_41 7FE3  
                                    STR_17 7FC3                                      STR_25 7F9D  
                                    STR_42 7F43                                      STR_26 7F43  
                                    STR_18 7F43                                      STR_34 7E62  
                                    STR_35 7F43                                      STR_43 7EF9  
                                    STR_19 7FAB                                      STR_27 7E7C  
                                    STR_44 7FEA                                      STR_28 7F0D  
                                    STR_36 7E47                                      STR_45 7F43  
                                    STR_37 7F43                                      STR_29 7EF9  
                                    STR_46 7F0D                                      STR_38 7E28  
                                    STR_39 7F43                                      STR_47 7FF1  
                                    STR_48 7D7A                            __end_of___ftdiv 31A4  
                          __end_of___ftneg 41D6                            __end_of___ftmul 3062  
                                    _T0CON 000FD5                            __end_of___fttol 3416  
                          __end_of___lwdiv 3E08                                      i1l313 013E  
                                    i1l325 43B0                            __end_of___lwmod 3EEE  
                                    i1l652 19B2                                      i1l681 1B8C  
                                    i2l442 2B28                                      i1l781 4290  
                                    i1l785 42A0                                      i1l788 4256  
                                    _RCREG 000FAE                                      _RCSTA 000FAB  
                                    _TMR0H 000FD7                                      _TMR0L 000FD6  
                                    _SPBRG 000FAF                                      _TRISA 000F92  
                               _ConfigWord 0142                                      _TXREG 000FAD  
                    __size_of_Delay10KTCYx 001E                                      _TXSTA 000FAC  
                               i1isdigit@c 0018           cmFilterHighPassUsingLowPass@xLPF 00BF  
                      ___lmul@multiplicand 00A3                                      _Nlong 0050  
                       i1___lwmod@dividend 001D                            __end_of_fix_fft 0BC6  
                            ___awtoft@sign 00AA                            __end_of_dpowers 7D5F  
                                    _frexp 3AA0                                      _errno 01CE  
                          __end_of_isdigit 4204                                      _hours 0032  
                                    _month 0058                              ___ftpack@sign 00A3  
                                    atoi@a 00AA                                      atoi@s 00A5  
                                    _putch 4380                                 _ConvertADC 43C6  
                           __CFG_BOREN$OFF 000000                                      tablat 000FF5  
                         __end_ofi1___wmul 4258                                      plusw1 000FE3  
                                    plusw2 000FDB                                      status 000FD8  
                      i1___wmul@multiplier 0016                              ??_SetDateTime 00C8  
                       __size_ofi1___lwdiv 005C                         __size_ofi1___lwmod 004C  
                         __end_ofi1_printf 1B8E                           __end_ofi1_strcpy 416E  
                       __size_ofi2___lwmod 004C                                 i1printf@ap 0083  
                               i1printf@cp 0080                            __initialization 3BEE  
                              log@exponent 00D5                                 _InitTimer0 43BA  
                             __end_of_atoi 375A                               __end_of_main 222A  
                           _InitInterrupts 436E                                 _ReadTimer0 435C  
                               _NewMessage 002C                        __end_of_ReadAndTime 2D56  
                       __size_ofi1_isdigit 0022                               _Delay10KTCYx 42E6  
                           __CFG_OSC$HSPLL 000000                                     ??_atoi 00A7  
                                   ??_main 00E0                                 _MsgFromPIC 0100  
                            ___fttol@sign1 0165                                 i1strcpy@cp 001A  
                               i1strcpy@to 0016                              __activetblptr 000002  
                             fix_fft@istep 015E                           __end_of_TimeLoop 3D02  
               __end_of_cmStuffsWrapperFun 2702                         __size_of_ConfigADC 000E  
                         __end_of_Sinewave 7D55             approxRollingAverage@new_sample 00B1  
                                   _ADCON0 000FC2                                     _ADCON1 000FC1  
                                   _ADCON2 000FC0                                     ?_frexp 009F  
                                   _ADRESH 000FC4                                     _ADRESL 000FC3  
                         __end_of___awtoft 4128                                     ?_putch 0001  
                         __end_of___ftpack 3662                           __end_of_cmFftFun 0FDA  
                                   i1l1259 42E4                                     i1l1367 3F9E  
                                   i1l1377 4040                                     i1l6082 00D8  
                                   i1l6084 00E6                                     i1l6068 0070  
                                   i1l6092 00F8                                     i1l6094 0108  
                                   i1l6078 00C0                                     i1l6088 00F0  
                                   i2l1377 408C                                 _OpenTimer0 4258  
                                   i1l6098 011A                                     i1l5660 3F74  
                                   i1l5646 42DC                                     i1l5910 1AAC  
                                   i1l5830 17EE                                     i1l5656 3F62  
                                   i1l5680 401E                                     i1l5920 1AEA  
                                   i1l5912 1AB8                                     i1l5904 1A6C  
                                   i1l5658 3F6C                                     i1l5922 1AF0  
                                   i1l5850 18F4                                     i1l5826 17DA  
                                   i1l5668 3F92                                     i1l5684 4034  
                                   i1l5676 400C                                     i1l5916 1AD6  
                                   i1l5908 1AA0                                     i1l5860 1946  
                                   i1l5852 18FC                                     i1l5844 18C2  
                                   i1l5836 1832                                     i1l5932 4132  
                       __size_of_InitUSART 0022                                     i1l5678 4016  
                                   i1l5926 1B40                                     i1l5854 1916  
                                   i1l5934 413C                                     i1l5880 19EA  
                                   i1l5864 195E                                     i1l5848 18E8  
                                   i1l5928 1B50                                     i1l5890 1A1A  
                                   i1l5858 192C                                     i1l5884 1A06  
                                   i1l5868 1964                                     i1l5894 1A44  
                                   i1l5886 1A0C                                     i2l4480 4062  
                                   i2l4720 2A44                                     i2l4712 2A22  
                                   i2l4482 406A                                     i1l5898 1A4A  
                                   i2l4724 2A48                                     i2l4486 4080  
                                   i2l4478 4058                                     i2l4750 2AAC  
                                   i2l4734 2A94                                     i2l4742 2AA0  
                                   i2l4718 2A36                                     i2l4728 2A50  
                                   i2l4758 2ACC                                     i2l4698 29E6  
                       __size_of_ReadUSART 0024                                  ??i1_putch 0016  
                                   _TMR0IF 007F92                                     _SPBRGH 000FB0  
                                ??_BusyADC 009F                                  ??_ReadADC 00A1  
                                   _NewDay 004E                                     _Read_X 39D8  
                                   _Read_Y 3910                                     _Read_Z 3848  
                   __end_of_InitInterrupts 4380                                     _Nshort 0052  
                       __size_of_OpenUSART 0084                                     ___lmul 3E08  
                                ??___aldiv 00A7                                     ___wmul 416E  
                                ??___ftadd 00C0                                  ??___ftdiv 00DD  
                                ??___ftneg 00A2                                     _cmYout 0030  
                                ??___ftmul 00B1                       cmStuffsWrapperFun@iW 01AA  
                                ??___fttol 0160                        __end_of_SetDateTime 2940  
                         OpenTimer0@config 009F                                  ??___lwdiv 00A3  
                                ??___lwmod 00AA                                     _gscale 004B  
                                   clear_0 3BF6                                     clear_1 3C0A  
                                   clear_2 3C1C                                     clear_3 3C28  
                                   _printf 13D4                                     _strcmp 3EEE  
                                   _strcpy 4096                                 _PumpDetect 2D56  
                                ??_fix_fft 00B1                      ___ftmul@f3_as_product 00B5  
                       __size_of_TimingISR 2B5C                          __end_ofi1___lwdiv 3FA8  
                             __pdataCOMRAM 0048                          __end_ofi1___lwmod 404A  
                                ??_isdigit 009F                               __mediumconst 7754  
                        __end_ofi2___lwmod 4096                                     tblptrh 000FF7  
                                   tblptrl 000FF6                                     tblptru 000FF8  
                                   putch@c 009F                                ?_ConvertADC 0001  
                        __end_ofi1_isdigit 42E6                              _MessageBuffer 01E8  
                         __end_oflog@coeff 7D7A                                _LastMessage 01D4  
             __end_of_approxRollingAverage 3BEE                                 __accesstop 0080  
                  __end_of__initialization 3C6E                                _Read_X$2562 0171  
                          __CFG_PBADEN$OFF 000000                                _Read_Y$2563 0171  
                              _Read_Z$2564 0171                                 ___ftadd@f1 00BA  
                               ___ftadd@f2 00BD                               eval_poly@res 00CF  
                            ___rparam_used 000001                                 ___ftdiv@f1 00D7  
                               ___ftdiv@f2 00DA                                 ___ftdiv@f3 0157  
                              _ReadAndTime 2B64              __size_of_SerialRxPinInterrupt 016C  
                               ___ftneg@f1 009F                                 ___awtoft@c 00A7  
                              i1printf@len 0085                          __end_of_ConfigADC 43AC  
                              i1printf@val 0088                            ?_InitInterrupts 0001  
                               ___ftmul@f1 00AB                                 ___ftmul@f2 00AE  
                               ___fttol@f1 015C                         i2___lwmod@dividend 0001  
                           __pcstackCOMRAM 0001                                ?_InitTimer0 0001  
                             __pidataBANK1 3FA8                                ?_ReadTimer0 009F  
                            __end_of_frexp 3B4E                              __end_of_putch 4390  
                        __end_of_InitUSART 42C4                          __end_of_ReadUSART 42A2  
                                ?i1___wmul 0016       __end_of_cmFilterHighPassUsingLowPass 1F3A  
    __size_of_cmFilterHighPassUsingLowPass 03AC               _cmFilterHighPassUsingLowPass 1B8E  
                                ?i1_printf 0022                                  ?i1_strcpy 0016  
                            ReadUSART@data 0016                          __end_of_OpenUSART 3D86  
                                  ??_frexp 00A4                    approxRollingAverage@avg 00AD  
                             cmFftFun@root 0195                                    ??_putch 009F  
                               __pbssBANK1 01AC                                 __pbssBANK2 0200  
                               __pbssBANK3 0300                                ?_OpenTimer0 0001  
                       __size_of_eval_poly 00EE                    __size_of_MessageRoutine 03FA  
                               __pnvCOMRAM 0060                          __end_of_TimingISR 2B64  
                              _SetDateTime 2702                                    ?_Read_X 016B  
                                  ?_Read_Y 016B                                    ?_Read_Z 016B  
                                ?_TimeLoop 0001                                    ?___lmul 009F  
                             ?_Delay10TCYx 0001                                    ?___wmul 009F  
                             ?_Delay1KTCYx 0001                             ___lmul@product 00A7  
                      __size_of_ConvertADC 0004                                  ?___awtoft 00A7  
                                ?___ftpack 009F                                  ?_cmFftFun 0001  
                                  ?_printf 00AB                                 ??i1___wmul 001A  
                              ?_PumpDetect 00A3                                    ?_strcmp 009F  
                                  ?_strcpy 009F                                 ??i1_printf 0024  
                               ??i1_strcpy 001A                                    _BTcount 0028  
                      __size_of_InitTimer0 000C                                    _BTpower 01CA  
                      __size_of_ReadTimer0 0012                                    Read_X@c 016E  
                                  Read_Y@c 016E                                    Read_Z@c 016E  
                                  Read_X@m 016B                                    Read_Y@m 016B  
                                  Read_Z@m 016B                                    Read_X@x 0174  
                                  Read_Y@y 0174                                    Read_Z@z 0174  
                                  i1_putch 43AC                                    _BusyADC 4390  
                                  _ReadADC 4348                                    __Hparam 0000  
                                  __Lparam 0000                            __size_of_Read_X 00C8  
                          __size_of_Read_Y 00C8                            __size_of_Read_Z 00C8  
                               ??_TimeLoop 00A3                                    _Pumping 0054  
                                  ___aldiv 3416                            __size_of___lmul 007A  
                                  ___ftadd 222A                                    ___ftdiv 3062  
                                  ___ftneg 41A6                            __size_of___wmul 0038  
                                  ___ftmul 2F06                                    ___fttol 32E4  
                                  ___lwdiv 3D86                                    ___lwmod 3E82  
                                  _cmYimag 0300                                    __pcinit 3BEE  
                                  _cmYreal 0200                                 ??___awtoft 00AA  
                               ??___ftpack 00A4                          __end_of_eval_poly 3848  
                          Delay10TCYx@unit 009F                                    __ramtop 0600  
                               ??_cmFftFun 0188                        __size_of_OpenTimer0 0026  
                                  __ptext0 1F3A                                    __ptext1 24A8  
                                  __ptext2 1B8E                                    __ptext3 0BC6  
                                  __ptext4 31A4                                    __ptext5 3AA0  
                                  __ptext6 375A                                    __ptext7 0188  
                                  __ptext8 3E08                                    __ptext9 3062  
                          __size_of_printf 03F8                                  _T0CONbits 000FD5  
                     _approxRollingAverage 3B4E                                    _fix_fft 0188  
                          __size_of_strcmp 005E                            __size_of_strcpy 004A  
                                  _goffset 0048                                  _T1CONbits 000FCD  
                                  _counter 01CC                                    _dpowers 7D55  
                        i1___lwdiv@divisor 0018                               __size_of_abs 002C  
                             __size_of_log 0140                                    _isdigit 41D6  
                        i1___lwdiv@counter 001A                           ___aldiv@dividend 009F  
                                  _minutes 0036                                    _seconds 0038  
                           __pintcode_body 2940                       end_of_initialization 3C6E  
                            __Lmediumconst 7754                                    int_func 2940  
                       _cmStuffsWrapperFun 24A8                        __size_of_PumpDetect 01B0  
                                _RCSTAbits 000FAB                                    printf@c 00C7  
                                  printf@f 00AB                           ___aldiv@quotient 00A9  
                      ?_cmStuffsWrapperFun 0001                                    postdec1 000FE5  
                                  postdec2 000FDD                                    postinc0 000FEE  
                                  postinc1 000FE6                                    postinc2 000FDE  
                    i1___wmul@multiplicand 0018                                    strcmp@r 00A4  
                    ?_approxRollingAverage 00AD                                  _TRISBbits 000F93  
                                _TRISCbits 000F94                       ??_cmStuffsWrapperFun 00E0  
                                i1___lwdiv 3F4C                                  i1___lwmod 3FFE  
                             ??_ConvertADC 009F                                  i2___lwmod 404A  
                           _MessageRoutine 0FDA                          MessageRoutine@ret 017E  
                         ??_InitInterrupts 009F                                ___ftdiv@exp 015A  
                              printf@width 00C5                                  _TXSTAbits 000FAC  
                                i1_isdigit 42C4                               ?_ReadAndTime 0001  
                             i1printf@flag 0087                               i1printf@prec 0082  
                              ___ftmul@exp 00B4                    _cmStuffsWrapperFun$2560 01A2  
                  _cmStuffsWrapperFun$2561 01A5                    _cmStuffsWrapperFun$2559 019F  
                             ??_InitTimer0 00A0                             __end_of_Read_X 3AA0  
                           __end_of_Read_Y 39D8                             __end_of_Read_Z 3910  
                             ??_ReadTimer0 00A1                                  _ConfigADC 439E  
                           __end_of___lmul 3E82                             __end_of___wmul 41A6  
                              _BAUDCONbits 000FB8                       __size_of_Delay10TCYx 0016  
                            __pidataCOMRAM 4304                         __end_of_ConvertADC 43CA  
                        i1___lwmod@divisor 001F                          i1___lwmod@counter 0021  
                     __size_of_Delay1KTCYx 0016               __end_of_SerialRxPinInterrupt 0184  
                           __end_of_printf 17CC                             __end_of_strcmp 3F4C  
                           __end_of_strcpy 40E0                                  _InitUSART 42A2  
                      start_initialization 3BEE                          __size_ofi1___wmul 0028  
                                _ReadUSART 427E                                 eval_poly@d 00C9  
                               eval_poly@n 00CB                                 eval_poly@x 00C6  
                                i1printf@c 008C                                  i1printf@f 0022  
                              __end_of_abs 4230                                __end_of_log 32E4  
                   __end_of_MessageRoutine 13D4                                 ?i1___lwdiv 0016  
                               ?i1___lwmod 001D                          __size_ofi1_printf 03C2  
                               ?i2___lwmod 0001                         __end_of_InitTimer0 43C6  
                        __size_ofi1_strcpy 0046                               ??_OpenTimer0 009F  
                       __end_of_ReadTimer0 436E                                 frexp@value 009F  
                                _OpenUSART 3D02                                 ?i1_isdigit 0001  
                             ?_SetDateTime 0001                                   ??_Read_X 00E0  
                                 ??_Read_Y 00E0                                   ??_Read_Z 00E0  
                                 ??___lmul 00A7                                  _TimingISR 0008  
                                 ??___wmul 00A3                          __size_of_TimeLoop 008A  
                               ?_ConfigADC 0001                                __pdataBANK1 0100  
                   ??_approxRollingAverage 00B7                              cmFftFun@place 0199  
                             i1strcpy@from 0018                                   ??_printf 00B7  
                             ??_PumpDetect 00A5                                   ??_strcmp 00A3  
                                 ??_strcpy 00A3                         __end_of_OpenTimer0 427E  
                        __size_of___awtoft 0048                          __size_of___ftpack 0120  
                        __size_of_cmFftFun 0414                                 ?_InitUSART 0001  
                              __pbssCOMRAM 0028                                 ?_ReadUSART 0001  
                            __pcstackBANK0 0080                              __pcstackBANK1 0156  
                            __pcstackBANK4 0400                          i2___lwmod@divisor 0003  
                        i2___lwmod@counter 0005                            ?_MessageRoutine 0001  
                             _isdigit$2238 00A0                            Delay1KTCYx@unit 009F  
                                 ?i1_putch 0001                                 ?_OpenUSART 009F  
                                 ?_BusyADC 0001                                   ?_ReadADC 009F  
                                __pnvBANK0 00E0                         __end_of_PumpDetect 2F06  
                                cmFftFun@k 019D                           ___lwdiv@dividend 009F  
                  cmStuffsWrapperFun@iTemp 01A8                                  __pintcode 0008  
                            __pmediumconst 7754                                   ?___aldiv 009F  
                               ?_TimingISR 0001                                   ?___ftadd 00BA  
                                 ?___ftdiv 00D7                                   ?___ftneg 009F  
                                 ?___ftmul 00AB                                   ?___fttol 015C  
                            ?_Delay10KTCYx 0001                                   ?___lwdiv 009F  
                                 ?___lwmod 00A6                                __pintcodelo 0018  
                                 ?_fix_fft 00AB                                   ?_isdigit 0001  
                                _eval_poly 375A                           ___lwdiv@quotient 00A4  
                              ??i1___lwdiv 001A                                ??i1___lwmod 0021  
                           __size_of_frexp 00AE                                ??i2___lwmod 0005  
                           __size_of_putch 0010        cmFilterHighPassUsingLowPass@Nsignal 00C1  
                           i1_isdigit$2238 0017                            ___aldiv@divisor 00A3  
                          ___aldiv@counter 00A7                             ___wmul@product 00A3  
                                 _LATBbits 000F8A                                   _LATCbits 000F8B  
                              ??i1_isdigit 0016                                   _IPR1bits 000F9F  
                                 _PIE1bits 000F9D                       _SerialRxPinInterrupt 0018  
                                 i1u660_20 181E                                   i1u660_27 1814  
                                 i1u662_20 1876                                   i1u662_27 186C  
                                 i1u663_20 18B2                                   i1u663_27 18A8  
                                 i1u681_20 1B7C                                   i1u681_27 1B72  
                                 _PIR1bits 000F9E                                   i1u683_20 4164  
                                 i1u683_27 415A                                   i1u668_20 1990  
                                 i1u668_27 1986        cmFilterHighPassUsingLowPass@xBuffer 00BB  
                                 i2u490_40 29F2                                   i2u491_40 2A0A  
                                 i2u487_40 29A4                       __size_of_ReadAndTime 01F2  
                                 _RCONbits 000FD0                             ??_Delay10KTCYx 009F  
                              ??_ConfigADC 009F                                 _ADCON0bits 000FC2  
                        ___wmul@multiplier 009F                                   i1___wmul 4230  
                               printf@flag 00C2                                   _DayCount 002A  
                               printf@prec 00BD                                ??_InitUSART 00A2  
                               ?_eval_poly 00C6                                ??_ReadUSART 0016  
        cmFilterHighPassUsingLowPass@F4482 010E                           Delay10KTCYx@unit 00A0  
                                 i1_printf 17CC                                   i1_strcpy 4128  
                                fix_fft@fi 00AD                                  fix_fft@fr 00AB  
                                fix_fft@nn 015A                                  fix_fft@qi 0164  
                                fix_fft@mr 0178                                  fix_fft@ti 0170  
                                fix_fft@qr 0162                                  fix_fft@wi 0168  
                                fix_fft@tr 016E                                  fix_fft@wr 0166  
                        ___lmul@multiplier 009F                                _INTCON2bits 000FF1  
            ?_cmFilterHighPassUsingLowPass 0001                                  copy_data0 3C42  
                                copy_data1 3C62          cmFilterHighPassUsingLowPass@j_428 00C3  
                                _xshortavg 01B4                                ??_OpenUSART 00A1  
                                 i1putch@c 0016                                   _NewMonth 0116  
                                _yshortavg 01BC                            OpenUSART@config 00A1  
                         __size_ofi1_putch 000E                               _Timer0Config 0044  
                             _Timer1Config 0045                                  frexp@eptr 00A2  
                                _zshortavg 01C4                      ?_SerialRxPinInterrupt 0001  
                         __size_of_BusyADC 000E                           __size_of_ReadADC 0014  
                                 __Hrparam 0000                                   _TimeLoop 3C78  
                                 __Lrparam 0000                       __size_of_SetDateTime 023E  
                                 _Sinewave 7755                                ??_TimingISR 0006  
                         __size_of___aldiv 012C                           __size_of___ftadd 027E  
                         __size_of___ftdiv 0142                           __size_of___ftneg 0030  
                         __size_of___ftmul 015C                           __size_of___fttol 0132  
                         __size_of___lwdiv 0082                           __size_of___lwmod 006C  
                                 ___awtoft 40E0                                   ___ftpack 3542  
                                 _cmFftFun 0BC6                      approxRollingAverage@N 00B5  
                                 _cmWinLen 002E                           __size_of_fix_fft 0A3E  
                         __size_of_isdigit 002E                            ___lwdiv@divisor 00A1  
                          ___lwdiv@counter 00A3                                   __ptext10 2B64  
                                 __ptext11 3B4E                                   __ptext20 2F06  
                                 __ptext12 3416                                   __ptext21 222A  
                                 __ptext13 3C78                                   __ptext30 0FDA  
                                 __ptext22 40E0                                   __ptext14 435C  
                                 __ptext31 4096                                   __ptext23 3542  
                                 __ptext15 3848                                   __ptext40 416E  
                                 __ptext32 3EEE                                   __ptext24 4348  
                                 __ptext16 3910                                   __ptext41 4332  
                                 __ptext33 2702                                   __ptext25 431C  
                                 __ptext17 39D8                                   __ptext50 4128  
                                 __ptext42 42A2                                   __ptext34 13D4  
                                 __ptext26 43C6                                   __ptext18 32E4  
                                 __ptext51 17CC                                   __ptext43 3D02  
                                 __ptext35 4380                                   __ptext27 4390  
                                 __ptext19 41A6                                   __ptext52 43AC  
                                 __ptext44 43BA                                   __ptext36 3E82  
                                 __ptext28 2D56                                   __ptext53 42C4  
                                 __ptext45 4258                                   __ptext37 3D86  
                                 __ptext29 4204                                   __ptext54 4230  
                                 __ptext46 436E                                   __ptext38 3662  
                                 __ptext55 3FFE                                   __ptext47 42E6  
                                 __ptext39 41D6                                   __ptext56 3F4C  
                                 __ptext48 439E                                _offcountmax 005A  
                                 __ptext57 427E                                   __ptext59 404A  
              __size_of_cmStuffsWrapperFun 025A                         i1___lwdiv@dividend 0016  
                               strcpy@from 00A1                              __size_of_atoi 00F8  
                            __size_of_main 02F0                                   _offcount 01AC  
                            ??_Delay10TCYx 009F                                   _onthresh 005C  
                                 _overflow 01D0                                _UART1Config 00E0  
                                 atoi@sign 00A9                              ??_Delay1KTCYx 009F  
                                printf@len 00C0                                   main@argc 0400  
                                 main@argv 0402                                  printf@val 00C3  
                                 fix_fft@b 0172                                   fix_fft@c 0184  
                                 fix_fft@i 0174                                   fix_fft@j 0180  
                                 fix_fft@k 0156                                   fix_fft@l 017C  
                                 fix_fft@m 00AF                                   fix_fft@n 016A  
                                 _xlongavg 01B0                                   _ylongavg 01B8  
cmFilterHighPassUsingLowPass@cmFilterCoeff 00B1                         i1___lwdiv@quotient 001B  
                                 log@coeff 7D5F                                   _zlongavg 01C0  
                         ??_MessageRoutine 00C8                                 _INTCONbits 000FF2  
                              ??_eval_poly 00CD                             OpenUSART@spbrg 009F  
                                 isdigit@c 00A1                       __end_of_Delay10KTCYx 4304  
                                 intlevel1 0000                                   intlevel2 0000  
                         ___lwmod@dividend 00A6                     ??_SerialRxPinInterrupt 008D  
           ??_cmFilterHighPassUsingLowPass 00A5                                _BTcountdown 01C8  
                                 printf@ap 00BE                             _cmWeightVector 0118  
                                 printf@cp 00BB                    __size_of_InitInterrupts 0012  
                         cmFftFun@sizeData 0193              __size_of_approxRollingAverage 00A0  
                      __end_of_Delay10TCYx 4332                                   strcmp@s1 009F  
                                 strcmp@s2 00A1                            ___lwmod@divisor 00A8  
                                 strcpy@cp 00A3                                   strcpy@to 009F  
                      __end_of_Delay1KTCYx 4348                            ___lwmod@counter 00AA  
                             ___aldiv@sign 00A8                               _USART_Status 0046  
