

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Nov 29 16:03:52 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    82                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    83                           	psect	text59,global,reloc=2,class=CODE,delta=1
    84                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    85                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    86  0000                     
    87                           	psect	idataCOMRAM
    88  004478                     __pidataCOMRAM:
    89                           	opt stack 0
    90                           
    91                           ;initializer for _goffset
    92  004478  60                 	db	96
    93  004479  0B                 	db	11
    94  00447A  44                 	db	68
    95                           
    96                           ;initializer for _gscale
    97  00447B  CD                 	db	205
    98  00447C  8C                 	db	140
    99  00447D  3F                 	db	63
   100                           
   101                           ;initializer for _NewDay
   102  00447E  0001               	dw	1
   103                           
   104                           ;initializer for _Nlong
   105  004480  0032               	dw	50
   106                           
   107                           ;initializer for _Nshort
   108  004482  000A               	dw	10
   109                           
   110                           ;initializer for _Pumping
   111  004484  0001               	dw	1
   112                           
   113                           ;initializer for _month
   114  004486  0001               	dw	1
   115                           
   116                           ;initializer for _offcountmax
   117  004488  07D0               	dw	2000
   118                           
   119                           ;initializer for _onthresh
   120  00448A  07D0               	dw	2000
   121                           
   122                           ;initializer for _year
   123  00448C  07DF               	dw	2015
   124                           
   125                           	psect	idataBANK0
   126  00453C                     __pidataBANK0:
   127                           	opt stack 0
   128                           
   129                           ;initializer for _day
   130  00453C  0001               	dw	1
   131                           
   132                           	psect	idataBANK1
   133  00411E                     __pidataBANK1:
   134                           	opt stack 0
   135                           
   136                           ;initializer for _MsgFromPIC
   137  00411E  0D                 	db	13
   138  00411F  0A                 	db	10
   139  004120  59                 	db	89
   140  004121  6F                 	db	111
   141  004122  75                 	db	117
   142  004123  20                 	db	32
   143  004124  74                 	db	116
   144  004125  79                 	db	121
   145  004126  70                 	db	112
   146  004127  65                 	db	101
   147  004128  64                 	db	100
   148  004129  20                 	db	32
   149  00412A  3A                 	db	58
   150  00412B  00                 	db	0
   151                           
   152                           ;initializer for cmFilterHighPassUsingLowPass@F4485
   153  00412C  0001               	dw	1
   154  00412E  0001               	dw	1
   155  004130  0001               	dw	1
   156  004132  0001               	dw	1
   157                           
   158                           ;initializer for _NewMonth
   159  004134  0001               	dw	1
   160                           
   161                           ;initializer for _cmWeightVector
   162  004136  D981               	dw	55681
   163  004138  FFEB               	dw	65515
   164  00413A  0009               	dw	9
   165  00413C  0028               	dw	40
   166  00413E  0005               	dw	5
   167  004140  FFFD               	dw	65533
   168  004142  0002               	dw	2
   169  004144  0005               	dw	5
   170  004146  0003               	dw	3
   171  004148  0002               	dw	2
   172  00414A  0002               	dw	2
   173  00414C  FFFE               	dw	65534
   174  00414E  FFFE               	dw	65534
   175  004150  FFFE               	dw	65534
   176  004152  FFFD               	dw	65533
   177  004154  0000               	dw	0
   178  004156  0002               	dw	2
   179  004158  FFFF               	dw	65535
   180  00415A  FFFE               	dw	65534
   181  00415C  0001               	dw	1
   182  00415E  FFFD               	dw	65533
   183                           
   184                           ;initializer for _ConfigWord
   185  004160  43                 	db	67
   186  004161  4F                 	db	79
   187  004162  4E                 	db	78
   188  004163  46                 	db	70
   189  004164  49                 	db	73
   190  004165  47                 	db	71
   191  004166  0D                 	db	13
   192  004167  00                 	db	0
   193  004168  00                 	db	0
   194  004169  00                 	db	0
   195  00416A  00                 	db	0
   196  00416B  00                 	db	0
   197  00416C  00                 	db	0
   198  00416D  00                 	db	0
   199  00416E  00                 	db	0
   200  00416F  00                 	db	0
   201  004170  00                 	db	0
   202  004171  00                 	db	0
   203  004172  00                 	db	0
   204  004173  00                 	db	0
   205                           
   206                           	psect	mediumconst
   207  0076D4                     __pmediumconst:
   208                           	opt stack 0
   209  0076D4  00                 	db	0
   210  0076D5                     _Sinewave:
   211                           	opt stack 0
   212  0076D5  0000               	dw	0
   213  0076D7  00C9               	dw	201
   214  0076D9  0192               	dw	402
   215  0076DB  025B               	dw	603
   216  0076DD  0324               	dw	804
   217  0076DF  03ED               	dw	1005
   218  0076E1  04B6               	dw	1206
   219  0076E3  057E               	dw	1406
   220  0076E5  0647               	dw	1607
   221  0076E7  0710               	dw	1808
   222  0076E9  07D9               	dw	2009
   223  0076EB  08A1               	dw	2209
   224  0076ED  096A               	dw	2410
   225  0076EF  0A32               	dw	2610
   226  0076F1  0AFB               	dw	2811
   227  0076F3  0BC3               	dw	3011
   228  0076F5  0C8B               	dw	3211
   229  0076F7  0D53               	dw	3411
   230  0076F9  0E1B               	dw	3611
   231  0076FB  0EE3               	dw	3811
   232  0076FD  0FAB               	dw	4011
   233  0076FF  1072               	dw	4210
   234  007701  1139               	dw	4409
   235  007703  1200               	dw	4608
   236  007705  12C7               	dw	4807
   237  007707  138E               	dw	5006
   238  007709  1455               	dw	5205
   239  00770B  151B               	dw	5403
   240  00770D  15E1               	dw	5601
   241  00770F  16A7               	dw	5799
   242  007711  176D               	dw	5997
   243  007713  1833               	dw	6195
   244  007715  18F8               	dw	6392
   245  007717  19BD               	dw	6589
   246  007719  1A82               	dw	6786
   247  00771B  1B46               	dw	6982
   248  00771D  1C0B               	dw	7179
   249  00771F  1CCF               	dw	7375
   250  007721  1D93               	dw	7571
   251  007723  1E56               	dw	7766
   252  007725  1F19               	dw	7961
   253  007727  1FDC               	dw	8156
   254  007729  209F               	dw	8351
   255  00772B  2161               	dw	8545
   256  00772D  2223               	dw	8739
   257  00772F  22E4               	dw	8932
   258  007731  23A6               	dw	9126
   259  007733  2467               	dw	9319
   260  007735  2527               	dw	9511
   261  007737  25E7               	dw	9703
   262  007739  26A7               	dw	9895
   263  00773B  2767               	dw	10087
   264  00773D  2826               	dw	10278
   265  00773F  28E5               	dw	10469
   266  007741  29A3               	dw	10659
   267  007743  2A61               	dw	10849
   268  007745  2B1E               	dw	11038
   269  007747  2BDB               	dw	11227
   270  007749  2C98               	dw	11416
   271  00774B  2D54               	dw	11604
   272  00774D  2E10               	dw	11792
   273  00774F  2ECC               	dw	11980
   274  007751  2F86               	dw	12166
   275  007753  3041               	dw	12353
   276  007755  30FB               	dw	12539
   277  007757  31B4               	dw	12724
   278  007759  326D               	dw	12909
   279  00775B  3326               	dw	13094
   280  00775D  33DE               	dw	13278
   281  00775F  3496               	dw	13462
   282  007761  354D               	dw	13645
   283  007763  3603               	dw	13827
   284  007765  36B9               	dw	14009
   285  007767  376F               	dw	14191
   286  007769  3824               	dw	14372
   287  00776B  38D8               	dw	14552
   288  00776D  398C               	dw	14732
   289  00776F  3A3F               	dw	14911
   290  007771  3AF2               	dw	15090
   291  007773  3BA4               	dw	15268
   292  007775  3C56               	dw	15446
   293  007777  3D07               	dw	15623
   294  007779  3DB7               	dw	15799
   295  00777B  3E67               	dw	15975
   296  00777D  3F16               	dw	16150
   297  00777F  3FC5               	dw	16325
   298  007781  4073               	dw	16499
   299  007783  4120               	dw	16672
   300  007785  41CD               	dw	16845
   301  007787  4279               	dw	17017
   302  007789  4325               	dw	17189
   303  00778B  43D0               	dw	17360
   304  00778D  447A               	dw	17530
   305  00778F  4523               	dw	17699
   306  007791  45CC               	dw	17868
   307  007793  4674               	dw	18036
   308  007795  471C               	dw	18204
   309  007797  47C3               	dw	18371
   310  007799  4869               	dw	18537
   311  00779B  490E               	dw	18702
   312  00779D  49B3               	dw	18867
   313  00779F  4A57               	dw	19031
   314  0077A1  4AFA               	dw	19194
   315  0077A3  4B9D               	dw	19357
   316  0077A5  4C3F               	dw	19519
   317  0077A7  4CE0               	dw	19680
   318  0077A9  4D80               	dw	19840
   319  0077AB  4E20               	dw	20000
   320  0077AD  4EBF               	dw	20159
   321  0077AF  4F5D               	dw	20317
   322  0077B1  4FFA               	dw	20474
   323  0077B3  5097               	dw	20631
   324  0077B5  5133               	dw	20787
   325  0077B7  51CE               	dw	20942
   326  0077B9  5268               	dw	21096
   327  0077BB  5301               	dw	21249
   328  0077BD  539A               	dw	21402
   329  0077BF  5432               	dw	21554
   330  0077C1  54C9               	dw	21705
   331  0077C3  555F               	dw	21855
   332  0077C5  55F4               	dw	22004
   333  0077C7  5689               	dw	22153
   334  0077C9  571D               	dw	22301
   335  0077CB  57B0               	dw	22448
   336  0077CD  5842               	dw	22594
   337  0077CF  58D3               	dw	22739
   338  0077D1  5963               	dw	22883
   339  0077D3  59F3               	dw	23027
   340  0077D5  5A81               	dw	23169
   341  0077D7  5B0F               	dw	23311
   342  0077D9  5B9C               	dw	23452
   343  0077DB  5C28               	dw	23592
   344  0077DD  5CB3               	dw	23731
   345  0077DF  5D3D               	dw	23869
   346  0077E1  5DC6               	dw	24006
   347  0077E3  5E4F               	dw	24143
   348  0077E5  5ED6               	dw	24278
   349  0077E7  5F5D               	dw	24413
   350  0077E9  5FE2               	dw	24546
   351  0077EB  6067               	dw	24679
   352  0077ED  60EB               	dw	24811
   353  0077EF  616E               	dw	24942
   354  0077F1  61F0               	dw	25072
   355  0077F3  6271               	dw	25201
   356  0077F5  62F1               	dw	25329
   357  0077F7  6370               	dw	25456
   358  0077F9  63EE               	dw	25582
   359  0077FB  646B               	dw	25707
   360  0077FD  64E7               	dw	25831
   361  0077FF  6562               	dw	25954
   362  007801  65DD               	dw	26077
   363  007803  6656               	dw	26198
   364  007805  66CE               	dw	26318
   365  007807  6745               	dw	26437
   366  007809  67BC               	dw	26556
   367  00780B  6831               	dw	26673
   368  00780D  68A5               	dw	26789
   369  00780F  6919               	dw	26905
   370  007811  698B               	dw	27019
   371  007813  69FC               	dw	27132
   372  007815  6A6C               	dw	27244
   373  007817  6ADB               	dw	27355
   374  007819  6B4A               	dw	27466
   375  00781B  6BB7               	dw	27575
   376  00781D  6C23               	dw	27683
   377  00781F  6C8E               	dw	27790
   378  007821  6CF8               	dw	27896
   379  007823  6D61               	dw	28001
   380  007825  6DC9               	dw	28105
   381  007827  6E30               	dw	28208
   382  007829  6E95               	dw	28309
   383  00782B  6EFA               	dw	28410
   384  00782D  6F5E               	dw	28510
   385  00782F  6FC0               	dw	28608
   386  007831  7022               	dw	28706
   387  007833  7082               	dw	28802
   388  007835  70E1               	dw	28897
   389  007837  7140               	dw	28992
   390  007839  719D               	dw	29085
   391  00783B  71F9               	dw	29177
   392  00783D  7254               	dw	29268
   393  00783F  72AE               	dw	29358
   394  007841  7306               	dw	29446
   395  007843  735E               	dw	29534
   396  007845  73B5               	dw	29621
   397  007847  740A               	dw	29706
   398  007849  745E               	dw	29790
   399  00784B  74B1               	dw	29873
   400  00784D  7503               	dw	29955
   401  00784F  7554               	dw	30036
   402  007851  75A4               	dw	30116
   403  007853  75F3               	dw	30195
   404  007855  7640               	dw	30272
   405  007857  768D               	dw	30349
   406  007859  76D8               	dw	30424
   407  00785B  7722               	dw	30498
   408  00785D  776B               	dw	30571
   409  00785F  77B3               	dw	30643
   410  007861  77F9               	dw	30713
   411  007863  783F               	dw	30783
   412  007865  7883               	dw	30851
   413  007867  78C6               	dw	30918
   414  007869  7908               	dw	30984
   415  00786B  7949               	dw	31049
   416  00786D  7989               	dw	31113
   417  00786F  79C7               	dw	31175
   418  007871  7A04               	dw	31236
   419  007873  7A41               	dw	31297
   420  007875  7A7C               	dw	31356
   421  007877  7AB5               	dw	31413
   422  007879  7AEE               	dw	31470
   423  00787B  7B25               	dw	31525
   424  00787D  7B5C               	dw	31580
   425  00787F  7B91               	dw	31633
   426  007881  7BC4               	dw	31684
   427  007883  7BF7               	dw	31735
   428  007885  7C29               	dw	31785
   429  007887  7C59               	dw	31833
   430  007889  7C88               	dw	31880
   431  00788B  7CB6               	dw	31926
   432  00788D  7CE2               	dw	31970
   433  00788F  7D0E               	dw	32014
   434  007891  7D38               	dw	32056
   435  007893  7D61               	dw	32097
   436  007895  7D89               	dw	32137
   437  007897  7DB0               	dw	32176
   438  007899  7DD5               	dw	32213
   439  00789B  7DF9               	dw	32249
   440  00789D  7E1C               	dw	32284
   441  00789F  7E3E               	dw	32318
   442  0078A1  7E5E               	dw	32350
   443  0078A3  7E7E               	dw	32382
   444  0078A5  7E9C               	dw	32412
   445  0078A7  7EB9               	dw	32441
   446  0078A9  7ED4               	dw	32468
   447  0078AB  7EEF               	dw	32495
   448  0078AD  7F08               	dw	32520
   449  0078AF  7F20               	dw	32544
   450  0078B1  7F37               	dw	32567
   451  0078B3  7F4C               	dw	32588
   452  0078B5  7F61               	dw	32609
   453  0078B7  7F74               	dw	32628
   454  0078B9  7F86               	dw	32646
   455  0078BB  7F96               	dw	32662
   456  0078BD  7FA6               	dw	32678
   457  0078BF  7FB4               	dw	32692
   458  0078C1  7FC1               	dw	32705
   459  0078C3  7FCD               	dw	32717
   460  0078C5  7FD7               	dw	32727
   461  0078C7  7FE0               	dw	32736
   462  0078C9  7FE8               	dw	32744
   463  0078CB  7FEF               	dw	32751
   464  0078CD  7FF5               	dw	32757
   465  0078CF  7FF9               	dw	32761
   466  0078D1  7FFC               	dw	32764
   467  0078D3  7FFE               	dw	32766
   468  0078D5  7FFF               	dw	32767
   469  0078D7  7FFE               	dw	32766
   470  0078D9  7FFC               	dw	32764
   471  0078DB  7FF9               	dw	32761
   472  0078DD  7FF5               	dw	32757
   473  0078DF  7FEF               	dw	32751
   474  0078E1  7FE8               	dw	32744
   475  0078E3  7FE0               	dw	32736
   476  0078E5  7FD7               	dw	32727
   477  0078E7  7FCD               	dw	32717
   478  0078E9  7FC1               	dw	32705
   479  0078EB  7FB4               	dw	32692
   480  0078ED  7FA6               	dw	32678
   481  0078EF  7F96               	dw	32662
   482  0078F1  7F86               	dw	32646
   483  0078F3  7F74               	dw	32628
   484  0078F5  7F61               	dw	32609
   485  0078F7  7F4C               	dw	32588
   486  0078F9  7F37               	dw	32567
   487  0078FB  7F20               	dw	32544
   488  0078FD  7F08               	dw	32520
   489  0078FF  7EEF               	dw	32495
   490  007901  7ED4               	dw	32468
   491  007903  7EB9               	dw	32441
   492  007905  7E9C               	dw	32412
   493  007907  7E7E               	dw	32382
   494  007909  7E5E               	dw	32350
   495  00790B  7E3E               	dw	32318
   496  00790D  7E1C               	dw	32284
   497  00790F  7DF9               	dw	32249
   498  007911  7DD5               	dw	32213
   499  007913  7DB0               	dw	32176
   500  007915  7D89               	dw	32137
   501  007917  7D61               	dw	32097
   502  007919  7D38               	dw	32056
   503  00791B  7D0E               	dw	32014
   504  00791D  7CE2               	dw	31970
   505  00791F  7CB6               	dw	31926
   506  007921  7C88               	dw	31880
   507  007923  7C59               	dw	31833
   508  007925  7C29               	dw	31785
   509  007927  7BF7               	dw	31735
   510  007929  7BC4               	dw	31684
   511  00792B  7B91               	dw	31633
   512  00792D  7B5C               	dw	31580
   513  00792F  7B25               	dw	31525
   514  007931  7AEE               	dw	31470
   515  007933  7AB5               	dw	31413
   516  007935  7A7C               	dw	31356
   517  007937  7A41               	dw	31297
   518  007939  7A04               	dw	31236
   519  00793B  79C7               	dw	31175
   520  00793D  7989               	dw	31113
   521  00793F  7949               	dw	31049
   522  007941  7908               	dw	30984
   523  007943  78C6               	dw	30918
   524  007945  7883               	dw	30851
   525  007947  783F               	dw	30783
   526  007949  77F9               	dw	30713
   527  00794B  77B3               	dw	30643
   528  00794D  776B               	dw	30571
   529  00794F  7722               	dw	30498
   530  007951  76D8               	dw	30424
   531  007953  768D               	dw	30349
   532  007955  7640               	dw	30272
   533  007957  75F3               	dw	30195
   534  007959  75A4               	dw	30116
   535  00795B  7554               	dw	30036
   536  00795D  7503               	dw	29955
   537  00795F  74B1               	dw	29873
   538  007961  745E               	dw	29790
   539  007963  740A               	dw	29706
   540  007965  73B5               	dw	29621
   541  007967  735E               	dw	29534
   542  007969  7306               	dw	29446
   543  00796B  72AE               	dw	29358
   544  00796D  7254               	dw	29268
   545  00796F  71F9               	dw	29177
   546  007971  719D               	dw	29085
   547  007973  7140               	dw	28992
   548  007975  70E1               	dw	28897
   549  007977  7082               	dw	28802
   550  007979  7022               	dw	28706
   551  00797B  6FC0               	dw	28608
   552  00797D  6F5E               	dw	28510
   553  00797F  6EFA               	dw	28410
   554  007981  6E95               	dw	28309
   555  007983  6E30               	dw	28208
   556  007985  6DC9               	dw	28105
   557  007987  6D61               	dw	28001
   558  007989  6CF8               	dw	27896
   559  00798B  6C8E               	dw	27790
   560  00798D  6C23               	dw	27683
   561  00798F  6BB7               	dw	27575
   562  007991  6B4A               	dw	27466
   563  007993  6ADB               	dw	27355
   564  007995  6A6C               	dw	27244
   565  007997  69FC               	dw	27132
   566  007999  698B               	dw	27019
   567  00799B  6919               	dw	26905
   568  00799D  68A5               	dw	26789
   569  00799F  6831               	dw	26673
   570  0079A1  67BC               	dw	26556
   571  0079A3  6745               	dw	26437
   572  0079A5  66CE               	dw	26318
   573  0079A7  6656               	dw	26198
   574  0079A9  65DD               	dw	26077
   575  0079AB  6562               	dw	25954
   576  0079AD  64E7               	dw	25831
   577  0079AF  646B               	dw	25707
   578  0079B1  63EE               	dw	25582
   579  0079B3  6370               	dw	25456
   580  0079B5  62F1               	dw	25329
   581  0079B7  6271               	dw	25201
   582  0079B9  61F0               	dw	25072
   583  0079BB  616E               	dw	24942
   584  0079BD  60EB               	dw	24811
   585  0079BF  6067               	dw	24679
   586  0079C1  5FE2               	dw	24546
   587  0079C3  5F5D               	dw	24413
   588  0079C5  5ED6               	dw	24278
   589  0079C7  5E4F               	dw	24143
   590  0079C9  5DC6               	dw	24006
   591  0079CB  5D3D               	dw	23869
   592  0079CD  5CB3               	dw	23731
   593  0079CF  5C28               	dw	23592
   594  0079D1  5B9C               	dw	23452
   595  0079D3  5B0F               	dw	23311
   596  0079D5  5A81               	dw	23169
   597  0079D7  59F3               	dw	23027
   598  0079D9  5963               	dw	22883
   599  0079DB  58D3               	dw	22739
   600  0079DD  5842               	dw	22594
   601  0079DF  57B0               	dw	22448
   602  0079E1  571D               	dw	22301
   603  0079E3  5689               	dw	22153
   604  0079E5  55F4               	dw	22004
   605  0079E7  555F               	dw	21855
   606  0079E9  54C9               	dw	21705
   607  0079EB  5432               	dw	21554
   608  0079ED  539A               	dw	21402
   609  0079EF  5301               	dw	21249
   610  0079F1  5268               	dw	21096
   611  0079F3  51CE               	dw	20942
   612  0079F5  5133               	dw	20787
   613  0079F7  5097               	dw	20631
   614  0079F9  4FFA               	dw	20474
   615  0079FB  4F5D               	dw	20317
   616  0079FD  4EBF               	dw	20159
   617  0079FF  4E20               	dw	20000
   618  007A01  4D80               	dw	19840
   619  007A03  4CE0               	dw	19680
   620  007A05  4C3F               	dw	19519
   621  007A07  4B9D               	dw	19357
   622  007A09  4AFA               	dw	19194
   623  007A0B  4A57               	dw	19031
   624  007A0D  49B3               	dw	18867
   625  007A0F  490E               	dw	18702
   626  007A11  4869               	dw	18537
   627  007A13  47C3               	dw	18371
   628  007A15  471C               	dw	18204
   629  007A17  4674               	dw	18036
   630  007A19  45CC               	dw	17868
   631  007A1B  4523               	dw	17699
   632  007A1D  447A               	dw	17530
   633  007A1F  43D0               	dw	17360
   634  007A21  4325               	dw	17189
   635  007A23  4279               	dw	17017
   636  007A25  41CD               	dw	16845
   637  007A27  4120               	dw	16672
   638  007A29  4073               	dw	16499
   639  007A2B  3FC5               	dw	16325
   640  007A2D  3F16               	dw	16150
   641  007A2F  3E67               	dw	15975
   642  007A31  3DB7               	dw	15799
   643  007A33  3D07               	dw	15623
   644  007A35  3C56               	dw	15446
   645  007A37  3BA4               	dw	15268
   646  007A39  3AF2               	dw	15090
   647  007A3B  3A3F               	dw	14911
   648  007A3D  398C               	dw	14732
   649  007A3F  38D8               	dw	14552
   650  007A41  3824               	dw	14372
   651  007A43  376F               	dw	14191
   652  007A45  36B9               	dw	14009
   653  007A47  3603               	dw	13827
   654  007A49  354D               	dw	13645
   655  007A4B  3496               	dw	13462
   656  007A4D  33DE               	dw	13278
   657  007A4F  3326               	dw	13094
   658  007A51  326D               	dw	12909
   659  007A53  31B4               	dw	12724
   660  007A55  30FB               	dw	12539
   661  007A57  3041               	dw	12353
   662  007A59  2F86               	dw	12166
   663  007A5B  2ECC               	dw	11980
   664  007A5D  2E10               	dw	11792
   665  007A5F  2D54               	dw	11604
   666  007A61  2C98               	dw	11416
   667  007A63  2BDB               	dw	11227
   668  007A65  2B1E               	dw	11038
   669  007A67  2A61               	dw	10849
   670  007A69  29A3               	dw	10659
   671  007A6B  28E5               	dw	10469
   672  007A6D  2826               	dw	10278
   673  007A6F  2767               	dw	10087
   674  007A71  26A7               	dw	9895
   675  007A73  25E7               	dw	9703
   676  007A75  2527               	dw	9511
   677  007A77  2467               	dw	9319
   678  007A79  23A6               	dw	9126
   679  007A7B  22E4               	dw	8932
   680  007A7D  2223               	dw	8739
   681  007A7F  2161               	dw	8545
   682  007A81  209F               	dw	8351
   683  007A83  1FDC               	dw	8156
   684  007A85  1F19               	dw	7961
   685  007A87  1E56               	dw	7766
   686  007A89  1D93               	dw	7571
   687  007A8B  1CCF               	dw	7375
   688  007A8D  1C0B               	dw	7179
   689  007A8F  1B46               	dw	6982
   690  007A91  1A82               	dw	6786
   691  007A93  19BD               	dw	6589
   692  007A95  18F8               	dw	6392
   693  007A97  1833               	dw	6195
   694  007A99  176D               	dw	5997
   695  007A9B  16A7               	dw	5799
   696  007A9D  15E1               	dw	5601
   697  007A9F  151B               	dw	5403
   698  007AA1  1455               	dw	5205
   699  007AA3  138E               	dw	5006
   700  007AA5  12C7               	dw	4807
   701  007AA7  1200               	dw	4608
   702  007AA9  1139               	dw	4409
   703  007AAB  1072               	dw	4210
   704  007AAD  0FAB               	dw	4011
   705  007AAF  0EE3               	dw	3811
   706  007AB1  0E1B               	dw	3611
   707  007AB3  0D53               	dw	3411
   708  007AB5  0C8B               	dw	3211
   709  007AB7  0BC3               	dw	3011
   710  007AB9  0AFB               	dw	2811
   711  007ABB  0A32               	dw	2610
   712  007ABD  096A               	dw	2410
   713  007ABF  08A1               	dw	2209
   714  007AC1  07D9               	dw	2009
   715  007AC3  0710               	dw	1808
   716  007AC5  0647               	dw	1607
   717  007AC7  057E               	dw	1406
   718  007AC9  04B6               	dw	1206
   719  007ACB  03ED               	dw	1005
   720  007ACD  0324               	dw	804
   721  007ACF  025B               	dw	603
   722  007AD1  0192               	dw	402
   723  007AD3  00C9               	dw	201
   724  007AD5  0000               	dw	0
   725  007AD7  FF37               	dw	65335
   726  007AD9  FE6E               	dw	65134
   727  007ADB  FDA5               	dw	64933
   728  007ADD  FCDC               	dw	64732
   729  007ADF  FC13               	dw	64531
   730  007AE1  FB4A               	dw	64330
   731  007AE3  FA82               	dw	64130
   732  007AE5  F9B9               	dw	63929
   733  007AE7  F8F0               	dw	63728
   734  007AE9  F827               	dw	63527
   735  007AEB  F75F               	dw	63327
   736  007AED  F696               	dw	63126
   737  007AEF  F5CE               	dw	62926
   738  007AF1  F505               	dw	62725
   739  007AF3  F43D               	dw	62525
   740  007AF5  F375               	dw	62325
   741  007AF7  F2AD               	dw	62125
   742  007AF9  F1E5               	dw	61925
   743  007AFB  F11D               	dw	61725
   744  007AFD  F055               	dw	61525
   745  007AFF  EF8E               	dw	61326
   746  007B01  EEC7               	dw	61127
   747  007B03  EE00               	dw	60928
   748  007B05  ED39               	dw	60729
   749  007B07  EC72               	dw	60530
   750  007B09  EBAB               	dw	60331
   751  007B0B  EAE5               	dw	60133
   752  007B0D  EA1F               	dw	59935
   753  007B0F  E959               	dw	59737
   754  007B11  E893               	dw	59539
   755  007B13  E7CD               	dw	59341
   756  007B15  E708               	dw	59144
   757  007B17  E643               	dw	58947
   758  007B19  E57E               	dw	58750
   759  007B1B  E4BA               	dw	58554
   760  007B1D  E3F5               	dw	58357
   761  007B1F  E331               	dw	58161
   762  007B21  E26D               	dw	57965
   763  007B23  E1AA               	dw	57770
   764  007B25  E0E7               	dw	57575
   765  007B27  E024               	dw	57380
   766  007B29  DF61               	dw	57185
   767  007B2B  DE9F               	dw	56991
   768  007B2D  DDDD               	dw	56797
   769  007B2F  DD1C               	dw	56604
   770  007B31  DC5A               	dw	56410
   771  007B33  DB99               	dw	56217
   772  007B35  DAD9               	dw	56025
   773  007B37  DA19               	dw	55833
   774  007B39  D959               	dw	55641
   775  007B3B  D899               	dw	55449
   776  007B3D  D7DA               	dw	55258
   777  007B3F  D71B               	dw	55067
   778  007B41  D65D               	dw	54877
   779  007B43  D59F               	dw	54687
   780  007B45  D4E2               	dw	54498
   781  007B47  D425               	dw	54309
   782  007B49  D368               	dw	54120
   783  007B4B  D2AC               	dw	53932
   784  007B4D  D1F0               	dw	53744
   785  007B4F  D134               	dw	53556
   786  007B51  D07A               	dw	53370
   787  007B53  CFBF               	dw	53183
   788  007B55  CF05               	dw	52997
   789  007B57  CE4C               	dw	52812
   790  007B59  CD93               	dw	52627
   791  007B5B  CCDA               	dw	52442
   792  007B5D  CC22               	dw	52258
   793  007B5F  CB6A               	dw	52074
   794  007B61  CAB3               	dw	51891
   795  007B63  C9FD               	dw	51709
   796  007B65  C947               	dw	51527
   797  007B67  C891               	dw	51345
   798  007B69  C7DC               	dw	51164
   799  007B6B  C728               	dw	50984
   800  007B6D  C674               	dw	50804
   801  007B6F  C5C1               	dw	50625
   802  007B71  C50E               	dw	50446
   803  007B73  C45C               	dw	50268
   804  007B75  C3AA               	dw	50090
   805  007B77  C2F9               	dw	49913
   806  007B79  C249               	dw	49737
   807  007B7B  C199               	dw	49561
   808  007B7D  C0EA               	dw	49386
   809  007B7F  C03B               	dw	49211
   810  007B81  BF8D               	dw	49037
   811  007B83  BEE0               	dw	48864
   812  007B85  BE33               	dw	48691
   813  007B87  BD87               	dw	48519
   814  007B89  BCDB               	dw	48347
   815  007B8B  BC30               	dw	48176
   816  007B8D  BB86               	dw	48006
   817  007B8F  BADD               	dw	47837
   818  007B91  BA34               	dw	47668
   819  007B93  B98C               	dw	47500
   820  007B95  B8E4               	dw	47332
   821  007B97  B83D               	dw	47165
   822  007B99  B797               	dw	46999
   823  007B9B  B6F2               	dw	46834
   824  007B9D  B64D               	dw	46669
   825  007B9F  B5A9               	dw	46505
   826  007BA1  B506               	dw	46342
   827  007BA3  B463               	dw	46179
   828  007BA5  B3C1               	dw	46017
   829  007BA7  B320               	dw	45856
   830  007BA9  B280               	dw	45696
   831  007BAB  B1E0               	dw	45536
   832  007BAD  B141               	dw	45377
   833  007BAF  B0A3               	dw	45219
   834  007BB1  B006               	dw	45062
   835  007BB3  AF69               	dw	44905
   836  007BB5  AECD               	dw	44749
   837  007BB7  AE32               	dw	44594
   838  007BB9  AD98               	dw	44440
   839  007BBB  ACFF               	dw	44287
   840  007BBD  AC66               	dw	44134
   841  007BBF  ABCE               	dw	43982
   842  007BC1  AB37               	dw	43831
   843  007BC3  AAA1               	dw	43681
   844  007BC5  AA0C               	dw	43532
   845  007BC7  A977               	dw	43383
   846  007BC9  A8E3               	dw	43235
   847  007BCB  A850               	dw	43088
   848  007BCD  A7BE               	dw	42942
   849  007BCF  A72D               	dw	42797
   850  007BD1  A69D               	dw	42653
   851  007BD3  A60D               	dw	42509
   852  007BD5  A57F               	dw	42367
   853  007BD7  A4F1               	dw	42225
   854  007BD9  A464               	dw	42084
   855  007BDB  A3D8               	dw	41944
   856  007BDD  A34D               	dw	41805
   857  007BDF  A2C3               	dw	41667
   858  007BE1  A23A               	dw	41530
   859  007BE3  A1B1               	dw	41393
   860  007BE5  A12A               	dw	41258
   861  007BE7  A0A3               	dw	41123
   862  007BE9  A01E               	dw	40990
   863  007BEB  9F99               	dw	40857
   864  007BED  9F15               	dw	40725
   865  007BEF  9E92               	dw	40594
   866  007BF1  9E10               	dw	40464
   867  007BF3  9D8F               	dw	40335
   868  007BF5  9D0F               	dw	40207
   869  007BF7  9C90               	dw	40080
   870  007BF9  9C12               	dw	39954
   871  007BFB  9B95               	dw	39829
   872  007BFD  9B19               	dw	39705
   873  007BFF  9A9E               	dw	39582
   874  007C01  9A23               	dw	39459
   875  007C03  99AA               	dw	39338
   876  007C05  9932               	dw	39218
   877  007C07  98BB               	dw	39099
   878  007C09  9844               	dw	38980
   879  007C0B  97CF               	dw	38863
   880  007C0D  975B               	dw	38747
   881  007C0F  96E7               	dw	38631
   882  007C11  9675               	dw	38517
   883  007C13  9604               	dw	38404
   884  007C15  9594               	dw	38292
   885  007C17  9525               	dw	38181
   886  007C19  94B6               	dw	38070
   887  007C1B  9449               	dw	37961
   888  007C1D  93DD               	dw	37853
   889  007C1F  9372               	dw	37746
   890  007C21  9308               	dw	37640
   891  007C23  929F               	dw	37535
   892  007C25  9237               	dw	37431
   893  007C27  91D0               	dw	37328
   894  007C29  916B               	dw	37227
   895  007C2B  9106               	dw	37126
   896  007C2D  90A2               	dw	37026
   897  007C2F  9040               	dw	36928
   898  007C31  8FDE               	dw	36830
   899  007C33  8F7E               	dw	36734
   900  007C35  8F1F               	dw	36639
   901  007C37  8EC0               	dw	36544
   902  007C39  8E63               	dw	36451
   903  007C3B  8E07               	dw	36359
   904  007C3D  8DAC               	dw	36268
   905  007C3F  8D52               	dw	36178
   906  007C41  8CFA               	dw	36090
   907  007C43  8CA2               	dw	36002
   908  007C45  8C4B               	dw	35915
   909  007C47  8BF6               	dw	35830
   910  007C49  8BA2               	dw	35746
   911  007C4B  8B4F               	dw	35663
   912  007C4D  8AFD               	dw	35581
   913  007C4F  8AAC               	dw	35500
   914  007C51  8A5C               	dw	35420
   915  007C53  8A0D               	dw	35341
   916  007C55  89C0               	dw	35264
   917  007C57  8973               	dw	35187
   918  007C59  8928               	dw	35112
   919  007C5B  88DE               	dw	35038
   920  007C5D  8895               	dw	34965
   921  007C5F  884D               	dw	34893
   922  007C61  8807               	dw	34823
   923  007C63  87C1               	dw	34753
   924  007C65  877D               	dw	34685
   925  007C67  873A               	dw	34618
   926  007C69  86F8               	dw	34552
   927  007C6B  86B7               	dw	34487
   928  007C6D  8677               	dw	34423
   929  007C6F  8639               	dw	34361
   930  007C71  85FC               	dw	34300
   931  007C73  85BF               	dw	34239
   932  007C75  8584               	dw	34180
   933  007C77  854B               	dw	34123
   934  007C79  8512               	dw	34066
   935  007C7B  84DB               	dw	34011
   936  007C7D  84A4               	dw	33956
   937  007C7F  846F               	dw	33903
   938  007C81  843C               	dw	33852
   939  007C83  8409               	dw	33801
   940  007C85  83D7               	dw	33751
   941  007C87  83A7               	dw	33703
   942  007C89  8378               	dw	33656
   943  007C8B  834A               	dw	33610
   944  007C8D  831E               	dw	33566
   945  007C8F  82F2               	dw	33522
   946  007C91  82C8               	dw	33480
   947  007C93  829F               	dw	33439
   948  007C95  8277               	dw	33399
   949  007C97  8250               	dw	33360
   950  007C99  822B               	dw	33323
   951  007C9B  8207               	dw	33287
   952  007C9D  81E4               	dw	33252
   953  007C9F  81C2               	dw	33218
   954  007CA1  81A2               	dw	33186
   955  007CA3  8182               	dw	33154
   956  007CA5  8164               	dw	33124
   957  007CA7  8147               	dw	33095
   958  007CA9  812C               	dw	33068
   959  007CAB  8111               	dw	33041
   960  007CAD  80F8               	dw	33016
   961  007CAF  80E0               	dw	32992
   962  007CB1  80C9               	dw	32969
   963  007CB3  80B4               	dw	32948
   964  007CB5  809F               	dw	32927
   965  007CB7  808C               	dw	32908
   966  007CB9  807A               	dw	32890
   967  007CBB  806A               	dw	32874
   968  007CBD  805A               	dw	32858
   969  007CBF  804C               	dw	32844
   970  007CC1  803F               	dw	32831
   971  007CC3  8033               	dw	32819
   972  007CC5  8029               	dw	32809
   973  007CC7  8020               	dw	32800
   974  007CC9  8018               	dw	32792
   975  007CCB  8011               	dw	32785
   976  007CCD  800B               	dw	32779
   977  007CCF  8007               	dw	32775
   978  007CD1  8004               	dw	32772
   979  007CD3  8002               	dw	32770
   980  007CD5                     __end_of_Sinewave:
   981                           	opt stack 0
   982  007CD5                     _dpowers:
   983                           	opt stack 0
   984  007CD5  0001               	dw	1
   985  007CD7  000A               	dw	10
   986  007CD9  0064               	dw	100
   987  007CDB  03E8               	dw	1000
   988  007CDD  2710               	dw	10000
   989  007CDF                     __end_of_dpowers:
   990                           	opt stack 0
   991  007CDF                     log@coeff:
   992                           	opt stack 0
   993  007CDF  00                 	db	0
   994  007CE0  00                 	db	0
   995  007CE1  00                 	db	0
   996  007CE2  00                 	db	0
   997  007CE3  80                 	db	128
   998  007CE4  3F                 	db	63
   999  007CE5  F0                 	db	240
  1000  007CE6  FF                 	db	255
  1001  007CE7  BE                 	db	190
  1002  007CE8  E2                 	db	226
  1003  007CE9  A9                 	db	169
  1004  007CEA  3E                 	db	62
  1005  007CEB  83                 	db	131
  1006  007CEC  76                 	db	118
  1007  007CED  BE                 	db	190
  1008  007CEE  AE                 	db	174
  1009  007CEF  2B                 	db	43
  1010  007CF0  3E                 	db	62
  1011  007CF1  3C                 	db	60
  1012  007CF2  C3                 	db	195
  1013  007CF3  BD                 	db	189
  1014  007CF4  D2                 	db	210
  1015  007CF5  13                 	db	19
  1016  007CF6  3D                 	db	61
  1017  007CF7  78                 	db	120
  1018  007CF8  D3                 	db	211
  1019  007CF9  BB                 	db	187
  1020  007CFA                     __end_oflog@coeff:
  1021                           	opt stack 0
  1022  007CFA                     STR_57:
  1023  007CFA  53                 	db	83	;'S'
  1024  007CFB  77                 	db	119	;'w'
  1025  007CFC  69                 	db	105	;'i'
  1026  007CFD  74                 	db	116	;'t'
  1027  007CFE  63                 	db	99	;'c'
  1028  007CFF  68                 	db	104	;'h'
  1029  007D00  69                 	db	105	;'i'
  1030  007D01  6E                 	db	110	;'n'
  1031  007D02  67                 	db	103	;'g'
  1032  007D03  20                 	db	32
  1033  007D04  6F                 	db	111	;'o'
  1034  007D05  76                 	db	118	;'v'
  1035  007D06  65                 	db	101	;'e'
  1036  007D07  72                 	db	114	;'r'
  1037  007D08  20                 	db	32
  1038  007D09  74                 	db	116	;'t'
  1039  007D0A  6F                 	db	111	;'o'
  1040  007D0B  20                 	db	32
  1041  007D0C  44                 	db	68	;'D'
  1042  007D0D  61                 	db	97	;'a'
  1043  007D0E  74                 	db	116	;'t'
  1044  007D0F  61                 	db	97	;'a'
  1045  007D10  20                 	db	32
  1046  007D11  4C                 	db	76	;'L'
  1047  007D12  6F                 	db	111	;'o'
  1048  007D13  67                 	db	103	;'g'
  1049  007D14  67                 	db	103	;'g'
  1050  007D15  69                 	db	105	;'i'
  1051  007D16  6E                 	db	110	;'n'
  1052  007D17  67                 	db	103	;'g'
  1053  007D18  2E                 	db	46
  1054  007D19  0D                 	db	13
  1055  007D1A  0A                 	db	10
  1056  007D1B  54                 	db	84	;'T'
  1057  007D1C  6F                 	db	111	;'o'
  1058  007D1D  20                 	db	32
  1059  007D1E  72                 	db	114	;'r'
  1060  007D1F  65                 	db	101	;'e'
  1061  007D20  63                 	db	99	;'c'
  1062  007D21  6F                 	db	111	;'o'
  1063  007D22  6E                 	db	110	;'n'
  1064  007D23  6E                 	db	110	;'n'
  1065  007D24  65                 	db	101	;'e'
  1066  007D25  63                 	db	99	;'c'
  1067  007D26  74                 	db	116	;'t'
  1068  007D27  20                 	db	32
  1069  007D28  76                 	db	118	;'v'
  1070  007D29  69                 	db	105	;'i'
  1071  007D2A  61                 	db	97	;'a'
  1072  007D2B  20                 	db	32
  1073  007D2C  62                 	db	98	;'b'
  1074  007D2D  6C                 	db	108	;'l'
  1075  007D2E  75                 	db	117	;'u'
  1076  007D2F  65                 	db	101	;'e'
  1077  007D30  74                 	db	116	;'t'
  1078  007D31  6F                 	db	111	;'o'
  1079  007D32  6F                 	db	111	;'o'
  1080  007D33  74                 	db	116	;'t'
  1081  007D34  68                 	db	104	;'h'
  1082  007D35  2C                 	db	44
  1083  007D36  20                 	db	32
  1084  007D37  74                 	db	116	;'t'
  1085  007D38  68                 	db	104	;'h'
  1086  007D39  65                 	db	101	;'e'
  1087  007D3A  20                 	db	32
  1088  007D3B  6C                 	db	108	;'l'
  1089  007D3C  6F                 	db	111	;'o'
  1090  007D3D  67                 	db	103	;'g'
  1091  007D3E  67                 	db	103	;'g'
  1092  007D3F  65                 	db	101	;'e'
  1093  007D40  72                 	db	114	;'r'
  1094  007D41  20                 	db	32
  1095  007D42  6D                 	db	109	;'m'
  1096  007D43  75                 	db	117	;'u'
  1097  007D44  73                 	db	115	;'s'
  1098  007D45  74                 	db	116	;'t'
  1099  007D46  20                 	db	32
  1100  007D47  62                 	db	98	;'b'
  1101  007D48  65                 	db	101	;'e'
  1102  007D49  20                 	db	32
  1103  007D4A  70                 	db	112	;'p'
  1104  007D4B  6F                 	db	111	;'o'
  1105  007D4C  77                 	db	119	;'w'
  1106  007D4D  65                 	db	101	;'e'
  1107  007D4E  72                 	db	114	;'r'
  1108  007D4F  20                 	db	32
  1109  007D50  63                 	db	99	;'c'
  1110  007D51  79                 	db	121	;'y'
  1111  007D52  63                 	db	99	;'c'
  1112  007D53  6C                 	db	108	;'l'
  1113  007D54  65                 	db	101	;'e'
  1114  007D55  64                 	db	100	;'d'
  1115  007D56  2E                 	db	46
  1116  007D57  0D                 	db	13
  1117  007D58  0A                 	db	10
  1118  007D59  42                 	db	66	;'B'
  1119  007D5A  6C                 	db	108	;'l'
  1120  007D5B  75                 	db	117	;'u'
  1121  007D5C  65                 	db	101	;'e'
  1122  007D5D  74                 	db	116	;'t'
  1123  007D5E  6F                 	db	111	;'o'
  1124  007D5F  6F                 	db	111	;'o'
  1125  007D60  74                 	db	116	;'t'
  1126  007D61  68                 	db	104	;'h'
  1127  007D62  20                 	db	32
  1128  007D63  6D                 	db	109	;'m'
  1129  007D64  6F                 	db	111	;'o'
  1130  007D65  64                 	db	100	;'d'
  1131  007D66  75                 	db	117	;'u'
  1132  007D67  6C                 	db	108	;'l'
  1133  007D68  65                 	db	101	;'e'
  1134  007D69  20                 	db	32
  1135  007D6A  77                 	db	119	;'w'
  1136  007D6B  69                 	db	105	;'i'
  1137  007D6C  6C                 	db	108	;'l'
  1138  007D6D  6C                 	db	108	;'l'
  1139  007D6E  20                 	db	32
  1140  007D6F  62                 	db	98	;'b'
  1141  007D70  65                 	db	101	;'e'
  1142  007D71  20                 	db	32
  1143  007D72  70                 	db	112	;'p'
  1144  007D73  6F                 	db	111	;'o'
  1145  007D74  77                 	db	119	;'w'
  1146  007D75  65                 	db	101	;'e'
  1147  007D76  72                 	db	114	;'r'
  1148  007D77  65                 	db	101	;'e'
  1149  007D78  64                 	db	100	;'d'
  1150  007D79  20                 	db	32
  1151  007D7A  64                 	db	100	;'d'
  1152  007D7B  6F                 	db	111	;'o'
  1153  007D7C  77                 	db	119	;'w'
  1154  007D7D  6E                 	db	110	;'n'
  1155  007D7E  20                 	db	32
  1156  007D7F  6E                 	db	110	;'n'
  1157  007D80  6F                 	db	111	;'o'
  1158  007D81  77                 	db	119	;'w'
  1159  007D82  2E                 	db	46
  1160  007D83  0D                 	db	13
  1161  007D84  0A                 	db	10
  1162  007D85  00                 	db	0
  1163  007D86                     STR_41:
  1164  007D86  53                 	db	83	;'S'
  1165  007D87  65                 	db	101	;'e'
  1166  007D88  74                 	db	116	;'t'
  1167  007D89  20                 	db	32
  1168  007D8A  6F                 	db	111	;'o'
  1169  007D8B  66                 	db	102	;'f'
  1170  007D8C  66                 	db	102	;'f'
  1171  007D8D  63                 	db	99	;'c'
  1172  007D8E  6F                 	db	111	;'o'
  1173  007D8F  75                 	db	117	;'u'
  1174  007D90  6E                 	db	110	;'n'
  1175  007D91  74                 	db	116	;'t'
  1176  007D92  6D                 	db	109	;'m'
  1177  007D93  61                 	db	97	;'a'
  1178  007D94  78                 	db	120	;'x'
  1179  007D95  20                 	db	32
  1180  007D96  28                 	db	40
  1181  007D97  64                 	db	100	;'d'
  1182  007D98  65                 	db	101	;'e'
  1183  007D99  66                 	db	102	;'f'
  1184  007D9A  61                 	db	97	;'a'
  1185  007D9B  75                 	db	117	;'u'
  1186  007D9C  6C                 	db	108	;'l'
  1187  007D9D  74                 	db	116	;'t'
  1188  007D9E  20                 	db	32
  1189  007D9F  32                 	db	50	;'2'
  1190  007DA0  30                 	db	48	;'0'
  1191  007DA1  30                 	db	48	;'0'
  1192  007DA2  30                 	db	48	;'0'
  1193  007DA3  29                 	db	41
  1194  007DA4  3A                 	db	58	;':'
  1195  007DA5  0D                 	db	13
  1196  007DA6  0A                 	db	10
  1197  007DA7  00                 	db	0
  1198  007DA8                     STR_47:
  1199  007DA8  53                 	db	83	;'S'
  1200  007DA9  65                 	db	101	;'e'
  1201  007DAA  74                 	db	116	;'t'
  1202  007DAB  20                 	db	32
  1203  007DAC  6F                 	db	111	;'o'
  1204  007DAD  6E                 	db	110	;'n'
  1205  007DAE  74                 	db	116	;'t'
  1206  007DAF  68                 	db	104	;'h'
  1207  007DB0  72                 	db	114	;'r'
  1208  007DB1  65                 	db	101	;'e'
  1209  007DB2  73                 	db	115	;'s'
  1210  007DB3  68                 	db	104	;'h'
  1211  007DB4  20                 	db	32
  1212  007DB5  28                 	db	40
  1213  007DB6  64                 	db	100	;'d'
  1214  007DB7  65                 	db	101	;'e'
  1215  007DB8  66                 	db	102	;'f'
  1216  007DB9  61                 	db	97	;'a'
  1217  007DBA  75                 	db	117	;'u'
  1218  007DBB  6C                 	db	108	;'l'
  1219  007DBC  74                 	db	116	;'t'
  1220  007DBD  20                 	db	32
  1221  007DBE  32                 	db	50	;'2'
  1222  007DBF  30                 	db	48	;'0'
  1223  007DC0  30                 	db	48	;'0'
  1224  007DC1  30                 	db	48	;'0'
  1225  007DC2  29                 	db	41
  1226  007DC3  3A                 	db	58	;':'
  1227  007DC4  0D                 	db	13
  1228  007DC5  0A                 	db	10
  1229  007DC6  00                 	db	0
  1230  007DC7                     STR_45:
  1231  007DC7  53                 	db	83	;'S'
  1232  007DC8  65                 	db	101	;'e'
  1233  007DC9  74                 	db	116	;'t'
  1234  007DCA  20                 	db	32
  1235  007DCB  4E                 	db	78	;'N'
  1236  007DCC  73                 	db	115	;'s'
  1237  007DCD  68                 	db	104	;'h'
  1238  007DCE  6F                 	db	111	;'o'
  1239  007DCF  72                 	db	114	;'r'
  1240  007DD0  74                 	db	116	;'t'
  1241  007DD1  20                 	db	32
  1242  007DD2  28                 	db	40
  1243  007DD3  64                 	db	100	;'d'
  1244  007DD4  65                 	db	101	;'e'
  1245  007DD5  66                 	db	102	;'f'
  1246  007DD6  61                 	db	97	;'a'
  1247  007DD7  75                 	db	117	;'u'
  1248  007DD8  6C                 	db	108	;'l'
  1249  007DD9  74                 	db	116	;'t'
  1250  007DDA  20                 	db	32
  1251  007DDB  31                 	db	49	;'1'
  1252  007DDC  30                 	db	48	;'0'
  1253  007DDD  29                 	db	41
  1254  007DDE  3A                 	db	58	;':'
  1255  007DDF  0D                 	db	13
  1256  007DE0  0A                 	db	10
  1257  007DE1  00                 	db	0
  1258  007DE2                     STR_43:
  1259  007DE2  53                 	db	83	;'S'
  1260  007DE3  65                 	db	101	;'e'
  1261  007DE4  74                 	db	116	;'t'
  1262  007DE5  20                 	db	32
  1263  007DE6  4E                 	db	78	;'N'
  1264  007DE7  6C                 	db	108	;'l'
  1265  007DE8  6F                 	db	111	;'o'
  1266  007DE9  6E                 	db	110	;'n'
  1267  007DEA  67                 	db	103	;'g'
  1268  007DEB  20                 	db	32
  1269  007DEC  28                 	db	40
  1270  007DED  64                 	db	100	;'d'
  1271  007DEE  65                 	db	101	;'e'
  1272  007DEF  66                 	db	102	;'f'
  1273  007DF0  61                 	db	97	;'a'
  1274  007DF1  75                 	db	117	;'u'
  1275  007DF2  6C                 	db	108	;'l'
  1276  007DF3  74                 	db	116	;'t'
  1277  007DF4  20                 	db	32
  1278  007DF5  35                 	db	53	;'5'
  1279  007DF6  30                 	db	48	;'0'
  1280  007DF7  29                 	db	41
  1281  007DF8  3A                 	db	58	;':'
  1282  007DF9  0D                 	db	13
  1283  007DFA  0A                 	db	10
  1284  007DFB  00                 	db	0
  1285  007DFC                     STR_15:
  1286  007DFC  50                 	db	80	;'P'
  1287  007DFD  65                 	db	101	;'e'
  1288  007DFE  72                 	db	114	;'r'
  1289  007DFF  66                 	db	102	;'f'
  1290  007E00  6F                 	db	111	;'o'
  1291  007E01  72                 	db	114	;'r'
  1292  007E02  6D                 	db	109	;'m'
  1293  007E03  69                 	db	105	;'i'
  1294  007E04  6E                 	db	110	;'n'
  1295  007E05  67                 	db	103	;'g'
  1296  007E06  20                 	db	32
  1297  007E07  6F                 	db	111	;'o'
  1298  007E08  6E                 	db	110	;'n'
  1299  007E09  2D                 	db	45
  1300  007E0A  70                 	db	112	;'p'
  1301  007E0B  75                 	db	117	;'u'
  1302  007E0C  6D                 	db	109	;'m'
  1303  007E0D  70                 	db	112	;'p'
  1304  007E0E  20                 	db	32
  1305  007E0F  43                 	db	67	;'C'
  1306  007E10  4D                 	db	77	;'M'
  1307  007E11  2E                 	db	46
  1308  007E12  2E                 	db	46
  1309  007E13  2E                 	db	46
  1310  007E14  0A                 	db	10
  1311  007E15  00                 	db	0
  1312  007E16                     STR_22:
  1313  007E16  09                 	db	9
  1314  007E17  54                 	db	84	;'T'
  1315  007E18  65                 	db	101	;'e'
  1316  007E19  73                 	db	115	;'s'
  1317  007E1A  74                 	db	116	;'t'
  1318  007E1B  69                 	db	105	;'i'
  1319  007E1C  6E                 	db	110	;'n'
  1320  007E1D  67                 	db	103	;'g'
  1321  007E1E  20                 	db	32
  1322  007E1F  63                 	db	99	;'c'
  1323  007E20  6C                 	db	108	;'l'
  1324  007E21  61                 	db	97	;'a'
  1325  007E22  73                 	db	115	;'s'
  1326  007E23  73                 	db	115	;'s'
  1327  007E24  69                 	db	105	;'i'
  1328  007E25  66                 	db	102	;'f'
  1329  007E26  69                 	db	105	;'i'
  1330  007E27  65                 	db	101	;'e'
  1331  007E28  72                 	db	114	;'r'
  1332  007E29  2E                 	db	46
  1333  007E2A  2E                 	db	46
  1334  007E2B  2E                 	db	46
  1335  007E2C  0A                 	db	10
  1336  007E2D  00                 	db	0
  1337  007E2E                     STR_36:
  1338  007E2E  44                 	db	68	;'D'
  1339  007E2F  61                 	db	97	;'a'
  1340  007E30  74                 	db	116	;'t'
  1341  007E31  65                 	db	101	;'e'
  1342  007E32  20                 	db	32
  1343  007E33  61                 	db	97	;'a'
  1344  007E34  6E                 	db	110	;'n'
  1345  007E35  64                 	db	100	;'d'
  1346  007E36  20                 	db	32
  1347  007E37  54                 	db	84	;'T'
  1348  007E38  69                 	db	105	;'i'
  1349  007E39  6D                 	db	109	;'m'
  1350  007E3A  65                 	db	101	;'e'
  1351  007E3B  20                 	db	32
  1352  007E3C  53                 	db	83	;'S'
  1353  007E3D  65                 	db	101	;'e'
  1354  007E3E  74                 	db	116	;'t'
  1355  007E3F  21                 	db	33
  1356  007E40  0D                 	db	13
  1357  007E41  0A                 	db	10
  1358  007E42  00                 	db	0
  1359  007E43                     STR_25:
  1360  007E43  25                 	db	37
  1361  007E44  36                 	db	54	;'6'
  1362  007E45  69                 	db	105	;'i'
  1363  007E46  2C                 	db	44
  1364  007E47  25                 	db	37
  1365  007E48  36                 	db	54	;'6'
  1366  007E49  69                 	db	105	;'i'
  1367  007E4A  2C                 	db	44
  1368  007E4B  25                 	db	37
  1369  007E4C  36                 	db	54	;'6'
  1370  007E4D  69                 	db	105	;'i'
  1371  007E4E  2C                 	db	44
  1372  007E4F  25                 	db	37
  1373  007E50  35                 	db	53	;'5'
  1374  007E51  75                 	db	117	;'u'
  1375  007E52  2C                 	db	44
  1376  007E53  25                 	db	37
  1377  007E54  69                 	db	105	;'i'
  1378  007E55  0D                 	db	13
  1379  007E56  0A                 	db	10
  1380  007E57  00                 	db	0
  1381  007E58                     STR_2:
  1382  007E58  61                 	db	97	;'a'
  1383  007E59  70                 	db	112	;'p'
  1384  007E5A  70                 	db	112	;'p'
  1385  007E5B  65                 	db	101	;'e'
  1386  007E5C  6E                 	db	110	;'n'
  1387  007E5D  64                 	db	100	;'d'
  1388  007E5E  20                 	db	32
  1389  007E5F  46                 	db	70	;'F'
  1390  007E60  49                 	db	73	;'I'
  1391  007E61  4C                 	db	76	;'L'
  1392  007E62  45                 	db	69	;'E'
  1393  007E63  25                 	db	37
  1394  007E64  31                 	db	49	;'1'
  1395  007E65  69                 	db	105	;'i'
  1396  007E66  2E                 	db	46
  1397  007E67  74                 	db	116	;'t'
  1398  007E68  78                 	db	120	;'x'
  1399  007E69  74                 	db	116	;'t'
  1400  007E6A  0D                 	db	13
  1401  007E6B  0A                 	db	10
  1402  007E6C  00                 	db	0
  1403  007E6D                     STR_4:
  1404  007E6D  61                 	db	97	;'a'
  1405  007E6E  70                 	db	112	;'p'
  1406  007E6F  70                 	db	112	;'p'
  1407  007E70  65                 	db	101	;'e'
  1408  007E71  6E                 	db	110	;'n'
  1409  007E72  64                 	db	100	;'d'
  1410  007E73  20                 	db	32
  1411  007E74  46                 	db	70	;'F'
  1412  007E75  49                 	db	73	;'I'
  1413  007E76  4C                 	db	76	;'L'
  1414  007E77  45                 	db	69	;'E'
  1415  007E78  25                 	db	37
  1416  007E79  32                 	db	50	;'2'
  1417  007E7A  69                 	db	105	;'i'
  1418  007E7B  2E                 	db	46
  1419  007E7C  74                 	db	116	;'t'
  1420  007E7D  78                 	db	120	;'x'
  1421  007E7E  74                 	db	116	;'t'
  1422  007E7F  0D                 	db	13
  1423  007E80  0A                 	db	10
  1424  007E81  00                 	db	0
  1425  007E82                     STR_6:
  1426  007E82  61                 	db	97	;'a'
  1427  007E83  70                 	db	112	;'p'
  1428  007E84  70                 	db	112	;'p'
  1429  007E85  65                 	db	101	;'e'
  1430  007E86  6E                 	db	110	;'n'
  1431  007E87  64                 	db	100	;'d'
  1432  007E88  20                 	db	32
  1433  007E89  46                 	db	70	;'F'
  1434  007E8A  49                 	db	73	;'I'
  1435  007E8B  4C                 	db	76	;'L'
  1436  007E8C  45                 	db	69	;'E'
  1437  007E8D  25                 	db	37
  1438  007E8E  33                 	db	51	;'3'
  1439  007E8F  69                 	db	105	;'i'
  1440  007E90  2E                 	db	46
  1441  007E91  74                 	db	116	;'t'
  1442  007E92  78                 	db	120	;'x'
  1443  007E93  74                 	db	116	;'t'
  1444  007E94  0D                 	db	13
  1445  007E95  0A                 	db	10
  1446  007E96  00                 	db	0
  1447  007E97                     STR_49:
  1448  007E97  53                 	db	83	;'S'
  1449  007E98  65                 	db	101	;'e'
  1450  007E99  74                 	db	116	;'t'
  1451  007E9A  74                 	db	116	;'t'
  1452  007E9B  69                 	db	105	;'i'
  1453  007E9C  6E                 	db	110	;'n'
  1454  007E9D  67                 	db	103	;'g'
  1455  007E9E  20                 	db	32
  1456  007E9F  43                 	db	67	;'C'
  1457  007EA0  6F                 	db	111	;'o'
  1458  007EA1  6D                 	db	109	;'m'
  1459  007EA2  70                 	db	112	;'p'
  1460  007EA3  6C                 	db	108	;'l'
  1461  007EA4  65                 	db	101	;'e'
  1462  007EA5  74                 	db	116	;'t'
  1463  007EA6  65                 	db	101	;'e'
  1464  007EA7  21                 	db	33
  1465  007EA8  0D                 	db	13
  1466  007EA9  0A                 	db	10
  1467  007EAA  00                 	db	0
  1468  007EAB                     STR_38:
  1469  007EAB  54                 	db	84	;'T'
  1470  007EAC  69                 	db	105	;'i'
  1471  007EAD  6D                 	db	109	;'m'
  1472  007EAE  65                 	db	101	;'e'
  1473  007EAF  3A                 	db	58	;':'
  1474  007EB0  20                 	db	32
  1475  007EB1  25                 	db	37
  1476  007EB2  32                 	db	50	;'2'
  1477  007EB3  69                 	db	105	;'i'
  1478  007EB4  3A                 	db	58	;':'
  1479  007EB5  25                 	db	37
  1480  007EB6  32                 	db	50	;'2'
  1481  007EB7  69                 	db	105	;'i'
  1482  007EB8  3A                 	db	58	;':'
  1483  007EB9  25                 	db	37
  1484  007EBA  32                 	db	50	;'2'
  1485  007EBB  69                 	db	105	;'i'
  1486  007EBC  0D                 	db	13
  1487  007EBD  0A                 	db	10
  1488  007EBE  00                 	db	0
  1489  007EBF                     STR_37:
  1490  007EBF  44                 	db	68	;'D'
  1491  007EC0  61                 	db	97	;'a'
  1492  007EC1  74                 	db	116	;'t'
  1493  007EC2  65                 	db	101	;'e'
  1494  007EC3  3A                 	db	58	;':'
  1495  007EC4  20                 	db	32
  1496  007EC5  25                 	db	37
  1497  007EC6  32                 	db	50	;'2'
  1498  007EC7  69                 	db	105	;'i'
  1499  007EC8  2F                 	db	47
  1500  007EC9  25                 	db	37
  1501  007ECA  32                 	db	50	;'2'
  1502  007ECB  69                 	db	105	;'i'
  1503  007ECC  2F                 	db	47
  1504  007ECD  25                 	db	37
  1505  007ECE  34                 	db	52	;'4'
  1506  007ECF  69                 	db	105	;'i'
  1507  007ED0  0D                 	db	13
  1508  007ED1  0A                 	db	10
  1509  007ED2  00                 	db	0
  1510  007ED3                     STR_10:
  1511  007ED3  50                 	db	80	;'P'
  1512  007ED4  75                 	db	117	;'u'
  1513  007ED5  6D                 	db	109	;'m'
  1514  007ED6  70                 	db	112	;'p'
  1515  007ED7  69                 	db	105	;'i'
  1516  007ED8  6E                 	db	110	;'n'
  1517  007ED9  67                 	db	103	;'g'
  1518  007EDA  20                 	db	32
  1519  007EDB  53                 	db	83	;'S'
  1520  007EDC  74                 	db	116	;'t'
  1521  007EDD  6F                 	db	111	;'o'
  1522  007EDE  70                 	db	112	;'p'
  1523  007EDF  70                 	db	112	;'p'
  1524  007EE0  65                 	db	101	;'e'
  1525  007EE1  64                 	db	100	;'d'
  1526  007EE2  2E                 	db	46
  1527  007EE3  0D                 	db	13
  1528  007EE4  0A                 	db	10
  1529  007EE5  00                 	db	0
  1530  007EE6                     STR_18:
  1531  007EE6  09                 	db	9
  1532  007EE7  43                 	db	67	;'C'
  1533  007EE8  6F                 	db	111	;'o'
  1534  007EE9  6D                 	db	109	;'m'
  1535  007EEA  70                 	db	112	;'p'
  1536  007EEB  75                 	db	117	;'u'
  1537  007EEC  74                 	db	116	;'t'
  1538  007EED  69                 	db	105	;'i'
  1539  007EEE  6E                 	db	110	;'n'
  1540  007EEF  67                 	db	103	;'g'
  1541  007EF0  20                 	db	32
  1542  007EF1  48                 	db	72	;'H'
  1543  007EF2  50                 	db	80	;'P'
  1544  007EF3  46                 	db	70	;'F'
  1545  007EF4  2E                 	db	46
  1546  007EF5  2E                 	db	46
  1547  007EF6  2E                 	db	46
  1548  007EF7  0A                 	db	10
  1549  007EF8  00                 	db	0
  1550  007EF9                     STR_20:
  1551  007EF9  09                 	db	9
  1552  007EFA  43                 	db	67	;'C'
  1553  007EFB  6F                 	db	111	;'o'
  1554  007EFC  6D                 	db	109	;'m'
  1555  007EFD  70                 	db	112	;'p'
  1556  007EFE  75                 	db	117	;'u'
  1557  007EFF  74                 	db	116	;'t'
  1558  007F00  69                 	db	105	;'i'
  1559  007F01  6E                 	db	110	;'n'
  1560  007F02  67                 	db	103	;'g'
  1561  007F03  20                 	db	32
  1562  007F04  46                 	db	70	;'F'
  1563  007F05  46                 	db	70	;'F'
  1564  007F06  54                 	db	84	;'T'
  1565  007F07  2E                 	db	46
  1566  007F08  2E                 	db	46
  1567  007F09  2E                 	db	46
  1568  007F0A  0A                 	db	10
  1569  007F0B  00                 	db	0
  1570  007F0C                     STR_7:
  1571  007F0C  0D                 	db	13
  1572  007F0D  0D                 	db	13
  1573  007F0E  0A                 	db	10
  1574  007F0F  4C                 	db	76	;'L'
  1575  007F10  6F                 	db	111	;'o'
  1576  007F11  67                 	db	103	;'g'
  1577  007F12  20                 	db	32
  1578  007F13  73                 	db	115	;'s'
  1579  007F14  74                 	db	116	;'t'
  1580  007F15  61                 	db	97	;'a'
  1581  007F16  72                 	db	114	;'r'
  1582  007F17  74                 	db	116	;'t'
  1583  007F18  65                 	db	101	;'e'
  1584  007F19  64                 	db	100	;'d'
  1585  007F1A  21                 	db	33
  1586  007F1B  0D                 	db	13
  1587  007F1C  0A                 	db	10
  1588  007F1D  00                 	db	0
  1589  007F1E                     STR_1:
  1590  007F1E  6E                 	db	110	;'n'
  1591  007F1F  65                 	db	101	;'e'
  1592  007F20  77                 	db	119	;'w'
  1593  007F21  20                 	db	32
  1594  007F22  46                 	db	70	;'F'
  1595  007F23  49                 	db	73	;'I'
  1596  007F24  4C                 	db	76	;'L'
  1597  007F25  45                 	db	69	;'E'
  1598  007F26  25                 	db	37
  1599  007F27  31                 	db	49	;'1'
  1600  007F28  69                 	db	105	;'i'
  1601  007F29  2E                 	db	46
  1602  007F2A  74                 	db	116	;'t'
  1603  007F2B  78                 	db	120	;'x'
  1604  007F2C  74                 	db	116	;'t'
  1605  007F2D  0D                 	db	13
  1606  007F2E  0A                 	db	10
  1607  007F2F  00                 	db	0
  1608  007F30                     STR_3:
  1609  007F30  6E                 	db	110	;'n'
  1610  007F31  65                 	db	101	;'e'
  1611  007F32  77                 	db	119	;'w'
  1612  007F33  20                 	db	32
  1613  007F34  46                 	db	70	;'F'
  1614  007F35  49                 	db	73	;'I'
  1615  007F36  4C                 	db	76	;'L'
  1616  007F37  45                 	db	69	;'E'
  1617  007F38  25                 	db	37
  1618  007F39  32                 	db	50	;'2'
  1619  007F3A  69                 	db	105	;'i'
  1620  007F3B  2E                 	db	46
  1621  007F3C  74                 	db	116	;'t'
  1622  007F3D  78                 	db	120	;'x'
  1623  007F3E  74                 	db	116	;'t'
  1624  007F3F  0D                 	db	13
  1625  007F40  0A                 	db	10
  1626  007F41  00                 	db	0
  1627  007F42                     STR_5:
  1628  007F42  6E                 	db	110	;'n'
  1629  007F43  65                 	db	101	;'e'
  1630  007F44  77                 	db	119	;'w'
  1631  007F45  20                 	db	32
  1632  007F46  46                 	db	70	;'F'
  1633  007F47  49                 	db	73	;'I'
  1634  007F48  4C                 	db	76	;'L'
  1635  007F49  45                 	db	69	;'E'
  1636  007F4A  25                 	db	37
  1637  007F4B  33                 	db	51	;'3'
  1638  007F4C  69                 	db	105	;'i'
  1639  007F4D  2E                 	db	46
  1640  007F4E  74                 	db	116	;'t'
  1641  007F4F  78                 	db	120	;'x'
  1642  007F50  74                 	db	116	;'t'
  1643  007F51  0D                 	db	13
  1644  007F52  0A                 	db	10
  1645  007F53  00                 	db	0
  1646  007F54                     STR_14:
  1647  007F54  25                 	db	37
  1648  007F55  36                 	db	54	;'6'
  1649  007F56  69                 	db	105	;'i'
  1650  007F57  2C                 	db	44
  1651  007F58  25                 	db	37
  1652  007F59  36                 	db	54	;'6'
  1653  007F5A  69                 	db	105	;'i'
  1654  007F5B  2C                 	db	44
  1655  007F5C  25                 	db	37
  1656  007F5D  36                 	db	54	;'6'
  1657  007F5E  69                 	db	105	;'i'
  1658  007F5F  2C                 	db	44
  1659  007F60  25                 	db	37
  1660  007F61  35                 	db	53	;'5'
  1661  007F62  75                 	db	117	;'u'
  1662  007F63  0D                 	db	13
  1663  007F64  0A                 	db	10
  1664  007F65  00                 	db	0
  1665  007F66                     STR_16:
  1666  007F66  49                 	db	73	;'I'
  1667  007F67  6E                 	db	110	;'n'
  1668  007F68  70                 	db	112	;'p'
  1669  007F69  75                 	db	117	;'u'
  1670  007F6A  74                 	db	116	;'t'
  1671  007F6B  20                 	db	32
  1672  007F6C  73                 	db	115	;'s'
  1673  007F6D  69                 	db	105	;'i'
  1674  007F6E  67                 	db	103	;'g'
  1675  007F6F  6E                 	db	110	;'n'
  1676  007F70  61                 	db	97	;'a'
  1677  007F71  6C                 	db	108	;'l'
  1678  007F72  2E                 	db	46
  1679  007F73  2E                 	db	46
  1680  007F74  2E                 	db	46
  1681  007F75  0A                 	db	10
  1682  007F76  00                 	db	0
  1683  007F77                     STR_9:
  1684  007F77  25                 	db	37
  1685  007F78  32                 	db	50	;'2'
  1686  007F79  69                 	db	105	;'i'
  1687  007F7A  2F                 	db	47
  1688  007F7B  25                 	db	37
  1689  007F7C  32                 	db	50	;'2'
  1690  007F7D  69                 	db	105	;'i'
  1691  007F7E  2F                 	db	47
  1692  007F7F  25                 	db	37
  1693  007F80  34                 	db	52	;'4'
  1694  007F81  69                 	db	105	;'i'
  1695  007F82  0D                 	db	13
  1696  007F83  0A                 	db	10
  1697  007F84  0A                 	db	10
  1698  007F85  00                 	db	0
  1699  007F86                     STR_34:
  1700  007F86  53                 	db	83	;'S'
  1701  007F87  65                 	db	101	;'e'
  1702  007F88  74                 	db	116	;'t'
  1703  007F89  20                 	db	32
  1704  007F8A  4D                 	db	77	;'M'
  1705  007F8B  69                 	db	105	;'i'
  1706  007F8C  6E                 	db	110	;'n'
  1707  007F8D  75                 	db	117	;'u'
  1708  007F8E  74                 	db	116	;'t'
  1709  007F8F  65                 	db	101	;'e'
  1710  007F90  73                 	db	115	;'s'
  1711  007F91  3A                 	db	58	;':'
  1712  007F92  20                 	db	32
  1713  007F93  00                 	db	0
  1714  007F94                     STR_17:
  1715  007F94  09                 	db	9
  1716  007F95  25                 	db	37
  1717  007F96  69                 	db	105	;'i'
  1718  007F97  20                 	db	32
  1719  007F98  25                 	db	37
  1720  007F99  36                 	db	54	;'6'
  1721  007F9A  69                 	db	105	;'i'
  1722  007F9B  20                 	db	32
  1723  007F9C  25                 	db	37
  1724  007F9D  36                 	db	54	;'6'
  1725  007F9E  69                 	db	105	;'i'
  1726  007F9F  0A                 	db	10
  1727  007FA0  00                 	db	0
  1728  007FA1                     STR_28:
  1729  007FA1  53                 	db	83	;'S'
  1730  007FA2  65                 	db	101	;'e'
  1731  007FA3  74                 	db	116	;'t'
  1732  007FA4  20                 	db	32
  1733  007FA5  4D                 	db	77	;'M'
  1734  007FA6  6F                 	db	111	;'o'
  1735  007FA7  6E                 	db	110	;'n'
  1736  007FA8  74                 	db	116	;'t'
  1737  007FA9  68                 	db	104	;'h'
  1738  007FAA  3A                 	db	58	;':'
  1739  007FAB  20                 	db	32
  1740  007FAC  00                 	db	0
  1741  007FAD                     STR_32:
  1742  007FAD  53                 	db	83	;'S'
  1743  007FAE  65                 	db	101	;'e'
  1744  007FAF  74                 	db	116	;'t'
  1745  007FB0  20                 	db	32
  1746  007FB1  48                 	db	72	;'H'
  1747  007FB2  6F                 	db	111	;'o'
  1748  007FB3  75                 	db	117	;'u'
  1749  007FB4  72                 	db	114	;'r'
  1750  007FB5  73                 	db	115	;'s'
  1751  007FB6  3A                 	db	58	;':'
  1752  007FB7  20                 	db	32
  1753  007FB8  00                 	db	0
  1754  007FB9                     STR_26:
  1755  007FB9  53                 	db	83	;'S'
  1756  007FBA  65                 	db	101	;'e'
  1757  007FBB  74                 	db	116	;'t'
  1758  007FBC  20                 	db	32
  1759  007FBD  59                 	db	89	;'Y'
  1760  007FBE  65                 	db	101	;'e'
  1761  007FBF  61                 	db	97	;'a'
  1762  007FC0  72                 	db	114	;'r'
  1763  007FC1  3A                 	db	58	;':'
  1764  007FC2  20                 	db	32
  1765  007FC3  00                 	db	0
  1766  007FC4                     STR_23:
  1767  007FC4  09                 	db	9
  1768  007FC5  25                 	db	37
  1769  007FC6  69                 	db	105	;'i'
  1770  007FC7  20                 	db	32
  1771  007FC8  25                 	db	37
  1772  007FC9  69                 	db	105	;'i'
  1773  007FCA  20                 	db	32
  1774  007FCB  25                 	db	37
  1775  007FCC  69                 	db	105	;'i'
  1776  007FCD  0A                 	db	10
  1777  007FCE  00                 	db	0
  1778  007FCF                     STR_30:
  1779  007FCF  53                 	db	83	;'S'
  1780  007FD0  65                 	db	101	;'e'
  1781  007FD1  74                 	db	116	;'t'
  1782  007FD2  20                 	db	32
  1783  007FD3  44                 	db	68	;'D'
  1784  007FD4  61                 	db	97	;'a'
  1785  007FD5  79                 	db	121	;'y'
  1786  007FD6  3A                 	db	58	;':'
  1787  007FD7  20                 	db	32
  1788  007FD8  00                 	db	0
  1789  007FD9                     STR_19:
  1790  007FD9  09                 	db	9
  1791  007FDA  25                 	db	37
  1792  007FDB  69                 	db	105	;'i'
  1793  007FDC  20                 	db	32
  1794  007FDD  25                 	db	37
  1795  007FDE  36                 	db	54	;'6'
  1796  007FDF  69                 	db	105	;'i'
  1797  007FE0  0A                 	db	10
  1798  007FE1  00                 	db	0
  1799  007FE2                     STR_50:
  1800  007FE2  54                 	db	84	;'T'
  1801  007FE3  69                 	db	105	;'i'
  1802  007FE4  6D                 	db	109	;'m'
  1803  007FE5  65                 	db	101	;'e'
  1804  007FE6  3F                 	db	63	;'?'
  1805  007FE7  0D                 	db	13
  1806  007FE8  00                 	db	0
  1807  007FE9                     STR_53:
  1808  007FE9  44                 	db	68	;'D'
  1809  007FEA  61                 	db	97	;'a'
  1810  007FEB  74                 	db	116	;'t'
  1811  007FEC  65                 	db	101	;'e'
  1812  007FED  3F                 	db	63	;'?'
  1813  007FEE  0D                 	db	13
  1814  007FEF  00                 	db	0
  1815  007FF0                     STR_56:
  1816  007FF0  4C                 	db	76	;'L'
  1817  007FF1  4F                 	db	79	;'O'
  1818  007FF2  47                 	db	71	;'G'
  1819  007FF3  0D                 	db	13
  1820  007FF4  00                 	db	0
  1821  007FF5                     STR_39:
  1822  007FF5  53                 	db	83	;'S'
  1823  007FF6  45                 	db	69	;'E'
  1824  007FF7  54                 	db	84	;'T'
  1825  007FF8  0D                 	db	13
  1826  007FF9  00                 	db	0
  1827  007FFA                     STR_13:
  1828  007FFA  7E                 	db	126
  1829  007FFB  7E                 	db	126
  1830  007FFC  7E                 	db	126
  1831  007FFD  00                 	db	0
  1832  0000                     
  1833                           ; #config settings
  1834  007FFE  00                 	db	0	; dummy byte at the end
  1835  0000                     
  1836                           	psect	nvCOMRAM
  1837  000060                     __pnvCOMRAM:
  1838                           	opt stack 0
  1839  000060                     _UART1Config:
  1840                           	opt stack 0
  1841  000060                     	ds	1
  1842                           
  1843                           	psect	nvBANK1
  1844  0001FA                     __pnvBANK1:
  1845                           	opt stack 0
  1846  0001FA                     _baud:
  1847                           	opt stack 0
  1848  0001FA                     	ds	1
  1849  0000                     _ADCON0	set	4034
  1850  0000                     _ADCON0bits	set	4034
  1851  0000                     _ADCON1	set	4033
  1852  0000                     _ADCON2	set	4032
  1853  0000                     _ADRESH	set	4036
  1854  0000                     _ADRESL	set	4035
  1855  0000                     _BAUDCONbits	set	4024
  1856  0000                     _INTCON2bits	set	4081
  1857  0000                     _INTCONbits	set	4082
  1858  0000                     _IPR1bits	set	3999
  1859  0000                     _LATBbits	set	3978
  1860  0000                     _LATCbits	set	3979
  1861  0000                     _PIE1bits	set	3997
  1862  0000                     _PIR1bits	set	3998
  1863  0000                     _RCONbits	set	4048
  1864  0000                     _RCREG	set	4014
  1865  0000                     _RCSTA	set	4011
  1866  0000                     _RCSTAbits	set	4011
  1867  0000                     _SPBRG	set	4015
  1868  0000                     _SPBRGH	set	4016
  1869  0000                     _T0CON	set	4053
  1870  0000                     _T0CONbits	set	4053
  1871  0000                     _T1CONbits	set	4045
  1872  0000                     _TMR0H	set	4055
  1873  0000                     _TMR0L	set	4054
  1874  0000                     _TRISA	set	3986
  1875  0000                     _TRISBbits	set	3987
  1876  0000                     _TRISCbits	set	3988
  1877  0000                     _TXREG	set	4013
  1878  0000                     _TXSTA	set	4012
  1879  0000                     _TXSTAbits	set	4012
  1880  0000                     _TMR0IF	set	32658
  1881  0000                     _TXIF	set	31988
  1882                           
  1883                           	psect	cinit
  1884  003CAC                     __pcinit:
  1885                           	opt stack 0
  1886  003CAC                     start_initialization:
  1887                           	opt stack 0
  1888  003CAC                     __initialization:
  1889                           	opt stack 0
  1890                           
  1891                           ; Clear objects allocated to BANK3 (256 bytes)
  1892  003CAC  EE03  F000         	lfsr	0,__pbssBANK3
  1893  003CB0  EE11 F000          	lfsr	1,256
  1894  003CB4                     clear_0:
  1895  003CB4  6AEE               	clrf	postinc0,c
  1896  003CB6  50E5               	movf	postdec1,w,c
  1897  003CB8  50E1               	movf	fsr1l,w,c
  1898  003CBA  E1FC               	bnz	clear_0
  1899  003CBC  50E2               	movf	fsr1h,w,c
  1900  003CBE  E1FA               	bnz	clear_0
  1901                           
  1902                           ; Clear objects allocated to BANK2 (256 bytes)
  1903  003CC0  EE02  F000         	lfsr	0,__pbssBANK2
  1904  003CC4  EE11 F000          	lfsr	1,256
  1905  003CC8                     clear_1:
  1906  003CC8  6AEE               	clrf	postinc0,c
  1907  003CCA  50E5               	movf	postdec1,w,c
  1908  003CCC  50E1               	movf	fsr1l,w,c
  1909  003CCE  E1FC               	bnz	clear_1
  1910  003CD0  50E2               	movf	fsr1h,w,c
  1911  003CD2  E1FA               	bnz	clear_1
  1912                           
  1913                           ; Clear objects allocated to BANK1 (76 bytes)
  1914  003CD4  EE01  F0AE         	lfsr	0,__pbssBANK1
  1915  003CD8  0E4C               	movlw	76
  1916  003CDA                     clear_2:
  1917  003CDA  6AEE               	clrf	postinc0,c
  1918  003CDC  06E8               	decf	wreg,f,c
  1919  003CDE  E1FD               	bnz	clear_2
  1920                           
  1921                           ; Clear objects allocated to BANK0 (2 bytes)
  1922  003CE0  0100               	movlb	0
  1923  003CE2  6BDE               	clrf	(__pbssBANK0+1)& (0+255),b
  1924  003CE4  6BDD               	clrf	__pbssBANK0& (0+255),b
  1925                           
  1926                           ; Clear objects allocated to COMRAM (34 bytes)
  1927  003CE6  EE00  F028         	lfsr	0,__pbssCOMRAM
  1928  003CEA  0E22               	movlw	34
  1929  003CEC                     clear_3:
  1930  003CEC  6AEE               	clrf	postinc0,c
  1931  003CEE  06E8               	decf	wreg,f,c
  1932  003CF0  E1FD               	bnz	clear_3
  1933                           
  1934                           ; Initialize objects allocated to BANK1 (86 bytes)
  1935                           ; load TBLPTR registers with __pidataBANK1
  1936  003CF2  0E1E               	movlw	low __pidataBANK1
  1937  003CF4  6EF6               	movwf	tblptrl,c
  1938  003CF6  0E41               	movlw	high __pidataBANK1
  1939  003CF8  6EF7               	movwf	tblptrh,c
  1940  003CFA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1941  003CFC  6EF8               	movwf	tblptru,c
  1942  003CFE  EE01  F058         	lfsr	0,__pdataBANK1
  1943  003D02  EE10 F056          	lfsr	1,86
  1944  003D06                     copy_data0:
  1945  003D06  0009               	tblrd		*+
  1946  003D08  CFF5 FFEE          	movff	tablat,postinc0
  1947  003D0C  50E5               	movf	postdec1,w,c
  1948  003D0E  50E1               	movf	fsr1l,w,c
  1949  003D10  E1FA               	bnz	copy_data0
  1950                           
  1951                           ; Initialize objects allocated to BANK0 (2 bytes)
  1952                           ; load TBLPTR registers with __pidataBANK0
  1953  003D12  0E3C               	movlw	low __pidataBANK0
  1954  003D14  6EF6               	movwf	tblptrl,c
  1955  003D16  0E45               	movlw	high __pidataBANK0
  1956  003D18  6EF7               	movwf	tblptrh,c
  1957  003D1A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1958  003D1C  6EF8               	movwf	tblptru,c
  1959  003D1E  0009               	tblrd		*+	;fetch initializer
  1960  003D20  CFF5 F0DF          	movff	tablat,__pdataBANK0
  1961  003D24  0009               	tblrd		*+	;fetch initializer
  1962  003D26  CFF5 F0E0          	movff	tablat,__pdataBANK0+1
  1963                           
  1964                           ; Initialize objects allocated to COMRAM (22 bytes)
  1965                           ; load TBLPTR registers with __pidataCOMRAM
  1966  003D2A  0E78               	movlw	low __pidataCOMRAM
  1967  003D2C  6EF6               	movwf	tblptrl,c
  1968  003D2E  0E44               	movlw	high __pidataCOMRAM
  1969  003D30  6EF7               	movwf	tblptrh,c
  1970  003D32  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1971  003D34  6EF8               	movwf	tblptru,c
  1972  003D36  EE00  F04A         	lfsr	0,__pdataCOMRAM
  1973  003D3A  EE10 F016          	lfsr	1,22
  1974  003D3E                     copy_data1:
  1975  003D3E  0009               	tblrd		*+
  1976  003D40  CFF5 FFEE          	movff	tablat,postinc0
  1977  003D44  50E5               	movf	postdec1,w,c
  1978  003D46  50E1               	movf	fsr1l,w,c
  1979  003D48  E1FA               	bnz	copy_data1
  1980  003D4A                     end_of_initialization:
  1981                           	opt stack 0
  1982  003D4A                     __end_of__initialization:
  1983                           	opt stack 0
  1984  003D4A  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1985  003D4C  6EF8               	movwf	tblptru,c
  1986  003D4E  0100               	movlb	0
  1987  003D50  EF65  F011         	goto	_main	;jump to C main() function
  1988                           tblptru	equ	0xFF8
  1989                           tblptrh	equ	0xFF7
  1990                           tblptrl	equ	0xFF6
  1991                           tablat	equ	0xFF5
  1992                           postinc0	equ	0xFEE
  1993                           wreg	equ	0xFE8
  1994                           postdec1	equ	0xFE5
  1995                           fsr1h	equ	0xFE2
  1996                           fsr1l	equ	0xFE1
  1997                           
  1998                           	psect	bssCOMRAM
  1999  000028                     __pbssCOMRAM:
  2000                           	opt stack 0
  2001  000028                     _BTcount:
  2002                           	opt stack 0
  2003  000028                     	ds	2
  2004  00002A                     _DayCount:
  2005                           	opt stack 0
  2006  00002A                     	ds	2
  2007  00002C                     _cmWinLen:
  2008                           	opt stack 0
  2009  00002C                     	ds	2
  2010  00002E                     _cmYout:
  2011                           	opt stack 0
  2012  00002E                     	ds	2
  2013  000030                     _counter:
  2014                           	opt stack 0
  2015  000030                     	ds	2
  2016  000032                     _hours:
  2017                           	opt stack 0
  2018  000032                     	ds	2
  2019  000034                     _i:
  2020                           	opt stack 0
  2021  000034                     	ds	2
  2022  000036                     _minutes:
  2023                           	opt stack 0
  2024  000036                     	ds	2
  2025  000038                     _seconds:
  2026                           	opt stack 0
  2027  000038                     	ds	2
  2028  00003A                     _tl:
  2029                           	opt stack 0
  2030  00003A                     	ds	2
  2031  00003C                     _tr:
  2032                           	opt stack 0
  2033  00003C                     	ds	2
  2034  00003E                     _tt:
  2035                           	opt stack 0
  2036  00003E                     	ds	2
  2037  000040                     _x:
  2038                           	opt stack 0
  2039  000040                     	ds	2
  2040  000042                     _y:
  2041                           	opt stack 0
  2042  000042                     	ds	2
  2043  000044                     _z:
  2044                           	opt stack 0
  2045  000044                     	ds	2
  2046  000046                     _Timer0Config:
  2047                           	opt stack 0
  2048  000046                     	ds	1
  2049  000047                     _Timer1Config:
  2050                           	opt stack 0
  2051  000047                     	ds	1
  2052  000048                     _USART_Status:
  2053                           	opt stack 0
  2054  000048                     	ds	1
  2055  000049                     _rx:
  2056                           	opt stack 0
  2057  000049                     	ds	1
  2058                           tblptru	equ	0xFF8
  2059                           tblptrh	equ	0xFF7
  2060                           tblptrl	equ	0xFF6
  2061                           tablat	equ	0xFF5
  2062                           postinc0	equ	0xFEE
  2063                           wreg	equ	0xFE8
  2064                           postdec1	equ	0xFE5
  2065                           fsr1h	equ	0xFE2
  2066                           fsr1l	equ	0xFE1
  2067                           
  2068                           	psect	dataCOMRAM
  2069  00004A                     __pdataCOMRAM:
  2070                           	opt stack 0
  2071  00004A                     _goffset:
  2072                           	opt stack 0
  2073  00004A                     	ds	3
  2074  00004D                     _gscale:
  2075                           	opt stack 0
  2076  00004D                     	ds	3
  2077  000050                     _NewDay:
  2078                           	opt stack 0
  2079  000050                     	ds	2
  2080  000052                     _Nlong:
  2081                           	opt stack 0
  2082  000052                     	ds	2
  2083  000054                     _Nshort:
  2084                           	opt stack 0
  2085  000054                     	ds	2
  2086  000056                     _Pumping:
  2087                           	opt stack 0
  2088  000056                     	ds	2
  2089  000058                     _month:
  2090                           	opt stack 0
  2091  000058                     	ds	2
  2092  00005A                     _offcountmax:
  2093                           	opt stack 0
  2094  00005A                     	ds	2
  2095  00005C                     _onthresh:
  2096                           	opt stack 0
  2097  00005C                     	ds	2
  2098  00005E                     _year:
  2099                           	opt stack 0
  2100  00005E                     	ds	2
  2101                           tblptru	equ	0xFF8
  2102                           tblptrh	equ	0xFF7
  2103                           tblptrl	equ	0xFF6
  2104                           tablat	equ	0xFF5
  2105                           postinc0	equ	0xFEE
  2106                           wreg	equ	0xFE8
  2107                           postdec1	equ	0xFE5
  2108                           fsr1h	equ	0xFE2
  2109                           fsr1l	equ	0xFE1
  2110                           
  2111                           	psect	bssBANK0
  2112  0000DD                     __pbssBANK0:
  2113                           	opt stack 0
  2114  0000DD                     _NewMessage:
  2115                           	opt stack 0
  2116  0000DD                     	ds	2
  2117                           tblptru	equ	0xFF8
  2118                           tblptrh	equ	0xFF7
  2119                           tblptrl	equ	0xFF6
  2120                           tablat	equ	0xFF5
  2121                           postinc0	equ	0xFEE
  2122                           wreg	equ	0xFE8
  2123                           postdec1	equ	0xFE5
  2124                           fsr1h	equ	0xFE2
  2125                           fsr1l	equ	0xFE1
  2126                           
  2127                           	psect	dataBANK0
  2128  0000DF                     __pdataBANK0:
  2129                           	opt stack 0
  2130  0000DF                     _day:
  2131                           	opt stack 0
  2132  0000DF                     	ds	2
  2133                           tblptru	equ	0xFF8
  2134                           tblptrh	equ	0xFF7
  2135                           tblptrl	equ	0xFF6
  2136                           tablat	equ	0xFF5
  2137                           postinc0	equ	0xFEE
  2138                           wreg	equ	0xFE8
  2139                           postdec1	equ	0xFE5
  2140                           fsr1h	equ	0xFE2
  2141                           fsr1l	equ	0xFE1
  2142                           
  2143                           	psect	bssBANK1
  2144  0001AE                     __pbssBANK1:
  2145                           	opt stack 0
  2146  0001AE                     _offcount:
  2147                           	opt stack 0
  2148  0001AE                     	ds	4
  2149  0001B2                     _xlongavg:
  2150                           	opt stack 0
  2151  0001B2                     	ds	4
  2152  0001B6                     _xshortavg:
  2153                           	opt stack 0
  2154  0001B6                     	ds	4
  2155  0001BA                     _ylongavg:
  2156                           	opt stack 0
  2157  0001BA                     	ds	4
  2158  0001BE                     _yshortavg:
  2159                           	opt stack 0
  2160  0001BE                     	ds	4
  2161  0001C2                     _zlongavg:
  2162                           	opt stack 0
  2163  0001C2                     	ds	4
  2164  0001C6                     _zshortavg:
  2165                           	opt stack 0
  2166  0001C6                     	ds	4
  2167  0001CA                     _BTcountdown:
  2168                           	opt stack 0
  2169  0001CA                     	ds	2
  2170  0001CC                     _BTpower:
  2171                           	opt stack 0
  2172  0001CC                     	ds	2
  2173  0001CE                     _errno:
  2174                           	opt stack 0
  2175  0001CE                     	ds	2
  2176  0001D0                     _overflow:
  2177                           	opt stack 0
  2178  0001D0                     	ds	2
  2179  0001D2                     _LastMessage:
  2180                           	opt stack 0
  2181  0001D2                     	ds	20
  2182  0001E6                     _MessageBuffer:
  2183                           	opt stack 0
  2184  0001E6                     	ds	20
  2185                           tblptru	equ	0xFF8
  2186                           tblptrh	equ	0xFF7
  2187                           tblptrl	equ	0xFF6
  2188                           tablat	equ	0xFF5
  2189                           postinc0	equ	0xFEE
  2190                           wreg	equ	0xFE8
  2191                           postdec1	equ	0xFE5
  2192                           fsr1h	equ	0xFE2
  2193                           fsr1l	equ	0xFE1
  2194                           
  2195                           	psect	dataBANK1
  2196  000158                     __pdataBANK1:
  2197                           	opt stack 0
  2198  000158                     _MsgFromPIC:
  2199                           	opt stack 0
  2200  000158                     	ds	14
  2201  000166                     cmFilterHighPassUsingLowPass@F4485:
  2202                           	opt stack 0
  2203  000166                     	ds	8
  2204  00016E                     _NewMonth:
  2205                           	opt stack 0
  2206  00016E                     	ds	2
  2207  000170                     _cmWeightVector:
  2208                           	opt stack 0
  2209  000170                     	ds	42
  2210  00019A                     _ConfigWord:
  2211                           	opt stack 0
  2212  00019A                     	ds	20
  2213                           tblptru	equ	0xFF8
  2214                           tblptrh	equ	0xFF7
  2215                           tblptrl	equ	0xFF6
  2216                           tablat	equ	0xFF5
  2217                           postinc0	equ	0xFEE
  2218                           wreg	equ	0xFE8
  2219                           postdec1	equ	0xFE5
  2220                           fsr1h	equ	0xFE2
  2221                           fsr1l	equ	0xFE1
  2222                           
  2223                           	psect	bssBANK2
  2224  000200                     __pbssBANK2:
  2225                           	opt stack 0
  2226  000200                     _cmYreal:
  2227                           	opt stack 0
  2228  000200                     	ds	256
  2229                           tblptru	equ	0xFF8
  2230                           tblptrh	equ	0xFF7
  2231                           tblptrl	equ	0xFF6
  2232                           tablat	equ	0xFF5
  2233                           postinc0	equ	0xFEE
  2234                           wreg	equ	0xFE8
  2235                           postdec1	equ	0xFE5
  2236                           fsr1h	equ	0xFE2
  2237                           fsr1l	equ	0xFE1
  2238                           
  2239                           	psect	bssBANK3
  2240  000300                     __pbssBANK3:
  2241                           	opt stack 0
  2242  000300                     _cmYimag:
  2243                           	opt stack 0
  2244  000300                     	ds	256
  2245                           tblptru	equ	0xFF8
  2246                           tblptrh	equ	0xFF7
  2247                           tblptrl	equ	0xFF6
  2248                           tablat	equ	0xFF5
  2249                           postinc0	equ	0xFEE
  2250                           wreg	equ	0xFE8
  2251                           postdec1	equ	0xFE5
  2252                           fsr1h	equ	0xFE2
  2253                           fsr1l	equ	0xFE1
  2254                           
  2255                           	psect	cstackBANK1
  2256  000100                     __pcstackBANK1:
  2257                           	opt stack 0
  2258  000100                     ??___ftdiv:
  2259  000100                     fix_fft@k:
  2260                           	opt stack 0
  2261  000100                     MessageRoutine@str1:
  2262                           	opt stack 0
  2263                           
  2264                           ; 20 bytes @ 0x0
  2265  000100                     	ds	3
  2266  000103                     ___ftdiv@cntr:
  2267                           	opt stack 0
  2268                           
  2269                           ; 1 bytes @ 0x3
  2270  000103                     	ds	1
  2271  000104                     ___ftdiv@f3:
  2272                           	opt stack 0
  2273  000104                     fix_fft@nn:
  2274                           	opt stack 0
  2275                           
  2276                           ; 4 bytes @ 0x4
  2277  000104                     	ds	3
  2278  000107                     ___ftdiv@exp:
  2279                           	opt stack 0
  2280                           
  2281                           ; 1 bytes @ 0x7
  2282  000107                     	ds	1
  2283  000108                     ___ftdiv@sign:
  2284                           	opt stack 0
  2285  000108                     fix_fft@istep:
  2286                           	opt stack 0
  2287                           
  2288                           ; 4 bytes @ 0x8
  2289  000108                     	ds	1
  2290  000109                     ?___fttol:
  2291                           	opt stack 0
  2292  000109                     ___fttol@f1:
  2293                           	opt stack 0
  2294                           
  2295                           ; 3 bytes @ 0x9
  2296  000109                     	ds	3
  2297  00010C                     fix_fft@qr:
  2298                           	opt stack 0
  2299                           
  2300                           ; 2 bytes @ 0xC
  2301  00010C                     	ds	1
  2302  00010D                     ??___fttol:
  2303                           
  2304                           ; 0 bytes @ 0xD
  2305  00010D                     	ds	1
  2306  00010E                     fix_fft@qi:
  2307                           	opt stack 0
  2308                           
  2309                           ; 2 bytes @ 0xE
  2310  00010E                     	ds	2
  2311  000110                     fix_fft@wr:
  2312                           	opt stack 0
  2313                           
  2314                           ; 2 bytes @ 0x10
  2315  000110                     	ds	2
  2316  000112                     ___fttol@sign1:
  2317                           	opt stack 0
  2318  000112                     fix_fft@wi:
  2319                           	opt stack 0
  2320                           
  2321                           ; 2 bytes @ 0x12
  2322  000112                     	ds	1
  2323  000113                     ___fttol@lval:
  2324                           	opt stack 0
  2325                           
  2326                           ; 4 bytes @ 0x13
  2327  000113                     	ds	1
  2328  000114                     fix_fft@n:
  2329                           	opt stack 0
  2330  000114                     MessageRoutine@str2:
  2331                           	opt stack 0
  2332                           
  2333                           ; 20 bytes @ 0x14
  2334  000114                     	ds	3
  2335  000117                     ___fttol@exp1:
  2336                           	opt stack 0
  2337                           
  2338                           ; 1 bytes @ 0x17
  2339  000117                     	ds	1
  2340  000118                     ?_Read_X:
  2341                           	opt stack 0
  2342  000118                     ?_Read_Y:
  2343                           	opt stack 0
  2344  000118                     ?_Read_Z:
  2345                           	opt stack 0
  2346  000118                     fix_fft@tr:
  2347                           	opt stack 0
  2348  000118                     Read_X@m:
  2349                           	opt stack 0
  2350  000118                     Read_Y@m:
  2351                           	opt stack 0
  2352  000118                     Read_Z@m:
  2353                           	opt stack 0
  2354                           
  2355                           ; 3 bytes @ 0x18
  2356  000118                     	ds	2
  2357  00011A                     fix_fft@ti:
  2358                           	opt stack 0
  2359                           
  2360                           ; 2 bytes @ 0x1A
  2361  00011A                     	ds	1
  2362  00011B                     Read_X@c:
  2363                           	opt stack 0
  2364  00011B                     Read_Y@c:
  2365                           	opt stack 0
  2366  00011B                     Read_Z@c:
  2367                           	opt stack 0
  2368                           
  2369                           ; 3 bytes @ 0x1B
  2370  00011B                     	ds	1
  2371  00011C                     fix_fft@b:
  2372                           	opt stack 0
  2373                           
  2374                           ; 2 bytes @ 0x1C
  2375  00011C                     	ds	2
  2376  00011E                     _Read_X$2571:
  2377                           	opt stack 0
  2378  00011E                     _Read_Y$2572:
  2379                           	opt stack 0
  2380  00011E                     _Read_Z$2573:
  2381                           	opt stack 0
  2382  00011E                     fix_fft@i:
  2383                           	opt stack 0
  2384                           
  2385                           ; 4 bytes @ 0x1E
  2386  00011E                     	ds	3
  2387  000121                     Read_X@x:
  2388                           	opt stack 0
  2389  000121                     Read_Y@y:
  2390                           	opt stack 0
  2391  000121                     Read_Z@z:
  2392                           	opt stack 0
  2393                           
  2394                           ; 2 bytes @ 0x21
  2395  000121                     	ds	1
  2396  000122                     fix_fft@mr:
  2397                           	opt stack 0
  2398                           
  2399                           ; 4 bytes @ 0x22
  2400  000122                     	ds	4
  2401  000126                     fix_fft@l:
  2402                           	opt stack 0
  2403                           
  2404                           ; 4 bytes @ 0x26
  2405  000126                     	ds	2
  2406  000128                     MessageRoutine@ret:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x28
  2410  000128                     	ds	2
  2411  00012A                     fix_fft@j:
  2412                           	opt stack 0
  2413                           
  2414                           ; 4 bytes @ 0x2A
  2415  00012A                     	ds	4
  2416  00012E                     fix_fft@c:
  2417                           	opt stack 0
  2418                           
  2419                           ; 4 bytes @ 0x2E
  2420  00012E                     	ds	4
  2421  000132                     ??_cmFftFun:
  2422                           
  2423                           ; 0 bytes @ 0x32
  2424  000132                     	ds	11
  2425  00013D                     cmFftFun@sizeData:
  2426                           	opt stack 0
  2427                           
  2428                           ; 2 bytes @ 0x3D
  2429  00013D                     	ds	2
  2430  00013F                     cmFftFun@root:
  2431                           	opt stack 0
  2432                           
  2433                           ; 4 bytes @ 0x3F
  2434  00013F                     	ds	4
  2435  000143                     cmFftFun@place:
  2436                           	opt stack 0
  2437                           
  2438                           ; 4 bytes @ 0x43
  2439  000143                     	ds	4
  2440  000147                     cmFftFun@k:
  2441                           	opt stack 0
  2442                           
  2443                           ; 2 bytes @ 0x47
  2444  000147                     	ds	2
  2445  000149                     cmStuffsWrapperFun@iTemp_428:
  2446                           	opt stack 0
  2447                           
  2448                           ; 2 bytes @ 0x49
  2449  000149                     	ds	2
  2450  00014B                     cmStuffsWrapperFun@iTemp_420:
  2451                           	opt stack 0
  2452                           
  2453                           ; 2 bytes @ 0x4B
  2454  00014B                     	ds	2
  2455  00014D                     cmStuffsWrapperFun@iTemp_423:
  2456                           	opt stack 0
  2457                           
  2458                           ; 2 bytes @ 0x4D
  2459  00014D                     	ds	2
  2460  00014F                     cmStuffsWrapperFun@iW:
  2461                           	opt stack 0
  2462                           
  2463                           ; 2 bytes @ 0x4F
  2464  00014F                     	ds	2
  2465  000151                     cmStuffsWrapperFun@iTemp:
  2466                           	opt stack 0
  2467                           
  2468                           ; 2 bytes @ 0x51
  2469  000151                     	ds	2
  2470  000153                     
  2471                           ; 2 bytes @ 0x53
  2472  000153                     	ds	2
  2473  000155                     
  2474                           ; 3 bytes @ 0x55
  2475  000155                     	ds	3
  2476                           tblptru	equ	0xFF8
  2477                           tblptrh	equ	0xFF7
  2478                           tblptrl	equ	0xFF6
  2479                           tablat	equ	0xFF5
  2480                           postinc0	equ	0xFEE
  2481                           wreg	equ	0xFE8
  2482                           postdec1	equ	0xFE5
  2483                           fsr1h	equ	0xFE2
  2484                           fsr1l	equ	0xFE1
  2485                           
  2486                           	psect	cstackBANK0
  2487  000080                     __pcstackBANK0:
  2488                           	opt stack 0
  2489  000080                     i1printf@cp:
  2490                           	opt stack 0
  2491                           
  2492                           ; 2 bytes @ 0x0
  2493  000080                     	ds	2
  2494  000082                     i1printf@prec:
  2495                           	opt stack 0
  2496                           
  2497                           ; 1 bytes @ 0x2
  2498  000082                     	ds	1
  2499  000083                     i1printf@ap:
  2500                           	opt stack 0
  2501                           
  2502                           ; 2 bytes @ 0x3
  2503  000083                     	ds	2
  2504  000085                     i1printf@len:
  2505                           	opt stack 0
  2506                           
  2507                           ; 2 bytes @ 0x5
  2508  000085                     	ds	2
  2509  000087                     i1printf@flag:
  2510                           	opt stack 0
  2511                           
  2512                           ; 1 bytes @ 0x7
  2513  000087                     	ds	1
  2514  000088                     i1printf@val:
  2515                           	opt stack 0
  2516                           
  2517                           ; 2 bytes @ 0x8
  2518  000088                     	ds	2
  2519  00008A                     i1printf@width:
  2520                           	opt stack 0
  2521                           
  2522                           ; 2 bytes @ 0xA
  2523  00008A                     	ds	2
  2524  00008C                     i1printf@c:
  2525                           	opt stack 0
  2526                           
  2527                           ; 1 bytes @ 0xC
  2528  00008C                     	ds	1
  2529  00008D                     ??_SerialRxPinInterrupt:
  2530                           
  2531                           ; 0 bytes @ 0xD
  2532  00008D                     	ds	18
  2533  00009F                     ??_Delay10KTCYx:
  2534  00009F                     ??_isdigit:
  2535  00009F                     ?_strcmp:
  2536                           	opt stack 0
  2537  00009F                     ?_ReadADC:
  2538                           	opt stack 0
  2539  00009F                     ?_abs:
  2540                           	opt stack 0
  2541  00009F                     ?_ReadTimer0:
  2542                           	opt stack 0
  2543  00009F                     ?___wmul:
  2544                           	opt stack 0
  2545  00009F                     ?___lwdiv:
  2546                           	opt stack 0
  2547  00009F                     ?___ftpack:
  2548                           	opt stack 0
  2549  00009F                     ?_frexp:
  2550                           	opt stack 0
  2551  00009F                     ?___ftneg:
  2552                           	opt stack 0
  2553  00009F                     ?___lmul:
  2554                           	opt stack 0
  2555  00009F                     ?___aldiv:
  2556                           	opt stack 0
  2557  00009F                     putch@c:
  2558                           	opt stack 0
  2559  00009F                     OpenTimer0@config:
  2560                           	opt stack 0
  2561  00009F                     Delay10TCYx@unit:
  2562                           	opt stack 0
  2563  00009F                     Delay1KTCYx@unit:
  2564                           	opt stack 0
  2565  00009F                     OpenUSART@spbrg:
  2566                           	opt stack 0
  2567  00009F                     ___wmul@multiplier:
  2568                           	opt stack 0
  2569  00009F                     abs@a:
  2570                           	opt stack 0
  2571  00009F                     ___lwdiv@dividend:
  2572                           	opt stack 0
  2573  00009F                     strcmp@s1:
  2574                           	opt stack 0
  2575  00009F                     strcpy@to:
  2576                           	opt stack 0
  2577  00009F                     ___ftpack@arg:
  2578                           	opt stack 0
  2579  00009F                     ___ftneg@f1:
  2580                           	opt stack 0
  2581  00009F                     frexp@value:
  2582                           	opt stack 0
  2583  00009F                     ___lmul@multiplier:
  2584                           	opt stack 0
  2585  00009F                     ___aldiv@dividend:
  2586                           	opt stack 0
  2587                           
  2588                           ; 4 bytes @ 0x1F
  2589  00009F                     	ds	1
  2590  0000A0                     Delay10KTCYx@unit:
  2591                           	opt stack 0
  2592  0000A0                     _isdigit$2250:
  2593                           	opt stack 0
  2594                           
  2595                           ; 1 bytes @ 0x20
  2596  0000A0                     	ds	1
  2597  0000A1                     ??_ReadADC:
  2598  0000A1                     ??_abs:
  2599  0000A1                     OpenUSART@config:
  2600                           	opt stack 0
  2601  0000A1                     isdigit@c:
  2602                           	opt stack 0
  2603  0000A1                     ReadTimer0@timer:
  2604                           	opt stack 0
  2605  0000A1                     ___wmul@multiplicand:
  2606                           	opt stack 0
  2607  0000A1                     ___lwdiv@divisor:
  2608                           	opt stack 0
  2609  0000A1                     strcmp@s2:
  2610                           	opt stack 0
  2611  0000A1                     strcpy@from:
  2612                           	opt stack 0
  2613                           
  2614                           ; 2 bytes @ 0x21
  2615  0000A1                     	ds	1
  2616  0000A2                     ___ftpack@exp:
  2617                           	opt stack 0
  2618  0000A2                     frexp@eptr:
  2619                           	opt stack 0
  2620                           
  2621                           ; 2 bytes @ 0x22
  2622  0000A2                     	ds	1
  2623  0000A3                     ??_strcmp:
  2624  0000A3                     ??_TimeLoop:
  2625  0000A3                     ?_PumpDetect:
  2626                           	opt stack 0
  2627  0000A3                     ___ftpack@sign:
  2628                           	opt stack 0
  2629  0000A3                     ___lwdiv@counter:
  2630                           	opt stack 0
  2631  0000A3                     ___wmul@product:
  2632                           	opt stack 0
  2633  0000A3                     strcpy@cp:
  2634                           	opt stack 0
  2635  0000A3                     ___lmul@multiplicand:
  2636                           	opt stack 0
  2637  0000A3                     ___aldiv@divisor:
  2638                           	opt stack 0
  2639                           
  2640                           ; 4 bytes @ 0x23
  2641  0000A3                     	ds	1
  2642  0000A4                     ??___ftpack:
  2643  0000A4                     ??_frexp:
  2644  0000A4                     strcmp@r:
  2645                           	opt stack 0
  2646  0000A4                     ___lwdiv@quotient:
  2647                           	opt stack 0
  2648                           
  2649                           ; 2 bytes @ 0x24
  2650  0000A4                     	ds	1
  2651  0000A5                     ??_PumpDetect:
  2652  0000A5                     ??_cmFilterHighPassUsingLowPass:
  2653  0000A5                     ?_atoi:
  2654                           	opt stack 0
  2655  0000A5                     atoi@s:
  2656                           	opt stack 0
  2657                           
  2658                           ; 2 bytes @ 0x25
  2659  0000A5                     	ds	1
  2660  0000A6                     ?___lwmod:
  2661                           	opt stack 0
  2662  0000A6                     ___lwmod@dividend:
  2663                           	opt stack 0
  2664                           
  2665                           ; 2 bytes @ 0x26
  2666  0000A6                     	ds	1
  2667  0000A7                     ??_atoi:
  2668  0000A7                     ?___awtoft:
  2669                           	opt stack 0
  2670  0000A7                     ___aldiv@counter:
  2671                           	opt stack 0
  2672  0000A7                     ___awtoft@c:
  2673                           	opt stack 0
  2674  0000A7                     ___lmul@product:
  2675                           	opt stack 0
  2676                           
  2677                           ; 4 bytes @ 0x27
  2678  0000A7                     	ds	1
  2679  0000A8                     ___aldiv@sign:
  2680                           	opt stack 0
  2681  0000A8                     ___lwmod@divisor:
  2682                           	opt stack 0
  2683                           
  2684                           ; 2 bytes @ 0x28
  2685  0000A8                     	ds	1
  2686  0000A9                     atoi@sign:
  2687                           	opt stack 0
  2688  0000A9                     ___aldiv@quotient:
  2689                           	opt stack 0
  2690                           
  2691                           ; 4 bytes @ 0x29
  2692  0000A9                     	ds	1
  2693  0000AA                     ___awtoft@sign:
  2694                           	opt stack 0
  2695  0000AA                     ___lwmod@counter:
  2696                           	opt stack 0
  2697  0000AA                     atoi@a:
  2698                           	opt stack 0
  2699                           
  2700                           ; 2 bytes @ 0x2A
  2701  0000AA                     	ds	1
  2702  0000AB                     ?_printf:
  2703                           	opt stack 0
  2704  0000AB                     ?___ftmul:
  2705                           	opt stack 0
  2706  0000AB                     fix_fft@fr:
  2707                           	opt stack 0
  2708  0000AB                     printf@f:
  2709                           	opt stack 0
  2710  0000AB                     ___ftmul@f1:
  2711                           	opt stack 0
  2712                           
  2713                           ; 3 bytes @ 0x2B
  2714  0000AB                     	ds	2
  2715  0000AD                     ?_approxRollingAverage:
  2716                           	opt stack 0
  2717  0000AD                     fix_fft@fi:
  2718                           	opt stack 0
  2719  0000AD                     approxRollingAverage@avg:
  2720                           	opt stack 0
  2721                           
  2722                           ; 4 bytes @ 0x2D
  2723  0000AD                     	ds	1
  2724  0000AE                     ___ftmul@f2:
  2725                           	opt stack 0
  2726                           
  2727                           ; 3 bytes @ 0x2E
  2728  0000AE                     	ds	1
  2729  0000AF                     fix_fft@m:
  2730                           	opt stack 0
  2731                           
  2732                           ; 2 bytes @ 0x2F
  2733  0000AF                     	ds	2
  2734  0000B1                     ??_fix_fft:
  2735  0000B1                     ??___ftmul:
  2736  0000B1                     approxRollingAverage@new_sample:
  2737                           	opt stack 0
  2738  0000B1                     cmFilterHighPassUsingLowPass@cmFilterCoeff:
  2739                           	opt stack 0
  2740                           
  2741                           ; 8 bytes @ 0x31
  2742  0000B1                     	ds	3
  2743  0000B4                     ___ftmul@exp:
  2744                           	opt stack 0
  2745                           
  2746                           ; 1 bytes @ 0x34
  2747  0000B4                     	ds	1
  2748  0000B5                     approxRollingAverage@N:
  2749                           	opt stack 0
  2750  0000B5                     ___ftmul@f3_as_product:
  2751                           	opt stack 0
  2752                           
  2753                           ; 3 bytes @ 0x35
  2754  0000B5                     	ds	2
  2755  0000B7                     ??_printf:
  2756  0000B7                     ??_approxRollingAverage:
  2757                           
  2758                           ; 0 bytes @ 0x37
  2759  0000B7                     	ds	1
  2760  0000B8                     ___ftmul@cntr:
  2761                           	opt stack 0
  2762                           
  2763                           ; 1 bytes @ 0x38
  2764  0000B8                     	ds	1
  2765  0000B9                     ___ftmul@sign:
  2766                           	opt stack 0
  2767  0000B9                     cmFilterHighPassUsingLowPass@k:
  2768                           	opt stack 0
  2769                           
  2770                           ; 2 bytes @ 0x39
  2771  0000B9                     	ds	1
  2772  0000BA                     ?___ftadd:
  2773                           	opt stack 0
  2774  0000BA                     ___ftadd@f1:
  2775                           	opt stack 0
  2776                           
  2777                           ; 3 bytes @ 0x3A
  2778  0000BA                     	ds	1
  2779  0000BB                     cmFilterHighPassUsingLowPass@xBuffer:
  2780                           	opt stack 0
  2781  0000BB                     printf@cp:
  2782                           	opt stack 0
  2783                           
  2784                           ; 2 bytes @ 0x3B
  2785  0000BB                     	ds	2
  2786  0000BD                     printf@prec:
  2787                           	opt stack 0
  2788  0000BD                     cmFilterHighPassUsingLowPass@j:
  2789                           	opt stack 0
  2790  0000BD                     ___ftadd@f2:
  2791                           	opt stack 0
  2792                           
  2793                           ; 3 bytes @ 0x3D
  2794  0000BD                     	ds	1
  2795  0000BE                     printf@ap:
  2796                           	opt stack 0
  2797                           
  2798                           ; 2 bytes @ 0x3E
  2799  0000BE                     	ds	1
  2800  0000BF                     cmFilterHighPassUsingLowPass@xLPF:
  2801                           	opt stack 0
  2802                           
  2803                           ; 2 bytes @ 0x3F
  2804  0000BF                     	ds	1
  2805  0000C0                     ??___ftadd:
  2806  0000C0                     printf@len:
  2807                           	opt stack 0
  2808                           
  2809                           ; 2 bytes @ 0x40
  2810  0000C0                     	ds	1
  2811  0000C1                     cmFilterHighPassUsingLowPass@Nsignal:
  2812                           	opt stack 0
  2813                           
  2814                           ; 2 bytes @ 0x41
  2815  0000C1                     	ds	1
  2816  0000C2                     printf@flag:
  2817                           	opt stack 0
  2818                           
  2819                           ; 1 bytes @ 0x42
  2820  0000C2                     	ds	1
  2821  0000C3                     ___ftadd@sign:
  2822                           	opt stack 0
  2823  0000C3                     cmFilterHighPassUsingLowPass@j_440:
  2824                           	opt stack 0
  2825  0000C3                     printf@val:
  2826                           	opt stack 0
  2827                           
  2828                           ; 2 bytes @ 0x43
  2829  0000C3                     	ds	1
  2830  0000C4                     ___ftadd@exp2:
  2831                           	opt stack 0
  2832                           
  2833                           ; 1 bytes @ 0x44
  2834  0000C4                     	ds	1
  2835  0000C5                     ___ftadd@exp1:
  2836                           	opt stack 0
  2837  0000C5                     cmFilterHighPassUsingLowPass@i:
  2838                           	opt stack 0
  2839  0000C5                     printf@width:
  2840                           	opt stack 0
  2841                           
  2842                           ; 2 bytes @ 0x45
  2843  0000C5                     	ds	1
  2844  0000C6                     ?_eval_poly:
  2845                           	opt stack 0
  2846  0000C6                     eval_poly@x:
  2847                           	opt stack 0
  2848                           
  2849                           ; 3 bytes @ 0x46
  2850  0000C6                     	ds	1
  2851  0000C7                     printf@c:
  2852                           	opt stack 0
  2853                           
  2854                           ; 1 bytes @ 0x47
  2855  0000C7                     	ds	1
  2856  0000C8                     
  2857                           ; 0 bytes @ 0x48
  2858  0000C8                     	ds	1
  2859  0000C9                     eval_poly@d:
  2860                           	opt stack 0
  2861                           
  2862                           ; 2 bytes @ 0x49
  2863  0000C9                     	ds	2
  2864  0000CB                     eval_poly@n:
  2865                           	opt stack 0
  2866                           
  2867                           ; 2 bytes @ 0x4B
  2868  0000CB                     	ds	2
  2869  0000CD                     ??_eval_poly:
  2870                           
  2871                           ; 0 bytes @ 0x4D
  2872  0000CD                     	ds	2
  2873  0000CF                     eval_poly@res:
  2874                           	opt stack 0
  2875                           
  2876                           ; 3 bytes @ 0x4F
  2877  0000CF                     	ds	3
  2878  0000D2                     ?_log:
  2879                           	opt stack 0
  2880  0000D2                     log@x:
  2881                           	opt stack 0
  2882                           
  2883                           ; 3 bytes @ 0x52
  2884  0000D2                     	ds	3
  2885  0000D5                     log@exponent:
  2886                           	opt stack 0
  2887                           
  2888                           ; 2 bytes @ 0x55
  2889  0000D5                     	ds	2
  2890  0000D7                     ?___ftdiv:
  2891                           	opt stack 0
  2892  0000D7                     ___ftdiv@f1:
  2893                           	opt stack 0
  2894                           
  2895                           ; 3 bytes @ 0x57
  2896  0000D7                     	ds	3
  2897  0000DA                     ___ftdiv@f2:
  2898                           	opt stack 0
  2899                           
  2900                           ; 3 bytes @ 0x5A
  2901  0000DA                     	ds	3
  2902  0000DD                     tblptru	equ	0xFF8
  2903                           tblptrh	equ	0xFF7
  2904                           tblptrl	equ	0xFF6
  2905                           tablat	equ	0xFF5
  2906                           postinc0	equ	0xFEE
  2907                           wreg	equ	0xFE8
  2908                           postdec1	equ	0xFE5
  2909                           fsr1h	equ	0xFE2
  2910                           fsr1l	equ	0xFE1
  2911                           
  2912                           ; 0 bytes @ 0x5D
  2913                           
  2914                           	psect	cstackCOMRAM
  2915  000001                     __pcstackCOMRAM:
  2916                           	opt stack 0
  2917  000001                     ?i2___lwmod:
  2918                           	opt stack 0
  2919  000001                     i2___lwmod@dividend:
  2920                           	opt stack 0
  2921                           
  2922                           ; 2 bytes @ 0x0
  2923  000001                     	ds	2
  2924  000003                     i2___lwmod@divisor:
  2925                           	opt stack 0
  2926                           
  2927                           ; 2 bytes @ 0x2
  2928  000003                     	ds	2
  2929  000005                     i2___lwmod@counter:
  2930                           	opt stack 0
  2931                           
  2932                           ; 1 bytes @ 0x4
  2933  000005                     	ds	1
  2934  000006                     ??_TimingISR:
  2935                           
  2936                           ; 0 bytes @ 0x5
  2937  000006                     	ds	16
  2938  000016                     ??i1_isdigit:
  2939  000016                     ?i1___wmul:
  2940                           	opt stack 0
  2941  000016                     ?i1___lwdiv:
  2942                           	opt stack 0
  2943  000016                     ReadUSART@data:
  2944                           	opt stack 0
  2945  000016                     i1putch@c:
  2946                           	opt stack 0
  2947  000016                     i1___wmul@multiplier:
  2948                           	opt stack 0
  2949  000016                     i1___lwdiv@dividend:
  2950                           	opt stack 0
  2951  000016                     i1strcpy@to:
  2952                           	opt stack 0
  2953                           
  2954                           ; 2 bytes @ 0x15
  2955  000016                     	ds	1
  2956  000017                     i1_isdigit$2250:
  2957                           	opt stack 0
  2958                           
  2959                           ; 1 bytes @ 0x16
  2960  000017                     	ds	1
  2961  000018                     i1isdigit@c:
  2962                           	opt stack 0
  2963  000018                     i1___wmul@multiplicand:
  2964                           	opt stack 0
  2965  000018                     i1___lwdiv@divisor:
  2966                           	opt stack 0
  2967  000018                     i1strcpy@from:
  2968                           	opt stack 0
  2969                           
  2970                           ; 2 bytes @ 0x17
  2971  000018                     	ds	2
  2972  00001A                     i1___lwdiv@counter:
  2973                           	opt stack 0
  2974  00001A                     i1___wmul@product:
  2975                           	opt stack 0
  2976  00001A                     i1strcpy@cp:
  2977                           	opt stack 0
  2978                           
  2979                           ; 2 bytes @ 0x19
  2980  00001A                     	ds	1
  2981  00001B                     i1___lwdiv@quotient:
  2982                           	opt stack 0
  2983                           
  2984                           ; 2 bytes @ 0x1A
  2985  00001B                     	ds	2
  2986  00001D                     ?i1___lwmod:
  2987                           	opt stack 0
  2988  00001D                     i1___lwmod@dividend:
  2989                           	opt stack 0
  2990                           
  2991                           ; 2 bytes @ 0x1C
  2992  00001D                     	ds	2
  2993  00001F                     i1___lwmod@divisor:
  2994                           	opt stack 0
  2995                           
  2996                           ; 2 bytes @ 0x1E
  2997  00001F                     	ds	2
  2998  000021                     i1___lwmod@counter:
  2999                           	opt stack 0
  3000                           
  3001                           ; 1 bytes @ 0x20
  3002  000021                     	ds	1
  3003  000022                     ?i1_printf:
  3004                           	opt stack 0
  3005  000022                     i1printf@f:
  3006                           	opt stack 0
  3007                           
  3008                           ; 2 bytes @ 0x21
  3009  000022                     	ds	2
  3010  000024                     ??i1_printf:
  3011                           
  3012                           ; 0 bytes @ 0x23
  3013  000024                     	ds	4
  3014                           tblptru	equ	0xFF8
  3015                           tblptrh	equ	0xFF7
  3016                           tblptrl	equ	0xFF6
  3017                           tablat	equ	0xFF5
  3018                           postinc0	equ	0xFEE
  3019                           wreg	equ	0xFE8
  3020                           postdec1	equ	0xFE5
  3021                           fsr1h	equ	0xFE2
  3022                           fsr1l	equ	0xFE1
  3023                           
  3024 ;;
  3025 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3026 ;;
  3027 ;; *************** function _main *****************
  3028 ;; Defined at:
  3029 ;;		line 58 in file "serialcomms.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;  argc            2   83[BANK1 ] int 
  3032 ;;  argv            3   85[BANK1 ] PTR PTR unsigned char 
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;		None
  3035 ;; Return value:  Size  Location     Type
  3036 ;;		None               void
  3037 ;; Registers used:
  3038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3044 ;;      Params:         0       0       5       0       0       0       0
  3045 ;;      Locals:         0       0       0       0       0       0       0
  3046 ;;      Temps:          0       0       0       0       0       0       0
  3047 ;;      Totals:         0       0       5       0       0       0       0
  3048 ;;Total ram usage:        5 bytes
  3049 ;; Hardware stack levels required when called:   11
  3050 ;; This function calls:
  3051 ;;		_ConfigADC
  3052 ;;		_Delay10KTCYx
  3053 ;;		_InitInterrupts
  3054 ;;		_InitTimer0
  3055 ;;		_InitUSART
  3056 ;;		_MessageRoutine
  3057 ;;		_PumpDetect
  3058 ;;		_ReadAndTime
  3059 ;;		_cmStuffsWrapperFun
  3060 ;;		_printf
  3061 ;; This function is called by:
  3062 ;;		Startup code after reset
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           	psect	text0
  3067  0022CA                     __ptext0:
  3068                           	opt stack 0
  3069  0022CA                     _main:
  3070                           	opt stack 20
  3071                           
  3072                           ;serialcomms.c: 60: TRISA=0xFC;
  3073                           
  3074                           ;incstack = 0
  3075  0022CA  0EFC               	movlw	252
  3076  0022CC  6E92               	movwf	3986,c	;volatile
  3077                           
  3078                           ;serialcomms.c: 61: TRISBbits.RB3=0;
  3079  0022CE  9693               	bcf	3987,3,c	;volatile
  3080                           
  3081                           ;serialcomms.c: 62: TRISBbits.RB4=0;
  3082  0022D0  9893               	bcf	3987,4,c	;volatile
  3083                           
  3084                           ;serialcomms.c: 63: TRISCbits.RC0=0;
  3085  0022D2  9094               	bcf	3988,0,c	;volatile
  3086                           
  3087                           ;serialcomms.c: 64: LATCbits.LATC0=0;
  3088  0022D4  908B               	bcf	3979,0,c	;volatile
  3089                           
  3090                           ;serialcomms.c: 65: LATBbits.LATB4=1;
  3091  0022D6  888A               	bsf	3978,4,c	;volatile
  3092                           
  3093                           ;serialcomms.c: 68: LATBbits.LATB3=1;
  3094  0022D8  868A               	bsf	3978,3,c	;volatile
  3095                           
  3096                           ;serialcomms.c: 70: InitUSART();
  3097  0022DA  EC1D  F022         	call	_InitUSART	;wreg free
  3098                           
  3099                           ;serialcomms.c: 71: InitInterrupts();
  3100  0022DE  EC70  F022         	call	_InitInterrupts	;wreg free
  3101                           
  3102                           ;serialcomms.c: 72: InitTimer0();
  3103  0022E2  EC96  F022         	call	_InitTimer0	;wreg free
  3104                           
  3105                           ;serialcomms.c: 73: ConfigADC();
  3106  0022E6  EC88  F022         	call	_ConfigADC	;wreg free
  3107                           
  3108                           ;serialcomms.c: 75: while(Pumping)
  3109  0022EA  D009               	goto	l6090
  3110  0022EC                     l6088:
  3111                           
  3112                           ;serialcomms.c: 76: {
  3113                           ;serialcomms.c: 77: ReadAndTime();
  3114  0022EC  EC61  F016         	call	_ReadAndTime	;wreg free
  3115                           
  3116                           ;serialcomms.c: 78: Pumping = PumpDetect();
  3117  0022F0  EC5A  F017         	call	_PumpDetect	;wreg free
  3118  0022F4  C0A3  F056         	movff	?_PumpDetect,_Pumping
  3119  0022F8  C0A4  F057         	movff	?_PumpDetect+1,_Pumping+1
  3120  0022FC  D000               	goto	l6090
  3121  0022FE                     l6090:
  3122  0022FE  5056               	movf	_Pumping,w,c
  3123  002300  1057               	iorwf	_Pumping+1,w,c
  3124  002302  A4D8               	btfss	status,2,c
  3125  002304  D7F3               	goto	l6088
  3126  002306                     l146:
  3127                           
  3128                           ;serialcomms.c: 85: {
  3129                           ;serialcomms.c: 86: if (LATBbits.LATB3==0 && minutes > 10)
  3130  002306  B68A               	btfsc	3978,3,c	;volatile
  3131  002308  D009               	goto	l6096
  3132  00230A  5037               	movf	_minutes+1,w,c
  3133  00230C  E104               	bnz	u7050
  3134  00230E  0E0B               	movlw	11
  3135  002310  5C36               	subwf	_minutes,w,c
  3136  002312  A0D8               	btfss	status,0,c
  3137  002314  D003               	goto	l6096
  3138  002316                     u7050:
  3139                           
  3140                           ;serialcomms.c: 87: {
  3141                           ;serialcomms.c: 88: LATBbits.LATB3=1;
  3142  002316  868A               	bsf	3978,3,c	;volatile
  3143                           
  3144                           ;serialcomms.c: 89: LATBbits.LATB4 = 0;
  3145  002318  988A               	bcf	3978,4,c	;volatile
  3146  00231A  D000               	goto	l6096
  3147  00231C                     l6096:
  3148                           
  3149                           ;serialcomms.c: 90: }
  3150                           ;serialcomms.c: 91: ReadAndTime();
  3151  00231C  EC61  F016         	call	_ReadAndTime	;wreg free
  3152                           
  3153                           ;serialcomms.c: 92: Pumping=PumpDetect();
  3154  002320  EC5A  F017         	call	_PumpDetect	;wreg free
  3155  002324  C0A3  F056         	movff	?_PumpDetect,_Pumping
  3156  002328  C0A4  F057         	movff	?_PumpDetect+1,_Pumping+1
  3157                           
  3158                           ;serialcomms.c: 93: if (Pumping)
  3159  00232C  5056               	movf	_Pumping,w,c
  3160  00232E  1057               	iorwf	_Pumping+1,w,c
  3161  002330  B4D8               	btfsc	status,2,c
  3162  002332  D13A               	goto	l6192
  3163                           
  3164                           ;serialcomms.c: 94: {
  3165                           ;serialcomms.c: 95: if (LATBbits.LATB3==1)
  3166  002334  A68A               	btfss	3978,3,c	;volatile
  3167  002336  D0B2               	goto	l6166
  3168                           
  3169                           ;serialcomms.c: 96: {
  3170                           ;serialcomms.c: 98: LATCbits.LATC0=1;
  3171  002338  808B               	bsf	3979,0,c	;volatile
  3172                           
  3173                           ;serialcomms.c: 100: Delay10KTCYx(200);
  3174  00233A  0EC8               	movlw	200
  3175  00233C  EC2D  F022         	call	_Delay10KTCYx
  3176                           
  3177                           ;serialcomms.c: 101: Delay10KTCYx(200);
  3178  002340  0EC8               	movlw	200
  3179  002342  EC2D  F022         	call	_Delay10KTCYx
  3180                           
  3181                           ;serialcomms.c: 102: Delay10KTCYx(200);
  3182  002346  0EC8               	movlw	200
  3183  002348  EC2D  F022         	call	_Delay10KTCYx
  3184                           
  3185                           ;serialcomms.c: 108: if(DayCount<10)
  3186  00234C  BE2B               	btfsc	_DayCount+1,7,c
  3187  00234E  D006               	goto	l6108
  3188  002350  502B               	movf	_DayCount+1,w,c
  3189  002352  E134               	bnz	l6126
  3190  002354  0E0A               	movlw	10
  3191  002356  5C2A               	subwf	_DayCount,w,c
  3192  002358  B0D8               	btfsc	status,0,c
  3193  00235A  D030               	goto	l6126
  3194  00235C                     l6108:
  3195                           
  3196                           ;serialcomms.c: 109: {
  3197                           ;serialcomms.c: 111: if (NewDay)
  3198  00235C  5050               	movf	_NewDay,w,c
  3199  00235E  1051               	iorwf	_NewDay+1,w,c
  3200  002360  B4D8               	btfsc	status,2,c
  3201  002362  D019               	goto	l6120
  3202                           
  3203                           ;serialcomms.c: 112: {
  3204                           ;serialcomms.c: 113: DayCount++;
  3205  002364  4A2A               	infsnz	_DayCount,f,c
  3206  002366  2A2B               	incf	_DayCount+1,f,c
  3207                           
  3208                           ;serialcomms.c: 114: NewDay=0;
  3209  002368  0E00               	movlw	0
  3210  00236A  6E51               	movwf	_NewDay+1,c
  3211  00236C  0E00               	movlw	0
  3212  00236E  6E50               	movwf	_NewDay,c
  3213                           
  3214                           ;serialcomms.c: 115: printf("new FILE%1i.txt\r\n",DayCount);
  3215  002370  0E1E               	movlw	low STR_1
  3216  002372  0100               	movlb	0	; () banked
  3217  002374  6FAB               	movwf	printf@f& (0+255),b
  3218  002376  0E7F               	movlw	high STR_1
  3219  002378  0100               	movlb	0	; () banked
  3220  00237A  6FAC               	movwf	(printf@f+1)& (0+255),b
  3221  00237C  C02A  F0AD         	movff	_DayCount,?_printf+2
  3222  002380  C02B  F0AE         	movff	_DayCount+1,?_printf+3
  3223  002384  ECFA  F009         	call	_printf	;wreg free
  3224                           
  3225                           ;serialcomms.c: 116: Delay10KTCYx(200);
  3226  002388  0EC8               	movlw	200
  3227  00238A  EC2D  F022         	call	_Delay10KTCYx
  3228                           
  3229                           ;serialcomms.c: 117: Delay10KTCYx(200);
  3230  00238E  0EC8               	movlw	200
  3231  002390  EC2D  F022         	call	_Delay10KTCYx
  3232  002394  D000               	goto	l6120
  3233  002396                     l6120:
  3234                           
  3235                           ;serialcomms.c: 118: }
  3236                           ;serialcomms.c: 120: printf("append FILE%1i.txt\r\n",DayCount);
  3237  002396  0E58               	movlw	low STR_2
  3238  002398  0100               	movlb	0	; () banked
  3239  00239A  6FAB               	movwf	printf@f& (0+255),b
  3240  00239C  0E7E               	movlw	high STR_2
  3241  00239E  0100               	movlb	0	; () banked
  3242  0023A0  6FAC               	movwf	(printf@f+1)& (0+255),b
  3243  0023A2  C02A  F0AD         	movff	_DayCount,?_printf+2
  3244  0023A6  C02B  F0AE         	movff	_DayCount+1,?_printf+3
  3245  0023AA  ECFA  F009         	call	_printf	;wreg free
  3246                           
  3247                           ;serialcomms.c: 121: Delay10KTCYx(200);
  3248  0023AE  0EC8               	movlw	200
  3249  0023B0  EC2D  F022         	call	_Delay10KTCYx
  3250                           
  3251                           ;serialcomms.c: 122: Delay10KTCYx(200);
  3252  0023B4  0EC8               	movlw	200
  3253  0023B6  EC2D  F022         	call	_Delay10KTCYx
  3254                           
  3255                           ;serialcomms.c: 123: }
  3256  0023BA  D070               	goto	l6166
  3257  0023BC                     l6126:
  3258                           
  3259                           ;serialcomms.c: 124: else if (DayCount<100)
  3260  0023BC  BE2B               	btfsc	_DayCount+1,7,c
  3261  0023BE  D006               	goto	l6128
  3262  0023C0  502B               	movf	_DayCount+1,w,c
  3263  0023C2  E134               	bnz	l6146
  3264  0023C4  0E64               	movlw	100
  3265  0023C6  5C2A               	subwf	_DayCount,w,c
  3266  0023C8  B0D8               	btfsc	status,0,c
  3267  0023CA  D030               	goto	l6146
  3268  0023CC                     l6128:
  3269                           
  3270                           ;serialcomms.c: 125: {
  3271                           ;serialcomms.c: 127: if (NewDay)
  3272  0023CC  5050               	movf	_NewDay,w,c
  3273  0023CE  1051               	iorwf	_NewDay+1,w,c
  3274  0023D0  B4D8               	btfsc	status,2,c
  3275  0023D2  D019               	goto	l6140
  3276                           
  3277                           ;serialcomms.c: 128: {
  3278                           ;serialcomms.c: 129: DayCount++;
  3279  0023D4  4A2A               	infsnz	_DayCount,f,c
  3280  0023D6  2A2B               	incf	_DayCount+1,f,c
  3281                           
  3282                           ;serialcomms.c: 130: NewDay=0;
  3283  0023D8  0E00               	movlw	0
  3284  0023DA  6E51               	movwf	_NewDay+1,c
  3285  0023DC  0E00               	movlw	0
  3286  0023DE  6E50               	movwf	_NewDay,c
  3287                           
  3288                           ;serialcomms.c: 131: printf("new FILE%2i.txt\r\n",DayCount);
  3289  0023E0  0E30               	movlw	low STR_3
  3290  0023E2  0100               	movlb	0	; () banked
  3291  0023E4  6FAB               	movwf	printf@f& (0+255),b
  3292  0023E6  0E7F               	movlw	high STR_3
  3293  0023E8  0100               	movlb	0	; () banked
  3294  0023EA  6FAC               	movwf	(printf@f+1)& (0+255),b
  3295  0023EC  C02A  F0AD         	movff	_DayCount,?_printf+2
  3296  0023F0  C02B  F0AE         	movff	_DayCount+1,?_printf+3
  3297  0023F4  ECFA  F009         	call	_printf	;wreg free
  3298                           
  3299                           ;serialcomms.c: 132: Delay10KTCYx(200);
  3300  0023F8  0EC8               	movlw	200
  3301  0023FA  EC2D  F022         	call	_Delay10KTCYx
  3302                           
  3303                           ;serialcomms.c: 133: Delay10KTCYx(200);
  3304  0023FE  0EC8               	movlw	200
  3305  002400  EC2D  F022         	call	_Delay10KTCYx
  3306  002404  D000               	goto	l6140
  3307  002406                     l6140:
  3308                           
  3309                           ;serialcomms.c: 134: }
  3310                           ;serialcomms.c: 136: printf("append FILE%2i.txt\r\n",DayCount);
  3311  002406  0E6D               	movlw	low STR_4
  3312  002408  0100               	movlb	0	; () banked
  3313  00240A  6FAB               	movwf	printf@f& (0+255),b
  3314  00240C  0E7E               	movlw	high STR_4
  3315  00240E  0100               	movlb	0	; () banked
  3316  002410  6FAC               	movwf	(printf@f+1)& (0+255),b
  3317  002412  C02A  F0AD         	movff	_DayCount,?_printf+2
  3318  002416  C02B  F0AE         	movff	_DayCount+1,?_printf+3
  3319  00241A  ECFA  F009         	call	_printf	;wreg free
  3320                           
  3321                           ;serialcomms.c: 137: Delay10KTCYx(200);
  3322  00241E  0EC8               	movlw	200
  3323  002420  EC2D  F022         	call	_Delay10KTCYx
  3324                           
  3325                           ;serialcomms.c: 138: Delay10KTCYx(200);
  3326  002424  0EC8               	movlw	200
  3327  002426  EC2D  F022         	call	_Delay10KTCYx
  3328                           
  3329                           ;serialcomms.c: 139: }
  3330  00242A  D038               	goto	l6166
  3331  00242C                     l6146:
  3332                           
  3333                           ;serialcomms.c: 140: else if (DayCount<1000)
  3334  00242C  BE2B               	btfsc	_DayCount+1,7,c
  3335  00242E  D006               	goto	l6148
  3336  002430  0EE8               	movlw	232
  3337  002432  5C2A               	subwf	_DayCount,w,c
  3338  002434  0E03               	movlw	3
  3339  002436  582B               	subwfb	_DayCount+1,w,c
  3340  002438  B0D8               	btfsc	status,0,c
  3341  00243A  D030               	goto	l6166
  3342  00243C                     l6148:
  3343                           
  3344                           ;serialcomms.c: 141: {
  3345                           ;serialcomms.c: 143: if (NewDay)
  3346  00243C  5050               	movf	_NewDay,w,c
  3347  00243E  1051               	iorwf	_NewDay+1,w,c
  3348  002440  B4D8               	btfsc	status,2,c
  3349  002442  D019               	goto	l6160
  3350                           
  3351                           ;serialcomms.c: 144: {
  3352                           ;serialcomms.c: 145: DayCount++;
  3353  002444  4A2A               	infsnz	_DayCount,f,c
  3354  002446  2A2B               	incf	_DayCount+1,f,c
  3355                           
  3356                           ;serialcomms.c: 146: NewDay=0;
  3357  002448  0E00               	movlw	0
  3358  00244A  6E51               	movwf	_NewDay+1,c
  3359  00244C  0E00               	movlw	0
  3360  00244E  6E50               	movwf	_NewDay,c
  3361                           
  3362                           ;serialcomms.c: 147: printf("new FILE%3i.txt\r\n",DayCount);
  3363  002450  0E42               	movlw	low STR_5
  3364  002452  0100               	movlb	0	; () banked
  3365  002454  6FAB               	movwf	printf@f& (0+255),b
  3366  002456  0E7F               	movlw	high STR_5
  3367  002458  0100               	movlb	0	; () banked
  3368  00245A  6FAC               	movwf	(printf@f+1)& (0+255),b
  3369  00245C  C02A  F0AD         	movff	_DayCount,?_printf+2
  3370  002460  C02B  F0AE         	movff	_DayCount+1,?_printf+3
  3371  002464  ECFA  F009         	call	_printf	;wreg free
  3372                           
  3373                           ;serialcomms.c: 148: Delay10KTCYx(200);
  3374  002468  0EC8               	movlw	200
  3375  00246A  EC2D  F022         	call	_Delay10KTCYx
  3376                           
  3377                           ;serialcomms.c: 149: Delay10KTCYx(200);
  3378  00246E  0EC8               	movlw	200
  3379  002470  EC2D  F022         	call	_Delay10KTCYx
  3380  002474  D000               	goto	l6160
  3381  002476                     l6160:
  3382                           
  3383                           ;serialcomms.c: 150: }
  3384                           ;serialcomms.c: 152: printf("append FILE%3i.txt\r\n",DayCount);
  3385  002476  0E82               	movlw	low STR_6
  3386  002478  0100               	movlb	0	; () banked
  3387  00247A  6FAB               	movwf	printf@f& (0+255),b
  3388  00247C  0E7E               	movlw	high STR_6
  3389  00247E  0100               	movlb	0	; () banked
  3390  002480  6FAC               	movwf	(printf@f+1)& (0+255),b
  3391  002482  C02A  F0AD         	movff	_DayCount,?_printf+2
  3392  002486  C02B  F0AE         	movff	_DayCount+1,?_printf+3
  3393  00248A  ECFA  F009         	call	_printf	;wreg free
  3394                           
  3395                           ;serialcomms.c: 153: Delay10KTCYx(200);
  3396  00248E  0EC8               	movlw	200
  3397  002490  EC2D  F022         	call	_Delay10KTCYx
  3398                           
  3399                           ;serialcomms.c: 154: Delay10KTCYx(200);
  3400  002494  0EC8               	movlw	200
  3401  002496  EC2D  F022         	call	_Delay10KTCYx
  3402  00249A  D000               	goto	l6166
  3403  00249C                     l6166:
  3404                           
  3405                           ;serialcomms.c: 155: }
  3406                           ;serialcomms.c: 156: }
  3407                           ;serialcomms.c: 159: printf("\r\r\nLog started!\r\n");
  3408  00249C  0E0C               	movlw	low STR_7
  3409  00249E  0100               	movlb	0	; () banked
  3410  0024A0  6FAB               	movwf	printf@f& (0+255),b
  3411  0024A2  0E7F               	movlw	high STR_7
  3412  0024A4  0100               	movlb	0	; () banked
  3413  0024A6  6FAC               	movwf	(printf@f+1)& (0+255),b
  3414  0024A8  ECFA  F009         	call	_printf	;wreg free
  3415                           
  3416                           ;serialcomms.c: 160: printf("%2i:%2i:%2i\r\n",hours,minutes,seconds);
  3417  0024AC  0EB1               	movlw	low (STR_38+6)
  3418  0024AE  0100               	movlb	0	; () banked
  3419  0024B0  6FAB               	movwf	printf@f& (0+255),b
  3420  0024B2  0E7E               	movlw	high (STR_38+6)
  3421  0024B4  0100               	movlb	0	; () banked
  3422  0024B6  6FAC               	movwf	(printf@f+1)& (0+255),b
  3423  0024B8  C032  F0AD         	movff	_hours,?_printf+2
  3424  0024BC  C033  F0AE         	movff	_hours+1,?_printf+3
  3425  0024C0  C036  F0AF         	movff	_minutes,?_printf+4
  3426  0024C4  C037  F0B0         	movff	_minutes+1,?_printf+5
  3427  0024C8  C038  F0B1         	movff	_seconds,?_printf+6
  3428  0024CC  C039  F0B2         	movff	_seconds+1,?_printf+7
  3429  0024D0  ECFA  F009         	call	_printf	;wreg free
  3430                           
  3431                           ;serialcomms.c: 161: printf("%2i/%2i/%4i\r\n\n",day,month,year);
  3432  0024D4  0E77               	movlw	low STR_9
  3433  0024D6  0100               	movlb	0	; () banked
  3434  0024D8  6FAB               	movwf	printf@f& (0+255),b
  3435  0024DA  0E7F               	movlw	high STR_9
  3436  0024DC  0100               	movlb	0	; () banked
  3437  0024DE  6FAC               	movwf	(printf@f+1)& (0+255),b
  3438  0024E0  C0DF  F0AD         	movff	_day,?_printf+2
  3439  0024E4  C0E0  F0AE         	movff	_day+1,?_printf+3
  3440  0024E8  C058  F0AF         	movff	_month,?_printf+4
  3441  0024EC  C059  F0B0         	movff	_month+1,?_printf+5
  3442  0024F0  C05E  F0B1         	movff	_year,?_printf+6
  3443  0024F4  C05F  F0B2         	movff	_year+1,?_printf+7
  3444  0024F8  ECFA  F009         	call	_printf	;wreg free
  3445                           
  3446                           ;serialcomms.c: 163: while (Pumping)
  3447  0024FC  D00B               	goto	l6178
  3448  0024FE                     l6172:
  3449                           
  3450                           ;serialcomms.c: 164: {
  3451                           ;serialcomms.c: 166: ReadAndTime();
  3452  0024FE  EC61  F016         	call	_ReadAndTime	;wreg free
  3453                           
  3454                           ;serialcomms.c: 177: cmStuffsWrapperFun();
  3455  002502  ECAD  F00F         	call	_cmStuffsWrapperFun	;wreg free
  3456                           
  3457                           ;serialcomms.c: 180: Pumping=PumpDetect();
  3458  002506  EC5A  F017         	call	_PumpDetect	;wreg free
  3459  00250A  C0A3  F056         	movff	?_PumpDetect,_Pumping
  3460  00250E  C0A4  F057         	movff	?_PumpDetect+1,_Pumping+1
  3461  002512  D000               	goto	l6178
  3462  002514                     l6178:
  3463  002514  5056               	movf	_Pumping,w,c
  3464  002516  1057               	iorwf	_Pumping+1,w,c
  3465  002518  A4D8               	btfss	status,2,c
  3466  00251A  D7F1               	goto	l6172
  3467                           
  3468                           ;serialcomms.c: 181: }
  3469                           ;serialcomms.c: 183: printf("Pumping Stopped.\r\n");
  3470  00251C  0ED3               	movlw	low STR_10
  3471  00251E  0100               	movlb	0	; () banked
  3472  002520  6FAB               	movwf	printf@f& (0+255),b
  3473  002522  0E7E               	movlw	high STR_10
  3474  002524  0100               	movlb	0	; () banked
  3475  002526  6FAC               	movwf	(printf@f+1)& (0+255),b
  3476  002528  ECFA  F009         	call	_printf	;wreg free
  3477                           
  3478                           ;serialcomms.c: 184: printf("%2i:%2i:%2i\r\n",hours,minutes,seconds);
  3479  00252C  0EB1               	movlw	low (STR_38+6)
  3480  00252E  0100               	movlb	0	; () banked
  3481  002530  6FAB               	movwf	printf@f& (0+255),b
  3482  002532  0E7E               	movlw	high (STR_38+6)
  3483  002534  0100               	movlb	0	; () banked
  3484  002536  6FAC               	movwf	(printf@f+1)& (0+255),b
  3485  002538  C032  F0AD         	movff	_hours,?_printf+2
  3486  00253C  C033  F0AE         	movff	_hours+1,?_printf+3
  3487  002540  C036  F0AF         	movff	_minutes,?_printf+4
  3488  002544  C037  F0B0         	movff	_minutes+1,?_printf+5
  3489  002548  C038  F0B1         	movff	_seconds,?_printf+6
  3490  00254C  C039  F0B2         	movff	_seconds+1,?_printf+7
  3491  002550  ECFA  F009         	call	_printf	;wreg free
  3492                           
  3493                           ;serialcomms.c: 185: printf("%2i/%2i/%4i\r\n\n",day,month,year);
  3494  002554  0E77               	movlw	low STR_9
  3495  002556  0100               	movlb	0	; () banked
  3496  002558  6FAB               	movwf	printf@f& (0+255),b
  3497  00255A  0E7F               	movlw	high STR_9
  3498  00255C  0100               	movlb	0	; () banked
  3499  00255E  6FAC               	movwf	(printf@f+1)& (0+255),b
  3500  002560  C0DF  F0AD         	movff	_day,?_printf+2
  3501  002564  C0E0  F0AE         	movff	_day+1,?_printf+3
  3502  002568  C058  F0AF         	movff	_month,?_printf+4
  3503  00256C  C059  F0B0         	movff	_month+1,?_printf+5
  3504  002570  C05E  F0B1         	movff	_year,?_printf+6
  3505  002574  C05F  F0B2         	movff	_year+1,?_printf+7
  3506  002578  ECFA  F009         	call	_printf	;wreg free
  3507                           
  3508                           ;serialcomms.c: 186: printf("~~~");
  3509  00257C  0EFA               	movlw	low STR_13
  3510  00257E  0100               	movlb	0	; () banked
  3511  002580  6FAB               	movwf	printf@f& (0+255),b
  3512  002582  0E7F               	movlw	high STR_13
  3513  002584  0100               	movlb	0	; () banked
  3514  002586  6FAC               	movwf	(printf@f+1)& (0+255),b
  3515  002588  ECFA  F009         	call	_printf	;wreg free
  3516                           
  3517                           ;serialcomms.c: 187: Delay10KTCYx(200);
  3518  00258C  0EC8               	movlw	200
  3519  00258E  EC2D  F022         	call	_Delay10KTCYx
  3520                           
  3521                           ;serialcomms.c: 188: Delay10KTCYx(200);
  3522  002592  0EC8               	movlw	200
  3523  002594  EC2D  F022         	call	_Delay10KTCYx
  3524                           
  3525                           ;serialcomms.c: 189: LATCbits.LATC0=0;
  3526  002598  908B               	bcf	3979,0,c	;volatile
  3527                           
  3528                           ;serialcomms.c: 190: Delay10KTCYx(200);
  3529  00259A  0EC8               	movlw	200
  3530  00259C  EC2D  F022         	call	_Delay10KTCYx
  3531                           
  3532                           ;serialcomms.c: 191: Delay10KTCYx(200);
  3533  0025A0  0EC8               	movlw	200
  3534  0025A2  EC2D  F022         	call	_Delay10KTCYx
  3535  0025A6  D000               	goto	l6192
  3536  0025A8                     l6192:
  3537                           
  3538                           ;serialcomms.c: 192: }
  3539                           ;serialcomms.c: 195: if (NewMessage==1)
  3540  0025A8  0100               	movlb	0	; () banked
  3541  0025AA  05DD               	decf	_NewMessage& (0+255),w,b
  3542  0025AC  0100               	movlb	0	; () banked
  3543  0025AE  11DE               	iorwf	(_NewMessage+1)& (0+255),w,b
  3544  0025B0  A4D8               	btfss	status,2,c
  3545  0025B2  D6A9               	goto	l146
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;serialcomms.c: 196: {
  3549                           ;serialcomms.c: 197: MessageRoutine();
  3550  0025B4  ECE5  F005         	call	_MessageRoutine	;wreg free
  3551  0025B8  D6A6               	goto	l146
  3552  0025BA  EFC4  F000         	goto	start
  3553  0025BE                     __end_of_main:
  3554                           	opt stack 0
  3555                           tblptru	equ	0xFF8
  3556                           tblptrh	equ	0xFF7
  3557                           tblptrl	equ	0xFF6
  3558                           tablat	equ	0xFF5
  3559                           postinc0	equ	0xFEE
  3560                           wreg	equ	0xFE8
  3561                           postdec1	equ	0xFE5
  3562                           fsr1h	equ	0xFE2
  3563                           fsr1l	equ	0xFE1
  3564                           status	equ	0xFD8
  3565                           
  3566 ;; *************** function _cmStuffsWrapperFun *****************
  3567 ;; Defined at:
  3568 ;;		line 202 in file "serialcomms.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;		None
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;  iW              2   79[BANK1 ] int 
  3573 ;;  iTemp           2   73[BANK1 ] int 
  3574 ;;  iTemp           2   77[BANK1 ] int 
  3575 ;;  iTemp           2   75[BANK1 ] int 
  3576 ;;  iTemp           2   81[BANK1 ] int 
  3577 ;; Return value:  Size  Location     Type
  3578 ;;		None               void
  3579 ;; Registers used:
  3580 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3586 ;;      Params:         0       0       0       0       0       0       0
  3587 ;;      Locals:         0       0      10       0       0       0       0
  3588 ;;      Temps:          0       0       0       0       0       0       0
  3589 ;;      Totals:         0       0      10       0       0       0       0
  3590 ;;Total ram usage:       10 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:   10
  3593 ;; This function calls:
  3594 ;;		___wmul
  3595 ;;		_cmFftFun
  3596 ;;		_cmFilterHighPassUsingLowPass
  3597 ;;		_printf
  3598 ;; This function is called by:
  3599 ;;		_main
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           	psect	text1
  3604  001F5A                     __ptext1:
  3605                           	opt stack 0
  3606  001F5A                     _cmStuffsWrapperFun:
  3607                           	opt stack 20
  3608                           
  3609                           ;serialcomms.c: 204: if (cmWinLen<128)
  3610                           
  3611                           ;incstack = 0
  3612  001F5A  BE2D               	btfsc	_cmWinLen+1,7,c
  3613  001F5C  D006               	goto	l5786
  3614  001F5E  502D               	movf	_cmWinLen+1,w,c
  3615  001F60  E130               	bnz	l5792
  3616  001F62  0E80               	movlw	128
  3617  001F64  5C2C               	subwf	_cmWinLen,w,c
  3618  001F66  B0D8               	btfsc	status,0,c
  3619  001F68  D02C               	goto	l5792
  3620  001F6A                     l5786:
  3621                           
  3622                           ;serialcomms.c: 205: {
  3623                           ;serialcomms.c: 207: printf("%6i,%6i,%6i,%5u\r\n", x, y, z,tt);
  3624  001F6A  0E54               	movlw	low STR_14
  3625  001F6C  0100               	movlb	0	; () banked
  3626  001F6E  6FAB               	movwf	printf@f& (0+255),b
  3627  001F70  0E7F               	movlw	high STR_14
  3628  001F72  0100               	movlb	0	; () banked
  3629  001F74  6FAC               	movwf	(printf@f+1)& (0+255),b
  3630  001F76  C040  F0AD         	movff	_x,?_printf+2
  3631  001F7A  C041  F0AE         	movff	_x+1,?_printf+3
  3632  001F7E  C042  F0AF         	movff	_y,?_printf+4
  3633  001F82  C043  F0B0         	movff	_y+1,?_printf+5
  3634  001F86  C044  F0B1         	movff	_z,?_printf+6
  3635  001F8A  C045  F0B2         	movff	_z+1,?_printf+7
  3636  001F8E  C03E  F0B3         	movff	_tt,?_printf+8
  3637  001F92  C03F  F0B4         	movff	_tt+1,?_printf+9
  3638  001F96  ECFA  F009         	call	_printf	;wreg free
  3639                           
  3640                           ;serialcomms.c: 209: cmYreal[cmWinLen] = y;
  3641  001F9A  90D8               	bcf	status,0,c
  3642  001F9C  342C               	rlcf	_cmWinLen,w,c
  3643  001F9E  6ED9               	movwf	fsr2l,c
  3644  001FA0  342D               	rlcf	_cmWinLen+1,w,c
  3645  001FA2  6EDA               	movwf	fsr2h,c
  3646  001FA4  0E00               	movlw	low _cmYreal
  3647  001FA6  26D9               	addwf	fsr2l,f,c
  3648  001FA8  0E02               	movlw	high _cmYreal
  3649  001FAA  22DA               	addwfc	fsr2h,f,c
  3650  001FAC  C042  FFDE         	movff	_y,postinc2
  3651  001FB0  C043  FFDD         	movff	_y+1,postdec2
  3652                           
  3653                           ;serialcomms.c: 210: cmWinLen = cmWinLen+1;
  3654  001FB4  0E01               	movlw	1
  3655  001FB6  242C               	addwf	_cmWinLen,w,c
  3656  001FB8  6E2C               	movwf	_cmWinLen,c
  3657  001FBA  0E00               	movlw	0
  3658  001FBC  202D               	addwfc	_cmWinLen+1,w,c
  3659  001FBE  6E2D               	movwf	_cmWinLen+1,c
  3660                           
  3661                           ;serialcomms.c: 211: }
  3662  001FC0  D183               	goto	l177
  3663  001FC2                     l5792:
  3664                           
  3665                           ;serialcomms.c: 212: else
  3666                           ;serialcomms.c: 213: {
  3667                           ;serialcomms.c: 216: printf("Performing on-pump CM...\n");
  3668  001FC2  0EFC               	movlw	low STR_15
  3669  001FC4  0100               	movlb	0	; () banked
  3670  001FC6  6FAB               	movwf	printf@f& (0+255),b
  3671  001FC8  0E7D               	movlw	high STR_15
  3672  001FCA  0100               	movlb	0	; () banked
  3673  001FCC  6FAC               	movwf	(printf@f+1)& (0+255),b
  3674  001FCE  ECFA  F009         	call	_printf	;wreg free
  3675                           
  3676                           ;serialcomms.c: 219: printf("Input signal...\n");
  3677  001FD2  0E66               	movlw	low STR_16
  3678  001FD4  0100               	movlb	0	; () banked
  3679  001FD6  6FAB               	movwf	printf@f& (0+255),b
  3680  001FD8  0E7F               	movlw	high STR_16
  3681  001FDA  0100               	movlb	0	; () banked
  3682  001FDC  6FAC               	movwf	(printf@f+1)& (0+255),b
  3683  001FDE  ECFA  F009         	call	_printf	;wreg free
  3684                           
  3685                           ;serialcomms.c: 220: for (int iTemp=0;iTemp<128;iTemp++){
  3686  001FE2  0E00               	movlw	0
  3687  001FE4  0101               	movlb	1	; () banked
  3688  001FE6  6F52               	movwf	(cmStuffsWrapperFun@iTemp+1)& (0+255),b
  3689  001FE8  0E00               	movlw	0
  3690  001FEA  6F51               	movwf	cmStuffsWrapperFun@iTemp& (0+255),b
  3691  001FEC                     l5796:
  3692                           
  3693                           ; BSR set to: 1
  3694  001FEC  0101               	movlb	1	; () banked
  3695  001FEE  BF52               	btfsc	(cmStuffsWrapperFun@iTemp+1)& (0+255),7,b
  3696  001FF0  D00A               	goto	l5800
  3697  001FF2  0101               	movlb	1	; () banked
  3698  001FF4  5152               	movf	(cmStuffsWrapperFun@iTemp+1)& (0+255),w,b
  3699  001FF6  E136               	bnz	l5806
  3700  001FF8  0E80               	movlw	128
  3701  001FFA  0101               	movlb	1	; () banked
  3702  001FFC  5D51               	subwf	cmStuffsWrapperFun@iTemp& (0+255),w,b
  3703  001FFE  B0D8               	btfsc	status,0,c
  3704  002000  D031               	goto	l5806
  3705  002002  D001               	goto	l5800
  3706                           
  3707                           ; BSR set to: 1
  3708  002004  D02F               	goto	l5806
  3709  002006                     l5800:
  3710                           
  3711                           ; BSR set to: 1
  3712                           ;serialcomms.c: 221: printf("\t%i %6i %6i\n",iTemp,cmYreal[iTemp],cmYimag[iTemp]);
  3713  002006  0E94               	movlw	low STR_17
  3714  002008  0100               	movlb	0	; () banked
  3715  00200A  6FAB               	movwf	printf@f& (0+255),b
  3716  00200C  0E7F               	movlw	high STR_17
  3717  00200E  0100               	movlb	0	; () banked
  3718  002010  6FAC               	movwf	(printf@f+1)& (0+255),b
  3719  002012  C151  F0AD         	movff	cmStuffsWrapperFun@iTemp,?_printf+2
  3720  002016  C152  F0AE         	movff	cmStuffsWrapperFun@iTemp+1,?_printf+3
  3721  00201A  90D8               	bcf	status,0,c
  3722  00201C  0101               	movlb	1	; () banked
  3723  00201E  3551               	rlcf	cmStuffsWrapperFun@iTemp& (0+255),w,b
  3724  002020  6ED9               	movwf	fsr2l,c
  3725  002022  0101               	movlb	1	; () banked
  3726  002024  3552               	rlcf	(cmStuffsWrapperFun@iTemp+1)& (0+255),w,b
  3727  002026  6EDA               	movwf	fsr2h,c
  3728  002028  0E00               	movlw	low _cmYreal
  3729  00202A  26D9               	addwf	fsr2l,f,c
  3730  00202C  0E02               	movlw	high _cmYreal
  3731  00202E  22DA               	addwfc	fsr2h,f,c
  3732  002030  CFDE F0AF          	movff	postinc2,?_printf+4
  3733  002034  CFDD F0B0          	movff	postdec2,?_printf+5
  3734  002038  90D8               	bcf	status,0,c
  3735  00203A  0101               	movlb	1	; () banked
  3736  00203C  3551               	rlcf	cmStuffsWrapperFun@iTemp& (0+255),w,b
  3737  00203E  6ED9               	movwf	fsr2l,c
  3738  002040  0101               	movlb	1	; () banked
  3739  002042  3552               	rlcf	(cmStuffsWrapperFun@iTemp+1)& (0+255),w,b
  3740  002044  6EDA               	movwf	fsr2h,c
  3741  002046  0E00               	movlw	low _cmYimag
  3742  002048  26D9               	addwf	fsr2l,f,c
  3743  00204A  0E03               	movlw	high _cmYimag
  3744  00204C  22DA               	addwfc	fsr2h,f,c
  3745  00204E  CFDE F0B1          	movff	postinc2,?_printf+6
  3746  002052  CFDD F0B2          	movff	postdec2,?_printf+7
  3747  002056  ECFA  F009         	call	_printf	;wreg free
  3748  00205A  0101               	movlb	1	; () banked
  3749  00205C  4B51               	infsnz	cmStuffsWrapperFun@iTemp& (0+255),f,b
  3750  00205E  2B52               	incf	(cmStuffsWrapperFun@iTemp+1)& (0+255),f,b
  3751  002060  D7C5               	goto	l5796
  3752                           
  3753                           ; BSR set to: 1
  3754  002062  D000               	goto	l5806
  3755  002064                     l5806:
  3756                           
  3757                           ; BSR set to: 1
  3758                           ;serialcomms.c: 222: }
  3759                           ;serialcomms.c: 226: printf("\tComputing HPF...\n");
  3760  002064  0EE6               	movlw	low STR_18
  3761  002066  0100               	movlb	0	; () banked
  3762  002068  6FAB               	movwf	printf@f& (0+255),b
  3763  00206A  0E7E               	movlw	high STR_18
  3764  00206C  0100               	movlb	0	; () banked
  3765  00206E  6FAC               	movwf	(printf@f+1)& (0+255),b
  3766  002070  ECFA  F009         	call	_printf	;wreg free
  3767                           
  3768                           ;serialcomms.c: 227: cmFilterHighPassUsingLowPass();
  3769  002074  ECD7  F00D         	call	_cmFilterHighPassUsingLowPass	;wreg free
  3770                           
  3771                           ;serialcomms.c: 229: for (int iTemp=0;iTemp<128;iTemp++){
  3772  002078  0E00               	movlw	0
  3773  00207A  0101               	movlb	1	; () banked
  3774  00207C  6F4C               	movwf	(cmStuffsWrapperFun@iTemp_420+1)& (0+255),b
  3775  00207E  0E00               	movlw	0
  3776  002080  6F4B               	movwf	cmStuffsWrapperFun@iTemp_420& (0+255),b
  3777  002082                     l5812:
  3778                           
  3779                           ; BSR set to: 1
  3780  002082  0101               	movlb	1	; () banked
  3781  002084  BF4C               	btfsc	(cmStuffsWrapperFun@iTemp_420+1)& (0+255),7,b
  3782  002086  D00A               	goto	l5816
  3783  002088  0101               	movlb	1	; () banked
  3784  00208A  514C               	movf	(cmStuffsWrapperFun@iTemp_420+1)& (0+255),w,b
  3785  00208C  E127               	bnz	l5822
  3786  00208E  0E80               	movlw	128
  3787  002090  0101               	movlb	1	; () banked
  3788  002092  5D4B               	subwf	cmStuffsWrapperFun@iTemp_420& (0+255),w,b
  3789  002094  B0D8               	btfsc	status,0,c
  3790  002096  D022               	goto	l5822
  3791  002098  D001               	goto	l5816
  3792                           
  3793                           ; BSR set to: 1
  3794  00209A  D020               	goto	l5822
  3795  00209C                     l5816:
  3796                           
  3797                           ; BSR set to: 1
  3798                           ;serialcomms.c: 230: printf("\t%i %6i\n",iTemp,cmYreal[iTemp]);
  3799  00209C  0ED9               	movlw	low STR_19
  3800  00209E  0100               	movlb	0	; () banked
  3801  0020A0  6FAB               	movwf	printf@f& (0+255),b
  3802  0020A2  0E7F               	movlw	high STR_19
  3803  0020A4  0100               	movlb	0	; () banked
  3804  0020A6  6FAC               	movwf	(printf@f+1)& (0+255),b
  3805  0020A8  C14B  F0AD         	movff	cmStuffsWrapperFun@iTemp_420,?_printf+2
  3806  0020AC  C14C  F0AE         	movff	cmStuffsWrapperFun@iTemp_420+1,?_printf+3
  3807  0020B0  90D8               	bcf	status,0,c
  3808  0020B2  0101               	movlb	1	; () banked
  3809  0020B4  354B               	rlcf	cmStuffsWrapperFun@iTemp_420& (0+255),w,b
  3810  0020B6  6ED9               	movwf	fsr2l,c
  3811  0020B8  0101               	movlb	1	; () banked
  3812  0020BA  354C               	rlcf	(cmStuffsWrapperFun@iTemp_420+1)& (0+255),w,b
  3813  0020BC  6EDA               	movwf	fsr2h,c
  3814  0020BE  0E00               	movlw	low _cmYreal
  3815  0020C0  26D9               	addwf	fsr2l,f,c
  3816  0020C2  0E02               	movlw	high _cmYreal
  3817  0020C4  22DA               	addwfc	fsr2h,f,c
  3818  0020C6  CFDE F0AF          	movff	postinc2,?_printf+4
  3819  0020CA  CFDD F0B0          	movff	postdec2,?_printf+5
  3820  0020CE  ECFA  F009         	call	_printf	;wreg free
  3821  0020D2  0101               	movlb	1	; () banked
  3822  0020D4  4B4B               	infsnz	cmStuffsWrapperFun@iTemp_420& (0+255),f,b
  3823  0020D6  2B4C               	incf	(cmStuffsWrapperFun@iTemp_420+1)& (0+255),f,b
  3824  0020D8  D7D4               	goto	l5812
  3825                           
  3826                           ; BSR set to: 1
  3827  0020DA  D000               	goto	l5822
  3828  0020DC                     l5822:
  3829                           
  3830                           ; BSR set to: 1
  3831                           ;serialcomms.c: 231: }
  3832                           ;serialcomms.c: 235: printf("\tComputing FFT...\n");
  3833  0020DC  0EF9               	movlw	low STR_20
  3834  0020DE  0100               	movlb	0	; () banked
  3835  0020E0  6FAB               	movwf	printf@f& (0+255),b
  3836  0020E2  0E7E               	movlw	high STR_20
  3837  0020E4  0100               	movlb	0	; () banked
  3838  0020E6  6FAC               	movwf	(printf@f+1)& (0+255),b
  3839  0020E8  ECFA  F009         	call	_printf	;wreg free
  3840                           
  3841                           ;serialcomms.c: 236: cmFftFun();
  3842  0020EC  ECF0  F007         	call	_cmFftFun	;wreg free
  3843                           
  3844                           ;serialcomms.c: 239: for (int iTemp=0;iTemp<128/2;iTemp++){
  3845  0020F0  0E00               	movlw	0
  3846  0020F2  0101               	movlb	1	; () banked
  3847  0020F4  6F4E               	movwf	(cmStuffsWrapperFun@iTemp_423+1)& (0+255),b
  3848  0020F6  0E00               	movlw	0
  3849  0020F8  6F4D               	movwf	cmStuffsWrapperFun@iTemp_423& (0+255),b
  3850  0020FA                     l5828:
  3851                           
  3852                           ; BSR set to: 1
  3853  0020FA  0101               	movlb	1	; () banked
  3854  0020FC  BF4E               	btfsc	(cmStuffsWrapperFun@iTemp_423+1)& (0+255),7,b
  3855  0020FE  D00A               	goto	l5832
  3856  002100  0101               	movlb	1	; () banked
  3857  002102  514E               	movf	(cmStuffsWrapperFun@iTemp_423+1)& (0+255),w,b
  3858  002104  E127               	bnz	l5838
  3859  002106  0E40               	movlw	64
  3860  002108  0101               	movlb	1	; () banked
  3861  00210A  5D4D               	subwf	cmStuffsWrapperFun@iTemp_423& (0+255),w,b
  3862  00210C  B0D8               	btfsc	status,0,c
  3863  00210E  D022               	goto	l5838
  3864  002110  D001               	goto	l5832
  3865                           
  3866                           ; BSR set to: 1
  3867  002112  D020               	goto	l5838
  3868  002114                     l5832:
  3869                           
  3870                           ; BSR set to: 1
  3871                           ;serialcomms.c: 240: printf("\t%i %6i\n",iTemp,cmYreal[iTemp]);
  3872  002114  0ED9               	movlw	low STR_19
  3873  002116  0100               	movlb	0	; () banked
  3874  002118  6FAB               	movwf	printf@f& (0+255),b
  3875  00211A  0E7F               	movlw	high STR_19
  3876  00211C  0100               	movlb	0	; () banked
  3877  00211E  6FAC               	movwf	(printf@f+1)& (0+255),b
  3878  002120  C14D  F0AD         	movff	cmStuffsWrapperFun@iTemp_423,?_printf+2
  3879  002124  C14E  F0AE         	movff	cmStuffsWrapperFun@iTemp_423+1,?_printf+3
  3880  002128  90D8               	bcf	status,0,c
  3881  00212A  0101               	movlb	1	; () banked
  3882  00212C  354D               	rlcf	cmStuffsWrapperFun@iTemp_423& (0+255),w,b
  3883  00212E  6ED9               	movwf	fsr2l,c
  3884  002130  0101               	movlb	1	; () banked
  3885  002132  354E               	rlcf	(cmStuffsWrapperFun@iTemp_423+1)& (0+255),w,b
  3886  002134  6EDA               	movwf	fsr2h,c
  3887  002136  0E00               	movlw	low _cmYreal
  3888  002138  26D9               	addwf	fsr2l,f,c
  3889  00213A  0E02               	movlw	high _cmYreal
  3890  00213C  22DA               	addwfc	fsr2h,f,c
  3891  00213E  CFDE F0AF          	movff	postinc2,?_printf+4
  3892  002142  CFDD F0B0          	movff	postdec2,?_printf+5
  3893  002146  ECFA  F009         	call	_printf	;wreg free
  3894  00214A  0101               	movlb	1	; () banked
  3895  00214C  4B4D               	infsnz	cmStuffsWrapperFun@iTemp_423& (0+255),f,b
  3896  00214E  2B4E               	incf	(cmStuffsWrapperFun@iTemp_423+1)& (0+255),f,b
  3897  002150  D7D4               	goto	l5828
  3898                           
  3899                           ; BSR set to: 1
  3900  002152  D000               	goto	l5838
  3901  002154                     l5838:
  3902                           
  3903                           ; BSR set to: 1
  3904                           ;serialcomms.c: 241: }
  3905                           ;serialcomms.c: 245: printf("\tTesting classifier...\n");
  3906  002154  0E16               	movlw	low STR_22
  3907  002156  0100               	movlb	0	; () banked
  3908  002158  6FAB               	movwf	printf@f& (0+255),b
  3909  00215A  0E7E               	movlw	high STR_22
  3910  00215C  0100               	movlb	0	; () banked
  3911  00215E  6FAC               	movwf	(printf@f+1)& (0+255),b
  3912  002160  ECFA  F009         	call	_printf	;wreg free
  3913                           
  3914                           ;serialcomms.c: 246: cmYout = 1*cmWeightVector[0];
  3915  002164  C170  F02E         	movff	_cmWeightVector,_cmYout
  3916  002168  C171  F02F         	movff	_cmWeightVector+1,_cmYout+1
  3917                           
  3918                           ;serialcomms.c: 248: printf("\t%i %i %i\n",1,cmWeightVector[0],cmYout);
  3919  00216C  0EC4               	movlw	low STR_23
  3920  00216E  0100               	movlb	0	; () banked
  3921  002170  6FAB               	movwf	printf@f& (0+255),b
  3922  002172  0E7F               	movlw	high STR_23
  3923  002174  0100               	movlb	0	; () banked
  3924  002176  6FAC               	movwf	(printf@f+1)& (0+255),b
  3925  002178  0E00               	movlw	0
  3926  00217A  0100               	movlb	0	; () banked
  3927  00217C  6FAE               	movwf	(?_printf+3)& (0+255),b
  3928  00217E  0E01               	movlw	1
  3929  002180  6FAD               	movwf	(?_printf+2)& (0+255),b
  3930  002182  C170  F0AF         	movff	_cmWeightVector,?_printf+4
  3931  002186  C171  F0B0         	movff	_cmWeightVector+1,?_printf+5
  3932  00218A  C02E  F0B1         	movff	_cmYout,?_printf+6
  3933  00218E  C02F  F0B2         	movff	_cmYout+1,?_printf+7
  3934  002192  ECFA  F009         	call	_printf	;wreg free
  3935                           
  3936                           ;serialcomms.c: 249: for (int iW=1,iTemp=2;iW<21;iW++,iTemp=iTemp+3){
  3937  002196  0E00               	movlw	0
  3938  002198  0101               	movlb	1	; () banked
  3939  00219A  6F50               	movwf	(cmStuffsWrapperFun@iW+1)& (0+255),b
  3940  00219C  0E01               	movlw	1
  3941  00219E  6F4F               	movwf	cmStuffsWrapperFun@iW& (0+255),b
  3942                           
  3943                           ; BSR set to: 1
  3944  0021A0  0E00               	movlw	0
  3945  0021A2  0101               	movlb	1	; () banked
  3946  0021A4  6F4A               	movwf	(cmStuffsWrapperFun@iTemp_428+1)& (0+255),b
  3947  0021A6  0E02               	movlw	2
  3948  0021A8  6F49               	movwf	cmStuffsWrapperFun@iTemp_428& (0+255),b
  3949  0021AA                     l5846:
  3950                           
  3951                           ; BSR set to: 1
  3952  0021AA  0101               	movlb	1	; () banked
  3953  0021AC  BF50               	btfsc	(cmStuffsWrapperFun@iW+1)& (0+255),7,b
  3954  0021AE  D00A               	goto	l5850
  3955  0021B0  0101               	movlb	1	; () banked
  3956  0021B2  5150               	movf	(cmStuffsWrapperFun@iW+1)& (0+255),w,b
  3957  0021B4  E168               	bnz	l5860
  3958  0021B6  0E15               	movlw	21
  3959  0021B8  0101               	movlb	1	; () banked
  3960  0021BA  5D4F               	subwf	cmStuffsWrapperFun@iW& (0+255),w,b
  3961  0021BC  B0D8               	btfsc	status,0,c
  3962  0021BE  D063               	goto	l5860
  3963  0021C0  D001               	goto	l5850
  3964                           
  3965                           ; BSR set to: 1
  3966  0021C2  D061               	goto	l5860
  3967  0021C4                     l5850:
  3968                           
  3969                           ; BSR set to: 1
  3970                           ;serialcomms.c: 250: cmYout = cmYout+cmYreal[iTemp]*cmWeightVector[iW];
  3971  0021C4  90D8               	bcf	status,0,c
  3972  0021C6  0101               	movlb	1	; () banked
  3973  0021C8  3549               	rlcf	cmStuffsWrapperFun@iTemp_428& (0+255),w,b
  3974  0021CA  6ED9               	movwf	fsr2l,c
  3975  0021CC  0101               	movlb	1	; () banked
  3976  0021CE  354A               	rlcf	(cmStuffsWrapperFun@iTemp_428+1)& (0+255),w,b
  3977  0021D0  6EDA               	movwf	fsr2h,c
  3978  0021D2  0E00               	movlw	low _cmYreal
  3979  0021D4  26D9               	addwf	fsr2l,f,c
  3980  0021D6  0E02               	movlw	high _cmYreal
  3981  0021D8  22DA               	addwfc	fsr2h,f,c
  3982  0021DA  CFDE F09F          	movff	postinc2,___wmul@multiplier
  3983  0021DE  CFDD F0A0          	movff	postdec2,___wmul@multiplier+1
  3984  0021E2  90D8               	bcf	status,0,c
  3985  0021E4  0101               	movlb	1	; () banked
  3986  0021E6  354F               	rlcf	cmStuffsWrapperFun@iW& (0+255),w,b
  3987  0021E8  6ED9               	movwf	fsr2l,c
  3988  0021EA  0101               	movlb	1	; () banked
  3989  0021EC  3550               	rlcf	(cmStuffsWrapperFun@iW+1)& (0+255),w,b
  3990  0021EE  6EDA               	movwf	fsr2h,c
  3991  0021F0  0E70               	movlw	low _cmWeightVector
  3992  0021F2  26D9               	addwf	fsr2l,f,c
  3993  0021F4  0E01               	movlw	high _cmWeightVector
  3994  0021F6  22DA               	addwfc	fsr2h,f,c
  3995  0021F8  CFDE F0A1          	movff	postinc2,___wmul@multiplicand
  3996  0021FC  CFDD F0A2          	movff	postdec2,___wmul@multiplicand+1
  3997  002200  EC72  F021         	call	___wmul	;wreg free
  3998  002204  502E               	movf	_cmYout,w,c
  3999  002206  0100               	movlb	0	; () banked
  4000  002208  259F               	addwf	?___wmul& (0+255),w,b
  4001  00220A  6E2E               	movwf	_cmYout,c
  4002  00220C  502F               	movf	_cmYout+1,w,c
  4003  00220E  0100               	movlb	0	; () banked
  4004  002210  21A0               	addwfc	(?___wmul+1)& (0+255),w,b
  4005  002212  6E2F               	movwf	_cmYout+1,c
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;serialcomms.c: 251: printf("\t%i %i %i\n",cmYreal[iTemp],cmWeightVector[iW],cmYout);
  4009  002214  0EC4               	movlw	low STR_23
  4010  002216  0100               	movlb	0	; () banked
  4011  002218  6FAB               	movwf	printf@f& (0+255),b
  4012  00221A  0E7F               	movlw	high STR_23
  4013  00221C  0100               	movlb	0	; () banked
  4014  00221E  6FAC               	movwf	(printf@f+1)& (0+255),b
  4015  002220  90D8               	bcf	status,0,c
  4016  002222  0101               	movlb	1	; () banked
  4017  002224  3549               	rlcf	cmStuffsWrapperFun@iTemp_428& (0+255),w,b
  4018  002226  6ED9               	movwf	fsr2l,c
  4019  002228  0101               	movlb	1	; () banked
  4020  00222A  354A               	rlcf	(cmStuffsWrapperFun@iTemp_428+1)& (0+255),w,b
  4021  00222C  6EDA               	movwf	fsr2h,c
  4022  00222E  0E00               	movlw	low _cmYreal
  4023  002230  26D9               	addwf	fsr2l,f,c
  4024  002232  0E02               	movlw	high _cmYreal
  4025  002234  22DA               	addwfc	fsr2h,f,c
  4026  002236  CFDE F0AD          	movff	postinc2,?_printf+2
  4027  00223A  CFDD F0AE          	movff	postdec2,?_printf+3
  4028  00223E  90D8               	bcf	status,0,c
  4029  002240  0101               	movlb	1	; () banked
  4030  002242  354F               	rlcf	cmStuffsWrapperFun@iW& (0+255),w,b
  4031  002244  6ED9               	movwf	fsr2l,c
  4032  002246  0101               	movlb	1	; () banked
  4033  002248  3550               	rlcf	(cmStuffsWrapperFun@iW+1)& (0+255),w,b
  4034  00224A  6EDA               	movwf	fsr2h,c
  4035  00224C  0E70               	movlw	low _cmWeightVector
  4036  00224E  26D9               	addwf	fsr2l,f,c
  4037  002250  0E01               	movlw	high _cmWeightVector
  4038  002252  22DA               	addwfc	fsr2h,f,c
  4039  002254  CFDE F0AF          	movff	postinc2,?_printf+4
  4040  002258  CFDD F0B0          	movff	postdec2,?_printf+5
  4041  00225C  C02E  F0B1         	movff	_cmYout,?_printf+6
  4042  002260  C02F  F0B2         	movff	_cmYout+1,?_printf+7
  4043  002264  ECFA  F009         	call	_printf	;wreg free
  4044  002268  0101               	movlb	1	; () banked
  4045  00226A  4B4F               	infsnz	cmStuffsWrapperFun@iW& (0+255),f,b
  4046  00226C  2B50               	incf	(cmStuffsWrapperFun@iW+1)& (0+255),f,b
  4047                           
  4048                           ; BSR set to: 1
  4049  00226E  0E03               	movlw	3
  4050  002270  0101               	movlb	1	; () banked
  4051  002272  2549               	addwf	cmStuffsWrapperFun@iTemp_428& (0+255),w,b
  4052  002274  0101               	movlb	1	; () banked
  4053  002276  6F49               	movwf	cmStuffsWrapperFun@iTemp_428& (0+255),b
  4054  002278  0E00               	movlw	0
  4055  00227A  0101               	movlb	1	; () banked
  4056  00227C  214A               	addwfc	(cmStuffsWrapperFun@iTemp_428+1)& (0+255),w,b
  4057  00227E  0101               	movlb	1	; () banked
  4058  002280  6F4A               	movwf	(cmStuffsWrapperFun@iTemp_428+1)& (0+255),b
  4059  002282  D793               	goto	l5846
  4060                           
  4061                           ; BSR set to: 1
  4062  002284  D000               	goto	l5860
  4063  002286                     l5860:
  4064                           
  4065                           ; BSR set to: 1
  4066                           ;serialcomms.c: 252: }
  4067                           ;serialcomms.c: 255: printf("%6i,%6i,%6i,%5u,%i\r\n", x, y, z,tt,cmYout);
  4068  002286  0E43               	movlw	low STR_25
  4069  002288  0100               	movlb	0	; () banked
  4070  00228A  6FAB               	movwf	printf@f& (0+255),b
  4071  00228C  0E7E               	movlw	high STR_25
  4072  00228E  0100               	movlb	0	; () banked
  4073  002290  6FAC               	movwf	(printf@f+1)& (0+255),b
  4074  002292  C040  F0AD         	movff	_x,?_printf+2
  4075  002296  C041  F0AE         	movff	_x+1,?_printf+3
  4076  00229A  C042  F0AF         	movff	_y,?_printf+4
  4077  00229E  C043  F0B0         	movff	_y+1,?_printf+5
  4078  0022A2  C044  F0B1         	movff	_z,?_printf+6
  4079  0022A6  C045  F0B2         	movff	_z+1,?_printf+7
  4080  0022AA  C03E  F0B3         	movff	_tt,?_printf+8
  4081  0022AE  C03F  F0B4         	movff	_tt+1,?_printf+9
  4082  0022B2  C02E  F0B5         	movff	_cmYout,?_printf+10
  4083  0022B6  C02F  F0B6         	movff	_cmYout+1,?_printf+11
  4084  0022BA  ECFA  F009         	call	_printf	;wreg free
  4085                           
  4086                           ;serialcomms.c: 257: cmWinLen = 0;
  4087  0022BE  0E00               	movlw	0
  4088  0022C0  6E2D               	movwf	_cmWinLen+1,c
  4089  0022C2  0E00               	movlw	0
  4090  0022C4  6E2C               	movwf	_cmWinLen,c
  4091  0022C6  D000               	goto	l177
  4092  0022C8                     l177:
  4093  0022C8  0012               	return		;funcret
  4094  0022CA                     __end_of_cmStuffsWrapperFun:
  4095                           	opt stack 0
  4096                           tblptru	equ	0xFF8
  4097                           tblptrh	equ	0xFF7
  4098                           tblptrl	equ	0xFF6
  4099                           tablat	equ	0xFF5
  4100                           postinc0	equ	0xFEE
  4101                           wreg	equ	0xFE8
  4102                           postdec1	equ	0xFE5
  4103                           fsr1h	equ	0xFE2
  4104                           fsr1l	equ	0xFE1
  4105                           postinc2	equ	0xFDE
  4106                           postdec2	equ	0xFDD
  4107                           fsr2h	equ	0xFDA
  4108                           fsr2l	equ	0xFD9
  4109                           status	equ	0xFD8
  4110                           
  4111 ;; *************** function _cmFilterHighPassUsingLowPass *****************
  4112 ;; Defined at:
  4113 ;;		line 261 in file "serialcomms.c"
  4114 ;; Parameters:    Size  Location     Type
  4115 ;;		None
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;  j               2   67[BANK0 ] int 
  4118 ;;  j               2   61[BANK0 ] int 
  4119 ;;  k               2   57[BANK0 ] int 
  4120 ;;  xLPF            2   63[BANK0 ] int 
  4121 ;;  i               2   69[BANK0 ] int 
  4122 ;;  cmFilterCoef    8   49[BANK0 ] int [4]
  4123 ;;  Nsignal         2   65[BANK0 ] int 
  4124 ;;  xBuffer         2   59[BANK0 ] int 
  4125 ;; Return value:  Size  Location     Type
  4126 ;;		None               void
  4127 ;; Registers used:
  4128 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4129 ;; Tracked objects:
  4130 ;;		On entry : 0/0
  4131 ;;		On exit  : 0/0
  4132 ;;		Unchanged: 0/0
  4133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4134 ;;      Params:         0       0       0       0       0       0       0
  4135 ;;      Locals:         0      22       0       0       0       0       0
  4136 ;;      Temps:          0      12       0       0       0       0       0
  4137 ;;      Totals:         0      34       0       0       0       0       0
  4138 ;;Total ram usage:       34 bytes
  4139 ;; Hardware stack levels used:    1
  4140 ;; Hardware stack levels required when called:    6
  4141 ;; This function calls:
  4142 ;;		___wmul
  4143 ;; This function is called by:
  4144 ;;		_cmStuffsWrapperFun
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148                           	psect	text2
  4149  001BAE                     __ptext2:
  4150                           	opt stack 0
  4151  001BAE                     _cmFilterHighPassUsingLowPass:
  4152                           	opt stack 23
  4153                           
  4154                           ;serialcomms.c: 264: int cmFilterCoeff[4] = {1, 1, 1, 1};
  4155                           
  4156                           ;incstack = 0
  4157  001BAE  EE21  F066         	lfsr	2,cmFilterHighPassUsingLowPass@F4485
  4158  001BB2  EE10  F0B1         	lfsr	1,cmFilterHighPassUsingLowPass@cmFilterCoeff
  4159  001BB6  0E07               	movlw	7
  4160  001BB8                     u6211:
  4161  001BB8  CFDB FFE3          	movff	plusw2,plusw1
  4162  001BBC  06E8               	decf	wreg,f,c
  4163  001BBE  E2FC               	bc	u6211
  4164                           
  4165                           ;serialcomms.c: 269: int Nsignal = sizeof(cmYreal)/sizeof(cmYreal[0]);
  4166  001BC0  0E00               	movlw	0
  4167  001BC2  0100               	movlb	0	; () banked
  4168  001BC4  6FC2               	movwf	(cmFilterHighPassUsingLowPass@Nsignal+1)& (0+255),b
  4169  001BC6  0E80               	movlw	128
  4170  001BC8  6FC1               	movwf	cmFilterHighPassUsingLowPass@Nsignal& (0+255),b
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;serialcomms.c: 273: int xBuffer = 0;
  4174  001BCA  0E00               	movlw	0
  4175  001BCC  0100               	movlb	0	; () banked
  4176  001BCE  6FBC               	movwf	(cmFilterHighPassUsingLowPass@xBuffer+1)& (0+255),b
  4177  001BD0  0E00               	movlw	0
  4178  001BD2  6FBB               	movwf	cmFilterHighPassUsingLowPass@xBuffer& (0+255),b
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;serialcomms.c: 274: for (int i=4/2; i<Nsignal+4/2; i++){
  4182  001BD4  0E00               	movlw	0
  4183  001BD6  0100               	movlb	0	; () banked
  4184  001BD8  6FC6               	movwf	(cmFilterHighPassUsingLowPass@i+1)& (0+255),b
  4185  001BDA  0E02               	movlw	2
  4186  001BDC  6FC5               	movwf	cmFilterHighPassUsingLowPass@i& (0+255),b
  4187  001BDE  D145               	goto	l5550
  4188  001BE0                     l5508:
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;serialcomms.c: 275: int xLPF = 0;
  4192  001BE0  0E00               	movlw	0
  4193  001BE2  0100               	movlb	0	; () banked
  4194  001BE4  6FC0               	movwf	(cmFilterHighPassUsingLowPass@xLPF+1)& (0+255),b
  4195  001BE6  0E00               	movlw	0
  4196  001BE8  6FBF               	movwf	cmFilterHighPassUsingLowPass@xLPF& (0+255),b
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;serialcomms.c: 276: if (i+1<4){
  4200  001BEA  0E01               	movlw	1
  4201  001BEC  0100               	movlb	0	; () banked
  4202  001BEE  25C5               	addwf	cmFilterHighPassUsingLowPass@i& (0+255),w,b
  4203  001BF0  0100               	movlb	0	; () banked
  4204  001BF2  6FA5               	movwf	??_cmFilterHighPassUsingLowPass& (0+255),b
  4205  001BF4  0E00               	movlw	0
  4206  001BF6  0100               	movlb	0	; () banked
  4207  001BF8  21C6               	addwfc	(cmFilterHighPassUsingLowPass@i+1)& (0+255),w,b
  4208  001BFA  0100               	movlb	0	; () banked
  4209  001BFC  6FA6               	movwf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),b
  4210  001BFE  0100               	movlb	0	; () banked
  4211  001C00  BFA6               	btfsc	(??_cmFilterHighPassUsingLowPass+1)& (0+255),7,b
  4212  001C02  D008               	goto	l5512
  4213  001C04  0100               	movlb	0	; () banked
  4214  001C06  51A6               	movf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),w,b
  4215  001C08  E148               	bnz	l5528
  4216  001C0A  0E04               	movlw	4
  4217  001C0C  0100               	movlb	0	; () banked
  4218  001C0E  5DA5               	subwf	??_cmFilterHighPassUsingLowPass& (0+255),w,b
  4219  001C10  B0D8               	btfsc	status,0,c
  4220  001C12  D043               	goto	l5528
  4221  001C14                     l5512:
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;serialcomms.c: 277: for (int j=i, k=0; j>=0; k++,j--){
  4225  001C14  C0C5  F0BD         	movff	cmFilterHighPassUsingLowPass@i,cmFilterHighPassUsingLowPass@j
  4226  001C18  C0C6  F0BE         	movff	cmFilterHighPassUsingLowPass@i+1,cmFilterHighPassUsingLowPass@j+1
  4227                           
  4228                           ; BSR set to: 0
  4229  001C1C  0E00               	movlw	0
  4230  001C1E  0100               	movlb	0	; () banked
  4231  001C20  6FBA               	movwf	(cmFilterHighPassUsingLowPass@k+1)& (0+255),b
  4232  001C22  0E00               	movlw	0
  4233  001C24  6FB9               	movwf	cmFilterHighPassUsingLowPass@k& (0+255),b
  4234  001C26                     l5516:
  4235                           
  4236                           ; BSR set to: 0
  4237  001C26  0100               	movlb	0	; () banked
  4238  001C28  BFBE               	btfsc	(cmFilterHighPassUsingLowPass@j+1)& (0+255),7,b
  4239  001C2A  D0AE               	goto	l5542
  4240  001C2C  D001               	goto	l5520
  4241                           
  4242                           ; BSR set to: 0
  4243  001C2E  D0AC               	goto	l5542
  4244  001C30                     l5520:
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;serialcomms.c: 278: xLPF = xLPF + cmFilterCoeff[k]*cmYreal[j];
  4248  001C30  90D8               	bcf	status,0,c
  4249  001C32  0100               	movlb	0	; () banked
  4250  001C34  35B9               	rlcf	cmFilterHighPassUsingLowPass@k& (0+255),w,b
  4251  001C36  6ED9               	movwf	fsr2l,c
  4252  001C38  0100               	movlb	0	; () banked
  4253  001C3A  35BA               	rlcf	(cmFilterHighPassUsingLowPass@k+1)& (0+255),w,b
  4254  001C3C  6EDA               	movwf	fsr2h,c
  4255  001C3E  0EB1               	movlw	low cmFilterHighPassUsingLowPass@cmFilterCoeff
  4256  001C40  26D9               	addwf	fsr2l,f,c
  4257  001C42  0E00               	movlw	high cmFilterHighPassUsingLowPass@cmFilterCoeff
  4258  001C44  22DA               	addwfc	fsr2h,f,c
  4259  001C46  CFDE F09F          	movff	postinc2,___wmul@multiplier
  4260  001C4A  CFDD F0A0          	movff	postdec2,___wmul@multiplier+1
  4261  001C4E  90D8               	bcf	status,0,c
  4262  001C50  0100               	movlb	0	; () banked
  4263  001C52  35BD               	rlcf	cmFilterHighPassUsingLowPass@j& (0+255),w,b
  4264  001C54  6ED9               	movwf	fsr2l,c
  4265  001C56  0100               	movlb	0	; () banked
  4266  001C58  35BE               	rlcf	(cmFilterHighPassUsingLowPass@j+1)& (0+255),w,b
  4267  001C5A  6EDA               	movwf	fsr2h,c
  4268  001C5C  0E00               	movlw	low _cmYreal
  4269  001C5E  26D9               	addwf	fsr2l,f,c
  4270  001C60  0E02               	movlw	high _cmYreal
  4271  001C62  22DA               	addwfc	fsr2h,f,c
  4272  001C64  CFDE F0A1          	movff	postinc2,___wmul@multiplicand
  4273  001C68  CFDD F0A2          	movff	postdec2,___wmul@multiplicand+1
  4274  001C6C  EC72  F021         	call	___wmul	;wreg free
  4275  001C70  0100               	movlb	0	; () banked
  4276  001C72  51BF               	movf	cmFilterHighPassUsingLowPass@xLPF& (0+255),w,b
  4277  001C74  0100               	movlb	0	; () banked
  4278  001C76  259F               	addwf	?___wmul& (0+255),w,b
  4279  001C78  0100               	movlb	0	; () banked
  4280  001C7A  6FBF               	movwf	cmFilterHighPassUsingLowPass@xLPF& (0+255),b
  4281  001C7C  0100               	movlb	0	; () banked
  4282  001C7E  51C0               	movf	(cmFilterHighPassUsingLowPass@xLPF+1)& (0+255),w,b
  4283  001C80  0100               	movlb	0	; () banked
  4284  001C82  21A0               	addwfc	(?___wmul+1)& (0+255),w,b
  4285  001C84  0100               	movlb	0	; () banked
  4286  001C86  6FC0               	movwf	(cmFilterHighPassUsingLowPass@xLPF+1)& (0+255),b
  4287                           
  4288                           ; BSR set to: 0
  4289  001C88  0100               	movlb	0	; () banked
  4290  001C8A  4BB9               	infsnz	cmFilterHighPassUsingLowPass@k& (0+255),f,b
  4291  001C8C  2BBA               	incf	(cmFilterHighPassUsingLowPass@k+1)& (0+255),f,b
  4292                           
  4293                           ; BSR set to: 0
  4294  001C8E  0100               	movlb	0	; () banked
  4295  001C90  07BD               	decf	cmFilterHighPassUsingLowPass@j& (0+255),f,b
  4296  001C92  A0D8               	btfss	status,0,c
  4297  001C94  07BE               	decf	(cmFilterHighPassUsingLowPass@j+1)& (0+255),f,b
  4298  001C96  D7C7               	goto	l5516
  4299                           
  4300                           ; BSR set to: 0
  4301                           ;serialcomms.c: 280: }
  4302                           ;serialcomms.c: 281: }
  4303                           
  4304                           ; BSR set to: 0
  4305  001C98  D077               	goto	l5542
  4306  001C9A                     l5528:
  4307                           
  4308                           ; BSR set to: 0
  4309                           ;serialcomms.c: 282: else{
  4310                           ;serialcomms.c: 283: for (int j=0; j<4; j++){
  4311  001C9A  0E00               	movlw	0
  4312  001C9C  0100               	movlb	0	; () banked
  4313  001C9E  6FC4               	movwf	(cmFilterHighPassUsingLowPass@j_440+1)& (0+255),b
  4314  001CA0  0E00               	movlw	0
  4315  001CA2  6FC3               	movwf	cmFilterHighPassUsingLowPass@j_440& (0+255),b
  4316  001CA4                     l5530:
  4317                           
  4318                           ; BSR set to: 0
  4319  001CA4  0100               	movlb	0	; () banked
  4320  001CA6  BFC4               	btfsc	(cmFilterHighPassUsingLowPass@j_440+1)& (0+255),7,b
  4321  001CA8  D00A               	goto	l5534
  4322  001CAA  0100               	movlb	0	; () banked
  4323  001CAC  51C4               	movf	(cmFilterHighPassUsingLowPass@j_440+1)& (0+255),w,b
  4324  001CAE  E16C               	bnz	l5542
  4325  001CB0  0E04               	movlw	4
  4326  001CB2  0100               	movlb	0	; () banked
  4327  001CB4  5DC3               	subwf	cmFilterHighPassUsingLowPass@j_440& (0+255),w,b
  4328  001CB6  B0D8               	btfsc	status,0,c
  4329  001CB8  D067               	goto	l5542
  4330  001CBA  D001               	goto	l5534
  4331                           
  4332                           ; BSR set to: 0
  4333  001CBC  D065               	goto	l5542
  4334  001CBE                     l5534:
  4335                           
  4336                           ; BSR set to: 0
  4337                           ;serialcomms.c: 284: if(i-j<Nsignal){
  4338  001CBE  C0C3  F0A5         	movff	cmFilterHighPassUsingLowPass@j_440,??_cmFilterHighPassUsingLowPass
  4339  001CC2  C0C4  F0A6         	movff	cmFilterHighPassUsingLowPass@j_440+1,??_cmFilterHighPassUsingLowPass+1
  4340  001CC6  0100               	movlb	0	; () banked
  4341  001CC8  1FA5               	comf	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4342  001CCA  1FA6               	comf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4343  001CCC  4BA5               	infsnz	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4344  001CCE  2BA6               	incf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4345  001CD0  0100               	movlb	0	; () banked
  4346  001CD2  51C5               	movf	cmFilterHighPassUsingLowPass@i& (0+255),w,b
  4347  001CD4  0100               	movlb	0	; () banked
  4348  001CD6  27A5               	addwf	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4349  001CD8  0100               	movlb	0	; () banked
  4350  001CDA  51C6               	movf	(cmFilterHighPassUsingLowPass@i+1)& (0+255),w,b
  4351  001CDC  0100               	movlb	0	; () banked
  4352  001CDE  23A6               	addwfc	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4353  001CE0  0100               	movlb	0	; () banked
  4354  001CE2  51C1               	movf	cmFilterHighPassUsingLowPass@Nsignal& (0+255),w,b
  4355  001CE4  0100               	movlb	0	; () banked
  4356  001CE6  5DA5               	subwf	??_cmFilterHighPassUsingLowPass& (0+255),w,b
  4357  001CE8  0100               	movlb	0	; () banked
  4358  001CEA  51A6               	movf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),w,b
  4359  001CEC  0A80               	xorlw	128
  4360  001CEE  0100               	movlb	0	; () banked
  4361  001CF0  6FA7               	movwf	(??_cmFilterHighPassUsingLowPass+2)& (0+255),b
  4362  001CF2  0100               	movlb	0	; () banked
  4363  001CF4  51C2               	movf	(cmFilterHighPassUsingLowPass@Nsignal+1)& (0+255),w,b
  4364  001CF6  0A80               	xorlw	128
  4365  001CF8  0100               	movlb	0	; () banked
  4366  001CFA  59A7               	subwfb	(??_cmFilterHighPassUsingLowPass+2)& (0+255),w,b
  4367  001CFC  B0D8               	btfsc	status,0,c
  4368  001CFE  D03F               	goto	l5538
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;serialcomms.c: 285: xLPF = xLPF + cmFilterCoeff[j]*cmYreal[i-j];
  4372  001D00  90D8               	bcf	status,0,c
  4373  001D02  0100               	movlb	0	; () banked
  4374  001D04  35C3               	rlcf	cmFilterHighPassUsingLowPass@j_440& (0+255),w,b
  4375  001D06  6ED9               	movwf	fsr2l,c
  4376  001D08  0100               	movlb	0	; () banked
  4377  001D0A  35C4               	rlcf	(cmFilterHighPassUsingLowPass@j_440+1)& (0+255),w,b
  4378  001D0C  6EDA               	movwf	fsr2h,c
  4379  001D0E  0EB1               	movlw	low cmFilterHighPassUsingLowPass@cmFilterCoeff
  4380  001D10  26D9               	addwf	fsr2l,f,c
  4381  001D12  0E00               	movlw	high cmFilterHighPassUsingLowPass@cmFilterCoeff
  4382  001D14  22DA               	addwfc	fsr2h,f,c
  4383  001D16  CFDE F09F          	movff	postinc2,___wmul@multiplier
  4384  001D1A  CFDD F0A0          	movff	postdec2,___wmul@multiplier+1
  4385  001D1E  C0C3  F0A5         	movff	cmFilterHighPassUsingLowPass@j_440,??_cmFilterHighPassUsingLowPass
  4386  001D22  C0C4  F0A6         	movff	cmFilterHighPassUsingLowPass@j_440+1,??_cmFilterHighPassUsingLowPass+1
  4387  001D26  0100               	movlb	0	; () banked
  4388  001D28  1FA5               	comf	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4389  001D2A  1FA6               	comf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4390  001D2C  4BA5               	infsnz	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4391  001D2E  2BA6               	incf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4392  001D30  0100               	movlb	0	; () banked
  4393  001D32  51C5               	movf	cmFilterHighPassUsingLowPass@i& (0+255),w,b
  4394  001D34  0100               	movlb	0	; () banked
  4395  001D36  27A5               	addwf	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4396  001D38  0100               	movlb	0	; () banked
  4397  001D3A  51C6               	movf	(cmFilterHighPassUsingLowPass@i+1)& (0+255),w,b
  4398  001D3C  0100               	movlb	0	; () banked
  4399  001D3E  23A6               	addwfc	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4400  001D40  90D8               	bcf	status,0,c
  4401  001D42  0100               	movlb	0	; () banked
  4402  001D44  37A5               	rlcf	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4403  001D46  37A6               	rlcf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4404  001D48  0E00               	movlw	low _cmYreal
  4405  001D4A  0100               	movlb	0	; () banked
  4406  001D4C  25A5               	addwf	??_cmFilterHighPassUsingLowPass& (0+255),w,b
  4407  001D4E  6ED9               	movwf	fsr2l,c
  4408  001D50  0E02               	movlw	high _cmYreal
  4409  001D52  0100               	movlb	0	; () banked
  4410  001D54  21A6               	addwfc	(??_cmFilterHighPassUsingLowPass+1)& (0+255),w,b
  4411  001D56  6EDA               	movwf	fsr2h,c
  4412  001D58  CFDE F0A1          	movff	postinc2,___wmul@multiplicand
  4413  001D5C  CFDD F0A2          	movff	postdec2,___wmul@multiplicand+1
  4414  001D60  EC72  F021         	call	___wmul	;wreg free
  4415  001D64  0100               	movlb	0	; () banked
  4416  001D66  51BF               	movf	cmFilterHighPassUsingLowPass@xLPF& (0+255),w,b
  4417  001D68  0100               	movlb	0	; () banked
  4418  001D6A  259F               	addwf	?___wmul& (0+255),w,b
  4419  001D6C  0100               	movlb	0	; () banked
  4420  001D6E  6FBF               	movwf	cmFilterHighPassUsingLowPass@xLPF& (0+255),b
  4421  001D70  0100               	movlb	0	; () banked
  4422  001D72  51C0               	movf	(cmFilterHighPassUsingLowPass@xLPF+1)& (0+255),w,b
  4423  001D74  0100               	movlb	0	; () banked
  4424  001D76  21A0               	addwfc	(?___wmul+1)& (0+255),w,b
  4425  001D78  0100               	movlb	0	; () banked
  4426  001D7A  6FC0               	movwf	(cmFilterHighPassUsingLowPass@xLPF+1)& (0+255),b
  4427  001D7C  D000               	goto	l5538
  4428  001D7E                     l5538:
  4429                           
  4430                           ; BSR set to: 0
  4431  001D7E  0100               	movlb	0	; () banked
  4432  001D80  4BC3               	infsnz	cmFilterHighPassUsingLowPass@j_440& (0+255),f,b
  4433  001D82  2BC4               	incf	(cmFilterHighPassUsingLowPass@j_440+1)& (0+255),f,b
  4434  001D84  D78F               	goto	l5530
  4435                           
  4436                           ; BSR set to: 0
  4437                           
  4438                           ; BSR set to: 0
  4439  001D86  D000               	goto	l5542
  4440  001D88                     l5542:
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;serialcomms.c: 286: }
  4444                           ;serialcomms.c: 288: }
  4445                           ;serialcomms.c: 289: }
  4446                           ;serialcomms.c: 290: if (i>4/2){
  4447  001D88  0100               	movlb	0	; () banked
  4448  001D8A  BFC6               	btfsc	(cmFilterHighPassUsingLowPass@i+1)& (0+255),7,b
  4449  001D8C  D066               	goto	l5546
  4450  001D8E  0100               	movlb	0	; () banked
  4451  001D90  51C6               	movf	(cmFilterHighPassUsingLowPass@i+1)& (0+255),w,b
  4452  001D92  E105               	bnz	u6280
  4453  001D94  0E03               	movlw	3
  4454  001D96  0100               	movlb	0	; () banked
  4455  001D98  5DC5               	subwf	cmFilterHighPassUsingLowPass@i& (0+255),w,b
  4456  001D9A  A0D8               	btfss	status,0,c
  4457  001D9C  D05E               	goto	l5546
  4458  001D9E                     u6280:
  4459                           
  4460                           ; BSR set to: 0
  4461                           ;serialcomms.c: 294: cmYreal[i-3] = 4*cmYreal[i-3] - xBuffer;
  4462  001D9E  C0BB  F0A5         	movff	cmFilterHighPassUsingLowPass@xBuffer,??_cmFilterHighPassUsingLowPass
  4463  001DA2  C0BC  F0A6         	movff	cmFilterHighPassUsingLowPass@xBuffer+1,??_cmFilterHighPassUsingLowPass+1
  4464  001DA6  0100               	movlb	0	; () banked
  4465  001DA8  1FA5               	comf	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4466  001DAA  1FA6               	comf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4467  001DAC  4BA5               	infsnz	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4468  001DAE  2BA6               	incf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4469  001DB0  0EFA               	movlw	250
  4470  001DB2  0100               	movlb	0	; () banked
  4471  001DB4  6FA7               	movwf	(??_cmFilterHighPassUsingLowPass+2)& (0+255),b
  4472  001DB6  0EFF               	movlw	255
  4473  001DB8  0100               	movlb	0	; () banked
  4474  001DBA  6FA8               	movwf	(??_cmFilterHighPassUsingLowPass+3)& (0+255),b
  4475  001DBC  C0C5  F0A9         	movff	cmFilterHighPassUsingLowPass@i,??_cmFilterHighPassUsingLowPass+4
  4476  001DC0  C0C6  F0AA         	movff	cmFilterHighPassUsingLowPass@i+1,??_cmFilterHighPassUsingLowPass+5
  4477  001DC4  90D8               	bcf	status,0,c
  4478  001DC6  0100               	movlb	0	; () banked
  4479  001DC8  37A9               	rlcf	(??_cmFilterHighPassUsingLowPass+4)& (0+255),f,b
  4480  001DCA  37AA               	rlcf	(??_cmFilterHighPassUsingLowPass+5)& (0+255),f,b
  4481  001DCC  0100               	movlb	0	; () banked
  4482  001DCE  51A7               	movf	(??_cmFilterHighPassUsingLowPass+2)& (0+255),w,b
  4483  001DD0  0100               	movlb	0	; () banked
  4484  001DD2  27A9               	addwf	(??_cmFilterHighPassUsingLowPass+4)& (0+255),f,b
  4485  001DD4  0100               	movlb	0	; () banked
  4486  001DD6  51A8               	movf	(??_cmFilterHighPassUsingLowPass+3)& (0+255),w,b
  4487  001DD8  0100               	movlb	0	; () banked
  4488  001DDA  23AA               	addwfc	(??_cmFilterHighPassUsingLowPass+5)& (0+255),f,b
  4489  001DDC  0E00               	movlw	low _cmYreal
  4490  001DDE  0100               	movlb	0	; () banked
  4491  001DE0  25A9               	addwf	(??_cmFilterHighPassUsingLowPass+4)& (0+255),w,b
  4492  001DE2  6ED9               	movwf	fsr2l,c
  4493  001DE4  0E02               	movlw	high _cmYreal
  4494  001DE6  0100               	movlb	0	; () banked
  4495  001DE8  21AA               	addwfc	(??_cmFilterHighPassUsingLowPass+5)& (0+255),w,b
  4496  001DEA  6EDA               	movwf	fsr2h,c
  4497  001DEC  CFDE F0AB          	movff	postinc2,??_cmFilterHighPassUsingLowPass+6
  4498  001DF0  CFDD F0AC          	movff	postdec2,??_cmFilterHighPassUsingLowPass+7
  4499  001DF4  0100               	movlb	0	; () banked
  4500  001DF6  90D8               	bcf	status,0,c
  4501  001DF8  37AB               	rlcf	(??_cmFilterHighPassUsingLowPass+6)& (0+255),f,b
  4502  001DFA  37AC               	rlcf	(??_cmFilterHighPassUsingLowPass+7)& (0+255),f,b
  4503  001DFC  0100               	movlb	0	; () banked
  4504  001DFE  90D8               	bcf	status,0,c
  4505  001E00  37AB               	rlcf	(??_cmFilterHighPassUsingLowPass+6)& (0+255),f,b
  4506  001E02  37AC               	rlcf	(??_cmFilterHighPassUsingLowPass+7)& (0+255),f,b
  4507  001E04  0100               	movlb	0	; () banked
  4508  001E06  51A5               	movf	??_cmFilterHighPassUsingLowPass& (0+255),w,b
  4509  001E08  0100               	movlb	0	; () banked
  4510  001E0A  27AB               	addwf	(??_cmFilterHighPassUsingLowPass+6)& (0+255),f,b
  4511  001E0C  0100               	movlb	0	; () banked
  4512  001E0E  51A6               	movf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),w,b
  4513  001E10  0100               	movlb	0	; () banked
  4514  001E12  23AC               	addwfc	(??_cmFilterHighPassUsingLowPass+7)& (0+255),f,b
  4515  001E14  0EFA               	movlw	250
  4516  001E16  0100               	movlb	0	; () banked
  4517  001E18  6FAD               	movwf	(??_cmFilterHighPassUsingLowPass+8)& (0+255),b
  4518  001E1A  0EFF               	movlw	255
  4519  001E1C  0100               	movlb	0	; () banked
  4520  001E1E  6FAE               	movwf	(??_cmFilterHighPassUsingLowPass+9)& (0+255),b
  4521  001E20  C0C5  F0AF         	movff	cmFilterHighPassUsingLowPass@i,??_cmFilterHighPassUsingLowPass+10
  4522  001E24  C0C6  F0B0         	movff	cmFilterHighPassUsingLowPass@i+1,??_cmFilterHighPassUsingLowPass+11
  4523  001E28  90D8               	bcf	status,0,c
  4524  001E2A  0100               	movlb	0	; () banked
  4525  001E2C  37AF               	rlcf	(??_cmFilterHighPassUsingLowPass+10)& (0+255),f,b
  4526  001E2E  37B0               	rlcf	(??_cmFilterHighPassUsingLowPass+11)& (0+255),f,b
  4527  001E30  0100               	movlb	0	; () banked
  4528  001E32  51AD               	movf	(??_cmFilterHighPassUsingLowPass+8)& (0+255),w,b
  4529  001E34  0100               	movlb	0	; () banked
  4530  001E36  27AF               	addwf	(??_cmFilterHighPassUsingLowPass+10)& (0+255),f,b
  4531  001E38  0100               	movlb	0	; () banked
  4532  001E3A  51AE               	movf	(??_cmFilterHighPassUsingLowPass+9)& (0+255),w,b
  4533  001E3C  0100               	movlb	0	; () banked
  4534  001E3E  23B0               	addwfc	(??_cmFilterHighPassUsingLowPass+11)& (0+255),f,b
  4535  001E40  0E00               	movlw	low _cmYreal
  4536  001E42  0100               	movlb	0	; () banked
  4537  001E44  25AF               	addwf	(??_cmFilterHighPassUsingLowPass+10)& (0+255),w,b
  4538  001E46  6ED9               	movwf	fsr2l,c
  4539  001E48  0E02               	movlw	high _cmYreal
  4540  001E4A  0100               	movlb	0	; () banked
  4541  001E4C  21B0               	addwfc	(??_cmFilterHighPassUsingLowPass+11)& (0+255),w,b
  4542  001E4E  6EDA               	movwf	fsr2h,c
  4543  001E50  C0AB  FFDE         	movff	??_cmFilterHighPassUsingLowPass+6,postinc2
  4544  001E54  C0AC  FFDD         	movff	??_cmFilterHighPassUsingLowPass+7,postdec2
  4545  001E58  D000               	goto	l5546
  4546  001E5A                     l5546:
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;serialcomms.c: 296: }
  4550                           ;serialcomms.c: 297: xBuffer = xLPF;
  4551  001E5A  C0BF  F0BB         	movff	cmFilterHighPassUsingLowPass@xLPF,cmFilterHighPassUsingLowPass@xBuffer
  4552  001E5E  C0C0  F0BC         	movff	cmFilterHighPassUsingLowPass@xLPF+1,cmFilterHighPassUsingLowPass@xBuffer+1
  4553                           
  4554                           ; BSR set to: 0
  4555  001E62  0100               	movlb	0	; () banked
  4556  001E64  4BC5               	infsnz	cmFilterHighPassUsingLowPass@i& (0+255),f,b
  4557  001E66  2BC6               	incf	(cmFilterHighPassUsingLowPass@i+1)& (0+255),f,b
  4558  001E68  D000               	goto	l5550
  4559  001E6A                     l5550:
  4560                           
  4561                           ; BSR set to: 0
  4562  001E6A  0E02               	movlw	2
  4563  001E6C  0100               	movlb	0	; () banked
  4564  001E6E  25C1               	addwf	cmFilterHighPassUsingLowPass@Nsignal& (0+255),w,b
  4565  001E70  0100               	movlb	0	; () banked
  4566  001E72  6FA5               	movwf	??_cmFilterHighPassUsingLowPass& (0+255),b
  4567  001E74  0E00               	movlw	0
  4568  001E76  0100               	movlb	0	; () banked
  4569  001E78  21C2               	addwfc	(cmFilterHighPassUsingLowPass@Nsignal+1)& (0+255),w,b
  4570  001E7A  0100               	movlb	0	; () banked
  4571  001E7C  6FA6               	movwf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),b
  4572  001E7E  0100               	movlb	0	; () banked
  4573  001E80  51A5               	movf	??_cmFilterHighPassUsingLowPass& (0+255),w,b
  4574  001E82  0100               	movlb	0	; () banked
  4575  001E84  5DC5               	subwf	cmFilterHighPassUsingLowPass@i& (0+255),w,b
  4576  001E86  0100               	movlb	0	; () banked
  4577  001E88  51C6               	movf	(cmFilterHighPassUsingLowPass@i+1)& (0+255),w,b
  4578  001E8A  0A80               	xorlw	128
  4579  001E8C  0100               	movlb	0	; () banked
  4580  001E8E  6FA7               	movwf	(??_cmFilterHighPassUsingLowPass+2)& (0+255),b
  4581  001E90  0100               	movlb	0	; () banked
  4582  001E92  51A6               	movf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),w,b
  4583  001E94  0A80               	xorlw	128
  4584  001E96  0100               	movlb	0	; () banked
  4585  001E98  59A7               	subwfb	(??_cmFilterHighPassUsingLowPass+2)& (0+255),w,b
  4586  001E9A  A0D8               	btfss	status,0,c
  4587  001E9C  D6A1               	goto	l5508
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;serialcomms.c: 298: }
  4591                           ;serialcomms.c: 301: cmYreal[Nsignal-1] = 4*cmYreal[Nsignal-1] - xBuffer;
  4592                           
  4593                           ; BSR set to: 0
  4594  001E9E  C0BB  F0A5         	movff	cmFilterHighPassUsingLowPass@xBuffer,??_cmFilterHighPassUsingLowPass
  4595  001EA2  C0BC  F0A6         	movff	cmFilterHighPassUsingLowPass@xBuffer+1,??_cmFilterHighPassUsingLowPass+1
  4596  001EA6  0100               	movlb	0	; () banked
  4597  001EA8  1FA5               	comf	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4598  001EAA  1FA6               	comf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4599  001EAC  4BA5               	infsnz	??_cmFilterHighPassUsingLowPass& (0+255),f,b
  4600  001EAE  2BA6               	incf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),f,b
  4601  001EB0  0EFE               	movlw	254
  4602  001EB2  0100               	movlb	0	; () banked
  4603  001EB4  6FA7               	movwf	(??_cmFilterHighPassUsingLowPass+2)& (0+255),b
  4604  001EB6  0EFF               	movlw	255
  4605  001EB8  0100               	movlb	0	; () banked
  4606  001EBA  6FA8               	movwf	(??_cmFilterHighPassUsingLowPass+3)& (0+255),b
  4607  001EBC  C0C1  F0A9         	movff	cmFilterHighPassUsingLowPass@Nsignal,??_cmFilterHighPassUsingLowPass+4
  4608  001EC0  C0C2  F0AA         	movff	cmFilterHighPassUsingLowPass@Nsignal+1,??_cmFilterHighPassUsingLowPass+5
  4609  001EC4  90D8               	bcf	status,0,c
  4610  001EC6  0100               	movlb	0	; () banked
  4611  001EC8  37A9               	rlcf	(??_cmFilterHighPassUsingLowPass+4)& (0+255),f,b
  4612  001ECA  37AA               	rlcf	(??_cmFilterHighPassUsingLowPass+5)& (0+255),f,b
  4613  001ECC  0100               	movlb	0	; () banked
  4614  001ECE  51A7               	movf	(??_cmFilterHighPassUsingLowPass+2)& (0+255),w,b
  4615  001ED0  0100               	movlb	0	; () banked
  4616  001ED2  27A9               	addwf	(??_cmFilterHighPassUsingLowPass+4)& (0+255),f,b
  4617  001ED4  0100               	movlb	0	; () banked
  4618  001ED6  51A8               	movf	(??_cmFilterHighPassUsingLowPass+3)& (0+255),w,b
  4619  001ED8  0100               	movlb	0	; () banked
  4620  001EDA  23AA               	addwfc	(??_cmFilterHighPassUsingLowPass+5)& (0+255),f,b
  4621  001EDC  0E00               	movlw	low _cmYreal
  4622  001EDE  0100               	movlb	0	; () banked
  4623  001EE0  25A9               	addwf	(??_cmFilterHighPassUsingLowPass+4)& (0+255),w,b
  4624  001EE2  6ED9               	movwf	fsr2l,c
  4625  001EE4  0E02               	movlw	high _cmYreal
  4626  001EE6  0100               	movlb	0	; () banked
  4627  001EE8  21AA               	addwfc	(??_cmFilterHighPassUsingLowPass+5)& (0+255),w,b
  4628  001EEA  6EDA               	movwf	fsr2h,c
  4629  001EEC  CFDE F0AB          	movff	postinc2,??_cmFilterHighPassUsingLowPass+6
  4630  001EF0  CFDD F0AC          	movff	postdec2,??_cmFilterHighPassUsingLowPass+7
  4631  001EF4  0100               	movlb	0	; () banked
  4632  001EF6  90D8               	bcf	status,0,c
  4633  001EF8  37AB               	rlcf	(??_cmFilterHighPassUsingLowPass+6)& (0+255),f,b
  4634  001EFA  37AC               	rlcf	(??_cmFilterHighPassUsingLowPass+7)& (0+255),f,b
  4635  001EFC  0100               	movlb	0	; () banked
  4636  001EFE  90D8               	bcf	status,0,c
  4637  001F00  37AB               	rlcf	(??_cmFilterHighPassUsingLowPass+6)& (0+255),f,b
  4638  001F02  37AC               	rlcf	(??_cmFilterHighPassUsingLowPass+7)& (0+255),f,b
  4639  001F04  0100               	movlb	0	; () banked
  4640  001F06  51A5               	movf	??_cmFilterHighPassUsingLowPass& (0+255),w,b
  4641  001F08  0100               	movlb	0	; () banked
  4642  001F0A  27AB               	addwf	(??_cmFilterHighPassUsingLowPass+6)& (0+255),f,b
  4643  001F0C  0100               	movlb	0	; () banked
  4644  001F0E  51A6               	movf	(??_cmFilterHighPassUsingLowPass+1)& (0+255),w,b
  4645  001F10  0100               	movlb	0	; () banked
  4646  001F12  23AC               	addwfc	(??_cmFilterHighPassUsingLowPass+7)& (0+255),f,b
  4647  001F14  0EFE               	movlw	254
  4648  001F16  0100               	movlb	0	; () banked
  4649  001F18  6FAD               	movwf	(??_cmFilterHighPassUsingLowPass+8)& (0+255),b
  4650  001F1A  0EFF               	movlw	255
  4651  001F1C  0100               	movlb	0	; () banked
  4652  001F1E  6FAE               	movwf	(??_cmFilterHighPassUsingLowPass+9)& (0+255),b
  4653  001F20  C0C1  F0AF         	movff	cmFilterHighPassUsingLowPass@Nsignal,??_cmFilterHighPassUsingLowPass+10
  4654  001F24  C0C2  F0B0         	movff	cmFilterHighPassUsingLowPass@Nsignal+1,??_cmFilterHighPassUsingLowPass+11
  4655  001F28  90D8               	bcf	status,0,c
  4656  001F2A  0100               	movlb	0	; () banked
  4657  001F2C  37AF               	rlcf	(??_cmFilterHighPassUsingLowPass+10)& (0+255),f,b
  4658  001F2E  37B0               	rlcf	(??_cmFilterHighPassUsingLowPass+11)& (0+255),f,b
  4659  001F30  0100               	movlb	0	; () banked
  4660  001F32  51AD               	movf	(??_cmFilterHighPassUsingLowPass+8)& (0+255),w,b
  4661  001F34  0100               	movlb	0	; () banked
  4662  001F36  27AF               	addwf	(??_cmFilterHighPassUsingLowPass+10)& (0+255),f,b
  4663  001F38  0100               	movlb	0	; () banked
  4664  001F3A  51AE               	movf	(??_cmFilterHighPassUsingLowPass+9)& (0+255),w,b
  4665  001F3C  0100               	movlb	0	; () banked
  4666  001F3E  23B0               	addwfc	(??_cmFilterHighPassUsingLowPass+11)& (0+255),f,b
  4667  001F40  0E00               	movlw	low _cmYreal
  4668  001F42  0100               	movlb	0	; () banked
  4669  001F44  25AF               	addwf	(??_cmFilterHighPassUsingLowPass+10)& (0+255),w,b
  4670  001F46  6ED9               	movwf	fsr2l,c
  4671  001F48  0E02               	movlw	high _cmYreal
  4672  001F4A  0100               	movlb	0	; () banked
  4673  001F4C  21B0               	addwfc	(??_cmFilterHighPassUsingLowPass+11)& (0+255),w,b
  4674  001F4E  6EDA               	movwf	fsr2h,c
  4675  001F50  C0AB  FFDE         	movff	??_cmFilterHighPassUsingLowPass+6,postinc2
  4676  001F54  C0AC  FFDD         	movff	??_cmFilterHighPassUsingLowPass+7,postdec2
  4677                           
  4678                           ; BSR set to: 0
  4679  001F58  0012               	return		;funcret
  4680  001F5A                     __end_of_cmFilterHighPassUsingLowPass:
  4681                           	opt stack 0
  4682                           tblptru	equ	0xFF8
  4683                           tblptrh	equ	0xFF7
  4684                           tblptrl	equ	0xFF6
  4685                           tablat	equ	0xFF5
  4686                           postinc0	equ	0xFEE
  4687                           wreg	equ	0xFE8
  4688                           postdec1	equ	0xFE5
  4689                           plusw1	equ	0xFE3
  4690                           fsr1h	equ	0xFE2
  4691                           fsr1l	equ	0xFE1
  4692                           postinc2	equ	0xFDE
  4693                           postdec2	equ	0xFDD
  4694                           plusw2	equ	0xFDB
  4695                           fsr2h	equ	0xFDA
  4696                           fsr2l	equ	0xFD9
  4697                           status	equ	0xFD8
  4698                           
  4699 ;; *************** function _cmFftFun *****************
  4700 ;; Defined at:
  4701 ;;		line 305 in file "serialcomms.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;		None
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;  k               2   71[BANK1 ] int 
  4706 ;;  place           4   67[BANK1 ] long 
  4707 ;;  root            4   63[BANK1 ] long 
  4708 ;;  sizeData        2   61[BANK1 ] short 
  4709 ;; Return value:  Size  Location     Type
  4710 ;;		None               void
  4711 ;; Registers used:
  4712 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4713 ;; Tracked objects:
  4714 ;;		On entry : 0/0
  4715 ;;		On exit  : 0/0
  4716 ;;		Unchanged: 0/0
  4717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4718 ;;      Params:         0       0       0       0       0       0       0
  4719 ;;      Locals:         0       0      12       0       0       0       0
  4720 ;;      Temps:          0       0      11       0       0       0       0
  4721 ;;      Totals:         0       0      23       0       0       0       0
  4722 ;;Total ram usage:       23 bytes
  4723 ;; Hardware stack levels used:    1
  4724 ;; Hardware stack levels required when called:    9
  4725 ;; This function calls:
  4726 ;;		___ftdiv
  4727 ;;		___fttol
  4728 ;;		___wmul
  4729 ;;		_fix_fft
  4730 ;;		_log
  4731 ;; This function is called by:
  4732 ;;		_cmStuffsWrapperFun
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           	psect	text3
  4737  000FE0                     __ptext3:
  4738                           	opt stack 0
  4739  000FE0                     _cmFftFun:
  4740                           	opt stack 20
  4741                           
  4742                           ;serialcomms.c: 367: short sizeData = log(128)/log(2);
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;incstack = 0
  4746  000FE0  0E00               	movlw	0
  4747  000FE2  0100               	movlb	0	; () banked
  4748  000FE4  6FD2               	movwf	log@x& (0+255),b
  4749  000FE6  0E00               	movlw	0
  4750  000FE8  0100               	movlb	0	; () banked
  4751  000FEA  6FD3               	movwf	(log@x+1)& (0+255),b
  4752  000FEC  0E40               	movlw	64
  4753  000FEE  0100               	movlb	0	; () banked
  4754  000FF0  6FD4               	movwf	(log@x+2)& (0+255),b
  4755  000FF2  EC81  F019         	call	_log	;wreg free
  4756  000FF6  C0D2  F0DA         	movff	?_log,___ftdiv@f2
  4757  000FFA  C0D3  F0DB         	movff	?_log+1,___ftdiv@f2+1
  4758  000FFE  C0D4  F0DC         	movff	?_log+2,___ftdiv@f2+2
  4759  001002  0E00               	movlw	0
  4760  001004  0100               	movlb	0	; () banked
  4761  001006  6FD2               	movwf	log@x& (0+255),b
  4762  001008  0E00               	movlw	0
  4763  00100A  0100               	movlb	0	; () banked
  4764  00100C  6FD3               	movwf	(log@x+1)& (0+255),b
  4765  00100E  0E43               	movlw	67
  4766  001010  0100               	movlb	0	; () banked
  4767  001012  6FD4               	movwf	(log@x+2)& (0+255),b
  4768  001014  EC81  F019         	call	_log	;wreg free
  4769  001018  C0D2  F0D7         	movff	?_log,___ftdiv@f1
  4770  00101C  C0D3  F0D8         	movff	?_log+1,___ftdiv@f1+1
  4771  001020  C0D4  F0D9         	movff	?_log+2,___ftdiv@f1+2
  4772  001024  ECE0  F018         	call	___ftdiv	;wreg free
  4773  001028  C0D7  F109         	movff	?___ftdiv,___fttol@f1
  4774  00102C  C0D8  F10A         	movff	?___ftdiv+1,___fttol@f1+1
  4775  001030  C0D9  F10B         	movff	?___ftdiv+2,___fttol@f1+2
  4776  001034  EC21  F01A         	call	___fttol	;wreg free
  4777  001038  C109  F13D         	movff	?___fttol,cmFftFun@sizeData
  4778  00103C  C10A  F13E         	movff	?___fttol+1,cmFftFun@sizeData+1
  4779                           
  4780                           ;serialcomms.c: 368: fix_fft(cmYreal, cmYimag, sizeData);
  4781  001040  0E00               	movlw	low _cmYreal
  4782  001042  0100               	movlb	0	; () banked
  4783  001044  6FAB               	movwf	fix_fft@fr& (0+255),b
  4784  001046  0E02               	movlw	high _cmYreal
  4785  001048  0100               	movlb	0	; () banked
  4786  00104A  6FAC               	movwf	(fix_fft@fr+1)& (0+255),b
  4787  00104C  0E00               	movlw	low _cmYimag
  4788  00104E  0100               	movlb	0	; () banked
  4789  001050  6FAD               	movwf	fix_fft@fi& (0+255),b
  4790  001052  0E03               	movlw	high _cmYimag
  4791  001054  0100               	movlb	0	; () banked
  4792  001056  6FAE               	movwf	(fix_fft@fi+1)& (0+255),b
  4793  001058  C13D  F0AF         	movff	cmFftFun@sizeData,fix_fft@m
  4794  00105C  C13E  F0B0         	movff	cmFftFun@sizeData+1,fix_fft@m+1
  4795  001060  ECC6  F000         	call	_fix_fft	;wreg free
  4796                           
  4797                           ;serialcomms.c: 381: long place, root;
  4798                           ;serialcomms.c: 382: for (int k=0; k < 128/2; k++)
  4799  001064  0E00               	movlw	0
  4800  001066  0101               	movlb	1	; () banked
  4801  001068  6F48               	movwf	(cmFftFun@k+1)& (0+255),b
  4802  00106A  0E00               	movlw	0
  4803  00106C  6F47               	movwf	cmFftFun@k& (0+255),b
  4804                           
  4805                           ; BSR set to: 1
  4806  00106E  0101               	movlb	1	; () banked
  4807  001070  BF48               	btfsc	(cmFftFun@k+1)& (0+255),7,b
  4808  001072  D00A               	goto	l5564
  4809  001074  0101               	movlb	1	; () banked
  4810  001076  5148               	movf	(cmFftFun@k+1)& (0+255),w,b
  4811  001078  E106               	bnz	u6300
  4812  00107A  0E40               	movlw	64
  4813  00107C  0101               	movlb	1	; () banked
  4814  00107E  5D47               	subwf	cmFftFun@k& (0+255),w,b
  4815  001080  B0D8               	btfsc	status,0,c
  4816  001082  D1B7               	goto	l206
  4817  001084  D001               	goto	l5564
  4818  001086                     u6300:
  4819                           
  4820                           ; BSR set to: 1
  4821  001086  D1B5               	goto	l206
  4822  001088                     l5564:
  4823                           
  4824                           ; BSR set to: 1
  4825                           ;serialcomms.c: 383: {
  4826                           ;serialcomms.c: 384: cmYreal[k] = (cmYreal[k] * cmYreal[k] +
  4827                           ;serialcomms.c: 385: cmYimag[k] * cmYimag[k]);
  4828  001088  90D8               	bcf	status,0,c
  4829  00108A  0101               	movlb	1	; () banked
  4830  00108C  3547               	rlcf	cmFftFun@k& (0+255),w,b
  4831  00108E  6ED9               	movwf	fsr2l,c
  4832  001090  0101               	movlb	1	; () banked
  4833  001092  3548               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4834  001094  6EDA               	movwf	fsr2h,c
  4835  001096  0E00               	movlw	low _cmYreal
  4836  001098  26D9               	addwf	fsr2l,f,c
  4837  00109A  0E02               	movlw	high _cmYreal
  4838  00109C  22DA               	addwfc	fsr2h,f,c
  4839  00109E  CFDE F09F          	movff	postinc2,___wmul@multiplier
  4840  0010A2  CFDD F0A0          	movff	postdec2,___wmul@multiplier+1
  4841  0010A6  90D8               	bcf	status,0,c
  4842  0010A8  0101               	movlb	1	; () banked
  4843  0010AA  3547               	rlcf	cmFftFun@k& (0+255),w,b
  4844  0010AC  6ED9               	movwf	fsr2l,c
  4845  0010AE  0101               	movlb	1	; () banked
  4846  0010B0  3548               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4847  0010B2  6EDA               	movwf	fsr2h,c
  4848  0010B4  0E00               	movlw	low _cmYreal
  4849  0010B6  26D9               	addwf	fsr2l,f,c
  4850  0010B8  0E02               	movlw	high _cmYreal
  4851  0010BA  22DA               	addwfc	fsr2h,f,c
  4852  0010BC  CFDE F0A1          	movff	postinc2,___wmul@multiplicand
  4853  0010C0  CFDD F0A2          	movff	postdec2,___wmul@multiplicand+1
  4854  0010C4  EC72  F021         	call	___wmul	;wreg free
  4855  0010C8  C09F  F132         	movff	?___wmul,??_cmFftFun
  4856  0010CC  C0A0  F133         	movff	?___wmul+1,??_cmFftFun+1
  4857  0010D0  90D8               	bcf	status,0,c
  4858  0010D2  0101               	movlb	1	; () banked
  4859  0010D4  3547               	rlcf	cmFftFun@k& (0+255),w,b
  4860  0010D6  6ED9               	movwf	fsr2l,c
  4861  0010D8  0101               	movlb	1	; () banked
  4862  0010DA  3548               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4863  0010DC  6EDA               	movwf	fsr2h,c
  4864  0010DE  0E00               	movlw	low _cmYimag
  4865  0010E0  26D9               	addwf	fsr2l,f,c
  4866  0010E2  0E03               	movlw	high _cmYimag
  4867  0010E4  22DA               	addwfc	fsr2h,f,c
  4868  0010E6  CFDE F09F          	movff	postinc2,___wmul@multiplier
  4869  0010EA  CFDD F0A0          	movff	postdec2,___wmul@multiplier+1
  4870  0010EE  90D8               	bcf	status,0,c
  4871  0010F0  0101               	movlb	1	; () banked
  4872  0010F2  3547               	rlcf	cmFftFun@k& (0+255),w,b
  4873  0010F4  6ED9               	movwf	fsr2l,c
  4874  0010F6  0101               	movlb	1	; () banked
  4875  0010F8  3548               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4876  0010FA  6EDA               	movwf	fsr2h,c
  4877  0010FC  0E00               	movlw	low _cmYimag
  4878  0010FE  26D9               	addwf	fsr2l,f,c
  4879  001100  0E03               	movlw	high _cmYimag
  4880  001102  22DA               	addwfc	fsr2h,f,c
  4881  001104  CFDE F0A1          	movff	postinc2,___wmul@multiplicand
  4882  001108  CFDD F0A2          	movff	postdec2,___wmul@multiplicand+1
  4883  00110C  EC72  F021         	call	___wmul	;wreg free
  4884  001110  0100               	movlb	0	; () banked
  4885  001112  519F               	movf	?___wmul& (0+255),w,b
  4886  001114  0101               	movlb	1	; () banked
  4887  001116  2732               	addwf	??_cmFftFun& (0+255),f,b
  4888  001118  0100               	movlb	0	; () banked
  4889  00111A  51A0               	movf	(?___wmul+1)& (0+255),w,b
  4890  00111C  0101               	movlb	1	; () banked
  4891  00111E  2333               	addwfc	(??_cmFftFun+1)& (0+255),f,b
  4892  001120  90D8               	bcf	status,0,c
  4893  001122  0101               	movlb	1	; () banked
  4894  001124  3547               	rlcf	cmFftFun@k& (0+255),w,b
  4895  001126  6ED9               	movwf	fsr2l,c
  4896  001128  0101               	movlb	1	; () banked
  4897  00112A  3548               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4898  00112C  6EDA               	movwf	fsr2h,c
  4899  00112E  0E00               	movlw	low _cmYreal
  4900  001130  26D9               	addwf	fsr2l,f,c
  4901  001132  0E02               	movlw	high _cmYreal
  4902  001134  22DA               	addwfc	fsr2h,f,c
  4903  001136  C132  FFDE         	movff	??_cmFftFun,postinc2
  4904  00113A  C133  FFDD         	movff	??_cmFftFun+1,postdec2
  4905                           
  4906                           ; BSR set to: 1
  4907                           ;serialcomms.c: 390: place = 0x40000000;
  4908  00113E  0E00               	movlw	0
  4909  001140  0101               	movlb	1	; () banked
  4910  001142  6F43               	movwf	cmFftFun@place& (0+255),b
  4911  001144  0E00               	movlw	0
  4912  001146  6F44               	movwf	(cmFftFun@place+1)& (0+255),b
  4913  001148  0E00               	movlw	0
  4914  00114A  6F45               	movwf	(cmFftFun@place+2)& (0+255),b
  4915  00114C  0E40               	movlw	64
  4916  00114E  6F46               	movwf	(cmFftFun@place+3)& (0+255),b
  4917                           
  4918                           ; BSR set to: 1
  4919                           ;serialcomms.c: 391: root = 0;
  4920  001150  0E00               	movlw	0
  4921  001152  0101               	movlb	1	; () banked
  4922  001154  6F3F               	movwf	cmFftFun@root& (0+255),b
  4923  001156  0E00               	movlw	0
  4924  001158  6F40               	movwf	(cmFftFun@root+1)& (0+255),b
  4925  00115A  0E00               	movlw	0
  4926  00115C  6F41               	movwf	(cmFftFun@root+2)& (0+255),b
  4927  00115E  0E00               	movlw	0
  4928  001160  6F42               	movwf	(cmFftFun@root+3)& (0+255),b
  4929                           
  4930                           ; BSR set to: 1
  4931                           ;serialcomms.c: 393: if (cmYreal[k] >= 0)
  4932  001162  90D8               	bcf	status,0,c
  4933  001164  0101               	movlb	1	; () banked
  4934  001166  3547               	rlcf	cmFftFun@k& (0+255),w,b
  4935  001168  6ED9               	movwf	fsr2l,c
  4936  00116A  0101               	movlb	1	; () banked
  4937  00116C  3548               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4938  00116E  6EDA               	movwf	fsr2h,c
  4939  001170  0E00               	movlw	low _cmYreal
  4940  001172  26D9               	addwf	fsr2l,f,c
  4941  001174  0E02               	movlw	high _cmYreal
  4942  001176  22DA               	addwfc	fsr2h,f,c
  4943  001178  0E01               	movlw	1
  4944  00117A  AEDB               	btfss	plusw2,7,c
  4945  00117C  D023               	goto	l5576
  4946  00117E  D11F               	goto	l5590
  4947                           
  4948                           ; BSR set to: 1
  4949                           ;serialcomms.c: 394: {
  4950                           ;serialcomms.c: 395: while (place > cmYreal[k]) place = place >> 2;
  4951  001180  D021               	goto	l5576
  4952  001182                     l5574:
  4953                           
  4954                           ; BSR set to: 1
  4955  001182  0E02               	movlw	2
  4956  001184  0101               	movlb	1	; () banked
  4957  001186  6F32               	movwf	??_cmFftFun& (0+255),b
  4958  001188  C143  F133         	movff	cmFftFun@place,??_cmFftFun+1
  4959  00118C  C144  F134         	movff	cmFftFun@place+1,??_cmFftFun+2
  4960  001190  C145  F135         	movff	cmFftFun@place+2,??_cmFftFun+3
  4961  001194  C146  F136         	movff	cmFftFun@place+3,??_cmFftFun+4
  4962  001198                     u6325:
  4963  001198  0101               	movlb	1	; () banked
  4964  00119A  6732               	tstfsz	??_cmFftFun& (0+255),b
  4965  00119C  D001               	goto	u6326
  4966  00119E  D009               	goto	u6327
  4967  0011A0                     u6326:
  4968  0011A0  0101               	movlb	1	; () banked
  4969  0011A2  3536               	rlcf	(??_cmFftFun+4)& (0+255),w,b
  4970  0011A4  3336               	rrcf	(??_cmFftFun+4)& (0+255),f,b
  4971  0011A6  3335               	rrcf	(??_cmFftFun+3)& (0+255),f,b
  4972  0011A8  3334               	rrcf	(??_cmFftFun+2)& (0+255),f,b
  4973  0011AA  3333               	rrcf	(??_cmFftFun+1)& (0+255),f,b
  4974  0011AC  0101               	movlb	1	; () banked
  4975  0011AE  2F32               	decfsz	??_cmFftFun& (0+255),f,b
  4976  0011B0  D7F3               	goto	u6325
  4977  0011B2                     u6327:
  4978  0011B2  C133  F143         	movff	??_cmFftFun+1,cmFftFun@place
  4979  0011B6  C134  F144         	movff	??_cmFftFun+2,cmFftFun@place+1
  4980  0011BA  C135  F145         	movff	??_cmFftFun+3,cmFftFun@place+2
  4981  0011BE  C136  F146         	movff	??_cmFftFun+4,cmFftFun@place+3
  4982  0011C2  D000               	goto	l5576
  4983  0011C4                     l5576:
  4984  0011C4  90D8               	bcf	status,0,c
  4985  0011C6  0101               	movlb	1	; () banked
  4986  0011C8  3547               	rlcf	cmFftFun@k& (0+255),w,b
  4987  0011CA  6ED9               	movwf	fsr2l,c
  4988  0011CC  0101               	movlb	1	; () banked
  4989  0011CE  3548               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  4990  0011D0  6EDA               	movwf	fsr2h,c
  4991  0011D2  0E00               	movlw	low _cmYreal
  4992  0011D4  26D9               	addwf	fsr2l,f,c
  4993  0011D6  0E02               	movlw	high _cmYreal
  4994  0011D8  22DA               	addwfc	fsr2h,f,c
  4995  0011DA  CFDE F132          	movff	postinc2,??_cmFftFun
  4996  0011DE  CFDD F133          	movff	postdec2,??_cmFftFun+1
  4997  0011E2  C132  F134         	movff	??_cmFftFun,??_cmFftFun+2
  4998  0011E6  C133  F135         	movff	??_cmFftFun+1,??_cmFftFun+3
  4999  0011EA  0E00               	movlw	0
  5000  0011EC  0101               	movlb	1	; () banked
  5001  0011EE  BF35               	btfsc	(??_cmFftFun+3)& (0+255),7,b
  5002  0011F0  0EFF               	movlw	255
  5003  0011F2  6F36               	movwf	(??_cmFftFun+4)& (0+255),b
  5004  0011F4  6F37               	movwf	(??_cmFftFun+5)& (0+255),b
  5005  0011F6  0101               	movlb	1	; () banked
  5006  0011F8  5143               	movf	cmFftFun@place& (0+255),w,b
  5007  0011FA  0101               	movlb	1	; () banked
  5008  0011FC  5D34               	subwf	(??_cmFftFun+2)& (0+255),w,b
  5009  0011FE  0101               	movlb	1	; () banked
  5010  001200  5144               	movf	(cmFftFun@place+1)& (0+255),w,b
  5011  001202  0101               	movlb	1	; () banked
  5012  001204  5935               	subwfb	(??_cmFftFun+3)& (0+255),w,b
  5013  001206  0101               	movlb	1	; () banked
  5014  001208  5145               	movf	(cmFftFun@place+2)& (0+255),w,b
  5015  00120A  0101               	movlb	1	; () banked
  5016  00120C  5936               	subwfb	(??_cmFftFun+4)& (0+255),w,b
  5017  00120E  0101               	movlb	1	; () banked
  5018  001210  5137               	movf	(??_cmFftFun+5)& (0+255),w,b
  5019  001212  0A80               	xorlw	128
  5020  001214  0101               	movlb	1	; () banked
  5021  001216  6F38               	movwf	(??_cmFftFun+6)& (0+255),b
  5022  001218  0101               	movlb	1	; () banked
  5023  00121A  5146               	movf	(cmFftFun@place+3)& (0+255),w,b
  5024  00121C  0A80               	xorlw	128
  5025  00121E  0101               	movlb	1	; () banked
  5026  001220  5938               	subwfb	(??_cmFftFun+6)& (0+255),w,b
  5027  001222  B0D8               	btfsc	status,0,c
  5028  001224  D0C0               	goto	l5588
  5029  001226  D7AD               	goto	l5574
  5030                           
  5031                           ; BSR set to: 1
  5032                           ;serialcomms.c: 397: while (place)
  5033  001228  D0BE               	goto	l5588
  5034  00122A                     l5578:
  5035                           
  5036                           ; BSR set to: 1
  5037                           ;serialcomms.c: 398: {
  5038                           ;serialcomms.c: 399: if (cmYreal[k] >= root + place)
  5039  00122A  0101               	movlb	1	; () banked
  5040  00122C  5143               	movf	cmFftFun@place& (0+255),w,b
  5041  00122E  0101               	movlb	1	; () banked
  5042  001230  253F               	addwf	cmFftFun@root& (0+255),w,b
  5043  001232  0101               	movlb	1	; () banked
  5044  001234  6F32               	movwf	??_cmFftFun& (0+255),b
  5045  001236  0101               	movlb	1	; () banked
  5046  001238  5144               	movf	(cmFftFun@place+1)& (0+255),w,b
  5047  00123A  0101               	movlb	1	; () banked
  5048  00123C  2140               	addwfc	(cmFftFun@root+1)& (0+255),w,b
  5049  00123E  0101               	movlb	1	; () banked
  5050  001240  6F33               	movwf	(??_cmFftFun+1)& (0+255),b
  5051  001242  0101               	movlb	1	; () banked
  5052  001244  5145               	movf	(cmFftFun@place+2)& (0+255),w,b
  5053  001246  0101               	movlb	1	; () banked
  5054  001248  2141               	addwfc	(cmFftFun@root+2)& (0+255),w,b
  5055  00124A  0101               	movlb	1	; () banked
  5056  00124C  6F34               	movwf	(??_cmFftFun+2)& (0+255),b
  5057  00124E  0101               	movlb	1	; () banked
  5058  001250  5146               	movf	(cmFftFun@place+3)& (0+255),w,b
  5059  001252  0101               	movlb	1	; () banked
  5060  001254  2142               	addwfc	(cmFftFun@root+3)& (0+255),w,b
  5061  001256  0101               	movlb	1	; () banked
  5062  001258  6F35               	movwf	(??_cmFftFun+3)& (0+255),b
  5063  00125A  90D8               	bcf	status,0,c
  5064  00125C  0101               	movlb	1	; () banked
  5065  00125E  3547               	rlcf	cmFftFun@k& (0+255),w,b
  5066  001260  6ED9               	movwf	fsr2l,c
  5067  001262  0101               	movlb	1	; () banked
  5068  001264  3548               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  5069  001266  6EDA               	movwf	fsr2h,c
  5070  001268  0E00               	movlw	low _cmYreal
  5071  00126A  26D9               	addwf	fsr2l,f,c
  5072  00126C  0E02               	movlw	high _cmYreal
  5073  00126E  22DA               	addwfc	fsr2h,f,c
  5074  001270  CFDE F136          	movff	postinc2,??_cmFftFun+4
  5075  001274  CFDD F137          	movff	postdec2,??_cmFftFun+5
  5076  001278  C136  F138         	movff	??_cmFftFun+4,??_cmFftFun+6
  5077  00127C  C137  F139         	movff	??_cmFftFun+5,??_cmFftFun+7
  5078  001280  0E00               	movlw	0
  5079  001282  0101               	movlb	1	; () banked
  5080  001284  BF39               	btfsc	(??_cmFftFun+7)& (0+255),7,b
  5081  001286  0EFF               	movlw	255
  5082  001288  6F3A               	movwf	(??_cmFftFun+8)& (0+255),b
  5083  00128A  6F3B               	movwf	(??_cmFftFun+9)& (0+255),b
  5084  00128C  0101               	movlb	1	; () banked
  5085  00128E  5132               	movf	??_cmFftFun& (0+255),w,b
  5086  001290  0101               	movlb	1	; () banked
  5087  001292  5D38               	subwf	(??_cmFftFun+6)& (0+255),w,b
  5088  001294  0101               	movlb	1	; () banked
  5089  001296  5133               	movf	(??_cmFftFun+1)& (0+255),w,b
  5090  001298  0101               	movlb	1	; () banked
  5091  00129A  5939               	subwfb	(??_cmFftFun+7)& (0+255),w,b
  5092  00129C  0101               	movlb	1	; () banked
  5093  00129E  5134               	movf	(??_cmFftFun+2)& (0+255),w,b
  5094  0012A0  0101               	movlb	1	; () banked
  5095  0012A2  593A               	subwfb	(??_cmFftFun+8)& (0+255),w,b
  5096  0012A4  0101               	movlb	1	; () banked
  5097  0012A6  513B               	movf	(??_cmFftFun+9)& (0+255),w,b
  5098  0012A8  0A80               	xorlw	128
  5099  0012AA  0101               	movlb	1	; () banked
  5100  0012AC  6F3C               	movwf	(??_cmFftFun+10)& (0+255),b
  5101  0012AE  0101               	movlb	1	; () banked
  5102  0012B0  5135               	movf	(??_cmFftFun+3)& (0+255),w,b
  5103  0012B2  0A80               	xorlw	128
  5104  0012B4  0101               	movlb	1	; () banked
  5105  0012B6  593C               	subwfb	(??_cmFftFun+10)& (0+255),w,b
  5106  0012B8  A0D8               	btfss	status,0,c
  5107  0012BA  D03E               	goto	l5584
  5108                           
  5109                           ; BSR set to: 1
  5110                           ;serialcomms.c: 400: {
  5111                           ;serialcomms.c: 401: cmYreal[k] -= root + place;
  5112  0012BC  0101               	movlb	1	; () banked
  5113  0012BE  5143               	movf	cmFftFun@place& (0+255),w,b
  5114  0012C0  0101               	movlb	1	; () banked
  5115  0012C2  253F               	addwf	cmFftFun@root& (0+255),w,b
  5116  0012C4  0101               	movlb	1	; () banked
  5117  0012C6  6F32               	movwf	??_cmFftFun& (0+255),b
  5118  0012C8  0101               	movlb	1	; () banked
  5119  0012CA  5144               	movf	(cmFftFun@place+1)& (0+255),w,b
  5120  0012CC  0101               	movlb	1	; () banked
  5121  0012CE  2140               	addwfc	(cmFftFun@root+1)& (0+255),w,b
  5122  0012D0  0101               	movlb	1	; () banked
  5123  0012D2  6F33               	movwf	(??_cmFftFun+1)& (0+255),b
  5124  0012D4  90D8               	bcf	status,0,c
  5125  0012D6  0101               	movlb	1	; () banked
  5126  0012D8  3547               	rlcf	cmFftFun@k& (0+255),w,b
  5127  0012DA  6ED9               	movwf	fsr2l,c
  5128  0012DC  0101               	movlb	1	; () banked
  5129  0012DE  3548               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  5130  0012E0  6EDA               	movwf	fsr2h,c
  5131  0012E2  0E00               	movlw	low _cmYreal
  5132  0012E4  26D9               	addwf	fsr2l,f,c
  5133  0012E6  0E02               	movlw	high _cmYreal
  5134  0012E8  22DA               	addwfc	fsr2h,f,c
  5135  0012EA  0101               	movlb	1	; () banked
  5136  0012EC  5132               	movf	??_cmFftFun& (0+255),w,b
  5137  0012EE  5EDE               	subwf	postinc2,f,c
  5138  0012F0  5133               	movf	(??_cmFftFun+1)& (0+255),w,b
  5139  0012F2  5ADD               	subwfb	postdec2,f,c
  5140                           
  5141                           ; BSR set to: 1
  5142                           ;serialcomms.c: 402: root += place * 2;
  5143  0012F4  90D8               	bcf	status,0,c
  5144  0012F6  0101               	movlb	1	; () banked
  5145  0012F8  3543               	rlcf	cmFftFun@place& (0+255),w,b
  5146  0012FA  0101               	movlb	1	; () banked
  5147  0012FC  6F32               	movwf	??_cmFftFun& (0+255),b
  5148  0012FE  0101               	movlb	1	; () banked
  5149  001300  3544               	rlcf	(cmFftFun@place+1)& (0+255),w,b
  5150  001302  0101               	movlb	1	; () banked
  5151  001304  6F33               	movwf	(??_cmFftFun+1)& (0+255),b
  5152  001306  0101               	movlb	1	; () banked
  5153  001308  3545               	rlcf	(cmFftFun@place+2)& (0+255),w,b
  5154  00130A  0101               	movlb	1	; () banked
  5155  00130C  6F34               	movwf	(??_cmFftFun+2)& (0+255),b
  5156  00130E  0101               	movlb	1	; () banked
  5157  001310  3546               	rlcf	(cmFftFun@place+3)& (0+255),w,b
  5158  001312  0101               	movlb	1	; () banked
  5159  001314  6F35               	movwf	(??_cmFftFun+3)& (0+255),b
  5160  001316  0101               	movlb	1	; () banked
  5161  001318  5132               	movf	??_cmFftFun& (0+255),w,b
  5162  00131A  0101               	movlb	1	; () banked
  5163  00131C  273F               	addwf	cmFftFun@root& (0+255),f,b
  5164  00131E  0101               	movlb	1	; () banked
  5165  001320  5133               	movf	(??_cmFftFun+1)& (0+255),w,b
  5166  001322  0101               	movlb	1	; () banked
  5167  001324  2340               	addwfc	(cmFftFun@root+1)& (0+255),f,b
  5168  001326  0101               	movlb	1	; () banked
  5169  001328  5134               	movf	(??_cmFftFun+2)& (0+255),w,b
  5170  00132A  0101               	movlb	1	; () banked
  5171  00132C  2341               	addwfc	(cmFftFun@root+2)& (0+255),f,b
  5172  00132E  0101               	movlb	1	; () banked
  5173  001330  5135               	movf	(??_cmFftFun+3)& (0+255),w,b
  5174  001332  0101               	movlb	1	; () banked
  5175  001334  2342               	addwfc	(cmFftFun@root+3)& (0+255),f,b
  5176  001336  D000               	goto	l5584
  5177  001338                     l5584:
  5178                           
  5179                           ; BSR set to: 1
  5180                           ;serialcomms.c: 403: }
  5181                           ;serialcomms.c: 404: root = root >> 1;
  5182  001338  C13F  F132         	movff	cmFftFun@root,??_cmFftFun
  5183  00133C  C140  F133         	movff	cmFftFun@root+1,??_cmFftFun+1
  5184  001340  C141  F134         	movff	cmFftFun@root+2,??_cmFftFun+2
  5185  001344  C142  F135         	movff	cmFftFun@root+3,??_cmFftFun+3
  5186  001348  0101               	movlb	1	; () banked
  5187  00134A  3535               	rlcf	(??_cmFftFun+3)& (0+255),w,b
  5188  00134C  3335               	rrcf	(??_cmFftFun+3)& (0+255),f,b
  5189  00134E  3334               	rrcf	(??_cmFftFun+2)& (0+255),f,b
  5190  001350  3333               	rrcf	(??_cmFftFun+1)& (0+255),f,b
  5191  001352  3332               	rrcf	??_cmFftFun& (0+255),f,b
  5192  001354  C132  F13F         	movff	??_cmFftFun,cmFftFun@root
  5193  001358  C133  F140         	movff	??_cmFftFun+1,cmFftFun@root+1
  5194  00135C  C134  F141         	movff	??_cmFftFun+2,cmFftFun@root+2
  5195  001360  C135  F142         	movff	??_cmFftFun+3,cmFftFun@root+3
  5196                           
  5197                           ; BSR set to: 1
  5198                           ;serialcomms.c: 405: place = place >> 2;
  5199  001364  0E02               	movlw	2
  5200  001366  0101               	movlb	1	; () banked
  5201  001368  6F32               	movwf	??_cmFftFun& (0+255),b
  5202  00136A  C143  F133         	movff	cmFftFun@place,??_cmFftFun+1
  5203  00136E  C144  F134         	movff	cmFftFun@place+1,??_cmFftFun+2
  5204  001372  C145  F135         	movff	cmFftFun@place+2,??_cmFftFun+3
  5205  001376  C146  F136         	movff	cmFftFun@place+3,??_cmFftFun+4
  5206  00137A                     u6355:
  5207  00137A  0101               	movlb	1	; () banked
  5208  00137C  6732               	tstfsz	??_cmFftFun& (0+255),b
  5209  00137E  D001               	goto	u6356
  5210  001380  D009               	goto	u6357
  5211  001382                     u6356:
  5212  001382  0101               	movlb	1	; () banked
  5213  001384  3536               	rlcf	(??_cmFftFun+4)& (0+255),w,b
  5214  001386  3336               	rrcf	(??_cmFftFun+4)& (0+255),f,b
  5215  001388  3335               	rrcf	(??_cmFftFun+3)& (0+255),f,b
  5216  00138A  3334               	rrcf	(??_cmFftFun+2)& (0+255),f,b
  5217  00138C  3333               	rrcf	(??_cmFftFun+1)& (0+255),f,b
  5218  00138E  0101               	movlb	1	; () banked
  5219  001390  2F32               	decfsz	??_cmFftFun& (0+255),f,b
  5220  001392  D7F3               	goto	u6355
  5221  001394                     u6357:
  5222  001394  C133  F143         	movff	??_cmFftFun+1,cmFftFun@place
  5223  001398  C134  F144         	movff	??_cmFftFun+2,cmFftFun@place+1
  5224  00139C  C135  F145         	movff	??_cmFftFun+3,cmFftFun@place+2
  5225  0013A0  C136  F146         	movff	??_cmFftFun+4,cmFftFun@place+3
  5226  0013A4  D000               	goto	l5588
  5227  0013A6                     l5588:
  5228  0013A6  0101               	movlb	1	; () banked
  5229  0013A8  5143               	movf	cmFftFun@place& (0+255),w,b
  5230  0013AA  0101               	movlb	1	; () banked
  5231  0013AC  1144               	iorwf	(cmFftFun@place+1)& (0+255),w,b
  5232  0013AE  0101               	movlb	1	; () banked
  5233  0013B0  1145               	iorwf	(cmFftFun@place+2)& (0+255),w,b
  5234  0013B2  0101               	movlb	1	; () banked
  5235  0013B4  1146               	iorwf	(cmFftFun@place+3)& (0+255),w,b
  5236  0013B6  B4D8               	btfsc	status,2,c
  5237  0013B8  D002               	goto	l5590
  5238  0013BA  D737               	goto	l5578
  5239                           
  5240                           ; BSR set to: 1
  5241  0013BC  D000               	goto	l5590
  5242  0013BE                     l5590:
  5243                           
  5244                           ; BSR set to: 1
  5245                           ;serialcomms.c: 406: }
  5246                           ;serialcomms.c: 407: }
  5247                           ;serialcomms.c: 408: cmYreal[k] = root;
  5248  0013BE  90D8               	bcf	status,0,c
  5249  0013C0  0101               	movlb	1	; () banked
  5250  0013C2  3547               	rlcf	cmFftFun@k& (0+255),w,b
  5251  0013C4  6ED9               	movwf	fsr2l,c
  5252  0013C6  0101               	movlb	1	; () banked
  5253  0013C8  3548               	rlcf	(cmFftFun@k+1)& (0+255),w,b
  5254  0013CA  6EDA               	movwf	fsr2h,c
  5255  0013CC  0E00               	movlw	low _cmYreal
  5256  0013CE  26D9               	addwf	fsr2l,f,c
  5257  0013D0  0E02               	movlw	high _cmYreal
  5258  0013D2  22DA               	addwfc	fsr2h,f,c
  5259  0013D4  C13F  FFDE         	movff	cmFftFun@root,postinc2
  5260  0013D8  C140  FFDD         	movff	cmFftFun@root+1,postdec2
  5261                           
  5262                           ; BSR set to: 1
  5263  0013DC  0101               	movlb	1	; () banked
  5264  0013DE  4B47               	infsnz	cmFftFun@k& (0+255),f,b
  5265  0013E0  2B48               	incf	(cmFftFun@k+1)& (0+255),f,b
  5266                           
  5267                           ; BSR set to: 1
  5268  0013E2  0101               	movlb	1	; () banked
  5269  0013E4  BF48               	btfsc	(cmFftFun@k+1)& (0+255),7,b
  5270  0013E6  D650               	goto	l5564
  5271  0013E8  0101               	movlb	1	; () banked
  5272  0013EA  5148               	movf	(cmFftFun@k+1)& (0+255),w,b
  5273  0013EC  E102               	bnz	l206
  5274  0013EE  D645               	goto	L1
  5275  0013F0  D000               	goto	l206
  5276  0013F2                     l206:
  5277                           
  5278                           ; BSR set to: 1
  5279  0013F2  0012               	return		;funcret
  5280  0013F4                     __end_of_cmFftFun:
  5281                           	opt stack 0
  5282                           tblptru	equ	0xFF8
  5283                           tblptrh	equ	0xFF7
  5284                           tblptrl	equ	0xFF6
  5285                           tablat	equ	0xFF5
  5286                           postinc0	equ	0xFEE
  5287                           wreg	equ	0xFE8
  5288                           postdec1	equ	0xFE5
  5289                           plusw1	equ	0xFE3
  5290                           fsr1h	equ	0xFE2
  5291                           fsr1l	equ	0xFE1
  5292                           postinc2	equ	0xFDE
  5293                           postdec2	equ	0xFDD
  5294                           plusw2	equ	0xFDB
  5295                           fsr2h	equ	0xFDA
  5296                           fsr2l	equ	0xFD9
  5297                           status	equ	0xFD8
  5298                           
  5299 ;; *************** function _log *****************
  5300 ;; Defined at:
  5301 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  5302 ;; Parameters:    Size  Location     Type
  5303 ;;  x               3   82[BANK0 ] short 
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;  exponent        2   85[BANK0 ] int 
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  3   82[BANK0 ] int 
  5308 ;; Registers used:
  5309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5315 ;;      Params:         0       3       0       0       0       0       0
  5316 ;;      Locals:         0       2       0       0       0       0       0
  5317 ;;      Temps:          0       0       0       0       0       0       0
  5318 ;;      Totals:         0       5       0       0       0       0       0
  5319 ;;Total ram usage:        5 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    8
  5322 ;; This function calls:
  5323 ;;		___awtoft
  5324 ;;		___ftadd
  5325 ;;		___ftmul
  5326 ;;		_eval_poly
  5327 ;;		_frexp
  5328 ;; This function is called by:
  5329 ;;		_cmFftFun
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           	psect	text4
  5334  003302                     __ptext4:
  5335                           	opt stack 0
  5336  003302                     _log:
  5337                           	opt stack 20
  5338                           
  5339                           ; BSR set to: 1
  5340                           ;incstack = 0
  5341  003302  0100               	movlb	0	; () banked
  5342  003304  AFD4               	btfss	(log@x+2)& (0+255),7,b
  5343  003306  D006               	goto	l5252
  5344                           
  5345                           ; BSR set to: 0
  5346  003308  0E00               	movlw	0
  5347  00330A  0101               	movlb	1	; () banked
  5348  00330C  6FCF               	movwf	(_errno+1)& (0+255),b
  5349  00330E  0E21               	movlw	33
  5350  003310  D00D               	goto	L2
  5351                           
  5352                           ; BSR set to: 0
  5353  003312  D096               	goto	l1336
  5354  003314                     l5252:
  5355                           
  5356                           ; BSR set to: 0
  5357  003314  0100               	movlb	0	; () banked
  5358  003316  51D2               	movf	log@x& (0+255),w,b
  5359  003318  0100               	movlb	0	; () banked
  5360  00331A  11D3               	iorwf	(log@x+1)& (0+255),w,b
  5361  00331C  0100               	movlb	0	; () banked
  5362  00331E  11D4               	iorwf	(log@x+2)& (0+255),w,b
  5363  003320  A4D8               	btfss	status,2,c
  5364  003322  D00F               	goto	l5258
  5365                           
  5366                           ; BSR set to: 0
  5367  003324  0E00               	movlw	0
  5368  003326  0101               	movlb	1	; () banked
  5369  003328  6FCF               	movwf	(_errno+1)& (0+255),b
  5370  00332A  0E22               	movlw	34
  5371  00332C                     L2:
  5372  00332C  6FCE               	movwf	_errno& (0+255),b
  5373  00332E  0E00               	movlw	0
  5374  003330  0100               	movlb	0	; () banked
  5375  003332  6FD2               	movwf	?_log& (0+255),b
  5376  003334  0E00               	movlw	0
  5377  003336  0100               	movlb	0	; () banked
  5378  003338  6FD3               	movwf	(?_log+1)& (0+255),b
  5379  00333A  0E00               	movlw	0
  5380  00333C  0100               	movlb	0	; () banked
  5381  00333E  6FD4               	movwf	(?_log+2)& (0+255),b
  5382                           
  5383                           ; BSR set to: 0
  5384  003340  D07F               	goto	l1336
  5385  003342                     l5258:
  5386                           
  5387                           ; BSR set to: 0
  5388  003342  0E00               	movlw	0
  5389  003344  0100               	movlb	0	; () banked
  5390  003346  6FAE               	movwf	___ftmul@f2& (0+255),b
  5391  003348  0E00               	movlw	0
  5392  00334A  0100               	movlb	0	; () banked
  5393  00334C  6FAF               	movwf	(___ftmul@f2+1)& (0+255),b
  5394  00334E  0E40               	movlw	64
  5395  003350  0100               	movlb	0	; () banked
  5396  003352  6FB0               	movwf	(___ftmul@f2+2)& (0+255),b
  5397  003354  0ED5               	movlw	low log@exponent
  5398  003356  0100               	movlb	0	; () banked
  5399  003358  6FA2               	movwf	frexp@eptr& (0+255),b
  5400  00335A  0E00               	movlw	high log@exponent
  5401  00335C  0100               	movlb	0	; () banked
  5402  00335E  6FA3               	movwf	(frexp@eptr+1)& (0+255),b
  5403  003360  C0D2  F09F         	movff	log@x,frexp@value
  5404  003364  C0D3  F0A0         	movff	log@x+1,frexp@value+1
  5405  003368  C0D4  F0A1         	movff	log@x+2,frexp@value+2
  5406  00336C  ECFF  F01D         	call	_frexp	;wreg free
  5407  003370  C09F  F0AB         	movff	?_frexp,___ftmul@f1
  5408  003374  C0A0  F0AC         	movff	?_frexp+1,___ftmul@f1+1
  5409  003378  C0A1  F0AD         	movff	?_frexp+2,___ftmul@f1+2
  5410  00337C  EC32  F018         	call	___ftmul	;wreg free
  5411  003380  C0AB  F0BA         	movff	?___ftmul,___ftadd@f1
  5412  003384  C0AC  F0BB         	movff	?___ftmul+1,___ftadd@f1+1
  5413  003388  C0AD  F0BC         	movff	?___ftmul+2,___ftadd@f1+2
  5414  00338C  0E00               	movlw	0
  5415  00338E  0100               	movlb	0	; () banked
  5416  003390  6FBD               	movwf	___ftadd@f2& (0+255),b
  5417  003392  0E80               	movlw	128
  5418  003394  0100               	movlb	0	; () banked
  5419  003396  6FBE               	movwf	(___ftadd@f2+1)& (0+255),b
  5420  003398  0EBF               	movlw	191
  5421  00339A  0100               	movlb	0	; () banked
  5422  00339C  6FBF               	movwf	(___ftadd@f2+2)& (0+255),b
  5423  00339E  ECDF  F012         	call	___ftadd	;wreg free
  5424  0033A2  C0BA  F0D2         	movff	?___ftadd,log@x
  5425  0033A6  C0BB  F0D3         	movff	?___ftadd+1,log@x+1
  5426  0033AA  C0BC  F0D4         	movff	?___ftadd+2,log@x+2
  5427  0033AE  0100               	movlb	0	; () banked
  5428  0033B0  07D5               	decf	log@exponent& (0+255),f,b
  5429  0033B2  A0D8               	btfss	status,0,c
  5430  0033B4  07D6               	decf	(log@exponent+1)& (0+255),f,b
  5431                           
  5432                           ; BSR set to: 0
  5433  0033B6  C0D2  F0C6         	movff	log@x,eval_poly@x
  5434  0033BA  C0D3  F0C7         	movff	log@x+1,eval_poly@x+1
  5435  0033BE  C0D4  F0C8         	movff	log@x+2,eval_poly@x+2
  5436  0033C2  0EDF               	movlw	low log@coeff
  5437  0033C4  0100               	movlb	0	; () banked
  5438  0033C6  6FC9               	movwf	eval_poly@d& (0+255),b
  5439  0033C8  0E7C               	movlw	high log@coeff
  5440  0033CA  0100               	movlb	0	; () banked
  5441  0033CC  6FCA               	movwf	(eval_poly@d+1)& (0+255),b
  5442  0033CE  0E00               	movlw	0
  5443  0033D0  0100               	movlb	0	; () banked
  5444  0033D2  6FCC               	movwf	(eval_poly@n+1)& (0+255),b
  5445  0033D4  0E08               	movlw	8
  5446  0033D6  6FCB               	movwf	eval_poly@n& (0+255),b
  5447  0033D8  EC5C  F01C         	call	_eval_poly	;wreg free
  5448  0033DC  C0C6  F0D2         	movff	?_eval_poly,log@x
  5449  0033E0  C0C7  F0D3         	movff	?_eval_poly+1,log@x+1
  5450  0033E4  C0C8  F0D4         	movff	?_eval_poly+2,log@x+2
  5451  0033E8  0E72               	movlw	114
  5452  0033EA  0100               	movlb	0	; () banked
  5453  0033EC  6FAE               	movwf	___ftmul@f2& (0+255),b
  5454  0033EE  0E31               	movlw	49
  5455  0033F0  0100               	movlb	0	; () banked
  5456  0033F2  6FAF               	movwf	(___ftmul@f2+1)& (0+255),b
  5457  0033F4  0E3F               	movlw	63
  5458  0033F6  0100               	movlb	0	; () banked
  5459  0033F8  6FB0               	movwf	(___ftmul@f2+2)& (0+255),b
  5460  0033FA  C0D5  F0A7         	movff	log@exponent,___awtoft@c
  5461  0033FE  C0D6  F0A8         	movff	log@exponent+1,___awtoft@c+1
  5462  003402  EC2B  F021         	call	___awtoft	;wreg free
  5463  003406  C0A7  F0AB         	movff	?___awtoft,___ftmul@f1
  5464  00340A  C0A8  F0AC         	movff	?___awtoft+1,___ftmul@f1+1
  5465  00340E  C0A9  F0AD         	movff	?___awtoft+2,___ftmul@f1+2
  5466  003412  EC32  F018         	call	___ftmul	;wreg free
  5467  003416  C0AB  F0BA         	movff	?___ftmul,___ftadd@f1
  5468  00341A  C0AC  F0BB         	movff	?___ftmul+1,___ftadd@f1+1
  5469  00341E  C0AD  F0BC         	movff	?___ftmul+2,___ftadd@f1+2
  5470  003422  C0D2  F0BD         	movff	log@x,___ftadd@f2
  5471  003426  C0D3  F0BE         	movff	log@x+1,___ftadd@f2+1
  5472  00342A  C0D4  F0BF         	movff	log@x+2,___ftadd@f2+2
  5473  00342E  ECDF  F012         	call	___ftadd	;wreg free
  5474  003432  C0BA  F0D2         	movff	?___ftadd,?_log
  5475  003436  C0BB  F0D3         	movff	?___ftadd+1,?_log+1
  5476  00343A  C0BC  F0D4         	movff	?___ftadd+2,?_log+2
  5477  00343E  D000               	goto	l1336
  5478  003440                     l1336:
  5479  003440  0012               	return		;funcret
  5480  003442                     __end_of_log:
  5481                           	opt stack 0
  5482                           tblptru	equ	0xFF8
  5483                           tblptrh	equ	0xFF7
  5484                           tblptrl	equ	0xFF6
  5485                           tablat	equ	0xFF5
  5486                           postinc0	equ	0xFEE
  5487                           wreg	equ	0xFE8
  5488                           postdec1	equ	0xFE5
  5489                           plusw1	equ	0xFE3
  5490                           fsr1h	equ	0xFE2
  5491                           fsr1l	equ	0xFE1
  5492                           postinc2	equ	0xFDE
  5493                           postdec2	equ	0xFDD
  5494                           plusw2	equ	0xFDB
  5495                           fsr2h	equ	0xFDA
  5496                           fsr2l	equ	0xFD9
  5497                           status	equ	0xFD8
  5498                           
  5499 ;; *************** function _frexp *****************
  5500 ;; Defined at:
  5501 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  5502 ;; Parameters:    Size  Location     Type
  5503 ;;  value           3   31[BANK0 ] int 
  5504 ;;  eptr            2   34[BANK0 ] PTR int 
  5505 ;;		 -> log@exponent(2), 
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;		None
  5508 ;; Return value:  Size  Location     Type
  5509 ;;                  3   31[BANK0 ] PTR int 
  5510 ;; Registers used:
  5511 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5512 ;; Tracked objects:
  5513 ;;		On entry : 0/0
  5514 ;;		On exit  : 0/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5517 ;;      Params:         0       5       0       0       0       0       0
  5518 ;;      Locals:         0       0       0       0       0       0       0
  5519 ;;      Temps:          0       2       0       0       0       0       0
  5520 ;;      Totals:         0       7       0       0       0       0       0
  5521 ;;Total ram usage:        7 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; Hardware stack levels required when called:    5
  5524 ;; This function calls:
  5525 ;;		Nothing
  5526 ;; This function is called by:
  5527 ;;		_log
  5528 ;; This function uses a non-reentrant model
  5529 ;;
  5530                           
  5531                           	psect	text5
  5532  003BFE                     __ptext5:
  5533                           	opt stack 0
  5534  003BFE                     _frexp:
  5535                           	opt stack 22
  5536                           
  5537                           ;incstack = 0
  5538  003BFE  0100               	movlb	0	; () banked
  5539  003C00  519F               	movf	frexp@value& (0+255),w,b
  5540  003C02  0100               	movlb	0	; () banked
  5541  003C04  11A0               	iorwf	(frexp@value+1)& (0+255),w,b
  5542  003C06  0100               	movlb	0	; () banked
  5543  003C08  11A1               	iorwf	(frexp@value+2)& (0+255),w,b
  5544  003C0A  A4D8               	btfss	status,2,c
  5545  003C0C  D012               	goto	l5084
  5546                           
  5547                           ; BSR set to: 0
  5548  003C0E  C0A2  FFD9         	movff	frexp@eptr,fsr2l
  5549  003C12  C0A3  FFDA         	movff	frexp@eptr+1,fsr2h
  5550  003C16  0E00               	movlw	0
  5551  003C18  6EDE               	movwf	postinc2,c
  5552  003C1A  0E00               	movlw	0
  5553  003C1C  6EDD               	movwf	postdec2,c
  5554                           
  5555                           ; BSR set to: 0
  5556  003C1E  0E00               	movlw	0
  5557  003C20  0100               	movlb	0	; () banked
  5558  003C22  6F9F               	movwf	?_frexp& (0+255),b
  5559  003C24  0E00               	movlw	0
  5560  003C26  0100               	movlb	0	; () banked
  5561  003C28  6FA0               	movwf	(?_frexp+1)& (0+255),b
  5562  003C2A  0E00               	movlw	0
  5563  003C2C  0100               	movlb	0	; () banked
  5564  003C2E  6FA1               	movwf	(?_frexp+2)& (0+255),b
  5565                           
  5566                           ; BSR set to: 0
  5567  003C30  D03C               	goto	l1436
  5568  003C32                     l5084:
  5569                           
  5570                           ; BSR set to: 0
  5571  003C32  0100               	movlb	0	; () banked
  5572  003C34  51A1               	movf	(frexp@value+2)& (0+255),w,b
  5573  003C36  0B7F               	andlw	127
  5574  003C38  0100               	movlb	0	; () banked
  5575  003C3A  6FA4               	movwf	??_frexp& (0+255),b
  5576  003C3C  6BA5               	clrf	(??_frexp+1)& (0+255),b
  5577  003C3E  90D8               	bcf	status,0,c
  5578  003C40  0100               	movlb	0	; () banked
  5579  003C42  37A4               	rlcf	??_frexp& (0+255),f,b
  5580  003C44  37A5               	rlcf	(??_frexp+1)& (0+255),f,b
  5581  003C46  C0A2  FFD9         	movff	frexp@eptr,fsr2l
  5582  003C4A  C0A3  FFDA         	movff	frexp@eptr+1,fsr2h
  5583  003C4E  C0A4  FFDE         	movff	??_frexp,postinc2
  5584  003C52  C0A5  FFDD         	movff	??_frexp+1,postdec2
  5585  003C56  0100               	movlb	0	; () banked
  5586  003C58  AFA0               	btfss	(frexp@value+1)& (0+255),7,b
  5587  003C5A  D004               	goto	u5540
  5588  003C5C  0100               	movlb	0	; () banked
  5589  003C5E  6BA4               	clrf	??_frexp& (0+255),b
  5590  003C60  2BA4               	incf	??_frexp& (0+255),f,b
  5591  003C62  D002               	goto	u5548
  5592  003C64                     u5540:
  5593  003C64  0100               	movlb	0	; () banked
  5594  003C66  6BA4               	clrf	??_frexp& (0+255),b
  5595  003C68                     u5548:
  5596  003C68  0100               	movlb	0	; () banked
  5597  003C6A  51A4               	movf	??_frexp& (0+255),w,b
  5598  003C6C  C0A2  FFD9         	movff	frexp@eptr,fsr2l
  5599  003C70  C0A3  FFDA         	movff	frexp@eptr+1,fsr2h
  5600  003C74  12DE               	iorwf	postinc2,f,c
  5601  003C76  0E00               	movlw	0
  5602  003C78  12DD               	iorwf	postdec2,f,c
  5603                           
  5604                           ; BSR set to: 0
  5605  003C7A  C0A2  FFD9         	movff	frexp@eptr,fsr2l
  5606  003C7E  C0A3  FFDA         	movff	frexp@eptr+1,fsr2h
  5607  003C82  0E82               	movlw	130
  5608  003C84  26DE               	addwf	postinc2,f,c
  5609  003C86  0EFF               	movlw	255
  5610  003C88  22DD               	addwfc	postdec2,f,c
  5611                           
  5612                           ; BSR set to: 0
  5613  003C8A  81A1               	bsf	(frexp@value+2)& (0+255),0,b
  5614  003C8C  83A1               	bsf	(frexp@value+2)& (0+255),1,b
  5615  003C8E  85A1               	bsf	(frexp@value+2)& (0+255),2,b
  5616  003C90  87A1               	bsf	(frexp@value+2)& (0+255),3,b
  5617  003C92  89A1               	bsf	(frexp@value+2)& (0+255),4,b
  5618  003C94  8BA1               	bsf	(frexp@value+2)& (0+255),5,b
  5619  003C96  9DA1               	bcf	(frexp@value+2)& (0+255),6,b
  5620                           
  5621                           ; BSR set to: 0
  5622  003C98  0100               	movlb	0	; () banked
  5623  003C9A  9FA0               	bcf	(frexp@value+1)& (0+255),7,b
  5624                           
  5625                           ; BSR set to: 0
  5626  003C9C  C09F  F09F         	movff	frexp@value,?_frexp
  5627  003CA0  C0A0  F0A0         	movff	frexp@value+1,?_frexp+1
  5628  003CA4  C0A1  F0A1         	movff	frexp@value+2,?_frexp+2
  5629  003CA8  D000               	goto	l1436
  5630  003CAA                     l1436:
  5631                           
  5632                           ; BSR set to: 0
  5633  003CAA  0012               	return		;funcret
  5634  003CAC                     __end_of_frexp:
  5635                           	opt stack 0
  5636                           tblptru	equ	0xFF8
  5637                           tblptrh	equ	0xFF7
  5638                           tblptrl	equ	0xFF6
  5639                           tablat	equ	0xFF5
  5640                           postinc0	equ	0xFEE
  5641                           wreg	equ	0xFE8
  5642                           postdec1	equ	0xFE5
  5643                           plusw1	equ	0xFE3
  5644                           fsr1h	equ	0xFE2
  5645                           fsr1l	equ	0xFE1
  5646                           postinc2	equ	0xFDE
  5647                           postdec2	equ	0xFDD
  5648                           plusw2	equ	0xFDB
  5649                           fsr2h	equ	0xFDA
  5650                           fsr2l	equ	0xFD9
  5651                           status	equ	0xFD8
  5652                           
  5653 ;; *************** function _eval_poly *****************
  5654 ;; Defined at:
  5655 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;  x               3   70[BANK0 ] PTR int 
  5658 ;;  d               2   73[BANK0 ] PTR const 
  5659 ;;		 -> log@coeff(27), 
  5660 ;;  n               2   75[BANK0 ] int 
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;  res             3   79[BANK0 ] int 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  3   70[BANK0 ] int 
  5665 ;; Registers used:
  5666 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5672 ;;      Params:         0       7       0       0       0       0       0
  5673 ;;      Locals:         0       3       0       0       0       0       0
  5674 ;;      Temps:          0       2       0       0       0       0       0
  5675 ;;      Totals:         0      12       0       0       0       0       0
  5676 ;;Total ram usage:       12 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    7
  5679 ;; This function calls:
  5680 ;;		___ftadd
  5681 ;;		___ftmul
  5682 ;;		___wmul
  5683 ;; This function is called by:
  5684 ;;		_log
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           	psect	text6
  5689  0038B8                     __ptext6:
  5690                           	opt stack 0
  5691  0038B8                     _eval_poly:
  5692                           	opt stack 20
  5693                           
  5694                           ; BSR set to: 0
  5695                           ;incstack = 0
  5696  0038B8  C0CB  F09F         	movff	eval_poly@n,___wmul@multiplier
  5697  0038BC  C0CC  F0A0         	movff	eval_poly@n+1,___wmul@multiplier+1
  5698  0038C0  0E00               	movlw	0
  5699  0038C2  0100               	movlb	0	; () banked
  5700  0038C4  6FA2               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5701  0038C6  0E03               	movlw	3
  5702  0038C8  6FA1               	movwf	___wmul@multiplicand& (0+255),b
  5703  0038CA  EC72  F021         	call	___wmul	;wreg free
  5704  0038CE  C0C9  F0CD         	movff	eval_poly@d,??_eval_poly
  5705  0038D2  C0CA  F0CE         	movff	eval_poly@d+1,??_eval_poly+1
  5706  0038D6  0100               	movlb	0	; () banked
  5707  0038D8  519F               	movf	?___wmul& (0+255),w,b
  5708  0038DA  0100               	movlb	0	; () banked
  5709  0038DC  27CD               	addwf	??_eval_poly& (0+255),f,b
  5710  0038DE  0100               	movlb	0	; () banked
  5711  0038E0  51A0               	movf	(?___wmul+1)& (0+255),w,b
  5712  0038E2  0100               	movlb	0	; () banked
  5713  0038E4  23CE               	addwfc	(??_eval_poly+1)& (0+255),f,b
  5714  0038E6  C0CD  FFF6         	movff	??_eval_poly,tblptrl
  5715  0038EA  C0CE  FFF7         	movff	??_eval_poly+1,tblptrh
  5716  0038EE                     	if	0	;tblptru may be non-zero
  5717  0038EE                     	endif
  5718  0038EE                     	if	0	;tblptru may be non-zero
  5719  0038EE                     	endif
  5720  0038EE  0009               	tblrd		*+
  5721  0038F0  CFF5 F0CF          	movff	tablat,eval_poly@res
  5722  0038F4  0009               	tblrd		*+
  5723  0038F6  CFF5 F0D0          	movff	tablat,eval_poly@res+1
  5724  0038FA  000A               	tblrd		*-
  5725  0038FC  CFF5 F0D1          	movff	tablat,eval_poly@res+2
  5726  003900  D045               	goto	l5100
  5727  003902                     l5098:
  5728                           
  5729                           ; BSR set to: 0
  5730  003902  C0CF  F0AE         	movff	eval_poly@res,___ftmul@f2
  5731  003906  C0D0  F0AF         	movff	eval_poly@res+1,___ftmul@f2+1
  5732  00390A  C0D1  F0B0         	movff	eval_poly@res+2,___ftmul@f2+2
  5733  00390E  C0C6  F0AB         	movff	eval_poly@x,___ftmul@f1
  5734  003912  C0C7  F0AC         	movff	eval_poly@x+1,___ftmul@f1+1
  5735  003916  C0C8  F0AD         	movff	eval_poly@x+2,___ftmul@f1+2
  5736  00391A  EC32  F018         	call	___ftmul	;wreg free
  5737  00391E  C0AB  F0BA         	movff	?___ftmul,___ftadd@f1
  5738  003922  C0AC  F0BB         	movff	?___ftmul+1,___ftadd@f1+1
  5739  003926  C0AD  F0BC         	movff	?___ftmul+2,___ftadd@f1+2
  5740  00392A  0E00               	movlw	0
  5741  00392C  0100               	movlb	0	; () banked
  5742  00392E  6FA2               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5743  003930  0E03               	movlw	3
  5744  003932  6FA1               	movwf	___wmul@multiplicand& (0+255),b
  5745  003934  0100               	movlb	0	; () banked
  5746  003936  07CB               	decf	eval_poly@n& (0+255),f,b
  5747  003938  A0D8               	btfss	status,0,c
  5748  00393A  07CC               	decf	(eval_poly@n+1)& (0+255),f,b
  5749  00393C  C0CB  F09F         	movff	eval_poly@n,___wmul@multiplier
  5750  003940  C0CC  F0A0         	movff	eval_poly@n+1,___wmul@multiplier+1
  5751  003944  EC72  F021         	call	___wmul	;wreg free
  5752  003948  C0C9  F0CD         	movff	eval_poly@d,??_eval_poly
  5753  00394C  C0CA  F0CE         	movff	eval_poly@d+1,??_eval_poly+1
  5754  003950  0100               	movlb	0	; () banked
  5755  003952  519F               	movf	?___wmul& (0+255),w,b
  5756  003954  0100               	movlb	0	; () banked
  5757  003956  27CD               	addwf	??_eval_poly& (0+255),f,b
  5758  003958  0100               	movlb	0	; () banked
  5759  00395A  51A0               	movf	(?___wmul+1)& (0+255),w,b
  5760  00395C  0100               	movlb	0	; () banked
  5761  00395E  23CE               	addwfc	(??_eval_poly+1)& (0+255),f,b
  5762  003960  C0CD  FFF6         	movff	??_eval_poly,tblptrl
  5763  003964  C0CE  FFF7         	movff	??_eval_poly+1,tblptrh
  5764  003968                     	if	0	;tblptru may be non-zero
  5765  003968                     	endif
  5766  003968                     	if	0	;tblptru may be non-zero
  5767  003968                     	endif
  5768  003968  0009               	tblrd		*+
  5769  00396A  CFF5 F0BD          	movff	tablat,___ftadd@f2
  5770  00396E  0009               	tblrd		*+
  5771  003970  CFF5 F0BE          	movff	tablat,___ftadd@f2+1
  5772  003974  000A               	tblrd		*-
  5773  003976  CFF5 F0BF          	movff	tablat,___ftadd@f2+2
  5774  00397A  ECDF  F012         	call	___ftadd	;wreg free
  5775  00397E  C0BA  F0CF         	movff	?___ftadd,eval_poly@res
  5776  003982  C0BB  F0D0         	movff	?___ftadd+1,eval_poly@res+1
  5777  003986  C0BC  F0D1         	movff	?___ftadd+2,eval_poly@res+2
  5778  00398A  D000               	goto	l5100
  5779  00398C                     l5100:
  5780  00398C  0100               	movlb	0	; () banked
  5781  00398E  51CB               	movf	eval_poly@n& (0+255),w,b
  5782  003990  0100               	movlb	0	; () banked
  5783  003992  11CC               	iorwf	(eval_poly@n+1)& (0+255),w,b
  5784  003994  A4D8               	btfss	status,2,c
  5785  003996  D7B5               	goto	l5098
  5786                           
  5787                           ; BSR set to: 0
  5788  003998  C0CF  F0C6         	movff	eval_poly@res,?_eval_poly
  5789  00399C  C0D0  F0C7         	movff	eval_poly@res+1,?_eval_poly+1
  5790  0039A0  C0D1  F0C8         	movff	eval_poly@res+2,?_eval_poly+2
  5791                           
  5792                           ; BSR set to: 0
  5793  0039A4  0012               	return		;funcret
  5794  0039A6                     __end_of_eval_poly:
  5795                           	opt stack 0
  5796                           tblptru	equ	0xFF8
  5797                           tblptrh	equ	0xFF7
  5798                           tblptrl	equ	0xFF6
  5799                           tablat	equ	0xFF5
  5800                           postinc0	equ	0xFEE
  5801                           wreg	equ	0xFE8
  5802                           postdec1	equ	0xFE5
  5803                           plusw1	equ	0xFE3
  5804                           fsr1h	equ	0xFE2
  5805                           fsr1l	equ	0xFE1
  5806                           postinc2	equ	0xFDE
  5807                           postdec2	equ	0xFDD
  5808                           plusw2	equ	0xFDB
  5809                           fsr2h	equ	0xFDA
  5810                           fsr2l	equ	0xFD9
  5811                           status	equ	0xFD8
  5812                           
  5813 ;; *************** function _fix_fft *****************
  5814 ;; Defined at:
  5815 ;;		line 52 in file "fft.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;  fr              2   43[BANK0 ] PTR short 
  5818 ;;		 -> cmYreal(256), 
  5819 ;;  fi              2   45[BANK0 ] PTR short 
  5820 ;;		 -> cmYimag(256), 
  5821 ;;  m               2   47[BANK0 ] short 
  5822 ;; Auto vars:     Size  Location     Type
  5823 ;;  c               4   46[BANK1 ] long 
  5824 ;;  b               2   28[BANK1 ] short 
  5825 ;;  j               4   42[BANK1 ] long 
  5826 ;;  l               4   38[BANK1 ] long 
  5827 ;;  mr              4   34[BANK1 ] long 
  5828 ;;  i               4   30[BANK1 ] long 
  5829 ;;  n               4   20[BANK1 ] long 
  5830 ;;  istep           4    8[BANK1 ] long 
  5831 ;;  nn              4    4[BANK1 ] long 
  5832 ;;  k               4    0[BANK1 ] long 
  5833 ;;  shift           4    0        long 
  5834 ;;  ti              2   26[BANK1 ] short 
  5835 ;;  tr              2   24[BANK1 ] short 
  5836 ;;  wi              2   18[BANK1 ] short 
  5837 ;;  wr              2   16[BANK1 ] short 
  5838 ;;  qi              2   14[BANK1 ] short 
  5839 ;;  qr              2   12[BANK1 ] short 
  5840 ;; Return value:  Size  Location     Type
  5841 ;;		None               void
  5842 ;; Registers used:
  5843 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5844 ;; Tracked objects:
  5845 ;;		On entry : 0/0
  5846 ;;		On exit  : 0/0
  5847 ;;		Unchanged: 0/0
  5848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5849 ;;      Params:         0       6       0       0       0       0       0
  5850 ;;      Locals:         0       0      50       0       0       0       0
  5851 ;;      Temps:          0       8       0       0       0       0       0
  5852 ;;      Totals:         0      14      50       0       0       0       0
  5853 ;;Total ram usage:       64 bytes
  5854 ;; Hardware stack levels used:    1
  5855 ;; Hardware stack levels required when called:    6
  5856 ;; This function calls:
  5857 ;;		___lmul
  5858 ;; This function is called by:
  5859 ;;		_cmFftFun
  5860 ;; This function uses a non-reentrant model
  5861 ;;
  5862                           
  5863                           	psect	text7
  5864  00018C                     __ptext7:
  5865                           	opt stack 0
  5866  00018C                     _fix_fft:
  5867                           	opt stack 22
  5868                           
  5869                           ;fft.c: 54: long int mr = 0, nn, i, j, l, k, istep, n, shift;
  5870                           
  5871                           ; BSR set to: 0
  5872                           ;incstack = 0
  5873  00018C  0E00               	movlw	0
  5874  00018E  0101               	movlb	1	; () banked
  5875  000190  6F22               	movwf	fix_fft@mr& (0+255),b
  5876  000192  0E00               	movlw	0
  5877  000194  6F23               	movwf	(fix_fft@mr+1)& (0+255),b
  5878  000196  0E00               	movlw	0
  5879  000198  6F24               	movwf	(fix_fft@mr+2)& (0+255),b
  5880  00019A  0E00               	movlw	0
  5881  00019C  6F25               	movwf	(fix_fft@mr+3)& (0+255),b
  5882                           
  5883                           ; BSR set to: 1
  5884                           ;fft.c: 55: short qr, qi, tr, ti, wr, wi;
  5885                           ;fft.c: 57: n = 1 << m;
  5886  00019E  C0AF  F0B1         	movff	fix_fft@m,??_fix_fft
  5887  0001A2  0E01               	movlw	1
  5888  0001A4  0100               	movlb	0	; () banked
  5889  0001A6  6FB2               	movwf	(??_fix_fft+1)& (0+255),b
  5890  0001A8  0E00               	movlw	0
  5891  0001AA  0100               	movlb	0	; () banked
  5892  0001AC  6FB3               	movwf	(??_fix_fft+2)& (0+255),b
  5893  0001AE  0100               	movlb	0	; () banked
  5894  0001B0  2BB1               	incf	??_fix_fft& (0+255),f,b
  5895  0001B2  D004               	goto	u5884
  5896  0001B4                     u5885:
  5897  0001B4  90D8               	bcf	status,0,c
  5898  0001B6  0100               	movlb	0	; () banked
  5899  0001B8  37B2               	rlcf	(??_fix_fft+1)& (0+255),f,b
  5900  0001BA  37B3               	rlcf	(??_fix_fft+2)& (0+255),f,b
  5901  0001BC                     u5884:
  5902  0001BC  0100               	movlb	0	; () banked
  5903  0001BE  2FB1               	decfsz	??_fix_fft& (0+255),f,b
  5904  0001C0  D7F9               	goto	u5885
  5905  0001C2  C0B2  F114         	movff	??_fix_fft+1,fix_fft@n
  5906  0001C6  C0B3  F115         	movff	??_fix_fft+2,fix_fft@n+1
  5907  0001CA  0101               	movlb	1	; () banked
  5908  0001CC  0E00               	movlw	0
  5909  0001CE  BF15               	btfsc	(fix_fft@n+1)& (0+255),7,b
  5910  0001D0  0EFF               	movlw	-1
  5911  0001D2  6F16               	movwf	(fix_fft@n+2)& (0+255),b
  5912  0001D4  6F17               	movwf	(fix_fft@n+3)& (0+255),b
  5913                           
  5914                           ; BSR set to: 1
  5915                           ;fft.c: 58: nn = n - 1;
  5916  0001D6  0EFF               	movlw	255
  5917  0001D8  0101               	movlb	1	; () banked
  5918  0001DA  2514               	addwf	fix_fft@n& (0+255),w,b
  5919  0001DC  0101               	movlb	1	; () banked
  5920  0001DE  6F04               	movwf	fix_fft@nn& (0+255),b
  5921  0001E0  0EFF               	movlw	255
  5922  0001E2  0101               	movlb	1	; () banked
  5923  0001E4  2115               	addwfc	(fix_fft@n+1)& (0+255),w,b
  5924  0001E6  0101               	movlb	1	; () banked
  5925  0001E8  6F05               	movwf	(fix_fft@nn+1)& (0+255),b
  5926  0001EA  0EFF               	movlw	255
  5927  0001EC  0101               	movlb	1	; () banked
  5928  0001EE  2116               	addwfc	(fix_fft@n+2)& (0+255),w,b
  5929  0001F0  0101               	movlb	1	; () banked
  5930  0001F2  6F06               	movwf	(fix_fft@nn+2)& (0+255),b
  5931  0001F4  0EFF               	movlw	255
  5932  0001F6  0101               	movlb	1	; () banked
  5933  0001F8  2117               	addwfc	(fix_fft@n+3)& (0+255),w,b
  5934  0001FA  0101               	movlb	1	; () banked
  5935  0001FC  6F07               	movwf	(fix_fft@nn+3)& (0+255),b
  5936                           
  5937                           ;fft.c: 64: for (m=1; m<=nn; ++m)
  5938  0001FE  0E00               	movlw	0
  5939  000200  0100               	movlb	0	; () banked
  5940  000202  6FB0               	movwf	(fix_fft@m+1)& (0+255),b
  5941  000204  0E01               	movlw	1
  5942  000206  6FAF               	movwf	fix_fft@m& (0+255),b
  5943  000208  D12C               	goto	l5292
  5944  00020A                     l619:
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;fft.c: 65: {
  5948                           ;fft.c: 66: l = n;
  5949  00020A  C114  F126         	movff	fix_fft@n,fix_fft@l
  5950  00020E  C115  F127         	movff	fix_fft@n+1,fix_fft@l+1
  5951  000212  C116  F128         	movff	fix_fft@n+2,fix_fft@l+2
  5952  000216  C117  F129         	movff	fix_fft@n+3,fix_fft@l+3
  5953  00021A  D000               	goto	l5274
  5954  00021C                     l5274:
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;fft.c: 68: {
  5958                           ;fft.c: 69: l >>= 1;
  5959  00021C  0101               	movlb	1	; () banked
  5960  00021E  3529               	rlcf	(fix_fft@l+3)& (0+255),w,b
  5961  000220  3329               	rrcf	(fix_fft@l+3)& (0+255),f,b
  5962  000222  3328               	rrcf	(fix_fft@l+2)& (0+255),f,b
  5963  000224  3327               	rrcf	(fix_fft@l+1)& (0+255),f,b
  5964  000226  3326               	rrcf	fix_fft@l& (0+255),f,b
  5965                           
  5966                           ;fft.c: 70: } while (mr+l > nn);
  5967  000228  0101               	movlb	1	; () banked
  5968  00022A  5126               	movf	fix_fft@l& (0+255),w,b
  5969  00022C  0101               	movlb	1	; () banked
  5970  00022E  2522               	addwf	fix_fft@mr& (0+255),w,b
  5971  000230  0100               	movlb	0	; () banked
  5972  000232  6FB1               	movwf	??_fix_fft& (0+255),b
  5973  000234  0101               	movlb	1	; () banked
  5974  000236  5127               	movf	(fix_fft@l+1)& (0+255),w,b
  5975  000238  0101               	movlb	1	; () banked
  5976  00023A  2123               	addwfc	(fix_fft@mr+1)& (0+255),w,b
  5977  00023C  0100               	movlb	0	; () banked
  5978  00023E  6FB2               	movwf	(??_fix_fft+1)& (0+255),b
  5979  000240  0101               	movlb	1	; () banked
  5980  000242  5128               	movf	(fix_fft@l+2)& (0+255),w,b
  5981  000244  0101               	movlb	1	; () banked
  5982  000246  2124               	addwfc	(fix_fft@mr+2)& (0+255),w,b
  5983  000248  0100               	movlb	0	; () banked
  5984  00024A  6FB3               	movwf	(??_fix_fft+2)& (0+255),b
  5985  00024C  0101               	movlb	1	; () banked
  5986  00024E  5129               	movf	(fix_fft@l+3)& (0+255),w,b
  5987  000250  0101               	movlb	1	; () banked
  5988  000252  2125               	addwfc	(fix_fft@mr+3)& (0+255),w,b
  5989  000254  0100               	movlb	0	; () banked
  5990  000256  6FB4               	movwf	(??_fix_fft+3)& (0+255),b
  5991  000258  0100               	movlb	0	; () banked
  5992  00025A  51B1               	movf	??_fix_fft& (0+255),w,b
  5993  00025C  0101               	movlb	1	; () banked
  5994  00025E  5D04               	subwf	fix_fft@nn& (0+255),w,b
  5995  000260  0100               	movlb	0	; () banked
  5996  000262  51B2               	movf	(??_fix_fft+1)& (0+255),w,b
  5997  000264  0101               	movlb	1	; () banked
  5998  000266  5905               	subwfb	(fix_fft@nn+1)& (0+255),w,b
  5999  000268  0100               	movlb	0	; () banked
  6000  00026A  51B3               	movf	(??_fix_fft+2)& (0+255),w,b
  6001  00026C  0101               	movlb	1	; () banked
  6002  00026E  5906               	subwfb	(fix_fft@nn+2)& (0+255),w,b
  6003  000270  0101               	movlb	1	; () banked
  6004  000272  5107               	movf	(fix_fft@nn+3)& (0+255),w,b
  6005  000274  0A80               	xorlw	128
  6006  000276  0100               	movlb	0	; () banked
  6007  000278  6FB5               	movwf	(??_fix_fft+4)& (0+255),b
  6008  00027A  0100               	movlb	0	; () banked
  6009  00027C  51B4               	movf	(??_fix_fft+3)& (0+255),w,b
  6010  00027E  0A80               	xorlw	128
  6011  000280  0100               	movlb	0	; () banked
  6012  000282  59B5               	subwfb	(??_fix_fft+4)& (0+255),w,b
  6013  000284  A0D8               	btfss	status,0,c
  6014  000286  D7CA               	goto	l5274
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;fft.c: 72: mr = (mr & (l-1)) + l;
  6018                           
  6019                           ; BSR set to: 0
  6020  000288  0EFF               	movlw	255
  6021  00028A  0101               	movlb	1	; () banked
  6022  00028C  2526               	addwf	fix_fft@l& (0+255),w,b
  6023  00028E  0100               	movlb	0	; () banked
  6024  000290  6FB1               	movwf	??_fix_fft& (0+255),b
  6025  000292  0EFF               	movlw	255
  6026  000294  0101               	movlb	1	; () banked
  6027  000296  2127               	addwfc	(fix_fft@l+1)& (0+255),w,b
  6028  000298  0100               	movlb	0	; () banked
  6029  00029A  6FB2               	movwf	(??_fix_fft+1)& (0+255),b
  6030  00029C  0EFF               	movlw	255
  6031  00029E  0101               	movlb	1	; () banked
  6032  0002A0  2128               	addwfc	(fix_fft@l+2)& (0+255),w,b
  6033  0002A2  0100               	movlb	0	; () banked
  6034  0002A4  6FB3               	movwf	(??_fix_fft+2)& (0+255),b
  6035  0002A6  0EFF               	movlw	255
  6036  0002A8  0101               	movlb	1	; () banked
  6037  0002AA  2129               	addwfc	(fix_fft@l+3)& (0+255),w,b
  6038  0002AC  0100               	movlb	0	; () banked
  6039  0002AE  6FB4               	movwf	(??_fix_fft+3)& (0+255),b
  6040  0002B0  0101               	movlb	1	; () banked
  6041  0002B2  5122               	movf	fix_fft@mr& (0+255),w,b
  6042  0002B4  0100               	movlb	0	; () banked
  6043  0002B6  15B1               	andwf	??_fix_fft& (0+255),w,b
  6044  0002B8  0100               	movlb	0	; () banked
  6045  0002BA  6FB5               	movwf	(??_fix_fft+4)& (0+255),b
  6046  0002BC  0101               	movlb	1	; () banked
  6047  0002BE  5123               	movf	(fix_fft@mr+1)& (0+255),w,b
  6048  0002C0  0100               	movlb	0	; () banked
  6049  0002C2  15B2               	andwf	(??_fix_fft+1)& (0+255),w,b
  6050  0002C4  0100               	movlb	0	; () banked
  6051  0002C6  6FB6               	movwf	(??_fix_fft+5)& (0+255),b
  6052  0002C8  0101               	movlb	1	; () banked
  6053  0002CA  5124               	movf	(fix_fft@mr+2)& (0+255),w,b
  6054  0002CC  0100               	movlb	0	; () banked
  6055  0002CE  15B3               	andwf	(??_fix_fft+2)& (0+255),w,b
  6056  0002D0  0100               	movlb	0	; () banked
  6057  0002D2  6FB7               	movwf	(??_fix_fft+6)& (0+255),b
  6058  0002D4  0101               	movlb	1	; () banked
  6059  0002D6  5125               	movf	(fix_fft@mr+3)& (0+255),w,b
  6060  0002D8  0100               	movlb	0	; () banked
  6061  0002DA  15B4               	andwf	(??_fix_fft+3)& (0+255),w,b
  6062  0002DC  0100               	movlb	0	; () banked
  6063  0002DE  6FB8               	movwf	(??_fix_fft+7)& (0+255),b
  6064  0002E0  0101               	movlb	1	; () banked
  6065  0002E2  5126               	movf	fix_fft@l& (0+255),w,b
  6066  0002E4  0100               	movlb	0	; () banked
  6067  0002E6  25B5               	addwf	(??_fix_fft+4)& (0+255),w,b
  6068  0002E8  0101               	movlb	1	; () banked
  6069  0002EA  6F22               	movwf	fix_fft@mr& (0+255),b
  6070  0002EC  0101               	movlb	1	; () banked
  6071  0002EE  5127               	movf	(fix_fft@l+1)& (0+255),w,b
  6072  0002F0  0100               	movlb	0	; () banked
  6073  0002F2  21B6               	addwfc	(??_fix_fft+5)& (0+255),w,b
  6074  0002F4  0101               	movlb	1	; () banked
  6075  0002F6  6F23               	movwf	(fix_fft@mr+1)& (0+255),b
  6076  0002F8  0101               	movlb	1	; () banked
  6077  0002FA  5128               	movf	(fix_fft@l+2)& (0+255),w,b
  6078  0002FC  0100               	movlb	0	; () banked
  6079  0002FE  21B7               	addwfc	(??_fix_fft+6)& (0+255),w,b
  6080  000300  0101               	movlb	1	; () banked
  6081  000302  6F24               	movwf	(fix_fft@mr+2)& (0+255),b
  6082  000304  0101               	movlb	1	; () banked
  6083  000306  5129               	movf	(fix_fft@l+3)& (0+255),w,b
  6084  000308  0100               	movlb	0	; () banked
  6085  00030A  21B8               	addwfc	(??_fix_fft+7)& (0+255),w,b
  6086  00030C  0101               	movlb	1	; () banked
  6087  00030E  6F25               	movwf	(fix_fft@mr+3)& (0+255),b
  6088                           
  6089                           ;fft.c: 73: if (mr <= m) continue;
  6090  000310  C0AF  F0B1         	movff	fix_fft@m,??_fix_fft
  6091  000314  C0B0  F0B2         	movff	fix_fft@m+1,??_fix_fft+1
  6092  000318  0E00               	movlw	0
  6093  00031A  0100               	movlb	0	; () banked
  6094  00031C  BFB2               	btfsc	(??_fix_fft+1)& (0+255),7,b
  6095  00031E  0EFF               	movlw	255
  6096  000320  6FB3               	movwf	(??_fix_fft+2)& (0+255),b
  6097  000322  6FB4               	movwf	(??_fix_fft+3)& (0+255),b
  6098  000324  0101               	movlb	1	; () banked
  6099  000326  5122               	movf	fix_fft@mr& (0+255),w,b
  6100  000328  0100               	movlb	0	; () banked
  6101  00032A  5DB1               	subwf	??_fix_fft& (0+255),w,b
  6102  00032C  0101               	movlb	1	; () banked
  6103  00032E  5123               	movf	(fix_fft@mr+1)& (0+255),w,b
  6104  000330  0100               	movlb	0	; () banked
  6105  000332  59B2               	subwfb	(??_fix_fft+1)& (0+255),w,b
  6106  000334  0101               	movlb	1	; () banked
  6107  000336  5124               	movf	(fix_fft@mr+2)& (0+255),w,b
  6108  000338  0100               	movlb	0	; () banked
  6109  00033A  59B3               	subwfb	(??_fix_fft+2)& (0+255),w,b
  6110  00033C  0100               	movlb	0	; () banked
  6111  00033E  51B4               	movf	(??_fix_fft+3)& (0+255),w,b
  6112  000340  0A80               	xorlw	128
  6113  000342  0100               	movlb	0	; () banked
  6114  000344  6FB5               	movwf	(??_fix_fft+4)& (0+255),b
  6115  000346  0101               	movlb	1	; () banked
  6116  000348  5125               	movf	(fix_fft@mr+3)& (0+255),w,b
  6117  00034A  0A80               	xorlw	128
  6118  00034C  0100               	movlb	0	; () banked
  6119  00034E  59B5               	subwfb	(??_fix_fft+4)& (0+255),w,b
  6120  000350  B0D8               	btfsc	status,0,c
  6121  000352  D083               	goto	l5290
  6122  000354  D001               	goto	l5280
  6123                           
  6124                           ; BSR set to: 0
  6125  000356  D081               	goto	l5290
  6126  000358                     l5280:
  6127                           
  6128                           ; BSR set to: 0
  6129                           ;fft.c: 75: tr = fr[m];
  6130  000358  90D8               	bcf	status,0,c
  6131  00035A  0100               	movlb	0	; () banked
  6132  00035C  35AF               	rlcf	fix_fft@m& (0+255),w,b
  6133  00035E  6ED9               	movwf	fsr2l,c
  6134  000360  0100               	movlb	0	; () banked
  6135  000362  35B0               	rlcf	(fix_fft@m+1)& (0+255),w,b
  6136  000364  6EDA               	movwf	fsr2h,c
  6137  000366  0100               	movlb	0	; () banked
  6138  000368  51AB               	movf	fix_fft@fr& (0+255),w,b
  6139  00036A  26D9               	addwf	fsr2l,f,c
  6140  00036C  0100               	movlb	0	; () banked
  6141  00036E  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  6142  000370  22DA               	addwfc	fsr2h,f,c
  6143  000372  CFDE F118          	movff	postinc2,fix_fft@tr
  6144  000376  CFDD F119          	movff	postdec2,fix_fft@tr+1
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;fft.c: 76: fr[m] = fr[mr];
  6148  00037A  90D8               	bcf	status,0,c
  6149  00037C  0101               	movlb	1	; () banked
  6150  00037E  3522               	rlcf	fix_fft@mr& (0+255),w,b
  6151  000380  6ED9               	movwf	fsr2l,c
  6152  000382  0101               	movlb	1	; () banked
  6153  000384  3523               	rlcf	(fix_fft@mr+1)& (0+255),w,b
  6154  000386  6EDA               	movwf	fsr2h,c
  6155  000388  0100               	movlb	0	; () banked
  6156  00038A  51AB               	movf	fix_fft@fr& (0+255),w,b
  6157  00038C  26D9               	addwf	fsr2l,f,c
  6158  00038E  0100               	movlb	0	; () banked
  6159  000390  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  6160  000392  22DA               	addwfc	fsr2h,f,c
  6161  000394  90D8               	bcf	status,0,c
  6162  000396  0100               	movlb	0	; () banked
  6163  000398  35AF               	rlcf	fix_fft@m& (0+255),w,b
  6164  00039A  6EE1               	movwf	fsr1l,c
  6165  00039C  0100               	movlb	0	; () banked
  6166  00039E  35B0               	rlcf	(fix_fft@m+1)& (0+255),w,b
  6167  0003A0  6EE2               	movwf	fsr1h,c
  6168  0003A2  0100               	movlb	0	; () banked
  6169  0003A4  51AB               	movf	fix_fft@fr& (0+255),w,b
  6170  0003A6  26E1               	addwf	fsr1l,f,c
  6171  0003A8  0100               	movlb	0	; () banked
  6172  0003AA  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  6173  0003AC  22E2               	addwfc	fsr1h,f,c
  6174  0003AE  CFDE FFE6          	movff	postinc2,postinc1
  6175  0003B2  CFDD FFE5          	movff	postdec2,postdec1
  6176                           
  6177                           ; BSR set to: 0
  6178                           ;fft.c: 77: fr[mr] = tr;
  6179  0003B6  90D8               	bcf	status,0,c
  6180  0003B8  0101               	movlb	1	; () banked
  6181  0003BA  3522               	rlcf	fix_fft@mr& (0+255),w,b
  6182  0003BC  6ED9               	movwf	fsr2l,c
  6183  0003BE  0101               	movlb	1	; () banked
  6184  0003C0  3523               	rlcf	(fix_fft@mr+1)& (0+255),w,b
  6185  0003C2  6EDA               	movwf	fsr2h,c
  6186  0003C4  0100               	movlb	0	; () banked
  6187  0003C6  51AB               	movf	fix_fft@fr& (0+255),w,b
  6188  0003C8  26D9               	addwf	fsr2l,f,c
  6189  0003CA  0100               	movlb	0	; () banked
  6190  0003CC  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  6191  0003CE  22DA               	addwfc	fsr2h,f,c
  6192  0003D0  C118  FFDE         	movff	fix_fft@tr,postinc2
  6193  0003D4  C119  FFDD         	movff	fix_fft@tr+1,postdec2
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;fft.c: 78: ti = fi[m];
  6197  0003D8  90D8               	bcf	status,0,c
  6198  0003DA  0100               	movlb	0	; () banked
  6199  0003DC  35AF               	rlcf	fix_fft@m& (0+255),w,b
  6200  0003DE  6ED9               	movwf	fsr2l,c
  6201  0003E0  0100               	movlb	0	; () banked
  6202  0003E2  35B0               	rlcf	(fix_fft@m+1)& (0+255),w,b
  6203  0003E4  6EDA               	movwf	fsr2h,c
  6204  0003E6  0100               	movlb	0	; () banked
  6205  0003E8  51AD               	movf	fix_fft@fi& (0+255),w,b
  6206  0003EA  26D9               	addwf	fsr2l,f,c
  6207  0003EC  0100               	movlb	0	; () banked
  6208  0003EE  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  6209  0003F0  22DA               	addwfc	fsr2h,f,c
  6210  0003F2  CFDE F11A          	movff	postinc2,fix_fft@ti
  6211  0003F6  CFDD F11B          	movff	postdec2,fix_fft@ti+1
  6212                           
  6213                           ; BSR set to: 0
  6214                           ;fft.c: 79: fi[m] = fi[mr];
  6215  0003FA  90D8               	bcf	status,0,c
  6216  0003FC  0101               	movlb	1	; () banked
  6217  0003FE  3522               	rlcf	fix_fft@mr& (0+255),w,b
  6218  000400  6ED9               	movwf	fsr2l,c
  6219  000402  0101               	movlb	1	; () banked
  6220  000404  3523               	rlcf	(fix_fft@mr+1)& (0+255),w,b
  6221  000406  6EDA               	movwf	fsr2h,c
  6222  000408  0100               	movlb	0	; () banked
  6223  00040A  51AD               	movf	fix_fft@fi& (0+255),w,b
  6224  00040C  26D9               	addwf	fsr2l,f,c
  6225  00040E  0100               	movlb	0	; () banked
  6226  000410  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  6227  000412  22DA               	addwfc	fsr2h,f,c
  6228  000414  90D8               	bcf	status,0,c
  6229  000416  0100               	movlb	0	; () banked
  6230  000418  35AF               	rlcf	fix_fft@m& (0+255),w,b
  6231  00041A  6EE1               	movwf	fsr1l,c
  6232  00041C  0100               	movlb	0	; () banked
  6233  00041E  35B0               	rlcf	(fix_fft@m+1)& (0+255),w,b
  6234  000420  6EE2               	movwf	fsr1h,c
  6235  000422  0100               	movlb	0	; () banked
  6236  000424  51AD               	movf	fix_fft@fi& (0+255),w,b
  6237  000426  26E1               	addwf	fsr1l,f,c
  6238  000428  0100               	movlb	0	; () banked
  6239  00042A  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  6240  00042C  22E2               	addwfc	fsr1h,f,c
  6241  00042E  CFDE FFE6          	movff	postinc2,postinc1
  6242  000432  CFDD FFE5          	movff	postdec2,postdec1
  6243                           
  6244                           ;fft.c: 80: fi[mr] = ti;
  6245  000436  90D8               	bcf	status,0,c
  6246  000438  0101               	movlb	1	; () banked
  6247  00043A  3522               	rlcf	fix_fft@mr& (0+255),w,b
  6248  00043C  6ED9               	movwf	fsr2l,c
  6249  00043E  0101               	movlb	1	; () banked
  6250  000440  3523               	rlcf	(fix_fft@mr+1)& (0+255),w,b
  6251  000442  6EDA               	movwf	fsr2h,c
  6252  000444  0100               	movlb	0	; () banked
  6253  000446  51AD               	movf	fix_fft@fi& (0+255),w,b
  6254  000448  26D9               	addwf	fsr2l,f,c
  6255  00044A  0100               	movlb	0	; () banked
  6256  00044C  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  6257  00044E  22DA               	addwfc	fsr2h,f,c
  6258  000450  C11A  FFDE         	movff	fix_fft@ti,postinc2
  6259  000454  C11B  FFDD         	movff	fix_fft@ti+1,postdec2
  6260  000458  D000               	goto	l5290
  6261  00045A                     l5290:
  6262                           
  6263                           ; BSR set to: 0
  6264  00045A  0100               	movlb	0	; () banked
  6265  00045C  4BAF               	infsnz	fix_fft@m& (0+255),f,b
  6266  00045E  2BB0               	incf	(fix_fft@m+1)& (0+255),f,b
  6267  000460  D000               	goto	l5292
  6268  000462                     l5292:
  6269                           
  6270                           ; BSR set to: 0
  6271  000462  C0AF  F0B1         	movff	fix_fft@m,??_fix_fft
  6272  000466  C0B0  F0B2         	movff	fix_fft@m+1,??_fix_fft+1
  6273  00046A  0E00               	movlw	0
  6274  00046C  0100               	movlb	0	; () banked
  6275  00046E  BFB2               	btfsc	(??_fix_fft+1)& (0+255),7,b
  6276  000470  0EFF               	movlw	255
  6277  000472  6FB3               	movwf	(??_fix_fft+2)& (0+255),b
  6278  000474  6FB4               	movwf	(??_fix_fft+3)& (0+255),b
  6279  000476  0100               	movlb	0	; () banked
  6280  000478  51B1               	movf	??_fix_fft& (0+255),w,b
  6281  00047A  0101               	movlb	1	; () banked
  6282  00047C  5D04               	subwf	fix_fft@nn& (0+255),w,b
  6283  00047E  0100               	movlb	0	; () banked
  6284  000480  51B2               	movf	(??_fix_fft+1)& (0+255),w,b
  6285  000482  0101               	movlb	1	; () banked
  6286  000484  5905               	subwfb	(fix_fft@nn+1)& (0+255),w,b
  6287  000486  0100               	movlb	0	; () banked
  6288  000488  51B3               	movf	(??_fix_fft+2)& (0+255),w,b
  6289  00048A  0101               	movlb	1	; () banked
  6290  00048C  5906               	subwfb	(fix_fft@nn+2)& (0+255),w,b
  6291  00048E  0101               	movlb	1	; () banked
  6292  000490  5107               	movf	(fix_fft@nn+3)& (0+255),w,b
  6293  000492  0A80               	xorlw	128
  6294  000494  0100               	movlb	0	; () banked
  6295  000496  6FB5               	movwf	(??_fix_fft+4)& (0+255),b
  6296  000498  0100               	movlb	0	; () banked
  6297  00049A  51B4               	movf	(??_fix_fft+3)& (0+255),w,b
  6298  00049C  0A80               	xorlw	128
  6299  00049E  0100               	movlb	0	; () banked
  6300  0004A0  59B5               	subwfb	(??_fix_fft+4)& (0+255),w,b
  6301  0004A2  B0D8               	btfsc	status,0,c
  6302  0004A4  D6B2               	goto	l619
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;fft.c: 81: }
  6306                           ;fft.c: 83: l = 1;
  6307                           
  6308                           ; BSR set to: 0
  6309  0004A6  0E01               	movlw	1
  6310  0004A8  0101               	movlb	1	; () banked
  6311  0004AA  6F26               	movwf	fix_fft@l& (0+255),b
  6312  0004AC  0E00               	movlw	0
  6313  0004AE  6F27               	movwf	(fix_fft@l+1)& (0+255),b
  6314  0004B0  0E00               	movlw	0
  6315  0004B2  6F28               	movwf	(fix_fft@l+2)& (0+255),b
  6316  0004B4  0E00               	movlw	0
  6317  0004B6  6F29               	movwf	(fix_fft@l+3)& (0+255),b
  6318                           
  6319                           ;fft.c: 84: k = 10-1;
  6320  0004B8  0E09               	movlw	9
  6321  0004BA  0101               	movlb	1	; () banked
  6322  0004BC  6F00               	movwf	fix_fft@k& (0+255),b
  6323  0004BE  0E00               	movlw	0
  6324  0004C0  6F01               	movwf	(fix_fft@k+1)& (0+255),b
  6325  0004C2  0E00               	movlw	0
  6326  0004C4  6F02               	movwf	(fix_fft@k+2)& (0+255),b
  6327  0004C6  0E00               	movlw	0
  6328  0004C8  6F03               	movwf	(fix_fft@k+3)& (0+255),b
  6329                           
  6330                           ;fft.c: 86: while (l < n)
  6331  0004CA  D366               	goto	l625
  6332  0004CC                     l5296:
  6333                           
  6334                           ;fft.c: 87: {
  6335                           ;fft.c: 100: long int c;
  6336                           ;fft.c: 101: short b;
  6337                           ;fft.c: 103: istep = l << 1;
  6338  0004CC  90D8               	bcf	status,0,c
  6339  0004CE  0101               	movlb	1	; () banked
  6340  0004D0  3526               	rlcf	fix_fft@l& (0+255),w,b
  6341  0004D2  0101               	movlb	1	; () banked
  6342  0004D4  6F08               	movwf	fix_fft@istep& (0+255),b
  6343  0004D6  0101               	movlb	1	; () banked
  6344  0004D8  3527               	rlcf	(fix_fft@l+1)& (0+255),w,b
  6345  0004DA  0101               	movlb	1	; () banked
  6346  0004DC  6F09               	movwf	(fix_fft@istep+1)& (0+255),b
  6347  0004DE  0101               	movlb	1	; () banked
  6348  0004E0  3528               	rlcf	(fix_fft@l+2)& (0+255),w,b
  6349  0004E2  0101               	movlb	1	; () banked
  6350  0004E4  6F0A               	movwf	(fix_fft@istep+2)& (0+255),b
  6351  0004E6  0101               	movlb	1	; () banked
  6352  0004E8  3529               	rlcf	(fix_fft@l+3)& (0+255),w,b
  6353  0004EA  0101               	movlb	1	; () banked
  6354  0004EC  6F0B               	movwf	(fix_fft@istep+3)& (0+255),b
  6355                           
  6356                           ; BSR set to: 1
  6357                           ;fft.c: 104: for (m=0; m<l; ++m)
  6358  0004EE  0E00               	movlw	0
  6359  0004F0  0100               	movlb	0	; () banked
  6360  0004F2  6FB0               	movwf	(fix_fft@m+1)& (0+255),b
  6361  0004F4  0E00               	movlw	0
  6362  0004F6  6FAF               	movwf	fix_fft@m& (0+255),b
  6363  0004F8  D31C               	goto	l5356
  6364  0004FA                     l5300:
  6365                           
  6366                           ; BSR set to: 0
  6367                           ;fft.c: 105: {
  6368                           ;fft.c: 106: j = m << k;
  6369  0004FA  C100  F0B1         	movff	fix_fft@k,??_fix_fft
  6370  0004FE  C0AF  F0B2         	movff	fix_fft@m,??_fix_fft+1
  6371  000502  C0B0  F0B3         	movff	fix_fft@m+1,??_fix_fft+2
  6372  000506  0100               	movlb	0	; () banked
  6373  000508  2BB1               	incf	??_fix_fft& (0+255),f,b
  6374  00050A  D004               	goto	u5924
  6375  00050C                     u5925:
  6376  00050C  90D8               	bcf	status,0,c
  6377  00050E  0100               	movlb	0	; () banked
  6378  000510  37B2               	rlcf	(??_fix_fft+1)& (0+255),f,b
  6379  000512  37B3               	rlcf	(??_fix_fft+2)& (0+255),f,b
  6380  000514                     u5924:
  6381  000514  0100               	movlb	0	; () banked
  6382  000516  2FB1               	decfsz	??_fix_fft& (0+255),f,b
  6383  000518  D7F9               	goto	u5925
  6384  00051A  C0B2  F12A         	movff	??_fix_fft+1,fix_fft@j
  6385  00051E  C0B3  F12B         	movff	??_fix_fft+2,fix_fft@j+1
  6386  000522  0101               	movlb	1	; () banked
  6387  000524  0E00               	movlw	0
  6388  000526  BF2B               	btfsc	(fix_fft@j+1)& (0+255),7,b
  6389  000528  0EFF               	movlw	-1
  6390  00052A  6F2C               	movwf	(fix_fft@j+2)& (0+255),b
  6391  00052C  6F2D               	movwf	(fix_fft@j+3)& (0+255),b
  6392                           
  6393                           ; BSR set to: 1
  6394                           ;fft.c: 108: wr = Sinewave[j+1024/4];
  6395  00052E  0E00               	movlw	0
  6396  000530  0100               	movlb	0	; () banked
  6397  000532  6FB1               	movwf	??_fix_fft& (0+255),b
  6398  000534  0E02               	movlw	2
  6399  000536  0100               	movlb	0	; () banked
  6400  000538  6FB2               	movwf	(??_fix_fft+1)& (0+255),b
  6401  00053A  C12A  F0B3         	movff	fix_fft@j,??_fix_fft+2
  6402  00053E  C12B  F0B4         	movff	fix_fft@j+1,??_fix_fft+3
  6403  000542  90D8               	bcf	status,0,c
  6404  000544  0100               	movlb	0	; () banked
  6405  000546  37B3               	rlcf	(??_fix_fft+2)& (0+255),f,b
  6406  000548  37B4               	rlcf	(??_fix_fft+3)& (0+255),f,b
  6407  00054A  0100               	movlb	0	; () banked
  6408  00054C  51B1               	movf	??_fix_fft& (0+255),w,b
  6409  00054E  0100               	movlb	0	; () banked
  6410  000550  27B3               	addwf	(??_fix_fft+2)& (0+255),f,b
  6411  000552  0100               	movlb	0	; () banked
  6412  000554  51B2               	movf	(??_fix_fft+1)& (0+255),w,b
  6413  000556  0100               	movlb	0	; () banked
  6414  000558  23B4               	addwfc	(??_fix_fft+3)& (0+255),f,b
  6415  00055A  0ED5               	movlw	low _Sinewave
  6416  00055C  0100               	movlb	0	; () banked
  6417  00055E  25B3               	addwf	(??_fix_fft+2)& (0+255),w,b
  6418  000560  6EF6               	movwf	tblptrl,c
  6419  000562  0E76               	movlw	high _Sinewave
  6420  000564  21B4               	addwfc	(??_fix_fft+3)& (0+255),w,b
  6421  000566  6EF7               	movwf	tblptrh,c
  6422  000568                     	if	0	;There are less than 3 active tblptr bytes
  6423  000568                     	endif
  6424  000568  0009               	tblrd		*+
  6425  00056A  CFF5 F110          	movff	tablat,fix_fft@wr
  6426  00056E  000A               	tblrd		*-
  6427  000570  CFF5 F111          	movff	tablat,fix_fft@wr+1
  6428                           
  6429                           ; BSR set to: 0
  6430                           ;fft.c: 109: wi = -Sinewave[j];
  6431  000574  90D8               	bcf	status,0,c
  6432  000576  0101               	movlb	1	; () banked
  6433  000578  352A               	rlcf	fix_fft@j& (0+255),w,b
  6434  00057A  6EF6               	movwf	tblptrl,c
  6435  00057C  0101               	movlb	1	; () banked
  6436  00057E  352B               	rlcf	(fix_fft@j+1)& (0+255),w,b
  6437  000580  6EF7               	movwf	tblptrh,c
  6438  000582  0ED5               	movlw	low _Sinewave
  6439  000584  26F6               	addwf	tblptrl,f,c
  6440  000586  0E76               	movlw	high _Sinewave
  6441  000588  22F7               	addwfc	tblptrh,f,c
  6442  00058A                     	if	0	;There are less than 3 active tblptr bytes
  6443  00058A                     	endif
  6444  00058A  0009               	tblrd		*+
  6445  00058C  CFF5 F0B1          	movff	tablat,??_fix_fft
  6446  000590  0009               	tblrd		*+
  6447  000592  CFF5 F0B2          	movff	tablat,??_fix_fft+1
  6448  000596  0100               	movlb	0	; () banked
  6449  000598  1FB1               	comf	??_fix_fft& (0+255),f,b
  6450  00059A  1FB2               	comf	(??_fix_fft+1)& (0+255),f,b
  6451  00059C  4BB1               	infsnz	??_fix_fft& (0+255),f,b
  6452  00059E  2BB2               	incf	(??_fix_fft+1)& (0+255),f,b
  6453  0005A0  C0B1  F112         	movff	??_fix_fft,fix_fft@wi
  6454  0005A4  C0B2  F113         	movff	??_fix_fft+1,fix_fft@wi+1
  6455                           
  6456                           ;fft.c: 111: wr >>= 1;
  6457  0005A8  0101               	movlb	1	; () banked
  6458  0005AA  3511               	rlcf	(fix_fft@wr+1)& (0+255),w,b
  6459  0005AC  3311               	rrcf	(fix_fft@wr+1)& (0+255),f,b
  6460  0005AE  3310               	rrcf	fix_fft@wr& (0+255),f,b
  6461                           
  6462                           ;fft.c: 112: wi >>= 1;
  6463  0005B0  0101               	movlb	1	; () banked
  6464  0005B2  3513               	rlcf	(fix_fft@wi+1)& (0+255),w,b
  6465  0005B4  3313               	rrcf	(fix_fft@wi+1)& (0+255),f,b
  6466  0005B6  3312               	rrcf	fix_fft@wi& (0+255),f,b
  6467                           
  6468                           ; BSR set to: 1
  6469                           ;fft.c: 114: for (i=m; i<n; i+=istep)
  6470  0005B8  C0AF  F11E         	movff	fix_fft@m,fix_fft@i
  6471  0005BC  C0B0  F11F         	movff	fix_fft@m+1,fix_fft@i+1
  6472  0005C0  0101               	movlb	1	; () banked
  6473  0005C2  0E00               	movlw	0
  6474  0005C4  BF1F               	btfsc	(fix_fft@i+1)& (0+255),7,b
  6475  0005C6  0EFF               	movlw	-1
  6476  0005C8  6F20               	movwf	(fix_fft@i+2)& (0+255),b
  6477  0005CA  6F21               	movwf	(fix_fft@i+3)& (0+255),b
  6478  0005CC  D296               	goto	l5352
  6479  0005CE                     l5308:
  6480                           
  6481                           ;fft.c: 115: {
  6482                           ;fft.c: 116: j = i + l;
  6483  0005CE  0101               	movlb	1	; () banked
  6484  0005D0  5126               	movf	fix_fft@l& (0+255),w,b
  6485  0005D2  0101               	movlb	1	; () banked
  6486  0005D4  251E               	addwf	fix_fft@i& (0+255),w,b
  6487  0005D6  0101               	movlb	1	; () banked
  6488  0005D8  6F2A               	movwf	fix_fft@j& (0+255),b
  6489  0005DA  0101               	movlb	1	; () banked
  6490  0005DC  5127               	movf	(fix_fft@l+1)& (0+255),w,b
  6491  0005DE  0101               	movlb	1	; () banked
  6492  0005E0  211F               	addwfc	(fix_fft@i+1)& (0+255),w,b
  6493  0005E2  0101               	movlb	1	; () banked
  6494  0005E4  6F2B               	movwf	(fix_fft@j+1)& (0+255),b
  6495  0005E6  0101               	movlb	1	; () banked
  6496  0005E8  5128               	movf	(fix_fft@l+2)& (0+255),w,b
  6497  0005EA  0101               	movlb	1	; () banked
  6498  0005EC  2120               	addwfc	(fix_fft@i+2)& (0+255),w,b
  6499  0005EE  0101               	movlb	1	; () banked
  6500  0005F0  6F2C               	movwf	(fix_fft@j+2)& (0+255),b
  6501  0005F2  0101               	movlb	1	; () banked
  6502  0005F4  5129               	movf	(fix_fft@l+3)& (0+255),w,b
  6503  0005F6  0101               	movlb	1	; () banked
  6504  0005F8  2121               	addwfc	(fix_fft@i+3)& (0+255),w,b
  6505  0005FA  0101               	movlb	1	; () banked
  6506  0005FC  6F2D               	movwf	(fix_fft@j+3)& (0+255),b
  6507                           
  6508                           ; BSR set to: 1
  6509                           ;fft.c: 124: c = ((long int)wr * (long int)fr[j]);
  6510  0005FE  C110  F09F         	movff	fix_fft@wr,___lmul@multiplier
  6511  000602  C111  F0A0         	movff	fix_fft@wr+1,___lmul@multiplier+1
  6512  000606  0100               	movlb	0	; () banked
  6513  000608  0E00               	movlw	0
  6514  00060A  BFA0               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  6515  00060C  0EFF               	movlw	-1
  6516  00060E  6FA1               	movwf	(___lmul@multiplier+2)& (0+255),b
  6517  000610  6FA2               	movwf	(___lmul@multiplier+3)& (0+255),b
  6518  000612  90D8               	bcf	status,0,c
  6519  000614  0101               	movlb	1	; () banked
  6520  000616  352A               	rlcf	fix_fft@j& (0+255),w,b
  6521  000618  6ED9               	movwf	fsr2l,c
  6522  00061A  0101               	movlb	1	; () banked
  6523  00061C  352B               	rlcf	(fix_fft@j+1)& (0+255),w,b
  6524  00061E  6EDA               	movwf	fsr2h,c
  6525  000620  0100               	movlb	0	; () banked
  6526  000622  51AB               	movf	fix_fft@fr& (0+255),w,b
  6527  000624  26D9               	addwf	fsr2l,f,c
  6528  000626  0100               	movlb	0	; () banked
  6529  000628  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  6530  00062A  22DA               	addwfc	fsr2h,f,c
  6531  00062C  CFDE F0A3          	movff	postinc2,___lmul@multiplicand
  6532  000630  CFDD F0A4          	movff	postdec2,___lmul@multiplicand+1
  6533  000634  0100               	movlb	0	; () banked
  6534  000636  0E00               	movlw	0
  6535  000638  BFA4               	btfsc	(___lmul@multiplicand+1)& (0+255),7,b
  6536  00063A  0EFF               	movlw	-1
  6537  00063C  6FA5               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6538  00063E  6FA6               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6539  000640  ECBF  F01F         	call	___lmul	;wreg free
  6540  000644  C09F  F12E         	movff	?___lmul,fix_fft@c
  6541  000648  C0A0  F12F         	movff	?___lmul+1,fix_fft@c+1
  6542  00064C  C0A1  F130         	movff	?___lmul+2,fix_fft@c+2
  6543  000650  C0A2  F131         	movff	?___lmul+3,fix_fft@c+3
  6544                           
  6545                           ;fft.c: 125: c = c >> 14;
  6546  000654  0E0E               	movlw	14
  6547  000656  0100               	movlb	0	; () banked
  6548  000658  6FB1               	movwf	??_fix_fft& (0+255),b
  6549  00065A  C12E  F0B2         	movff	fix_fft@c,??_fix_fft+1
  6550  00065E  C12F  F0B3         	movff	fix_fft@c+1,??_fix_fft+2
  6551  000662  C130  F0B4         	movff	fix_fft@c+2,??_fix_fft+3
  6552  000666  C131  F0B5         	movff	fix_fft@c+3,??_fix_fft+4
  6553  00066A                     u5935:
  6554  00066A  0100               	movlb	0	; () banked
  6555  00066C  67B1               	tstfsz	??_fix_fft& (0+255),b
  6556  00066E  D001               	goto	u5936
  6557  000670  D009               	goto	u5937
  6558  000672                     u5936:
  6559  000672  0100               	movlb	0	; () banked
  6560  000674  35B5               	rlcf	(??_fix_fft+4)& (0+255),w,b
  6561  000676  33B5               	rrcf	(??_fix_fft+4)& (0+255),f,b
  6562  000678  33B4               	rrcf	(??_fix_fft+3)& (0+255),f,b
  6563  00067A  33B3               	rrcf	(??_fix_fft+2)& (0+255),f,b
  6564  00067C  33B2               	rrcf	(??_fix_fft+1)& (0+255),f,b
  6565  00067E  0100               	movlb	0	; () banked
  6566  000680  2FB1               	decfsz	??_fix_fft& (0+255),f,b
  6567  000682  D7F3               	goto	u5935
  6568  000684                     u5937:
  6569  000684  C0B2  F12E         	movff	??_fix_fft+1,fix_fft@c
  6570  000688  C0B3  F12F         	movff	??_fix_fft+2,fix_fft@c+1
  6571  00068C  C0B4  F130         	movff	??_fix_fft+3,fix_fft@c+2
  6572  000690  C0B5  F131         	movff	??_fix_fft+4,fix_fft@c+3
  6573                           
  6574                           ;fft.c: 126: b = c & 0x01;
  6575  000694  0E01               	movlw	1
  6576  000696  0101               	movlb	1	; () banked
  6577  000698  152E               	andwf	fix_fft@c& (0+255),w,b
  6578  00069A  0101               	movlb	1	; () banked
  6579  00069C  6F1C               	movwf	fix_fft@b& (0+255),b
  6580  00069E  0101               	movlb	1	; () banked
  6581  0006A0  6B1D               	clrf	(fix_fft@b+1)& (0+255),b
  6582                           
  6583                           ; BSR set to: 1
  6584                           ;fft.c: 127: tr = (c >> 1) + b;
  6585  0006A2  C12E  F0B1         	movff	fix_fft@c,??_fix_fft
  6586  0006A6  C12F  F0B2         	movff	fix_fft@c+1,??_fix_fft+1
  6587  0006AA  C130  F0B3         	movff	fix_fft@c+2,??_fix_fft+2
  6588  0006AE  C131  F0B4         	movff	fix_fft@c+3,??_fix_fft+3
  6589  0006B2  0100               	movlb	0	; () banked
  6590  0006B4  35B4               	rlcf	(??_fix_fft+3)& (0+255),w,b
  6591  0006B6  33B4               	rrcf	(??_fix_fft+3)& (0+255),f,b
  6592  0006B8  33B3               	rrcf	(??_fix_fft+2)& (0+255),f,b
  6593  0006BA  33B2               	rrcf	(??_fix_fft+1)& (0+255),f,b
  6594  0006BC  33B1               	rrcf	??_fix_fft& (0+255),f,b
  6595  0006BE  0101               	movlb	1	; () banked
  6596  0006C0  511C               	movf	fix_fft@b& (0+255),w,b
  6597  0006C2  0100               	movlb	0	; () banked
  6598  0006C4  25B1               	addwf	??_fix_fft& (0+255),w,b
  6599  0006C6  0101               	movlb	1	; () banked
  6600  0006C8  6F18               	movwf	fix_fft@tr& (0+255),b
  6601  0006CA  0101               	movlb	1	; () banked
  6602  0006CC  511D               	movf	(fix_fft@b+1)& (0+255),w,b
  6603  0006CE  0100               	movlb	0	; () banked
  6604  0006D0  21B2               	addwfc	(??_fix_fft+1)& (0+255),w,b
  6605  0006D2  0101               	movlb	1	; () banked
  6606  0006D4  6F19               	movwf	(fix_fft@tr+1)& (0+255),b
  6607                           
  6608                           ;fft.c: 129: c = ((long int)wi * (long int)fi[j]);
  6609  0006D6  C112  F09F         	movff	fix_fft@wi,___lmul@multiplier
  6610  0006DA  C113  F0A0         	movff	fix_fft@wi+1,___lmul@multiplier+1
  6611  0006DE  0100               	movlb	0	; () banked
  6612  0006E0  0E00               	movlw	0
  6613  0006E2  BFA0               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  6614  0006E4  0EFF               	movlw	-1
  6615  0006E6  6FA1               	movwf	(___lmul@multiplier+2)& (0+255),b
  6616  0006E8  6FA2               	movwf	(___lmul@multiplier+3)& (0+255),b
  6617  0006EA  90D8               	bcf	status,0,c
  6618  0006EC  0101               	movlb	1	; () banked
  6619  0006EE  352A               	rlcf	fix_fft@j& (0+255),w,b
  6620  0006F0  6ED9               	movwf	fsr2l,c
  6621  0006F2  0101               	movlb	1	; () banked
  6622  0006F4  352B               	rlcf	(fix_fft@j+1)& (0+255),w,b
  6623  0006F6  6EDA               	movwf	fsr2h,c
  6624  0006F8  0100               	movlb	0	; () banked
  6625  0006FA  51AD               	movf	fix_fft@fi& (0+255),w,b
  6626  0006FC  26D9               	addwf	fsr2l,f,c
  6627  0006FE  0100               	movlb	0	; () banked
  6628  000700  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  6629  000702  22DA               	addwfc	fsr2h,f,c
  6630  000704  CFDE F0A3          	movff	postinc2,___lmul@multiplicand
  6631  000708  CFDD F0A4          	movff	postdec2,___lmul@multiplicand+1
  6632  00070C  0100               	movlb	0	; () banked
  6633  00070E  0E00               	movlw	0
  6634  000710  BFA4               	btfsc	(___lmul@multiplicand+1)& (0+255),7,b
  6635  000712  0EFF               	movlw	-1
  6636  000714  6FA5               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6637  000716  6FA6               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6638  000718  ECBF  F01F         	call	___lmul	;wreg free
  6639  00071C  C09F  F12E         	movff	?___lmul,fix_fft@c
  6640  000720  C0A0  F12F         	movff	?___lmul+1,fix_fft@c+1
  6641  000724  C0A1  F130         	movff	?___lmul+2,fix_fft@c+2
  6642  000728  C0A2  F131         	movff	?___lmul+3,fix_fft@c+3
  6643                           
  6644                           ;fft.c: 130: c = c >> 14;
  6645  00072C  0E0E               	movlw	14
  6646  00072E  0100               	movlb	0	; () banked
  6647  000730  6FB1               	movwf	??_fix_fft& (0+255),b
  6648  000732  C12E  F0B2         	movff	fix_fft@c,??_fix_fft+1
  6649  000736  C12F  F0B3         	movff	fix_fft@c+1,??_fix_fft+2
  6650  00073A  C130  F0B4         	movff	fix_fft@c+2,??_fix_fft+3
  6651  00073E  C131  F0B5         	movff	fix_fft@c+3,??_fix_fft+4
  6652  000742                     u5945:
  6653  000742  0100               	movlb	0	; () banked
  6654  000744  67B1               	tstfsz	??_fix_fft& (0+255),b
  6655  000746  D001               	goto	u5946
  6656  000748  D009               	goto	u5947
  6657  00074A                     u5946:
  6658  00074A  0100               	movlb	0	; () banked
  6659  00074C  35B5               	rlcf	(??_fix_fft+4)& (0+255),w,b
  6660  00074E  33B5               	rrcf	(??_fix_fft+4)& (0+255),f,b
  6661  000750  33B4               	rrcf	(??_fix_fft+3)& (0+255),f,b
  6662  000752  33B3               	rrcf	(??_fix_fft+2)& (0+255),f,b
  6663  000754  33B2               	rrcf	(??_fix_fft+1)& (0+255),f,b
  6664  000756  0100               	movlb	0	; () banked
  6665  000758  2FB1               	decfsz	??_fix_fft& (0+255),f,b
  6666  00075A  D7F3               	goto	u5945
  6667  00075C                     u5947:
  6668  00075C  C0B2  F12E         	movff	??_fix_fft+1,fix_fft@c
  6669  000760  C0B3  F12F         	movff	??_fix_fft+2,fix_fft@c+1
  6670  000764  C0B4  F130         	movff	??_fix_fft+3,fix_fft@c+2
  6671  000768  C0B5  F131         	movff	??_fix_fft+4,fix_fft@c+3
  6672                           
  6673                           ;fft.c: 131: b = c & 0x01;
  6674  00076C  0E01               	movlw	1
  6675  00076E  0101               	movlb	1	; () banked
  6676  000770  152E               	andwf	fix_fft@c& (0+255),w,b
  6677  000772  0101               	movlb	1	; () banked
  6678  000774  6F1C               	movwf	fix_fft@b& (0+255),b
  6679  000776  0101               	movlb	1	; () banked
  6680  000778  6B1D               	clrf	(fix_fft@b+1)& (0+255),b
  6681                           
  6682                           ; BSR set to: 1
  6683                           ;fft.c: 132: tr = tr - ((c >> 1) + b);
  6684  00077A  C12E  F0B1         	movff	fix_fft@c,??_fix_fft
  6685  00077E  C12F  F0B2         	movff	fix_fft@c+1,??_fix_fft+1
  6686  000782  C130  F0B3         	movff	fix_fft@c+2,??_fix_fft+2
  6687  000786  C131  F0B4         	movff	fix_fft@c+3,??_fix_fft+3
  6688  00078A  0100               	movlb	0	; () banked
  6689  00078C  35B4               	rlcf	(??_fix_fft+3)& (0+255),w,b
  6690  00078E  33B4               	rrcf	(??_fix_fft+3)& (0+255),f,b
  6691  000790  33B3               	rrcf	(??_fix_fft+2)& (0+255),f,b
  6692  000792  33B2               	rrcf	(??_fix_fft+1)& (0+255),f,b
  6693  000794  33B1               	rrcf	??_fix_fft& (0+255),f,b
  6694  000796  0101               	movlb	1	; () banked
  6695  000798  511C               	movf	fix_fft@b& (0+255),w,b
  6696  00079A  0100               	movlb	0	; () banked
  6697  00079C  27B1               	addwf	??_fix_fft& (0+255),f,b
  6698  00079E  0101               	movlb	1	; () banked
  6699  0007A0  511D               	movf	(fix_fft@b+1)& (0+255),w,b
  6700  0007A2  0100               	movlb	0	; () banked
  6701  0007A4  23B2               	addwfc	(??_fix_fft+1)& (0+255),f,b
  6702  0007A6  0100               	movlb	0	; () banked
  6703  0007A8  1FB1               	comf	??_fix_fft& (0+255),f,b
  6704  0007AA  1FB2               	comf	(??_fix_fft+1)& (0+255),f,b
  6705  0007AC  4BB1               	infsnz	??_fix_fft& (0+255),f,b
  6706  0007AE  2BB2               	incf	(??_fix_fft+1)& (0+255),f,b
  6707  0007B0  0101               	movlb	1	; () banked
  6708  0007B2  5118               	movf	fix_fft@tr& (0+255),w,b
  6709  0007B4  0100               	movlb	0	; () banked
  6710  0007B6  25B1               	addwf	??_fix_fft& (0+255),w,b
  6711  0007B8  0101               	movlb	1	; () banked
  6712  0007BA  6F18               	movwf	fix_fft@tr& (0+255),b
  6713  0007BC  0101               	movlb	1	; () banked
  6714  0007BE  5119               	movf	(fix_fft@tr+1)& (0+255),w,b
  6715  0007C0  0100               	movlb	0	; () banked
  6716  0007C2  21B2               	addwfc	(??_fix_fft+1)& (0+255),w,b
  6717  0007C4  0101               	movlb	1	; () banked
  6718  0007C6  6F19               	movwf	(fix_fft@tr+1)& (0+255),b
  6719                           
  6720                           ; BSR set to: 1
  6721                           ;fft.c: 135: c = ((long int)wr * (long int)fi[j]);
  6722  0007C8  C110  F09F         	movff	fix_fft@wr,___lmul@multiplier
  6723  0007CC  C111  F0A0         	movff	fix_fft@wr+1,___lmul@multiplier+1
  6724  0007D0  0100               	movlb	0	; () banked
  6725  0007D2  0E00               	movlw	0
  6726  0007D4  BFA0               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  6727  0007D6  0EFF               	movlw	-1
  6728  0007D8  6FA1               	movwf	(___lmul@multiplier+2)& (0+255),b
  6729  0007DA  6FA2               	movwf	(___lmul@multiplier+3)& (0+255),b
  6730  0007DC  90D8               	bcf	status,0,c
  6731  0007DE  0101               	movlb	1	; () banked
  6732  0007E0  352A               	rlcf	fix_fft@j& (0+255),w,b
  6733  0007E2  6ED9               	movwf	fsr2l,c
  6734  0007E4  0101               	movlb	1	; () banked
  6735  0007E6  352B               	rlcf	(fix_fft@j+1)& (0+255),w,b
  6736  0007E8  6EDA               	movwf	fsr2h,c
  6737  0007EA  0100               	movlb	0	; () banked
  6738  0007EC  51AD               	movf	fix_fft@fi& (0+255),w,b
  6739  0007EE  26D9               	addwf	fsr2l,f,c
  6740  0007F0  0100               	movlb	0	; () banked
  6741  0007F2  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  6742  0007F4  22DA               	addwfc	fsr2h,f,c
  6743  0007F6  CFDE F0A3          	movff	postinc2,___lmul@multiplicand
  6744  0007FA  CFDD F0A4          	movff	postdec2,___lmul@multiplicand+1
  6745  0007FE  0100               	movlb	0	; () banked
  6746  000800  0E00               	movlw	0
  6747  000802  BFA4               	btfsc	(___lmul@multiplicand+1)& (0+255),7,b
  6748  000804  0EFF               	movlw	-1
  6749  000806  6FA5               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6750  000808  6FA6               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6751  00080A  ECBF  F01F         	call	___lmul	;wreg free
  6752  00080E  C09F  F12E         	movff	?___lmul,fix_fft@c
  6753  000812  C0A0  F12F         	movff	?___lmul+1,fix_fft@c+1
  6754  000816  C0A1  F130         	movff	?___lmul+2,fix_fft@c+2
  6755  00081A  C0A2  F131         	movff	?___lmul+3,fix_fft@c+3
  6756                           
  6757                           ;fft.c: 136: c = c >> 14;
  6758  00081E  0E0E               	movlw	14
  6759  000820  0100               	movlb	0	; () banked
  6760  000822  6FB1               	movwf	??_fix_fft& (0+255),b
  6761  000824  C12E  F0B2         	movff	fix_fft@c,??_fix_fft+1
  6762  000828  C12F  F0B3         	movff	fix_fft@c+1,??_fix_fft+2
  6763  00082C  C130  F0B4         	movff	fix_fft@c+2,??_fix_fft+3
  6764  000830  C131  F0B5         	movff	fix_fft@c+3,??_fix_fft+4
  6765  000834                     u5955:
  6766  000834  0100               	movlb	0	; () banked
  6767  000836  67B1               	tstfsz	??_fix_fft& (0+255),b
  6768  000838  D001               	goto	u5956
  6769  00083A  D009               	goto	u5957
  6770  00083C                     u5956:
  6771  00083C  0100               	movlb	0	; () banked
  6772  00083E  35B5               	rlcf	(??_fix_fft+4)& (0+255),w,b
  6773  000840  33B5               	rrcf	(??_fix_fft+4)& (0+255),f,b
  6774  000842  33B4               	rrcf	(??_fix_fft+3)& (0+255),f,b
  6775  000844  33B3               	rrcf	(??_fix_fft+2)& (0+255),f,b
  6776  000846  33B2               	rrcf	(??_fix_fft+1)& (0+255),f,b
  6777  000848  0100               	movlb	0	; () banked
  6778  00084A  2FB1               	decfsz	??_fix_fft& (0+255),f,b
  6779  00084C  D7F3               	goto	u5955
  6780  00084E                     u5957:
  6781  00084E  C0B2  F12E         	movff	??_fix_fft+1,fix_fft@c
  6782  000852  C0B3  F12F         	movff	??_fix_fft+2,fix_fft@c+1
  6783  000856  C0B4  F130         	movff	??_fix_fft+3,fix_fft@c+2
  6784  00085A  C0B5  F131         	movff	??_fix_fft+4,fix_fft@c+3
  6785                           
  6786                           ;fft.c: 137: b = c & 0x01;
  6787  00085E  0E01               	movlw	1
  6788  000860  0101               	movlb	1	; () banked
  6789  000862  152E               	andwf	fix_fft@c& (0+255),w,b
  6790  000864  0101               	movlb	1	; () banked
  6791  000866  6F1C               	movwf	fix_fft@b& (0+255),b
  6792  000868  0101               	movlb	1	; () banked
  6793  00086A  6B1D               	clrf	(fix_fft@b+1)& (0+255),b
  6794                           
  6795                           ;fft.c: 138: ti = (c >> 1) + b;
  6796  00086C  C12E  F0B1         	movff	fix_fft@c,??_fix_fft
  6797  000870  C12F  F0B2         	movff	fix_fft@c+1,??_fix_fft+1
  6798  000874  C130  F0B3         	movff	fix_fft@c+2,??_fix_fft+2
  6799  000878  C131  F0B4         	movff	fix_fft@c+3,??_fix_fft+3
  6800  00087C  0100               	movlb	0	; () banked
  6801  00087E  35B4               	rlcf	(??_fix_fft+3)& (0+255),w,b
  6802  000880  33B4               	rrcf	(??_fix_fft+3)& (0+255),f,b
  6803  000882  33B3               	rrcf	(??_fix_fft+2)& (0+255),f,b
  6804  000884  33B2               	rrcf	(??_fix_fft+1)& (0+255),f,b
  6805  000886  33B1               	rrcf	??_fix_fft& (0+255),f,b
  6806  000888  0101               	movlb	1	; () banked
  6807  00088A  511C               	movf	fix_fft@b& (0+255),w,b
  6808  00088C  0100               	movlb	0	; () banked
  6809  00088E  25B1               	addwf	??_fix_fft& (0+255),w,b
  6810  000890  0101               	movlb	1	; () banked
  6811  000892  6F1A               	movwf	fix_fft@ti& (0+255),b
  6812  000894  0101               	movlb	1	; () banked
  6813  000896  511D               	movf	(fix_fft@b+1)& (0+255),w,b
  6814  000898  0100               	movlb	0	; () banked
  6815  00089A  21B2               	addwfc	(??_fix_fft+1)& (0+255),w,b
  6816  00089C  0101               	movlb	1	; () banked
  6817  00089E  6F1B               	movwf	(fix_fft@ti+1)& (0+255),b
  6818                           
  6819                           ; BSR set to: 1
  6820                           ;fft.c: 140: c = ((long int)wi * (long int)fr[j]);
  6821  0008A0  C112  F09F         	movff	fix_fft@wi,___lmul@multiplier
  6822  0008A4  C113  F0A0         	movff	fix_fft@wi+1,___lmul@multiplier+1
  6823  0008A8  0100               	movlb	0	; () banked
  6824  0008AA  0E00               	movlw	0
  6825  0008AC  BFA0               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  6826  0008AE  0EFF               	movlw	-1
  6827  0008B0  6FA1               	movwf	(___lmul@multiplier+2)& (0+255),b
  6828  0008B2  6FA2               	movwf	(___lmul@multiplier+3)& (0+255),b
  6829  0008B4  90D8               	bcf	status,0,c
  6830  0008B6  0101               	movlb	1	; () banked
  6831  0008B8  352A               	rlcf	fix_fft@j& (0+255),w,b
  6832  0008BA  6ED9               	movwf	fsr2l,c
  6833  0008BC  0101               	movlb	1	; () banked
  6834  0008BE  352B               	rlcf	(fix_fft@j+1)& (0+255),w,b
  6835  0008C0  6EDA               	movwf	fsr2h,c
  6836  0008C2  0100               	movlb	0	; () banked
  6837  0008C4  51AB               	movf	fix_fft@fr& (0+255),w,b
  6838  0008C6  26D9               	addwf	fsr2l,f,c
  6839  0008C8  0100               	movlb	0	; () banked
  6840  0008CA  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  6841  0008CC  22DA               	addwfc	fsr2h,f,c
  6842  0008CE  CFDE F0A3          	movff	postinc2,___lmul@multiplicand
  6843  0008D2  CFDD F0A4          	movff	postdec2,___lmul@multiplicand+1
  6844  0008D6  0100               	movlb	0	; () banked
  6845  0008D8  0E00               	movlw	0
  6846  0008DA  BFA4               	btfsc	(___lmul@multiplicand+1)& (0+255),7,b
  6847  0008DC  0EFF               	movlw	-1
  6848  0008DE  6FA5               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6849  0008E0  6FA6               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6850  0008E2  ECBF  F01F         	call	___lmul	;wreg free
  6851  0008E6  C09F  F12E         	movff	?___lmul,fix_fft@c
  6852  0008EA  C0A0  F12F         	movff	?___lmul+1,fix_fft@c+1
  6853  0008EE  C0A1  F130         	movff	?___lmul+2,fix_fft@c+2
  6854  0008F2  C0A2  F131         	movff	?___lmul+3,fix_fft@c+3
  6855                           
  6856                           ;fft.c: 141: c = c >> 14;
  6857  0008F6  0E0E               	movlw	14
  6858  0008F8  0100               	movlb	0	; () banked
  6859  0008FA  6FB1               	movwf	??_fix_fft& (0+255),b
  6860  0008FC  C12E  F0B2         	movff	fix_fft@c,??_fix_fft+1
  6861  000900  C12F  F0B3         	movff	fix_fft@c+1,??_fix_fft+2
  6862  000904  C130  F0B4         	movff	fix_fft@c+2,??_fix_fft+3
  6863  000908  C131  F0B5         	movff	fix_fft@c+3,??_fix_fft+4
  6864  00090C                     u5965:
  6865  00090C  0100               	movlb	0	; () banked
  6866  00090E  67B1               	tstfsz	??_fix_fft& (0+255),b
  6867  000910  D001               	goto	u5966
  6868  000912  D009               	goto	u5967
  6869  000914                     u5966:
  6870  000914  0100               	movlb	0	; () banked
  6871  000916  35B5               	rlcf	(??_fix_fft+4)& (0+255),w,b
  6872  000918  33B5               	rrcf	(??_fix_fft+4)& (0+255),f,b
  6873  00091A  33B4               	rrcf	(??_fix_fft+3)& (0+255),f,b
  6874  00091C  33B3               	rrcf	(??_fix_fft+2)& (0+255),f,b
  6875  00091E  33B2               	rrcf	(??_fix_fft+1)& (0+255),f,b
  6876  000920  0100               	movlb	0	; () banked
  6877  000922  2FB1               	decfsz	??_fix_fft& (0+255),f,b
  6878  000924  D7F3               	goto	u5965
  6879  000926                     u5967:
  6880  000926  C0B2  F12E         	movff	??_fix_fft+1,fix_fft@c
  6881  00092A  C0B3  F12F         	movff	??_fix_fft+2,fix_fft@c+1
  6882  00092E  C0B4  F130         	movff	??_fix_fft+3,fix_fft@c+2
  6883  000932  C0B5  F131         	movff	??_fix_fft+4,fix_fft@c+3
  6884                           
  6885                           ;fft.c: 142: b = c & 0x01;
  6886  000936  0E01               	movlw	1
  6887  000938  0101               	movlb	1	; () banked
  6888  00093A  152E               	andwf	fix_fft@c& (0+255),w,b
  6889  00093C  0101               	movlb	1	; () banked
  6890  00093E  6F1C               	movwf	fix_fft@b& (0+255),b
  6891  000940  0101               	movlb	1	; () banked
  6892  000942  6B1D               	clrf	(fix_fft@b+1)& (0+255),b
  6893                           
  6894                           ; BSR set to: 1
  6895                           ;fft.c: 143: ti = ti + ((c >> 1) + b);
  6896  000944  C12E  F0B1         	movff	fix_fft@c,??_fix_fft
  6897  000948  C12F  F0B2         	movff	fix_fft@c+1,??_fix_fft+1
  6898  00094C  C130  F0B3         	movff	fix_fft@c+2,??_fix_fft+2
  6899  000950  C131  F0B4         	movff	fix_fft@c+3,??_fix_fft+3
  6900  000954  0100               	movlb	0	; () banked
  6901  000956  35B4               	rlcf	(??_fix_fft+3)& (0+255),w,b
  6902  000958  33B4               	rrcf	(??_fix_fft+3)& (0+255),f,b
  6903  00095A  33B3               	rrcf	(??_fix_fft+2)& (0+255),f,b
  6904  00095C  33B2               	rrcf	(??_fix_fft+1)& (0+255),f,b
  6905  00095E  33B1               	rrcf	??_fix_fft& (0+255),f,b
  6906  000960  0101               	movlb	1	; () banked
  6907  000962  511C               	movf	fix_fft@b& (0+255),w,b
  6908  000964  0100               	movlb	0	; () banked
  6909  000966  27B1               	addwf	??_fix_fft& (0+255),f,b
  6910  000968  0101               	movlb	1	; () banked
  6911  00096A  511D               	movf	(fix_fft@b+1)& (0+255),w,b
  6912  00096C  0100               	movlb	0	; () banked
  6913  00096E  23B2               	addwfc	(??_fix_fft+1)& (0+255),f,b
  6914  000970  0101               	movlb	1	; () banked
  6915  000972  511A               	movf	fix_fft@ti& (0+255),w,b
  6916  000974  0100               	movlb	0	; () banked
  6917  000976  25B1               	addwf	??_fix_fft& (0+255),w,b
  6918  000978  0101               	movlb	1	; () banked
  6919  00097A  6F1A               	movwf	fix_fft@ti& (0+255),b
  6920  00097C  0101               	movlb	1	; () banked
  6921  00097E  511B               	movf	(fix_fft@ti+1)& (0+255),w,b
  6922  000980  0100               	movlb	0	; () banked
  6923  000982  21B2               	addwfc	(??_fix_fft+1)& (0+255),w,b
  6924  000984  0101               	movlb	1	; () banked
  6925  000986  6F1B               	movwf	(fix_fft@ti+1)& (0+255),b
  6926                           
  6927                           ; BSR set to: 1
  6928                           ;fft.c: 145: qr = fr[i];
  6929  000988  90D8               	bcf	status,0,c
  6930  00098A  0101               	movlb	1	; () banked
  6931  00098C  351E               	rlcf	fix_fft@i& (0+255),w,b
  6932  00098E  6ED9               	movwf	fsr2l,c
  6933  000990  0101               	movlb	1	; () banked
  6934  000992  351F               	rlcf	(fix_fft@i+1)& (0+255),w,b
  6935  000994  6EDA               	movwf	fsr2h,c
  6936  000996  0100               	movlb	0	; () banked
  6937  000998  51AB               	movf	fix_fft@fr& (0+255),w,b
  6938  00099A  26D9               	addwf	fsr2l,f,c
  6939  00099C  0100               	movlb	0	; () banked
  6940  00099E  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  6941  0009A0  22DA               	addwfc	fsr2h,f,c
  6942  0009A2  CFDE F10C          	movff	postinc2,fix_fft@qr
  6943  0009A6  CFDD F10D          	movff	postdec2,fix_fft@qr+1
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;fft.c: 146: qi = fi[i];
  6947  0009AA  90D8               	bcf	status,0,c
  6948  0009AC  0101               	movlb	1	; () banked
  6949  0009AE  351E               	rlcf	fix_fft@i& (0+255),w,b
  6950  0009B0  6ED9               	movwf	fsr2l,c
  6951  0009B2  0101               	movlb	1	; () banked
  6952  0009B4  351F               	rlcf	(fix_fft@i+1)& (0+255),w,b
  6953  0009B6  6EDA               	movwf	fsr2h,c
  6954  0009B8  0100               	movlb	0	; () banked
  6955  0009BA  51AD               	movf	fix_fft@fi& (0+255),w,b
  6956  0009BC  26D9               	addwf	fsr2l,f,c
  6957  0009BE  0100               	movlb	0	; () banked
  6958  0009C0  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  6959  0009C2  22DA               	addwfc	fsr2h,f,c
  6960  0009C4  CFDE F10E          	movff	postinc2,fix_fft@qi
  6961  0009C8  CFDD F10F          	movff	postdec2,fix_fft@qi+1
  6962                           
  6963                           ; BSR set to: 0
  6964                           ;fft.c: 147: qr >>= 1;
  6965  0009CC  0101               	movlb	1	; () banked
  6966  0009CE  350D               	rlcf	(fix_fft@qr+1)& (0+255),w,b
  6967  0009D0  330D               	rrcf	(fix_fft@qr+1)& (0+255),f,b
  6968  0009D2  330C               	rrcf	fix_fft@qr& (0+255),f,b
  6969                           
  6970                           ; BSR set to: 1
  6971                           ;fft.c: 148: qi >>= 1;
  6972  0009D4  0101               	movlb	1	; () banked
  6973  0009D6  350F               	rlcf	(fix_fft@qi+1)& (0+255),w,b
  6974  0009D8  330F               	rrcf	(fix_fft@qi+1)& (0+255),f,b
  6975  0009DA  330E               	rrcf	fix_fft@qi& (0+255),f,b
  6976                           
  6977                           ; BSR set to: 1
  6978                           ;fft.c: 150: fr[j] = qr - tr;
  6979  0009DC  C118  F0B1         	movff	fix_fft@tr,??_fix_fft
  6980  0009E0  C119  F0B2         	movff	fix_fft@tr+1,??_fix_fft+1
  6981  0009E4  0100               	movlb	0	; () banked
  6982  0009E6  1FB1               	comf	??_fix_fft& (0+255),f,b
  6983  0009E8  1FB2               	comf	(??_fix_fft+1)& (0+255),f,b
  6984  0009EA  4BB1               	infsnz	??_fix_fft& (0+255),f,b
  6985  0009EC  2BB2               	incf	(??_fix_fft+1)& (0+255),f,b
  6986  0009EE  0101               	movlb	1	; () banked
  6987  0009F0  510C               	movf	fix_fft@qr& (0+255),w,b
  6988  0009F2  0100               	movlb	0	; () banked
  6989  0009F4  27B1               	addwf	??_fix_fft& (0+255),f,b
  6990  0009F6  0101               	movlb	1	; () banked
  6991  0009F8  510D               	movf	(fix_fft@qr+1)& (0+255),w,b
  6992  0009FA  0100               	movlb	0	; () banked
  6993  0009FC  23B2               	addwfc	(??_fix_fft+1)& (0+255),f,b
  6994  0009FE  90D8               	bcf	status,0,c
  6995  000A00  0101               	movlb	1	; () banked
  6996  000A02  352A               	rlcf	fix_fft@j& (0+255),w,b
  6997  000A04  6ED9               	movwf	fsr2l,c
  6998  000A06  0101               	movlb	1	; () banked
  6999  000A08  352B               	rlcf	(fix_fft@j+1)& (0+255),w,b
  7000  000A0A  6EDA               	movwf	fsr2h,c
  7001  000A0C  0100               	movlb	0	; () banked
  7002  000A0E  51AB               	movf	fix_fft@fr& (0+255),w,b
  7003  000A10  26D9               	addwf	fsr2l,f,c
  7004  000A12  0100               	movlb	0	; () banked
  7005  000A14  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  7006  000A16  22DA               	addwfc	fsr2h,f,c
  7007  000A18  C0B1  FFDE         	movff	??_fix_fft,postinc2
  7008  000A1C  C0B2  FFDD         	movff	??_fix_fft+1,postdec2
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;fft.c: 151: fi[j] = qi - ti;
  7012  000A20  C11A  F0B1         	movff	fix_fft@ti,??_fix_fft
  7013  000A24  C11B  F0B2         	movff	fix_fft@ti+1,??_fix_fft+1
  7014  000A28  0100               	movlb	0	; () banked
  7015  000A2A  1FB1               	comf	??_fix_fft& (0+255),f,b
  7016  000A2C  1FB2               	comf	(??_fix_fft+1)& (0+255),f,b
  7017  000A2E  4BB1               	infsnz	??_fix_fft& (0+255),f,b
  7018  000A30  2BB2               	incf	(??_fix_fft+1)& (0+255),f,b
  7019  000A32  0101               	movlb	1	; () banked
  7020  000A34  510E               	movf	fix_fft@qi& (0+255),w,b
  7021  000A36  0100               	movlb	0	; () banked
  7022  000A38  27B1               	addwf	??_fix_fft& (0+255),f,b
  7023  000A3A  0101               	movlb	1	; () banked
  7024  000A3C  510F               	movf	(fix_fft@qi+1)& (0+255),w,b
  7025  000A3E  0100               	movlb	0	; () banked
  7026  000A40  23B2               	addwfc	(??_fix_fft+1)& (0+255),f,b
  7027  000A42  90D8               	bcf	status,0,c
  7028  000A44  0101               	movlb	1	; () banked
  7029  000A46  352A               	rlcf	fix_fft@j& (0+255),w,b
  7030  000A48  6ED9               	movwf	fsr2l,c
  7031  000A4A  0101               	movlb	1	; () banked
  7032  000A4C  352B               	rlcf	(fix_fft@j+1)& (0+255),w,b
  7033  000A4E  6EDA               	movwf	fsr2h,c
  7034  000A50  0100               	movlb	0	; () banked
  7035  000A52  51AD               	movf	fix_fft@fi& (0+255),w,b
  7036  000A54  26D9               	addwf	fsr2l,f,c
  7037  000A56  0100               	movlb	0	; () banked
  7038  000A58  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  7039  000A5A  22DA               	addwfc	fsr2h,f,c
  7040  000A5C  C0B1  FFDE         	movff	??_fix_fft,postinc2
  7041  000A60  C0B2  FFDD         	movff	??_fix_fft+1,postdec2
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;fft.c: 152: fr[i] = qr + tr;
  7045  000A64  0101               	movlb	1	; () banked
  7046  000A66  5118               	movf	fix_fft@tr& (0+255),w,b
  7047  000A68  0101               	movlb	1	; () banked
  7048  000A6A  250C               	addwf	fix_fft@qr& (0+255),w,b
  7049  000A6C  0100               	movlb	0	; () banked
  7050  000A6E  6FB1               	movwf	??_fix_fft& (0+255),b
  7051  000A70  0101               	movlb	1	; () banked
  7052  000A72  5119               	movf	(fix_fft@tr+1)& (0+255),w,b
  7053  000A74  0101               	movlb	1	; () banked
  7054  000A76  210D               	addwfc	(fix_fft@qr+1)& (0+255),w,b
  7055  000A78  0100               	movlb	0	; () banked
  7056  000A7A  6FB2               	movwf	(??_fix_fft+1)& (0+255),b
  7057  000A7C  90D8               	bcf	status,0,c
  7058  000A7E  0101               	movlb	1	; () banked
  7059  000A80  351E               	rlcf	fix_fft@i& (0+255),w,b
  7060  000A82  6ED9               	movwf	fsr2l,c
  7061  000A84  0101               	movlb	1	; () banked
  7062  000A86  351F               	rlcf	(fix_fft@i+1)& (0+255),w,b
  7063  000A88  6EDA               	movwf	fsr2h,c
  7064  000A8A  0100               	movlb	0	; () banked
  7065  000A8C  51AB               	movf	fix_fft@fr& (0+255),w,b
  7066  000A8E  26D9               	addwf	fsr2l,f,c
  7067  000A90  0100               	movlb	0	; () banked
  7068  000A92  51AC               	movf	(fix_fft@fr+1)& (0+255),w,b
  7069  000A94  22DA               	addwfc	fsr2h,f,c
  7070  000A96  C0B1  FFDE         	movff	??_fix_fft,postinc2
  7071  000A9A  C0B2  FFDD         	movff	??_fix_fft+1,postdec2
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;fft.c: 153: fi[i] = qi + ti;
  7075  000A9E  0101               	movlb	1	; () banked
  7076  000AA0  511A               	movf	fix_fft@ti& (0+255),w,b
  7077  000AA2  0101               	movlb	1	; () banked
  7078  000AA4  250E               	addwf	fix_fft@qi& (0+255),w,b
  7079  000AA6  0100               	movlb	0	; () banked
  7080  000AA8  6FB1               	movwf	??_fix_fft& (0+255),b
  7081  000AAA  0101               	movlb	1	; () banked
  7082  000AAC  511B               	movf	(fix_fft@ti+1)& (0+255),w,b
  7083  000AAE  0101               	movlb	1	; () banked
  7084  000AB0  210F               	addwfc	(fix_fft@qi+1)& (0+255),w,b
  7085  000AB2  0100               	movlb	0	; () banked
  7086  000AB4  6FB2               	movwf	(??_fix_fft+1)& (0+255),b
  7087  000AB6  90D8               	bcf	status,0,c
  7088  000AB8  0101               	movlb	1	; () banked
  7089  000ABA  351E               	rlcf	fix_fft@i& (0+255),w,b
  7090  000ABC  6ED9               	movwf	fsr2l,c
  7091  000ABE  0101               	movlb	1	; () banked
  7092  000AC0  351F               	rlcf	(fix_fft@i+1)& (0+255),w,b
  7093  000AC2  6EDA               	movwf	fsr2h,c
  7094  000AC4  0100               	movlb	0	; () banked
  7095  000AC6  51AD               	movf	fix_fft@fi& (0+255),w,b
  7096  000AC8  26D9               	addwf	fsr2l,f,c
  7097  000ACA  0100               	movlb	0	; () banked
  7098  000ACC  51AE               	movf	(fix_fft@fi+1)& (0+255),w,b
  7099  000ACE  22DA               	addwfc	fsr2h,f,c
  7100  000AD0  C0B1  FFDE         	movff	??_fix_fft,postinc2
  7101  000AD4  C0B2  FFDD         	movff	??_fix_fft+1,postdec2
  7102                           
  7103                           ; BSR set to: 0
  7104  000AD8  0101               	movlb	1	; () banked
  7105  000ADA  5108               	movf	fix_fft@istep& (0+255),w,b
  7106  000ADC  0101               	movlb	1	; () banked
  7107  000ADE  271E               	addwf	fix_fft@i& (0+255),f,b
  7108  000AE0  0101               	movlb	1	; () banked
  7109  000AE2  5109               	movf	(fix_fft@istep+1)& (0+255),w,b
  7110  000AE4  0101               	movlb	1	; () banked
  7111  000AE6  231F               	addwfc	(fix_fft@i+1)& (0+255),f,b
  7112  000AE8  0101               	movlb	1	; () banked
  7113  000AEA  510A               	movf	(fix_fft@istep+2)& (0+255),w,b
  7114  000AEC  0101               	movlb	1	; () banked
  7115  000AEE  2320               	addwfc	(fix_fft@i+2)& (0+255),f,b
  7116  000AF0  0101               	movlb	1	; () banked
  7117  000AF2  510B               	movf	(fix_fft@istep+3)& (0+255),w,b
  7118  000AF4  0101               	movlb	1	; () banked
  7119  000AF6  2321               	addwfc	(fix_fft@i+3)& (0+255),f,b
  7120  000AF8  D000               	goto	l5352
  7121  000AFA                     l5352:
  7122                           
  7123                           ; BSR set to: 1
  7124  000AFA  0101               	movlb	1	; () banked
  7125  000AFC  5114               	movf	fix_fft@n& (0+255),w,b
  7126  000AFE  0101               	movlb	1	; () banked
  7127  000B00  5D1E               	subwf	fix_fft@i& (0+255),w,b
  7128  000B02  0101               	movlb	1	; () banked
  7129  000B04  5115               	movf	(fix_fft@n+1)& (0+255),w,b
  7130  000B06  0101               	movlb	1	; () banked
  7131  000B08  591F               	subwfb	(fix_fft@i+1)& (0+255),w,b
  7132  000B0A  0101               	movlb	1	; () banked
  7133  000B0C  5116               	movf	(fix_fft@n+2)& (0+255),w,b
  7134  000B0E  0101               	movlb	1	; () banked
  7135  000B10  5920               	subwfb	(fix_fft@i+2)& (0+255),w,b
  7136  000B12  0101               	movlb	1	; () banked
  7137  000B14  5121               	movf	(fix_fft@i+3)& (0+255),w,b
  7138  000B16  0A80               	xorlw	128
  7139  000B18  0100               	movlb	0	; () banked
  7140  000B1A  6FB1               	movwf	??_fix_fft& (0+255),b
  7141  000B1C  0101               	movlb	1	; () banked
  7142  000B1E  5117               	movf	(fix_fft@n+3)& (0+255),w,b
  7143  000B20  0A80               	xorlw	128
  7144  000B22  0100               	movlb	0	; () banked
  7145  000B24  59B1               	subwfb	??_fix_fft& (0+255),w,b
  7146  000B26  A0D8               	btfss	status,0,c
  7147  000B28  D552               	goto	l5308
  7148                           
  7149                           ; BSR set to: 0
  7150                           
  7151                           ; BSR set to: 0
  7152  000B2A  0100               	movlb	0	; () banked
  7153  000B2C  4BAF               	infsnz	fix_fft@m& (0+255),f,b
  7154  000B2E  2BB0               	incf	(fix_fft@m+1)& (0+255),f,b
  7155  000B30  D000               	goto	l5356
  7156  000B32                     l5356:
  7157                           
  7158                           ; BSR set to: 0
  7159  000B32  C0AF  F0B1         	movff	fix_fft@m,??_fix_fft
  7160  000B36  C0B0  F0B2         	movff	fix_fft@m+1,??_fix_fft+1
  7161  000B3A  0E00               	movlw	0
  7162  000B3C  0100               	movlb	0	; () banked
  7163  000B3E  BFB2               	btfsc	(??_fix_fft+1)& (0+255),7,b
  7164  000B40  0EFF               	movlw	255
  7165  000B42  6FB3               	movwf	(??_fix_fft+2)& (0+255),b
  7166  000B44  6FB4               	movwf	(??_fix_fft+3)& (0+255),b
  7167  000B46  0101               	movlb	1	; () banked
  7168  000B48  5126               	movf	fix_fft@l& (0+255),w,b
  7169  000B4A  0100               	movlb	0	; () banked
  7170  000B4C  5DB1               	subwf	??_fix_fft& (0+255),w,b
  7171  000B4E  0101               	movlb	1	; () banked
  7172  000B50  5127               	movf	(fix_fft@l+1)& (0+255),w,b
  7173  000B52  0100               	movlb	0	; () banked
  7174  000B54  59B2               	subwfb	(??_fix_fft+1)& (0+255),w,b
  7175  000B56  0101               	movlb	1	; () banked
  7176  000B58  5128               	movf	(fix_fft@l+2)& (0+255),w,b
  7177  000B5A  0100               	movlb	0	; () banked
  7178  000B5C  59B3               	subwfb	(??_fix_fft+2)& (0+255),w,b
  7179  000B5E  0100               	movlb	0	; () banked
  7180  000B60  51B4               	movf	(??_fix_fft+3)& (0+255),w,b
  7181  000B62  0A80               	xorlw	128
  7182  000B64  0100               	movlb	0	; () banked
  7183  000B66  6FB5               	movwf	(??_fix_fft+4)& (0+255),b
  7184  000B68  0101               	movlb	1	; () banked
  7185  000B6A  5129               	movf	(fix_fft@l+3)& (0+255),w,b
  7186  000B6C  0A80               	xorlw	128
  7187  000B6E  0100               	movlb	0	; () banked
  7188  000B70  59B5               	subwfb	(??_fix_fft+4)& (0+255),w,b
  7189  000B72  A0D8               	btfss	status,0,c
  7190  000B74  D4C2               	goto	l5300
  7191                           
  7192                           ; BSR set to: 0
  7193                           ;fft.c: 154: }
  7194                           ;fft.c: 155: }
  7195                           ;fft.c: 157: --k;
  7196                           
  7197                           ; BSR set to: 0
  7198  000B76  0EFF               	movlw	255
  7199  000B78  0101               	movlb	1	; () banked
  7200  000B7A  2700               	addwf	fix_fft@k& (0+255),f,b
  7201  000B7C  0EFF               	movlw	255
  7202  000B7E  2301               	addwfc	(fix_fft@k+1)& (0+255),f,b
  7203  000B80  0EFF               	movlw	255
  7204  000B82  2302               	addwfc	(fix_fft@k+2)& (0+255),f,b
  7205  000B84  0EFF               	movlw	255
  7206  000B86  2303               	addwfc	(fix_fft@k+3)& (0+255),f,b
  7207                           
  7208                           ; BSR set to: 1
  7209                           ;fft.c: 158: l = istep;
  7210  000B88  C108  F126         	movff	fix_fft@istep,fix_fft@l
  7211  000B8C  C109  F127         	movff	fix_fft@istep+1,fix_fft@l+1
  7212  000B90  C10A  F128         	movff	fix_fft@istep+2,fix_fft@l+2
  7213  000B94  C10B  F129         	movff	fix_fft@istep+3,fix_fft@l+3
  7214  000B98                     l625:
  7215                           
  7216                           ; BSR set to: 1
  7217  000B98  0101               	movlb	1	; () banked
  7218  000B9A  5114               	movf	fix_fft@n& (0+255),w,b
  7219  000B9C  0101               	movlb	1	; () banked
  7220  000B9E  5D26               	subwf	fix_fft@l& (0+255),w,b
  7221  000BA0  0101               	movlb	1	; () banked
  7222  000BA2  5115               	movf	(fix_fft@n+1)& (0+255),w,b
  7223  000BA4  0101               	movlb	1	; () banked
  7224  000BA6  5927               	subwfb	(fix_fft@l+1)& (0+255),w,b
  7225  000BA8  0101               	movlb	1	; () banked
  7226  000BAA  5116               	movf	(fix_fft@n+2)& (0+255),w,b
  7227  000BAC  0101               	movlb	1	; () banked
  7228  000BAE  5928               	subwfb	(fix_fft@l+2)& (0+255),w,b
  7229  000BB0  0101               	movlb	1	; () banked
  7230  000BB2  5129               	movf	(fix_fft@l+3)& (0+255),w,b
  7231  000BB4  0A80               	xorlw	128
  7232  000BB6  0100               	movlb	0	; () banked
  7233  000BB8  6FB1               	movwf	??_fix_fft& (0+255),b
  7234  000BBA  0101               	movlb	1	; () banked
  7235  000BBC  5117               	movf	(fix_fft@n+3)& (0+255),w,b
  7236  000BBE  0A80               	xorlw	128
  7237  000BC0  0100               	movlb	0	; () banked
  7238  000BC2  59B1               	subwfb	??_fix_fft& (0+255),w,b
  7239  000BC4  A0D8               	btfss	status,0,c
  7240  000BC6  D482               	goto	l5296
  7241                           
  7242                           ; BSR set to: 0
  7243                           
  7244                           ; BSR set to: 0
  7245  000BC8  0012               	return		;funcret
  7246  000BCA                     __end_of_fix_fft:
  7247                           	opt stack 0
  7248                           tblptru	equ	0xFF8
  7249                           tblptrh	equ	0xFF7
  7250                           tblptrl	equ	0xFF6
  7251                           tablat	equ	0xFF5
  7252                           postinc0	equ	0xFEE
  7253                           wreg	equ	0xFE8
  7254                           postinc1	equ	0xFE6
  7255                           postdec1	equ	0xFE5
  7256                           plusw1	equ	0xFE3
  7257                           fsr1h	equ	0xFE2
  7258                           fsr1l	equ	0xFE1
  7259                           postinc2	equ	0xFDE
  7260                           postdec2	equ	0xFDD
  7261                           plusw2	equ	0xFDB
  7262                           fsr2h	equ	0xFDA
  7263                           fsr2l	equ	0xFD9
  7264                           status	equ	0xFD8
  7265                           
  7266 ;; *************** function ___lmul *****************
  7267 ;; Defined at:
  7268 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul32.c"
  7269 ;; Parameters:    Size  Location     Type
  7270 ;;  multiplier      4   31[BANK0 ] unsigned long 
  7271 ;;  multiplicand    4   35[BANK0 ] unsigned long 
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;  product         4   39[BANK0 ] unsigned long 
  7274 ;; Return value:  Size  Location     Type
  7275 ;;                  4   31[BANK0 ] unsigned long 
  7276 ;; Registers used:
  7277 ;;		wreg, status,2, status,0
  7278 ;; Tracked objects:
  7279 ;;		On entry : 0/0
  7280 ;;		On exit  : 0/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7283 ;;      Params:         0       8       0       0       0       0       0
  7284 ;;      Locals:         0       4       0       0       0       0       0
  7285 ;;      Temps:          0       0       0       0       0       0       0
  7286 ;;      Totals:         0      12       0       0       0       0       0
  7287 ;;Total ram usage:       12 bytes
  7288 ;; Hardware stack levels used:    1
  7289 ;; Hardware stack levels required when called:    5
  7290 ;; This function calls:
  7291 ;;		Nothing
  7292 ;; This function is called by:
  7293 ;;		_fix_fft
  7294 ;; This function uses a non-reentrant model
  7295 ;;
  7296                           
  7297                           	psect	text8
  7298  003F7E                     __ptext8:
  7299                           	opt stack 0
  7300  003F7E                     ___lmul:
  7301                           	opt stack 22
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;incstack = 0
  7305  003F7E  0E00               	movlw	0
  7306  003F80  0100               	movlb	0	; () banked
  7307  003F82  6FA7               	movwf	___lmul@product& (0+255),b
  7308  003F84  0E00               	movlw	0
  7309  003F86  6FA8               	movwf	(___lmul@product+1)& (0+255),b
  7310  003F88  0E00               	movlw	0
  7311  003F8A  6FA9               	movwf	(___lmul@product+2)& (0+255),b
  7312  003F8C  0E00               	movlw	0
  7313  003F8E  6FAA               	movwf	(___lmul@product+3)& (0+255),b
  7314  003F90  D000               	goto	l5056
  7315  003F92                     l5056:
  7316                           
  7317                           ; BSR set to: 0
  7318  003F92  0100               	movlb	0	; () banked
  7319  003F94  A19F               	btfss	___lmul@multiplier& (0+255),0,b
  7320  003F96  D011               	goto	l5060
  7321                           
  7322                           ; BSR set to: 0
  7323  003F98  0100               	movlb	0	; () banked
  7324  003F9A  51A3               	movf	___lmul@multiplicand& (0+255),w,b
  7325  003F9C  0100               	movlb	0	; () banked
  7326  003F9E  27A7               	addwf	___lmul@product& (0+255),f,b
  7327  003FA0  0100               	movlb	0	; () banked
  7328  003FA2  51A4               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  7329  003FA4  0100               	movlb	0	; () banked
  7330  003FA6  23A8               	addwfc	(___lmul@product+1)& (0+255),f,b
  7331  003FA8  0100               	movlb	0	; () banked
  7332  003FAA  51A5               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  7333  003FAC  0100               	movlb	0	; () banked
  7334  003FAE  23A9               	addwfc	(___lmul@product+2)& (0+255),f,b
  7335  003FB0  0100               	movlb	0	; () banked
  7336  003FB2  51A6               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  7337  003FB4  0100               	movlb	0	; () banked
  7338  003FB6  23AA               	addwfc	(___lmul@product+3)& (0+255),f,b
  7339  003FB8  D000               	goto	l5060
  7340  003FBA                     l5060:
  7341                           
  7342                           ; BSR set to: 0
  7343  003FBA  0100               	movlb	0	; () banked
  7344  003FBC  90D8               	bcf	status,0,c
  7345  003FBE  37A3               	rlcf	___lmul@multiplicand& (0+255),f,b
  7346  003FC0  37A4               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  7347  003FC2  37A5               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  7348  003FC4  37A6               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  7349                           
  7350                           ; BSR set to: 0
  7351  003FC6  0100               	movlb	0	; () banked
  7352  003FC8  90D8               	bcf	status,0,c
  7353  003FCA  33A2               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  7354  003FCC  33A1               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  7355  003FCE  33A0               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  7356  003FD0  339F               	rrcf	___lmul@multiplier& (0+255),f,b
  7357  003FD2  0100               	movlb	0	; () banked
  7358  003FD4  519F               	movf	___lmul@multiplier& (0+255),w,b
  7359  003FD6  0100               	movlb	0	; () banked
  7360  003FD8  11A0               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  7361  003FDA  0100               	movlb	0	; () banked
  7362  003FDC  11A1               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  7363  003FDE  0100               	movlb	0	; () banked
  7364  003FE0  11A2               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  7365  003FE2  A4D8               	btfss	status,2,c
  7366  003FE4  D7D6               	goto	l5056
  7367                           
  7368                           ; BSR set to: 0
  7369  003FE6  C0A7  F09F         	movff	___lmul@product,?___lmul
  7370  003FEA  C0A8  F0A0         	movff	___lmul@product+1,?___lmul+1
  7371  003FEE  C0A9  F0A1         	movff	___lmul@product+2,?___lmul+2
  7372  003FF2  C0AA  F0A2         	movff	___lmul@product+3,?___lmul+3
  7373                           
  7374                           ; BSR set to: 0
  7375  003FF6  0012               	return		;funcret
  7376  003FF8                     __end_of___lmul:
  7377                           	opt stack 0
  7378                           tblptru	equ	0xFF8
  7379                           tblptrh	equ	0xFF7
  7380                           tblptrl	equ	0xFF6
  7381                           tablat	equ	0xFF5
  7382                           postinc0	equ	0xFEE
  7383                           wreg	equ	0xFE8
  7384                           postinc1	equ	0xFE6
  7385                           postdec1	equ	0xFE5
  7386                           plusw1	equ	0xFE3
  7387                           fsr1h	equ	0xFE2
  7388                           fsr1l	equ	0xFE1
  7389                           postinc2	equ	0xFDE
  7390                           postdec2	equ	0xFDD
  7391                           plusw2	equ	0xFDB
  7392                           fsr2h	equ	0xFDA
  7393                           fsr2l	equ	0xFD9
  7394                           status	equ	0xFD8
  7395                           
  7396 ;; *************** function ___ftdiv *****************
  7397 ;; Defined at:
  7398 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  7399 ;; Parameters:    Size  Location     Type
  7400 ;;  f1              3   87[BANK0 ] float 
  7401 ;;  f2              3   90[BANK0 ] float 
  7402 ;; Auto vars:     Size  Location     Type
  7403 ;;  f3              3    4[BANK1 ] float 
  7404 ;;  sign            1    8[BANK1 ] unsigned char 
  7405 ;;  exp             1    7[BANK1 ] unsigned char 
  7406 ;;  cntr            1    3[BANK1 ] unsigned char 
  7407 ;; Return value:  Size  Location     Type
  7408 ;;                  3   87[BANK0 ] float 
  7409 ;; Registers used:
  7410 ;;		wreg, status,2, status,0, cstack
  7411 ;; Tracked objects:
  7412 ;;		On entry : 0/0
  7413 ;;		On exit  : 0/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7416 ;;      Params:         0       6       0       0       0       0       0
  7417 ;;      Locals:         0       0       6       0       0       0       0
  7418 ;;      Temps:          0       0       3       0       0       0       0
  7419 ;;      Totals:         0       6       9       0       0       0       0
  7420 ;;Total ram usage:       15 bytes
  7421 ;; Hardware stack levels used:    1
  7422 ;; Hardware stack levels required when called:    6
  7423 ;; This function calls:
  7424 ;;		___ftpack
  7425 ;; This function is called by:
  7426 ;;		_cmFftFun
  7427 ;; This function uses a non-reentrant model
  7428 ;;
  7429                           
  7430                           	psect	text9
  7431  0031C0                     __ptext9:
  7432                           	opt stack 0
  7433  0031C0                     ___ftdiv:
  7434                           	opt stack 22
  7435                           
  7436                           ; BSR set to: 0
  7437                           ;incstack = 0
  7438  0031C0  C0D9  F100         	movff	___ftdiv@f1+2,??___ftdiv
  7439  0031C4  0101               	movlb	1	; () banked
  7440  0031C6  6B01               	clrf	(??___ftdiv+1)& (0+255),b
  7441  0031C8  6B02               	clrf	(??___ftdiv+2)& (0+255),b
  7442  0031CA  0100               	movlb	0	; () banked
  7443  0031CC  35D8               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  7444  0031CE  0101               	movlb	1	; () banked
  7445  0031D0  3700               	rlcf	??___ftdiv& (0+255),f,b
  7446  0031D2  E301               	bnc	u6071
  7447  0031D4  8101               	bsf	(??___ftdiv+1)& (0+255),0,b
  7448  0031D6                     u6071:
  7449  0031D6  0101               	movlb	1	; () banked
  7450  0031D8  5100               	movf	??___ftdiv& (0+255),w,b
  7451  0031DA  0101               	movlb	1	; () banked
  7452  0031DC  6F07               	movwf	___ftdiv@exp& (0+255),b
  7453  0031DE  0101               	movlb	1	; () banked
  7454  0031E0  5107               	movf	___ftdiv@exp& (0+255),w,b
  7455  0031E2  A4D8               	btfss	status,2,c
  7456  0031E4  D002               	goto	l5410
  7457  0031E6  D014               	goto	l5412
  7458                           
  7459                           ; BSR set to: 0
  7460                           
  7461                           ; BSR set to: 1
  7462  0031E8  D08B               	goto	l1214
  7463  0031EA                     l5410:
  7464  0031EA  C0DC  F100         	movff	___ftdiv@f2+2,??___ftdiv
  7465  0031EE  0101               	movlb	1	; () banked
  7466  0031F0  6B01               	clrf	(??___ftdiv+1)& (0+255),b
  7467  0031F2  6B02               	clrf	(??___ftdiv+2)& (0+255),b
  7468  0031F4  0100               	movlb	0	; () banked
  7469  0031F6  35DB               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  7470  0031F8  0101               	movlb	1	; () banked
  7471  0031FA  3700               	rlcf	??___ftdiv& (0+255),f,b
  7472  0031FC  E301               	bnc	u6091
  7473  0031FE  8101               	bsf	(??___ftdiv+1)& (0+255),0,b
  7474  003200                     u6091:
  7475  003200  0101               	movlb	1	; () banked
  7476  003202  5100               	movf	??___ftdiv& (0+255),w,b
  7477  003204  0101               	movlb	1	; () banked
  7478  003206  6F08               	movwf	___ftdiv@sign& (0+255),b
  7479  003208  0101               	movlb	1	; () banked
  7480  00320A  5108               	movf	___ftdiv@sign& (0+255),w,b
  7481  00320C  A4D8               	btfss	status,2,c
  7482  00320E  D00A               	goto	l5416
  7483  003210                     l5412:
  7484                           
  7485                           ; BSR set to: 1
  7486  003210  0E00               	movlw	0
  7487  003212  0100               	movlb	0	; () banked
  7488  003214  6FD7               	movwf	?___ftdiv& (0+255),b
  7489  003216  0E00               	movlw	0
  7490  003218  0100               	movlb	0	; () banked
  7491  00321A  6FD8               	movwf	(?___ftdiv+1)& (0+255),b
  7492  00321C  0E00               	movlw	0
  7493  00321E  0100               	movlb	0	; () banked
  7494  003220  6FD9               	movwf	(?___ftdiv+2)& (0+255),b
  7495                           
  7496                           ; BSR set to: 0
  7497  003222  D06E               	goto	l1214
  7498  003224                     l5416:
  7499  003224  0E00               	movlw	0
  7500  003226  0101               	movlb	1	; () banked
  7501  003228  6F04               	movwf	___ftdiv@f3& (0+255),b
  7502  00322A  0E00               	movlw	0
  7503  00322C  0101               	movlb	1	; () banked
  7504  00322E  6F05               	movwf	(___ftdiv@f3+1)& (0+255),b
  7505  003230  0E00               	movlw	0
  7506  003232  0101               	movlb	1	; () banked
  7507  003234  6F06               	movwf	(___ftdiv@f3+2)& (0+255),b
  7508                           
  7509                           ; BSR set to: 1
  7510  003236  0101               	movlb	1	; () banked
  7511  003238  5108               	movf	___ftdiv@sign& (0+255),w,b
  7512  00323A  0F89               	addlw	137
  7513  00323C  0101               	movlb	1	; () banked
  7514  00323E  5F07               	subwf	___ftdiv@exp& (0+255),f,b
  7515                           
  7516                           ; BSR set to: 1
  7517  003240  C0D9  F108         	movff	___ftdiv@f1+2,___ftdiv@sign
  7518                           
  7519                           ; BSR set to: 1
  7520  003244  0100               	movlb	0	; () banked
  7521  003246  51DC               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7522  003248  0101               	movlb	1	; () banked
  7523  00324A  1B08               	xorwf	___ftdiv@sign& (0+255),f,b
  7524                           
  7525                           ; BSR set to: 1
  7526  00324C  0E80               	movlw	128
  7527  00324E  0101               	movlb	1	; () banked
  7528  003250  1708               	andwf	___ftdiv@sign& (0+255),f,b
  7529                           
  7530                           ; BSR set to: 1
  7531  003252  0100               	movlb	0	; () banked
  7532  003254  8FD8               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  7533                           
  7534                           ; BSR set to: 0
  7535  003256  0EFF               	movlw	255
  7536  003258  0100               	movlb	0	; () banked
  7537  00325A  17D7               	andwf	___ftdiv@f1& (0+255),f,b
  7538  00325C  0EFF               	movlw	255
  7539  00325E  0100               	movlb	0	; () banked
  7540  003260  17D8               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  7541  003262  0E00               	movlw	0
  7542  003264  0100               	movlb	0	; () banked
  7543  003266  17D9               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  7544                           
  7545                           ; BSR set to: 0
  7546  003268  0100               	movlb	0	; () banked
  7547  00326A  8FDB               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  7548                           
  7549                           ; BSR set to: 0
  7550  00326C  0EFF               	movlw	255
  7551  00326E  0100               	movlb	0	; () banked
  7552  003270  17DA               	andwf	___ftdiv@f2& (0+255),f,b
  7553  003272  0EFF               	movlw	255
  7554  003274  0100               	movlb	0	; () banked
  7555  003276  17DB               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  7556  003278  0E00               	movlw	0
  7557  00327A  0100               	movlb	0	; () banked
  7558  00327C  17DC               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  7559                           
  7560                           ; BSR set to: 0
  7561  00327E  0E18               	movlw	24
  7562  003280  0101               	movlb	1	; () banked
  7563  003282  6F03               	movwf	___ftdiv@cntr& (0+255),b
  7564  003284  D000               	goto	l5436
  7565  003286                     l5436:
  7566                           
  7567                           ; BSR set to: 1
  7568  003286  0101               	movlb	1	; () banked
  7569  003288  90D8               	bcf	status,0,c
  7570  00328A  3704               	rlcf	___ftdiv@f3& (0+255),f,b
  7571  00328C  3705               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  7572  00328E  3706               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  7573                           
  7574                           ; BSR set to: 1
  7575  003290  0100               	movlb	0	; () banked
  7576  003292  51DA               	movf	___ftdiv@f2& (0+255),w,b
  7577  003294  0100               	movlb	0	; () banked
  7578  003296  5DD7               	subwf	___ftdiv@f1& (0+255),w,b
  7579  003298  0100               	movlb	0	; () banked
  7580  00329A  51DB               	movf	(___ftdiv@f2+1)& (0+255),w,b
  7581  00329C  0100               	movlb	0	; () banked
  7582  00329E  59D8               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  7583  0032A0  0100               	movlb	0	; () banked
  7584  0032A2  51DC               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7585  0032A4  0100               	movlb	0	; () banked
  7586  0032A6  59D9               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  7587  0032A8  A0D8               	btfss	status,0,c
  7588  0032AA  D00E               	goto	l1217
  7589                           
  7590                           ; BSR set to: 0
  7591  0032AC  0100               	movlb	0	; () banked
  7592  0032AE  51DA               	movf	___ftdiv@f2& (0+255),w,b
  7593  0032B0  0100               	movlb	0	; () banked
  7594  0032B2  5FD7               	subwf	___ftdiv@f1& (0+255),f,b
  7595  0032B4  0100               	movlb	0	; () banked
  7596  0032B6  51DB               	movf	(___ftdiv@f2+1)& (0+255),w,b
  7597  0032B8  0100               	movlb	0	; () banked
  7598  0032BA  5BD8               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  7599  0032BC  0100               	movlb	0	; () banked
  7600  0032BE  51DC               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7601  0032C0  0100               	movlb	0	; () banked
  7602  0032C2  5BD9               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  7603                           
  7604                           ; BSR set to: 0
  7605  0032C4  0101               	movlb	1	; () banked
  7606  0032C6  8104               	bsf	___ftdiv@f3& (0+255),0,b
  7607  0032C8                     l1217:
  7608  0032C8  0100               	movlb	0	; () banked
  7609  0032CA  90D8               	bcf	status,0,c
  7610  0032CC  37D7               	rlcf	___ftdiv@f1& (0+255),f,b
  7611  0032CE  37D8               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  7612  0032D0  37D9               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  7613                           
  7614                           ; BSR set to: 0
  7615  0032D2  0101               	movlb	1	; () banked
  7616  0032D4  2F03               	decfsz	___ftdiv@cntr& (0+255),f,b
  7617  0032D6  D7D7               	goto	l5436
  7618  0032D8  D000               	goto	l5446
  7619  0032DA                     l5446:
  7620                           
  7621                           ; BSR set to: 1
  7622  0032DA  C104  F09F         	movff	___ftdiv@f3,___ftpack@arg
  7623  0032DE  C105  F0A0         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7624  0032E2  C106  F0A1         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7625  0032E6  C107  F0A2         	movff	___ftdiv@exp,___ftpack@exp
  7626  0032EA  C108  F0A3         	movff	___ftdiv@sign,___ftpack@sign
  7627  0032EE  EC50  F01B         	call	___ftpack	;wreg free
  7628  0032F2  C09F  F0D7         	movff	?___ftpack,?___ftdiv
  7629  0032F6  C0A0  F0D8         	movff	?___ftpack+1,?___ftdiv+1
  7630  0032FA  C0A1  F0D9         	movff	?___ftpack+2,?___ftdiv+2
  7631  0032FE  D000               	goto	l1214
  7632  003300                     l1214:
  7633  003300  0012               	return		;funcret
  7634  003302                     __end_of___ftdiv:
  7635                           	opt stack 0
  7636                           tblptru	equ	0xFF8
  7637                           tblptrh	equ	0xFF7
  7638                           tblptrl	equ	0xFF6
  7639                           tablat	equ	0xFF5
  7640                           postinc0	equ	0xFEE
  7641                           wreg	equ	0xFE8
  7642                           postinc1	equ	0xFE6
  7643                           postdec1	equ	0xFE5
  7644                           plusw1	equ	0xFE3
  7645                           fsr1h	equ	0xFE2
  7646                           fsr1l	equ	0xFE1
  7647                           postinc2	equ	0xFDE
  7648                           postdec2	equ	0xFDD
  7649                           plusw2	equ	0xFDB
  7650                           fsr2h	equ	0xFDA
  7651                           fsr2l	equ	0xFD9
  7652                           status	equ	0xFD8
  7653                           
  7654 ;; *************** function _ReadAndTime *****************
  7655 ;; Defined at:
  7656 ;;		line 62 in file "AccelerationFuncs.c"
  7657 ;; Parameters:    Size  Location     Type
  7658 ;;		None
  7659 ;; Auto vars:     Size  Location     Type
  7660 ;;		None
  7661 ;; Return value:  Size  Location     Type
  7662 ;;		None               void
  7663 ;; Registers used:
  7664 ;;		wreg, status,2, status,0, cstack
  7665 ;; Tracked objects:
  7666 ;;		On entry : 0/0
  7667 ;;		On exit  : 0/0
  7668 ;;		Unchanged: 0/0
  7669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7670 ;;      Params:         0       0       0       0       0       0       0
  7671 ;;      Locals:         0       0       0       0       0       0       0
  7672 ;;      Temps:          0       0       0       0       0       0       0
  7673 ;;      Totals:         0       0       0       0       0       0       0
  7674 ;;Total ram usage:        0 bytes
  7675 ;; Hardware stack levels used:    1
  7676 ;; Hardware stack levels required when called:    8
  7677 ;; This function calls:
  7678 ;;		_Read_X
  7679 ;;		_Read_Y
  7680 ;;		_Read_Z
  7681 ;;		_TimeLoop
  7682 ;;		_approxRollingAverage
  7683 ;; This function is called by:
  7684 ;;		_main
  7685 ;; This function uses a non-reentrant model
  7686 ;;
  7687                           
  7688                           	psect	text10
  7689  002CC2                     __ptext10:
  7690                           	opt stack 0
  7691  002CC2                     _ReadAndTime:
  7692                           	opt stack 22
  7693                           
  7694                           ;AccelerationFuncs.c: 65: x = Read_X(gscale,goffset);
  7695                           
  7696                           ;incstack = 0
  7697  002CC2  C04D  F118         	movff	_gscale,Read_X@m
  7698  002CC6  C04E  F119         	movff	_gscale+1,Read_X@m+1
  7699  002CCA  C04F  F11A         	movff	_gscale+2,Read_X@m+2
  7700  002CCE  C04A  F11B         	movff	_goffset,Read_X@c
  7701  002CD2  C04B  F11C         	movff	_goffset+1,Read_X@c+1
  7702  002CD6  C04C  F11D         	movff	_goffset+2,Read_X@c+2
  7703  002CDA  EC9B  F01D         	call	_Read_X	;wreg free
  7704  002CDE  C118  F040         	movff	?_Read_X,_x
  7705  002CE2  C119  F041         	movff	?_Read_X+1,_x+1
  7706                           
  7707                           ;AccelerationFuncs.c: 66: y = Read_Y(gscale,goffset);
  7708  002CE6  C04D  F118         	movff	_gscale,Read_Y@m
  7709  002CEA  C04E  F119         	movff	_gscale+1,Read_Y@m+1
  7710  002CEE  C04F  F11A         	movff	_gscale+2,Read_Y@m+2
  7711  002CF2  C04A  F11B         	movff	_goffset,Read_Y@c
  7712  002CF6  C04B  F11C         	movff	_goffset+1,Read_Y@c+1
  7713  002CFA  C04C  F11D         	movff	_goffset+2,Read_Y@c+2
  7714  002CFE  EC37  F01D         	call	_Read_Y	;wreg free
  7715  002D02  C118  F042         	movff	?_Read_Y,_y
  7716  002D06  C119  F043         	movff	?_Read_Y+1,_y+1
  7717                           
  7718                           ;AccelerationFuncs.c: 67: z = Read_Z(gscale,goffset);
  7719  002D0A  C04D  F118         	movff	_gscale,Read_Z@m
  7720  002D0E  C04E  F119         	movff	_gscale+1,Read_Z@m+1
  7721  002D12  C04F  F11A         	movff	_gscale+2,Read_Z@m+2
  7722  002D16  C04A  F11B         	movff	_goffset,Read_Z@c
  7723  002D1A  C04B  F11C         	movff	_goffset+1,Read_Z@c+1
  7724  002D1E  C04C  F11D         	movff	_goffset+2,Read_Z@c+2
  7725  002D22  ECD3  F01C         	call	_Read_Z	;wreg free
  7726  002D26  C118  F044         	movff	?_Read_Z,_z
  7727  002D2A  C119  F045         	movff	?_Read_Z+1,_z+1
  7728                           
  7729                           ;AccelerationFuncs.c: 70: xlongavg=approxRollingAverage(xlongavg,x,Nlong);
  7730  002D2E  C1B2  F0AD         	movff	_xlongavg,approxRollingAverage@avg
  7731  002D32  C1B3  F0AE         	movff	_xlongavg+1,approxRollingAverage@avg+1
  7732  002D36  C1B4  F0AF         	movff	_xlongavg+2,approxRollingAverage@avg+2
  7733  002D3A  C1B5  F0B0         	movff	_xlongavg+3,approxRollingAverage@avg+3
  7734  002D3E  C040  F0B1         	movff	_x,approxRollingAverage@new_sample
  7735  002D42  C041  F0B2         	movff	_x+1,approxRollingAverage@new_sample+1
  7736  002D46  0100               	movlb	0	; () banked
  7737  002D48  0E00               	movlw	0
  7738  002D4A  BFB2               	btfsc	(approxRollingAverage@new_sample+1)& (0+255),7,b
  7739  002D4C  0EFF               	movlw	-1
  7740  002D4E  6FB3               	movwf	(approxRollingAverage@new_sample+2)& (0+255),b
  7741  002D50  6FB4               	movwf	(approxRollingAverage@new_sample+3)& (0+255),b
  7742  002D52  C052  F0B5         	movff	_Nlong,approxRollingAverage@N
  7743  002D56  C053  F0B6         	movff	_Nlong+1,approxRollingAverage@N+1
  7744  002D5A  ECAA  F01E         	call	_approxRollingAverage	;wreg free
  7745  002D5E  C0AD  F1B2         	movff	?_approxRollingAverage,_xlongavg
  7746  002D62  C0AE  F1B3         	movff	?_approxRollingAverage+1,_xlongavg+1
  7747  002D66  C0AF  F1B4         	movff	?_approxRollingAverage+2,_xlongavg+2
  7748  002D6A  C0B0  F1B5         	movff	?_approxRollingAverage+3,_xlongavg+3
  7749                           
  7750                           ;AccelerationFuncs.c: 71: ylongavg=approxRollingAverage(ylongavg,y,Nlong);
  7751  002D6E  C1BA  F0AD         	movff	_ylongavg,approxRollingAverage@avg
  7752  002D72  C1BB  F0AE         	movff	_ylongavg+1,approxRollingAverage@avg+1
  7753  002D76  C1BC  F0AF         	movff	_ylongavg+2,approxRollingAverage@avg+2
  7754  002D7A  C1BD  F0B0         	movff	_ylongavg+3,approxRollingAverage@avg+3
  7755  002D7E  C042  F0B1         	movff	_y,approxRollingAverage@new_sample
  7756  002D82  C043  F0B2         	movff	_y+1,approxRollingAverage@new_sample+1
  7757  002D86  0100               	movlb	0	; () banked
  7758  002D88  0E00               	movlw	0
  7759  002D8A  BFB2               	btfsc	(approxRollingAverage@new_sample+1)& (0+255),7,b
  7760  002D8C  0EFF               	movlw	-1
  7761  002D8E  6FB3               	movwf	(approxRollingAverage@new_sample+2)& (0+255),b
  7762  002D90  6FB4               	movwf	(approxRollingAverage@new_sample+3)& (0+255),b
  7763  002D92  C052  F0B5         	movff	_Nlong,approxRollingAverage@N
  7764  002D96  C053  F0B6         	movff	_Nlong+1,approxRollingAverage@N+1
  7765  002D9A  ECAA  F01E         	call	_approxRollingAverage	;wreg free
  7766  002D9E  C0AD  F1BA         	movff	?_approxRollingAverage,_ylongavg
  7767  002DA2  C0AE  F1BB         	movff	?_approxRollingAverage+1,_ylongavg+1
  7768  002DA6  C0AF  F1BC         	movff	?_approxRollingAverage+2,_ylongavg+2
  7769  002DAA  C0B0  F1BD         	movff	?_approxRollingAverage+3,_ylongavg+3
  7770                           
  7771                           ;AccelerationFuncs.c: 72: zlongavg=approxRollingAverage(zlongavg,z,Nlong);
  7772  002DAE  C1C2  F0AD         	movff	_zlongavg,approxRollingAverage@avg
  7773  002DB2  C1C3  F0AE         	movff	_zlongavg+1,approxRollingAverage@avg+1
  7774  002DB6  C1C4  F0AF         	movff	_zlongavg+2,approxRollingAverage@avg+2
  7775  002DBA  C1C5  F0B0         	movff	_zlongavg+3,approxRollingAverage@avg+3
  7776  002DBE  C044  F0B1         	movff	_z,approxRollingAverage@new_sample
  7777  002DC2  C045  F0B2         	movff	_z+1,approxRollingAverage@new_sample+1
  7778  002DC6  0100               	movlb	0	; () banked
  7779  002DC8  0E00               	movlw	0
  7780  002DCA  BFB2               	btfsc	(approxRollingAverage@new_sample+1)& (0+255),7,b
  7781  002DCC  0EFF               	movlw	-1
  7782  002DCE  6FB3               	movwf	(approxRollingAverage@new_sample+2)& (0+255),b
  7783  002DD0  6FB4               	movwf	(approxRollingAverage@new_sample+3)& (0+255),b
  7784  002DD2  C052  F0B5         	movff	_Nlong,approxRollingAverage@N
  7785  002DD6  C053  F0B6         	movff	_Nlong+1,approxRollingAverage@N+1
  7786  002DDA  ECAA  F01E         	call	_approxRollingAverage	;wreg free
  7787  002DDE  C0AD  F1C2         	movff	?_approxRollingAverage,_zlongavg
  7788  002DE2  C0AE  F1C3         	movff	?_approxRollingAverage+1,_zlongavg+1
  7789  002DE6  C0AF  F1C4         	movff	?_approxRollingAverage+2,_zlongavg+2
  7790  002DEA  C0B0  F1C5         	movff	?_approxRollingAverage+3,_zlongavg+3
  7791                           
  7792                           ;AccelerationFuncs.c: 74: xshortavg=approxRollingAverage(xshortavg,x,Nshort);
  7793  002DEE  C1B6  F0AD         	movff	_xshortavg,approxRollingAverage@avg
  7794  002DF2  C1B7  F0AE         	movff	_xshortavg+1,approxRollingAverage@avg+1
  7795  002DF6  C1B8  F0AF         	movff	_xshortavg+2,approxRollingAverage@avg+2
  7796  002DFA  C1B9  F0B0         	movff	_xshortavg+3,approxRollingAverage@avg+3
  7797  002DFE  C040  F0B1         	movff	_x,approxRollingAverage@new_sample
  7798  002E02  C041  F0B2         	movff	_x+1,approxRollingAverage@new_sample+1
  7799  002E06  0100               	movlb	0	; () banked
  7800  002E08  0E00               	movlw	0
  7801  002E0A  BFB2               	btfsc	(approxRollingAverage@new_sample+1)& (0+255),7,b
  7802  002E0C  0EFF               	movlw	-1
  7803  002E0E  6FB3               	movwf	(approxRollingAverage@new_sample+2)& (0+255),b
  7804  002E10  6FB4               	movwf	(approxRollingAverage@new_sample+3)& (0+255),b
  7805  002E12  C054  F0B5         	movff	_Nshort,approxRollingAverage@N
  7806  002E16  C055  F0B6         	movff	_Nshort+1,approxRollingAverage@N+1
  7807  002E1A  ECAA  F01E         	call	_approxRollingAverage	;wreg free
  7808  002E1E  C0AD  F1B6         	movff	?_approxRollingAverage,_xshortavg
  7809  002E22  C0AE  F1B7         	movff	?_approxRollingAverage+1,_xshortavg+1
  7810  002E26  C0AF  F1B8         	movff	?_approxRollingAverage+2,_xshortavg+2
  7811  002E2A  C0B0  F1B9         	movff	?_approxRollingAverage+3,_xshortavg+3
  7812                           
  7813                           ;AccelerationFuncs.c: 75: yshortavg=approxRollingAverage(yshortavg,y,Nshort);
  7814  002E2E  C1BE  F0AD         	movff	_yshortavg,approxRollingAverage@avg
  7815  002E32  C1BF  F0AE         	movff	_yshortavg+1,approxRollingAverage@avg+1
  7816  002E36  C1C0  F0AF         	movff	_yshortavg+2,approxRollingAverage@avg+2
  7817  002E3A  C1C1  F0B0         	movff	_yshortavg+3,approxRollingAverage@avg+3
  7818  002E3E  C042  F0B1         	movff	_y,approxRollingAverage@new_sample
  7819  002E42  C043  F0B2         	movff	_y+1,approxRollingAverage@new_sample+1
  7820  002E46  0100               	movlb	0	; () banked
  7821  002E48  0E00               	movlw	0
  7822  002E4A  BFB2               	btfsc	(approxRollingAverage@new_sample+1)& (0+255),7,b
  7823  002E4C  0EFF               	movlw	-1
  7824  002E4E  6FB3               	movwf	(approxRollingAverage@new_sample+2)& (0+255),b
  7825  002E50  6FB4               	movwf	(approxRollingAverage@new_sample+3)& (0+255),b
  7826  002E52  C054  F0B5         	movff	_Nshort,approxRollingAverage@N
  7827  002E56  C055  F0B6         	movff	_Nshort+1,approxRollingAverage@N+1
  7828  002E5A  ECAA  F01E         	call	_approxRollingAverage	;wreg free
  7829  002E5E  C0AD  F1BE         	movff	?_approxRollingAverage,_yshortavg
  7830  002E62  C0AE  F1BF         	movff	?_approxRollingAverage+1,_yshortavg+1
  7831  002E66  C0AF  F1C0         	movff	?_approxRollingAverage+2,_yshortavg+2
  7832  002E6A  C0B0  F1C1         	movff	?_approxRollingAverage+3,_yshortavg+3
  7833                           
  7834                           ;AccelerationFuncs.c: 76: zshortavg=approxRollingAverage(zshortavg,z,Nshort);
  7835  002E6E  C1C6  F0AD         	movff	_zshortavg,approxRollingAverage@avg
  7836  002E72  C1C7  F0AE         	movff	_zshortavg+1,approxRollingAverage@avg+1
  7837  002E76  C1C8  F0AF         	movff	_zshortavg+2,approxRollingAverage@avg+2
  7838  002E7A  C1C9  F0B0         	movff	_zshortavg+3,approxRollingAverage@avg+3
  7839  002E7E  C044  F0B1         	movff	_z,approxRollingAverage@new_sample
  7840  002E82  C045  F0B2         	movff	_z+1,approxRollingAverage@new_sample+1
  7841  002E86  0100               	movlb	0	; () banked
  7842  002E88  0E00               	movlw	0
  7843  002E8A  BFB2               	btfsc	(approxRollingAverage@new_sample+1)& (0+255),7,b
  7844  002E8C  0EFF               	movlw	-1
  7845  002E8E  6FB3               	movwf	(approxRollingAverage@new_sample+2)& (0+255),b
  7846  002E90  6FB4               	movwf	(approxRollingAverage@new_sample+3)& (0+255),b
  7847  002E92  C054  F0B5         	movff	_Nshort,approxRollingAverage@N
  7848  002E96  C055  F0B6         	movff	_Nshort+1,approxRollingAverage@N+1
  7849  002E9A  ECAA  F01E         	call	_approxRollingAverage	;wreg free
  7850  002E9E  C0AD  F1C6         	movff	?_approxRollingAverage,_zshortavg
  7851  002EA2  C0AE  F1C7         	movff	?_approxRollingAverage+1,_zshortavg+1
  7852  002EA6  C0AF  F1C8         	movff	?_approxRollingAverage+2,_zshortavg+2
  7853  002EAA  C0B0  F1C9         	movff	?_approxRollingAverage+3,_zshortavg+3
  7854                           
  7855                           ;AccelerationFuncs.c: 79: TimeLoop();
  7856  002EAE  ECFA  F01E         	call	_TimeLoop	;wreg free
  7857  002EB2  0012               	return		;funcret
  7858  002EB4                     __end_of_ReadAndTime:
  7859                           	opt stack 0
  7860                           tblptru	equ	0xFF8
  7861                           tblptrh	equ	0xFF7
  7862                           tblptrl	equ	0xFF6
  7863                           tablat	equ	0xFF5
  7864                           postinc0	equ	0xFEE
  7865                           wreg	equ	0xFE8
  7866                           postinc1	equ	0xFE6
  7867                           postdec1	equ	0xFE5
  7868                           plusw1	equ	0xFE3
  7869                           fsr1h	equ	0xFE2
  7870                           fsr1l	equ	0xFE1
  7871                           postinc2	equ	0xFDE
  7872                           postdec2	equ	0xFDD
  7873                           plusw2	equ	0xFDB
  7874                           fsr2h	equ	0xFDA
  7875                           fsr2l	equ	0xFD9
  7876                           status	equ	0xFD8
  7877                           
  7878 ;; *************** function _approxRollingAverage *****************
  7879 ;; Defined at:
  7880 ;;		line 82 in file "AccelerationFuncs.c"
  7881 ;; Parameters:    Size  Location     Type
  7882 ;;  avg             4   45[BANK0 ] long 
  7883 ;;  new_sample      4   49[BANK0 ] long 
  7884 ;;  N               2   53[BANK0 ] int 
  7885 ;; Auto vars:     Size  Location     Type
  7886 ;;		None
  7887 ;; Return value:  Size  Location     Type
  7888 ;;                  4   45[BANK0 ] long 
  7889 ;; Registers used:
  7890 ;;		wreg, status,2, status,0, cstack
  7891 ;; Tracked objects:
  7892 ;;		On entry : 0/0
  7893 ;;		On exit  : 0/0
  7894 ;;		Unchanged: 0/0
  7895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7896 ;;      Params:         0      10       0       0       0       0       0
  7897 ;;      Locals:         0       0       0       0       0       0       0
  7898 ;;      Temps:          0       4       0       0       0       0       0
  7899 ;;      Totals:         0      14       0       0       0       0       0
  7900 ;;Total ram usage:       14 bytes
  7901 ;; Hardware stack levels used:    1
  7902 ;; Hardware stack levels required when called:    6
  7903 ;; This function calls:
  7904 ;;		___aldiv
  7905 ;; This function is called by:
  7906 ;;		_ReadAndTime
  7907 ;; This function uses a non-reentrant model
  7908 ;;
  7909                           
  7910                           	psect	text11
  7911  003D54                     __ptext11:
  7912                           	opt stack 0
  7913  003D54                     _approxRollingAverage:
  7914                           	opt stack 23
  7915                           
  7916                           ;AccelerationFuncs.c: 84: avg += (new_sample - avg) / N;
  7917                           
  7918                           ;incstack = 0
  7919  003D54  C0AD  F0B7         	movff	approxRollingAverage@avg,??_approxRollingAverage
  7920  003D58  C0AE  F0B8         	movff	approxRollingAverage@avg+1,??_approxRollingAverage+1
  7921  003D5C  C0AF  F0B9         	movff	approxRollingAverage@avg+2,??_approxRollingAverage+2
  7922  003D60  C0B0  F0BA         	movff	approxRollingAverage@avg+3,??_approxRollingAverage+3
  7923  003D64  0100               	movlb	0	; () banked
  7924  003D66  1FB7               	comf	??_approxRollingAverage& (0+255),f,b
  7925  003D68  1FB8               	comf	(??_approxRollingAverage+1)& (0+255),f,b
  7926  003D6A  1FB9               	comf	(??_approxRollingAverage+2)& (0+255),f,b
  7927  003D6C  1FBA               	comf	(??_approxRollingAverage+3)& (0+255),f,b
  7928  003D6E  2BB7               	incf	??_approxRollingAverage& (0+255),f,b
  7929  003D70  0E00               	movlw	0
  7930  003D72  23B8               	addwfc	(??_approxRollingAverage+1)& (0+255),f,b
  7931  003D74  23B9               	addwfc	(??_approxRollingAverage+2)& (0+255),f,b
  7932  003D76  23BA               	addwfc	(??_approxRollingAverage+3)& (0+255),f,b
  7933  003D78  0100               	movlb	0	; () banked
  7934  003D7A  51B1               	movf	approxRollingAverage@new_sample& (0+255),w,b
  7935  003D7C  0100               	movlb	0	; () banked
  7936  003D7E  25B7               	addwf	??_approxRollingAverage& (0+255),w,b
  7937  003D80  0100               	movlb	0	; () banked
  7938  003D82  6F9F               	movwf	___aldiv@dividend& (0+255),b
  7939  003D84  0100               	movlb	0	; () banked
  7940  003D86  51B2               	movf	(approxRollingAverage@new_sample+1)& (0+255),w,b
  7941  003D88  0100               	movlb	0	; () banked
  7942  003D8A  21B8               	addwfc	(??_approxRollingAverage+1)& (0+255),w,b
  7943  003D8C  0100               	movlb	0	; () banked
  7944  003D8E  6FA0               	movwf	(___aldiv@dividend+1)& (0+255),b
  7945  003D90  0100               	movlb	0	; () banked
  7946  003D92  51B3               	movf	(approxRollingAverage@new_sample+2)& (0+255),w,b
  7947  003D94  0100               	movlb	0	; () banked
  7948  003D96  21B9               	addwfc	(??_approxRollingAverage+2)& (0+255),w,b
  7949  003D98  0100               	movlb	0	; () banked
  7950  003D9A  6FA1               	movwf	(___aldiv@dividend+2)& (0+255),b
  7951  003D9C  0100               	movlb	0	; () banked
  7952  003D9E  51B4               	movf	(approxRollingAverage@new_sample+3)& (0+255),w,b
  7953  003DA0  0100               	movlb	0	; () banked
  7954  003DA2  21BA               	addwfc	(??_approxRollingAverage+3)& (0+255),w,b
  7955  003DA4  0100               	movlb	0	; () banked
  7956  003DA6  6FA2               	movwf	(___aldiv@dividend+3)& (0+255),b
  7957  003DA8  C0B5  F0A3         	movff	approxRollingAverage@N,___aldiv@divisor
  7958  003DAC  C0B6  F0A4         	movff	approxRollingAverage@N+1,___aldiv@divisor+1
  7959  003DB0  0100               	movlb	0	; () banked
  7960  003DB2  0E00               	movlw	0
  7961  003DB4  BFA4               	btfsc	(___aldiv@divisor+1)& (0+255),7,b
  7962  003DB6  0EFF               	movlw	-1
  7963  003DB8  6FA5               	movwf	(___aldiv@divisor+2)& (0+255),b
  7964  003DBA  6FA6               	movwf	(___aldiv@divisor+3)& (0+255),b
  7965  003DBC  ECBA  F01A         	call	___aldiv	;wreg free
  7966  003DC0  0100               	movlb	0	; () banked
  7967  003DC2  519F               	movf	?___aldiv& (0+255),w,b
  7968  003DC4  0100               	movlb	0	; () banked
  7969  003DC6  27AD               	addwf	approxRollingAverage@avg& (0+255),f,b
  7970  003DC8  0100               	movlb	0	; () banked
  7971  003DCA  51A0               	movf	(?___aldiv+1)& (0+255),w,b
  7972  003DCC  0100               	movlb	0	; () banked
  7973  003DCE  23AE               	addwfc	(approxRollingAverage@avg+1)& (0+255),f,b
  7974  003DD0  0100               	movlb	0	; () banked
  7975  003DD2  51A1               	movf	(?___aldiv+2)& (0+255),w,b
  7976  003DD4  0100               	movlb	0	; () banked
  7977  003DD6  23AF               	addwfc	(approxRollingAverage@avg+2)& (0+255),f,b
  7978  003DD8  0100               	movlb	0	; () banked
  7979  003DDA  51A2               	movf	(?___aldiv+3)& (0+255),w,b
  7980  003DDC  0100               	movlb	0	; () banked
  7981  003DDE  23B0               	addwfc	(approxRollingAverage@avg+3)& (0+255),f,b
  7982                           
  7983                           ; BSR set to: 0
  7984                           ;AccelerationFuncs.c: 85: return avg;
  7985  003DE0  C0AD  F0AD         	movff	approxRollingAverage@avg,?_approxRollingAverage
  7986  003DE4  C0AE  F0AE         	movff	approxRollingAverage@avg+1,?_approxRollingAverage+1
  7987  003DE8  C0AF  F0AF         	movff	approxRollingAverage@avg+2,?_approxRollingAverage+2
  7988  003DEC  C0B0  F0B0         	movff	approxRollingAverage@avg+3,?_approxRollingAverage+3
  7989  003DF0  D000               	goto	l570
  7990  003DF2                     l570:
  7991                           
  7992                           ; BSR set to: 0
  7993  003DF2  0012               	return		;funcret
  7994  003DF4                     __end_of_approxRollingAverage:
  7995                           	opt stack 0
  7996                           tblptru	equ	0xFF8
  7997                           tblptrh	equ	0xFF7
  7998                           tblptrl	equ	0xFF6
  7999                           tablat	equ	0xFF5
  8000                           postinc0	equ	0xFEE
  8001                           wreg	equ	0xFE8
  8002                           postinc1	equ	0xFE6
  8003                           postdec1	equ	0xFE5
  8004                           plusw1	equ	0xFE3
  8005                           fsr1h	equ	0xFE2
  8006                           fsr1l	equ	0xFE1
  8007                           postinc2	equ	0xFDE
  8008                           postdec2	equ	0xFDD
  8009                           plusw2	equ	0xFDB
  8010                           fsr2h	equ	0xFDA
  8011                           fsr2l	equ	0xFD9
  8012                           status	equ	0xFD8
  8013                           
  8014 ;; *************** function ___aldiv *****************
  8015 ;; Defined at:
  8016 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\aldiv.c"
  8017 ;; Parameters:    Size  Location     Type
  8018 ;;  dividend        4   31[BANK0 ] long 
  8019 ;;  divisor         4   35[BANK0 ] long 
  8020 ;; Auto vars:     Size  Location     Type
  8021 ;;  quotient        4   41[BANK0 ] long 
  8022 ;;  sign            1   40[BANK0 ] unsigned char 
  8023 ;;  counter         1   39[BANK0 ] unsigned char 
  8024 ;; Return value:  Size  Location     Type
  8025 ;;                  4   31[BANK0 ] long 
  8026 ;; Registers used:
  8027 ;;		wreg, status,2, status,0
  8028 ;; Tracked objects:
  8029 ;;		On entry : 0/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8033 ;;      Params:         0       8       0       0       0       0       0
  8034 ;;      Locals:         0       6       0       0       0       0       0
  8035 ;;      Temps:          0       0       0       0       0       0       0
  8036 ;;      Totals:         0      14       0       0       0       0       0
  8037 ;;Total ram usage:       14 bytes
  8038 ;; Hardware stack levels used:    1
  8039 ;; Hardware stack levels required when called:    5
  8040 ;; This function calls:
  8041 ;;		Nothing
  8042 ;; This function is called by:
  8043 ;;		_approxRollingAverage
  8044 ;; This function uses a non-reentrant model
  8045 ;;
  8046                           
  8047                           	psect	text12
  8048  003574                     __ptext12:
  8049                           	opt stack 0
  8050  003574                     ___aldiv:
  8051                           	opt stack 23
  8052                           
  8053                           ; BSR set to: 0
  8054                           ;incstack = 0
  8055  003574  0E00               	movlw	0
  8056  003576  0100               	movlb	0	; () banked
  8057  003578  6FA8               	movwf	___aldiv@sign& (0+255),b
  8058                           
  8059                           ; BSR set to: 0
  8060  00357A  0100               	movlb	0	; () banked
  8061  00357C  AFA6               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  8062  00357E  D00D               	goto	l3714
  8063                           
  8064                           ; BSR set to: 0
  8065  003580  0100               	movlb	0	; () banked
  8066  003582  1FA6               	comf	(___aldiv@divisor+3)& (0+255),f,b
  8067  003584  1FA5               	comf	(___aldiv@divisor+2)& (0+255),f,b
  8068  003586  1FA4               	comf	(___aldiv@divisor+1)& (0+255),f,b
  8069  003588  6DA3               	negf	___aldiv@divisor& (0+255),b
  8070  00358A  0E00               	movlw	0
  8071  00358C  23A4               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  8072  00358E  23A5               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  8073  003590  23A6               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  8074                           
  8075                           ; BSR set to: 0
  8076  003592  0E01               	movlw	1
  8077  003594  0100               	movlb	0	; () banked
  8078  003596  6FA8               	movwf	___aldiv@sign& (0+255),b
  8079  003598  D000               	goto	l3714
  8080  00359A                     l3714:
  8081                           
  8082                           ; BSR set to: 0
  8083  00359A  0100               	movlb	0	; () banked
  8084  00359C  AFA2               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  8085  00359E  D00D               	goto	l3720
  8086                           
  8087                           ; BSR set to: 0
  8088  0035A0  0100               	movlb	0	; () banked
  8089  0035A2  1FA2               	comf	(___aldiv@dividend+3)& (0+255),f,b
  8090  0035A4  1FA1               	comf	(___aldiv@dividend+2)& (0+255),f,b
  8091  0035A6  1FA0               	comf	(___aldiv@dividend+1)& (0+255),f,b
  8092  0035A8  6D9F               	negf	___aldiv@dividend& (0+255),b
  8093  0035AA  0E00               	movlw	0
  8094  0035AC  23A0               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  8095  0035AE  23A1               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  8096  0035B0  23A2               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  8097                           
  8098                           ; BSR set to: 0
  8099  0035B2  0E01               	movlw	1
  8100  0035B4  0100               	movlb	0	; () banked
  8101  0035B6  1BA8               	xorwf	___aldiv@sign& (0+255),f,b
  8102  0035B8  D000               	goto	l3720
  8103  0035BA                     l3720:
  8104                           
  8105                           ; BSR set to: 0
  8106  0035BA  0E00               	movlw	0
  8107  0035BC  0100               	movlb	0	; () banked
  8108  0035BE  6FA9               	movwf	___aldiv@quotient& (0+255),b
  8109  0035C0  0E00               	movlw	0
  8110  0035C2  6FAA               	movwf	(___aldiv@quotient+1)& (0+255),b
  8111  0035C4  0E00               	movlw	0
  8112  0035C6  6FAB               	movwf	(___aldiv@quotient+2)& (0+255),b
  8113  0035C8  0E00               	movlw	0
  8114  0035CA  6FAC               	movwf	(___aldiv@quotient+3)& (0+255),b
  8115                           
  8116                           ; BSR set to: 0
  8117  0035CC  0100               	movlb	0	; () banked
  8118  0035CE  51A3               	movf	___aldiv@divisor& (0+255),w,b
  8119  0035D0  0100               	movlb	0	; () banked
  8120  0035D2  11A4               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  8121  0035D4  0100               	movlb	0	; () banked
  8122  0035D6  11A5               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  8123  0035D8  0100               	movlb	0	; () banked
  8124  0035DA  11A6               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  8125  0035DC  B4D8               	btfsc	status,2,c
  8126  0035DE  D047               	goto	l3742
  8127                           
  8128                           ; BSR set to: 0
  8129  0035E0  0E01               	movlw	1
  8130  0035E2  0100               	movlb	0	; () banked
  8131  0035E4  6FA7               	movwf	___aldiv@counter& (0+255),b
  8132  0035E6  D009               	goto	l3728
  8133  0035E8                     l3726:
  8134                           
  8135                           ; BSR set to: 0
  8136  0035E8  0100               	movlb	0	; () banked
  8137  0035EA  90D8               	bcf	status,0,c
  8138  0035EC  37A3               	rlcf	___aldiv@divisor& (0+255),f,b
  8139  0035EE  37A4               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  8140  0035F0  37A5               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  8141  0035F2  37A6               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  8142  0035F4  0100               	movlb	0	; () banked
  8143  0035F6  2BA7               	incf	___aldiv@counter& (0+255),f,b
  8144  0035F8  D000               	goto	l3728
  8145  0035FA                     l3728:
  8146                           
  8147                           ; BSR set to: 0
  8148  0035FA  0100               	movlb	0	; () banked
  8149  0035FC  BFA6               	btfsc	(___aldiv@divisor+3)& (0+255),7,b
  8150  0035FE  D002               	goto	l3730
  8151  003600  D7F3               	goto	l3726
  8152                           
  8153                           ; BSR set to: 0
  8154  003602  D000               	goto	l3730
  8155  003604                     l3730:
  8156                           
  8157                           ; BSR set to: 0
  8158  003604  0100               	movlb	0	; () banked
  8159  003606  90D8               	bcf	status,0,c
  8160  003608  37A9               	rlcf	___aldiv@quotient& (0+255),f,b
  8161  00360A  37AA               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  8162  00360C  37AB               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  8163  00360E  37AC               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  8164                           
  8165                           ; BSR set to: 0
  8166  003610  0100               	movlb	0	; () banked
  8167  003612  51A3               	movf	___aldiv@divisor& (0+255),w,b
  8168  003614  0100               	movlb	0	; () banked
  8169  003616  5D9F               	subwf	___aldiv@dividend& (0+255),w,b
  8170  003618  0100               	movlb	0	; () banked
  8171  00361A  51A4               	movf	(___aldiv@divisor+1)& (0+255),w,b
  8172  00361C  0100               	movlb	0	; () banked
  8173  00361E  59A0               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  8174  003620  0100               	movlb	0	; () banked
  8175  003622  51A5               	movf	(___aldiv@divisor+2)& (0+255),w,b
  8176  003624  0100               	movlb	0	; () banked
  8177  003626  59A1               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  8178  003628  0100               	movlb	0	; () banked
  8179  00362A  51A6               	movf	(___aldiv@divisor+3)& (0+255),w,b
  8180  00362C  0100               	movlb	0	; () banked
  8181  00362E  59A2               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  8182  003630  A0D8               	btfss	status,0,c
  8183  003632  D013               	goto	l3738
  8184                           
  8185                           ; BSR set to: 0
  8186  003634  0100               	movlb	0	; () banked
  8187  003636  51A3               	movf	___aldiv@divisor& (0+255),w,b
  8188  003638  0100               	movlb	0	; () banked
  8189  00363A  5F9F               	subwf	___aldiv@dividend& (0+255),f,b
  8190  00363C  0100               	movlb	0	; () banked
  8191  00363E  51A4               	movf	(___aldiv@divisor+1)& (0+255),w,b
  8192  003640  0100               	movlb	0	; () banked
  8193  003642  5BA0               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  8194  003644  0100               	movlb	0	; () banked
  8195  003646  51A5               	movf	(___aldiv@divisor+2)& (0+255),w,b
  8196  003648  0100               	movlb	0	; () banked
  8197  00364A  5BA1               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  8198  00364C  0100               	movlb	0	; () banked
  8199  00364E  51A6               	movf	(___aldiv@divisor+3)& (0+255),w,b
  8200  003650  0100               	movlb	0	; () banked
  8201  003652  5BA2               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  8202                           
  8203                           ; BSR set to: 0
  8204  003654  0100               	movlb	0	; () banked
  8205  003656  81A9               	bsf	___aldiv@quotient& (0+255),0,b
  8206  003658  D000               	goto	l3738
  8207  00365A                     l3738:
  8208                           
  8209                           ; BSR set to: 0
  8210  00365A  0100               	movlb	0	; () banked
  8211  00365C  90D8               	bcf	status,0,c
  8212  00365E  33A6               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  8213  003660  33A5               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  8214  003662  33A4               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  8215  003664  33A3               	rrcf	___aldiv@divisor& (0+255),f,b
  8216                           
  8217                           ; BSR set to: 0
  8218  003666  0100               	movlb	0	; () banked
  8219  003668  2FA7               	decfsz	___aldiv@counter& (0+255),f,b
  8220  00366A  D7CC               	goto	l3730
  8221                           
  8222                           ; BSR set to: 0
  8223  00366C  D000               	goto	l3742
  8224  00366E                     l3742:
  8225                           
  8226                           ; BSR set to: 0
  8227  00366E  0100               	movlb	0	; () banked
  8228  003670  51A8               	movf	___aldiv@sign& (0+255),w,b
  8229  003672  0100               	movlb	0	; () banked
  8230  003674  B4D8               	btfsc	status,2,c
  8231  003676  D00A               	goto	l3746
  8232                           
  8233                           ; BSR set to: 0
  8234  003678  0100               	movlb	0	; () banked
  8235  00367A  1FAC               	comf	(___aldiv@quotient+3)& (0+255),f,b
  8236  00367C  1FAB               	comf	(___aldiv@quotient+2)& (0+255),f,b
  8237  00367E  1FAA               	comf	(___aldiv@quotient+1)& (0+255),f,b
  8238  003680  6DA9               	negf	___aldiv@quotient& (0+255),b
  8239  003682  0E00               	movlw	0
  8240  003684  23AA               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  8241  003686  23AB               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  8242  003688  23AC               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  8243  00368A  D000               	goto	l3746
  8244  00368C                     l3746:
  8245                           
  8246                           ; BSR set to: 0
  8247  00368C  C0A9  F09F         	movff	___aldiv@quotient,?___aldiv
  8248  003690  C0AA  F0A0         	movff	___aldiv@quotient+1,?___aldiv+1
  8249  003694  C0AB  F0A1         	movff	___aldiv@quotient+2,?___aldiv+2
  8250  003698  C0AC  F0A2         	movff	___aldiv@quotient+3,?___aldiv+3
  8251  00369C  D000               	goto	l867
  8252  00369E                     l867:
  8253                           
  8254                           ; BSR set to: 0
  8255  00369E  0012               	return		;funcret
  8256  0036A0                     __end_of___aldiv:
  8257                           	opt stack 0
  8258                           tblptru	equ	0xFF8
  8259                           tblptrh	equ	0xFF7
  8260                           tblptrl	equ	0xFF6
  8261                           tablat	equ	0xFF5
  8262                           postinc0	equ	0xFEE
  8263                           wreg	equ	0xFE8
  8264                           postinc1	equ	0xFE6
  8265                           postdec1	equ	0xFE5
  8266                           plusw1	equ	0xFE3
  8267                           fsr1h	equ	0xFE2
  8268                           fsr1l	equ	0xFE1
  8269                           postinc2	equ	0xFDE
  8270                           postdec2	equ	0xFDD
  8271                           plusw2	equ	0xFDB
  8272                           fsr2h	equ	0xFDA
  8273                           fsr2l	equ	0xFD9
  8274                           status	equ	0xFD8
  8275                           
  8276 ;; *************** function _TimeLoop *****************
  8277 ;; Defined at:
  8278 ;;		line 31 in file "TimingFuncs.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;		None
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;		None
  8283 ;; Return value:  Size  Location     Type
  8284 ;;		None               void
  8285 ;; Registers used:
  8286 ;;		wreg, status,2, status,0, cstack
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8292 ;;      Params:         0       0       0       0       0       0       0
  8293 ;;      Locals:         0       0       0       0       0       0       0
  8294 ;;      Temps:          0       4       0       0       0       0       0
  8295 ;;      Totals:         0       4       0       0       0       0       0
  8296 ;;Total ram usage:        4 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    6
  8299 ;; This function calls:
  8300 ;;		_ReadTimer0
  8301 ;; This function is called by:
  8302 ;;		_ReadAndTime
  8303 ;; This function uses a non-reentrant model
  8304 ;;
  8305                           
  8306                           	psect	text13
  8307  003DF4                     __ptext13:
  8308                           	opt stack 0
  8309  003DF4                     _TimeLoop:
  8310                           	opt stack 23
  8311                           
  8312                           ;TimingFuncs.c: 33: tr = ReadTimer0();
  8313                           
  8314                           ; BSR set to: 0
  8315                           ;incstack = 0
  8316  003DF4  EC67  F022         	call	_ReadTimer0	;wreg free
  8317  003DF8  C09F  F03C         	movff	?_ReadTimer0,_tr
  8318  003DFC  C0A0  F03D         	movff	?_ReadTimer0+1,_tr+1
  8319                           
  8320                           ;TimingFuncs.c: 35: if (tl>tr)
  8321  003E00  503A               	movf	_tl,w,c
  8322  003E02  5C3C               	subwf	_tr,w,c
  8323  003E04  503B               	movf	_tl+1,w,c
  8324  003E06  583D               	subwfb	_tr+1,w,c
  8325  003E08  B0D8               	btfsc	status,0,c
  8326  003E0A  D01F               	goto	l4130
  8327                           
  8328                           ;TimingFuncs.c: 36: {
  8329                           ;TimingFuncs.c: 37: tt = tr-tl-1017;
  8330  003E0C  0EF9               	movlw	249
  8331  003E0E  0100               	movlb	0	; () banked
  8332  003E10  6FA3               	movwf	??_TimeLoop& (0+255),b
  8333  003E12  0E03               	movlw	3
  8334  003E14  0100               	movlb	0	; () banked
  8335  003E16  6FA4               	movwf	(??_TimeLoop+1)& (0+255),b
  8336  003E18  C03A  F0A5         	movff	_tl,??_TimeLoop+2
  8337  003E1C  C03B  F0A6         	movff	_tl+1,??_TimeLoop+3
  8338  003E20  0100               	movlb	0	; () banked
  8339  003E22  51A3               	movf	??_TimeLoop& (0+255),w,b
  8340  003E24  0100               	movlb	0	; () banked
  8341  003E26  27A5               	addwf	(??_TimeLoop+2)& (0+255),f,b
  8342  003E28  0100               	movlb	0	; () banked
  8343  003E2A  51A4               	movf	(??_TimeLoop+1)& (0+255),w,b
  8344  003E2C  0100               	movlb	0	; () banked
  8345  003E2E  23A6               	addwfc	(??_TimeLoop+3)& (0+255),f,b
  8346  003E30  0100               	movlb	0	; () banked
  8347  003E32  1FA5               	comf	(??_TimeLoop+2)& (0+255),f,b
  8348  003E34  1FA6               	comf	(??_TimeLoop+3)& (0+255),f,b
  8349  003E36  4BA5               	infsnz	(??_TimeLoop+2)& (0+255),f,b
  8350  003E38  2BA6               	incf	(??_TimeLoop+3)& (0+255),f,b
  8351  003E3A  503C               	movf	_tr,w,c
  8352  003E3C  0100               	movlb	0	; () banked
  8353  003E3E  25A5               	addwf	(??_TimeLoop+2)& (0+255),w,b
  8354  003E40  6E3E               	movwf	_tt,c
  8355  003E42  503D               	movf	_tr+1,w,c
  8356  003E44  0100               	movlb	0	; () banked
  8357  003E46  21A6               	addwfc	(??_TimeLoop+3)& (0+255),w,b
  8358  003E48  D010               	goto	L3
  8359  003E4A                     l4130:
  8360                           
  8361                           ;TimingFuncs.c: 40: else
  8362                           ;TimingFuncs.c: 41: {
  8363                           ;TimingFuncs.c: 42: tt = tr-tl;
  8364  003E4A  C03A  F0A3         	movff	_tl,??_TimeLoop
  8365  003E4E  C03B  F0A4         	movff	_tl+1,??_TimeLoop+1
  8366  003E52  0100               	movlb	0	; () banked
  8367  003E54  1FA3               	comf	??_TimeLoop& (0+255),f,b
  8368  003E56  1FA4               	comf	(??_TimeLoop+1)& (0+255),f,b
  8369  003E58  4BA3               	infsnz	??_TimeLoop& (0+255),f,b
  8370  003E5A  2BA4               	incf	(??_TimeLoop+1)& (0+255),f,b
  8371  003E5C  503C               	movf	_tr,w,c
  8372  003E5E  0100               	movlb	0	; () banked
  8373  003E60  25A3               	addwf	??_TimeLoop& (0+255),w,b
  8374  003E62  6E3E               	movwf	_tt,c
  8375  003E64  503D               	movf	_tr+1,w,c
  8376  003E66  0100               	movlb	0	; () banked
  8377  003E68  21A4               	addwfc	(??_TimeLoop+1)& (0+255),w,b
  8378  003E6A                     L3:
  8379  003E6A  6E3F               	movwf	_tt+1,c
  8380  003E6C  D000               	goto	l4132
  8381  003E6E                     l4132:
  8382                           
  8383                           ; BSR set to: 0
  8384                           ;TimingFuncs.c: 43: }
  8385                           ;TimingFuncs.c: 44: tl = tr;
  8386  003E6E  C03C  F03A         	movff	_tr,_tl
  8387  003E72  C03D  F03B         	movff	_tr+1,_tl+1
  8388                           
  8389                           ; BSR set to: 0
  8390  003E76  0012               	return		;funcret
  8391  003E78                     __end_of_TimeLoop:
  8392                           	opt stack 0
  8393                           tblptru	equ	0xFF8
  8394                           tblptrh	equ	0xFF7
  8395                           tblptrl	equ	0xFF6
  8396                           tablat	equ	0xFF5
  8397                           postinc0	equ	0xFEE
  8398                           wreg	equ	0xFE8
  8399                           postinc1	equ	0xFE6
  8400                           postdec1	equ	0xFE5
  8401                           plusw1	equ	0xFE3
  8402                           fsr1h	equ	0xFE2
  8403                           fsr1l	equ	0xFE1
  8404                           postinc2	equ	0xFDE
  8405                           postdec2	equ	0xFDD
  8406                           plusw2	equ	0xFDB
  8407                           fsr2h	equ	0xFDA
  8408                           fsr2l	equ	0xFD9
  8409                           status	equ	0xFD8
  8410                           
  8411 ;; *************** function _ReadTimer0 *****************
  8412 ;; Defined at:
  8413 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\Timers\t0read.c"
  8414 ;; Parameters:    Size  Location     Type
  8415 ;;		None
  8416 ;; Auto vars:     Size  Location     Type
  8417 ;;  timer           2   33[BANK0 ] struct Timers
  8418 ;; Return value:  Size  Location     Type
  8419 ;;                  2   31[BANK0 ] unsigned int 
  8420 ;; Registers used:
  8421 ;;		None
  8422 ;; Tracked objects:
  8423 ;;		On entry : 0/0
  8424 ;;		On exit  : 0/0
  8425 ;;		Unchanged: 0/0
  8426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8427 ;;      Params:         0       2       0       0       0       0       0
  8428 ;;      Locals:         0       2       0       0       0       0       0
  8429 ;;      Temps:          0       0       0       0       0       0       0
  8430 ;;      Totals:         0       4       0       0       0       0       0
  8431 ;;Total ram usage:        4 bytes
  8432 ;; Hardware stack levels used:    1
  8433 ;; Hardware stack levels required when called:    5
  8434 ;; This function calls:
  8435 ;;		Nothing
  8436 ;; This function is called by:
  8437 ;;		_TimeLoop
  8438 ;; This function uses a non-reentrant model
  8439 ;;
  8440                           
  8441                           	psect	text14
  8442  0044CE                     __ptext14:
  8443                           	opt stack 0
  8444  0044CE                     _ReadTimer0:
  8445                           	opt stack 23
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;incstack = 0
  8449  0044CE  CFD6 F0A1          	movff	4054,ReadTimer0@timer	;volatile
  8450  0044D2  CFD7 F0A2          	movff	4055,ReadTimer0@timer+1	;volatile
  8451  0044D6  C0A1  F09F         	movff	ReadTimer0@timer,?_ReadTimer0
  8452  0044DA  C0A2  F0A0         	movff	ReadTimer0@timer+1,?_ReadTimer0+1
  8453  0044DE  0012               	return		;funcret
  8454  0044E0                     __end_of_ReadTimer0:
  8455                           	opt stack 0
  8456                           tblptru	equ	0xFF8
  8457                           tblptrh	equ	0xFF7
  8458                           tblptrl	equ	0xFF6
  8459                           tablat	equ	0xFF5
  8460                           postinc0	equ	0xFEE
  8461                           wreg	equ	0xFE8
  8462                           postinc1	equ	0xFE6
  8463                           postdec1	equ	0xFE5
  8464                           plusw1	equ	0xFE3
  8465                           fsr1h	equ	0xFE2
  8466                           fsr1l	equ	0xFE1
  8467                           postinc2	equ	0xFDE
  8468                           postdec2	equ	0xFDD
  8469                           plusw2	equ	0xFDB
  8470                           fsr2h	equ	0xFDA
  8471                           fsr2l	equ	0xFD9
  8472                           status	equ	0xFD8
  8473                           
  8474 ;; *************** function _Read_Z *****************
  8475 ;; Defined at:
  8476 ;;		line 50 in file "AccelerationFuncs.c"
  8477 ;; Parameters:    Size  Location     Type
  8478 ;;  m               3   24[BANK1 ] float 
  8479 ;;  c               3   27[BANK1 ] float 
  8480 ;; Auto vars:     Size  Location     Type
  8481 ;;  z               2   33[BANK1 ] int 
  8482 ;; Return value:  Size  Location     Type
  8483 ;;                  2   24[BANK1 ] int 
  8484 ;; Registers used:
  8485 ;;		wreg, status,2, status,0, cstack
  8486 ;; Tracked objects:
  8487 ;;		On entry : 0/0
  8488 ;;		On exit  : 0/0
  8489 ;;		Unchanged: 0/0
  8490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8491 ;;      Params:         0       0       6       0       0       0       0
  8492 ;;      Locals:         0       0       5       0       0       0       0
  8493 ;;      Temps:          0       0       0       0       0       0       0
  8494 ;;      Totals:         0       0      11       0       0       0       0
  8495 ;;Total ram usage:       11 bytes
  8496 ;; Hardware stack levels used:    1
  8497 ;; Hardware stack levels required when called:    7
  8498 ;; This function calls:
  8499 ;;		_BusyADC
  8500 ;;		_ConvertADC
  8501 ;;		_Delay10TCYx
  8502 ;;		_ReadADC
  8503 ;;		___awtoft
  8504 ;;		___ftadd
  8505 ;;		___ftmul
  8506 ;;		___ftneg
  8507 ;;		___fttol
  8508 ;; This function is called by:
  8509 ;;		_ReadAndTime
  8510 ;; This function uses a non-reentrant model
  8511 ;;
  8512                           
  8513                           	psect	text15
  8514  0039A6                     __ptext15:
  8515                           	opt stack 0
  8516  0039A6                     _Read_Z:
  8517                           	opt stack 22
  8518                           
  8519                           ;AccelerationFuncs.c: 52: int z;
  8520                           ;AccelerationFuncs.c: 53: ADCON0bits.CHS=0b0101;
  8521                           
  8522                           ;incstack = 0
  8523  0039A6  50C2               	movf	4034,w,c	;volatile
  8524  0039A8  0BC3               	andlw	-61
  8525  0039AA  0914               	iorlw	20
  8526  0039AC  6EC2               	movwf	4034,c	;volatile
  8527                           
  8528                           ;AccelerationFuncs.c: 54: Delay10TCYx(100);
  8529  0039AE  0E64               	movlw	100
  8530  0039B0  EC47  F022         	call	_Delay10TCYx
  8531                           
  8532                           ;AccelerationFuncs.c: 55: ConvertADC();
  8533  0039B4  EC9C  F022         	call	_ConvertADC	;wreg free
  8534                           
  8535                           ;AccelerationFuncs.c: 56: while (BusyADC());
  8536  0039B8  D000               	goto	l5714
  8537  0039BA                     l5714:
  8538  0039BA  EC81  F022         	call	_BusyADC	;wreg free
  8539  0039BE  0900               	iorlw	0
  8540  0039C0  A4D8               	btfss	status,2,c
  8541  0039C2  D7FB               	goto	l5714
  8542                           
  8543                           ;AccelerationFuncs.c: 57: z=(ReadADC()*m-c)*100;
  8544  0039C4  C11B  F09F         	movff	Read_Z@c,___ftneg@f1
  8545  0039C8  C11C  F0A0         	movff	Read_Z@c+1,___ftneg@f1+1
  8546  0039CC  C11D  F0A1         	movff	Read_Z@c+2,___ftneg@f1+2
  8547  0039D0  EC8E  F021         	call	___ftneg	;wreg free
  8548  0039D4  C09F  F0BD         	movff	?___ftneg,___ftadd@f2
  8549  0039D8  C0A0  F0BE         	movff	?___ftneg+1,___ftadd@f2+1
  8550  0039DC  C0A1  F0BF         	movff	?___ftneg+2,___ftadd@f2+2
  8551  0039E0  C118  F0AE         	movff	Read_Z@m,___ftmul@f2
  8552  0039E4  C119  F0AF         	movff	Read_Z@m+1,___ftmul@f2+1
  8553  0039E8  C11A  F0B0         	movff	Read_Z@m+2,___ftmul@f2+2
  8554  0039EC  EC5D  F022         	call	_ReadADC	;wreg free
  8555  0039F0  C09F  F0A7         	movff	?_ReadADC,___awtoft@c
  8556  0039F4  C0A0  F0A8         	movff	?_ReadADC+1,___awtoft@c+1
  8557  0039F8  EC2B  F021         	call	___awtoft	;wreg free
  8558  0039FC  C0A7  F0AB         	movff	?___awtoft,___ftmul@f1
  8559  003A00  C0A8  F0AC         	movff	?___awtoft+1,___ftmul@f1+1
  8560  003A04  C0A9  F0AD         	movff	?___awtoft+2,___ftmul@f1+2
  8561  003A08  EC32  F018         	call	___ftmul	;wreg free
  8562  003A0C  C0AB  F0BA         	movff	?___ftmul,___ftadd@f1
  8563  003A10  C0AC  F0BB         	movff	?___ftmul+1,___ftadd@f1+1
  8564  003A14  C0AD  F0BC         	movff	?___ftmul+2,___ftadd@f1+2
  8565  003A18  ECDF  F012         	call	___ftadd	;wreg free
  8566  003A1C  C0BA  F11E         	movff	?___ftadd,_Read_Z$2573
  8567  003A20  C0BB  F11F         	movff	?___ftadd+1,_Read_Z$2573+1
  8568  003A24  C0BC  F120         	movff	?___ftadd+2,_Read_Z$2573+2
  8569                           
  8570                           ;AccelerationFuncs.c: 57: z=(ReadADC()*m-c)*100;
  8571  003A28  0E00               	movlw	0
  8572  003A2A  0100               	movlb	0	; () banked
  8573  003A2C  6FAE               	movwf	___ftmul@f2& (0+255),b
  8574  003A2E  0EC8               	movlw	200
  8575  003A30  0100               	movlb	0	; () banked
  8576  003A32  6FAF               	movwf	(___ftmul@f2+1)& (0+255),b
  8577  003A34  0E42               	movlw	66
  8578  003A36  0100               	movlb	0	; () banked
  8579  003A38  6FB0               	movwf	(___ftmul@f2+2)& (0+255),b
  8580  003A3A  C11E  F0AB         	movff	_Read_Z$2573,___ftmul@f1
  8581  003A3E  C11F  F0AC         	movff	_Read_Z$2573+1,___ftmul@f1+1
  8582  003A42  C120  F0AD         	movff	_Read_Z$2573+2,___ftmul@f1+2
  8583  003A46  EC32  F018         	call	___ftmul	;wreg free
  8584  003A4A  C0AB  F109         	movff	?___ftmul,___fttol@f1
  8585  003A4E  C0AC  F10A         	movff	?___ftmul+1,___fttol@f1+1
  8586  003A52  C0AD  F10B         	movff	?___ftmul+2,___fttol@f1+2
  8587  003A56  EC21  F01A         	call	___fttol	;wreg free
  8588  003A5A  C109  F121         	movff	?___fttol,Read_Z@z
  8589  003A5E  C10A  F122         	movff	?___fttol+1,Read_Z@z+1
  8590                           
  8591                           ;AccelerationFuncs.c: 59: return z;
  8592  003A62  C121  F118         	movff	Read_Z@z,?_Read_Z
  8593  003A66  C122  F119         	movff	Read_Z@z+1,?_Read_Z+1
  8594  003A6A  D000               	goto	l564
  8595  003A6C                     l564:
  8596  003A6C  0012               	return		;funcret
  8597  003A6E                     __end_of_Read_Z:
  8598                           	opt stack 0
  8599                           tblptru	equ	0xFF8
  8600                           tblptrh	equ	0xFF7
  8601                           tblptrl	equ	0xFF6
  8602                           tablat	equ	0xFF5
  8603                           postinc0	equ	0xFEE
  8604                           wreg	equ	0xFE8
  8605                           postinc1	equ	0xFE6
  8606                           postdec1	equ	0xFE5
  8607                           plusw1	equ	0xFE3
  8608                           fsr1h	equ	0xFE2
  8609                           fsr1l	equ	0xFE1
  8610                           postinc2	equ	0xFDE
  8611                           postdec2	equ	0xFDD
  8612                           plusw2	equ	0xFDB
  8613                           fsr2h	equ	0xFDA
  8614                           fsr2l	equ	0xFD9
  8615                           status	equ	0xFD8
  8616                           
  8617 ;; *************** function _Read_Y *****************
  8618 ;; Defined at:
  8619 ;;		line 38 in file "AccelerationFuncs.c"
  8620 ;; Parameters:    Size  Location     Type
  8621 ;;  m               3   24[BANK1 ] float 
  8622 ;;  c               3   27[BANK1 ] float 
  8623 ;; Auto vars:     Size  Location     Type
  8624 ;;  y               2   33[BANK1 ] int 
  8625 ;; Return value:  Size  Location     Type
  8626 ;;                  2   24[BANK1 ] int 
  8627 ;; Registers used:
  8628 ;;		wreg, status,2, status,0, cstack
  8629 ;; Tracked objects:
  8630 ;;		On entry : 0/0
  8631 ;;		On exit  : 0/0
  8632 ;;		Unchanged: 0/0
  8633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8634 ;;      Params:         0       0       6       0       0       0       0
  8635 ;;      Locals:         0       0       5       0       0       0       0
  8636 ;;      Temps:          0       0       0       0       0       0       0
  8637 ;;      Totals:         0       0      11       0       0       0       0
  8638 ;;Total ram usage:       11 bytes
  8639 ;; Hardware stack levels used:    1
  8640 ;; Hardware stack levels required when called:    7
  8641 ;; This function calls:
  8642 ;;		_BusyADC
  8643 ;;		_ConvertADC
  8644 ;;		_Delay10TCYx
  8645 ;;		_ReadADC
  8646 ;;		___awtoft
  8647 ;;		___ftadd
  8648 ;;		___ftmul
  8649 ;;		___ftneg
  8650 ;;		___fttol
  8651 ;; This function is called by:
  8652 ;;		_ReadAndTime
  8653 ;; This function uses a non-reentrant model
  8654 ;;
  8655                           
  8656                           	psect	text16
  8657  003A6E                     __ptext16:
  8658                           	opt stack 0
  8659  003A6E                     _Read_Y:
  8660                           	opt stack 22
  8661                           
  8662                           ;AccelerationFuncs.c: 40: int y;
  8663                           ;AccelerationFuncs.c: 41: ADCON0bits.CHS=0b0100;
  8664                           
  8665                           ;incstack = 0
  8666  003A6E  50C2               	movf	4034,w,c	;volatile
  8667  003A70  0BC3               	andlw	-61
  8668  003A72  0910               	iorlw	16
  8669  003A74  6EC2               	movwf	4034,c	;volatile
  8670                           
  8671                           ;AccelerationFuncs.c: 42: Delay10TCYx(100);
  8672  003A76  0E64               	movlw	100
  8673  003A78  EC47  F022         	call	_Delay10TCYx
  8674                           
  8675                           ;AccelerationFuncs.c: 43: ConvertADC();
  8676  003A7C  EC9C  F022         	call	_ConvertADC	;wreg free
  8677                           
  8678                           ;AccelerationFuncs.c: 44: while (BusyADC());
  8679  003A80  D000               	goto	l5700
  8680  003A82                     l5700:
  8681  003A82  EC81  F022         	call	_BusyADC	;wreg free
  8682  003A86  0900               	iorlw	0
  8683  003A88  A4D8               	btfss	status,2,c
  8684  003A8A  D7FB               	goto	l5700
  8685                           
  8686                           ;AccelerationFuncs.c: 45: y=(ReadADC()*m-c)*100;
  8687  003A8C  C11B  F09F         	movff	Read_Y@c,___ftneg@f1
  8688  003A90  C11C  F0A0         	movff	Read_Y@c+1,___ftneg@f1+1
  8689  003A94  C11D  F0A1         	movff	Read_Y@c+2,___ftneg@f1+2
  8690  003A98  EC8E  F021         	call	___ftneg	;wreg free
  8691  003A9C  C09F  F0BD         	movff	?___ftneg,___ftadd@f2
  8692  003AA0  C0A0  F0BE         	movff	?___ftneg+1,___ftadd@f2+1
  8693  003AA4  C0A1  F0BF         	movff	?___ftneg+2,___ftadd@f2+2
  8694  003AA8  C118  F0AE         	movff	Read_Y@m,___ftmul@f2
  8695  003AAC  C119  F0AF         	movff	Read_Y@m+1,___ftmul@f2+1
  8696  003AB0  C11A  F0B0         	movff	Read_Y@m+2,___ftmul@f2+2
  8697  003AB4  EC5D  F022         	call	_ReadADC	;wreg free
  8698  003AB8  C09F  F0A7         	movff	?_ReadADC,___awtoft@c
  8699  003ABC  C0A0  F0A8         	movff	?_ReadADC+1,___awtoft@c+1
  8700  003AC0  EC2B  F021         	call	___awtoft	;wreg free
  8701  003AC4  C0A7  F0AB         	movff	?___awtoft,___ftmul@f1
  8702  003AC8  C0A8  F0AC         	movff	?___awtoft+1,___ftmul@f1+1
  8703  003ACC  C0A9  F0AD         	movff	?___awtoft+2,___ftmul@f1+2
  8704  003AD0  EC32  F018         	call	___ftmul	;wreg free
  8705  003AD4  C0AB  F0BA         	movff	?___ftmul,___ftadd@f1
  8706  003AD8  C0AC  F0BB         	movff	?___ftmul+1,___ftadd@f1+1
  8707  003ADC  C0AD  F0BC         	movff	?___ftmul+2,___ftadd@f1+2
  8708  003AE0  ECDF  F012         	call	___ftadd	;wreg free
  8709  003AE4  C0BA  F11E         	movff	?___ftadd,_Read_Y$2572
  8710  003AE8  C0BB  F11F         	movff	?___ftadd+1,_Read_Y$2572+1
  8711  003AEC  C0BC  F120         	movff	?___ftadd+2,_Read_Y$2572+2
  8712                           
  8713                           ;AccelerationFuncs.c: 45: y=(ReadADC()*m-c)*100;
  8714  003AF0  0E00               	movlw	0
  8715  003AF2  0100               	movlb	0	; () banked
  8716  003AF4  6FAE               	movwf	___ftmul@f2& (0+255),b
  8717  003AF6  0EC8               	movlw	200
  8718  003AF8  0100               	movlb	0	; () banked
  8719  003AFA  6FAF               	movwf	(___ftmul@f2+1)& (0+255),b
  8720  003AFC  0E42               	movlw	66
  8721  003AFE  0100               	movlb	0	; () banked
  8722  003B00  6FB0               	movwf	(___ftmul@f2+2)& (0+255),b
  8723  003B02  C11E  F0AB         	movff	_Read_Y$2572,___ftmul@f1
  8724  003B06  C11F  F0AC         	movff	_Read_Y$2572+1,___ftmul@f1+1
  8725  003B0A  C120  F0AD         	movff	_Read_Y$2572+2,___ftmul@f1+2
  8726  003B0E  EC32  F018         	call	___ftmul	;wreg free
  8727  003B12  C0AB  F109         	movff	?___ftmul,___fttol@f1
  8728  003B16  C0AC  F10A         	movff	?___ftmul+1,___fttol@f1+1
  8729  003B1A  C0AD  F10B         	movff	?___ftmul+2,___fttol@f1+2
  8730  003B1E  EC21  F01A         	call	___fttol	;wreg free
  8731  003B22  C109  F121         	movff	?___fttol,Read_Y@y
  8732  003B26  C10A  F122         	movff	?___fttol+1,Read_Y@y+1
  8733                           
  8734                           ;AccelerationFuncs.c: 47: return y;
  8735  003B2A  C121  F118         	movff	Read_Y@y,?_Read_Y
  8736  003B2E  C122  F119         	movff	Read_Y@y+1,?_Read_Y+1
  8737  003B32  D000               	goto	l558
  8738  003B34                     l558:
  8739  003B34  0012               	return		;funcret
  8740  003B36                     __end_of_Read_Y:
  8741                           	opt stack 0
  8742                           tblptru	equ	0xFF8
  8743                           tblptrh	equ	0xFF7
  8744                           tblptrl	equ	0xFF6
  8745                           tablat	equ	0xFF5
  8746                           postinc0	equ	0xFEE
  8747                           wreg	equ	0xFE8
  8748                           postinc1	equ	0xFE6
  8749                           postdec1	equ	0xFE5
  8750                           plusw1	equ	0xFE3
  8751                           fsr1h	equ	0xFE2
  8752                           fsr1l	equ	0xFE1
  8753                           postinc2	equ	0xFDE
  8754                           postdec2	equ	0xFDD
  8755                           plusw2	equ	0xFDB
  8756                           fsr2h	equ	0xFDA
  8757                           fsr2l	equ	0xFD9
  8758                           status	equ	0xFD8
  8759                           
  8760 ;; *************** function _Read_X *****************
  8761 ;; Defined at:
  8762 ;;		line 26 in file "AccelerationFuncs.c"
  8763 ;; Parameters:    Size  Location     Type
  8764 ;;  m               3   24[BANK1 ] float 
  8765 ;;  c               3   27[BANK1 ] float 
  8766 ;; Auto vars:     Size  Location     Type
  8767 ;;  x               2   33[BANK1 ] int 
  8768 ;; Return value:  Size  Location     Type
  8769 ;;                  2   24[BANK1 ] int 
  8770 ;; Registers used:
  8771 ;;		wreg, status,2, status,0, cstack
  8772 ;; Tracked objects:
  8773 ;;		On entry : 0/0
  8774 ;;		On exit  : 0/0
  8775 ;;		Unchanged: 0/0
  8776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8777 ;;      Params:         0       0       6       0       0       0       0
  8778 ;;      Locals:         0       0       5       0       0       0       0
  8779 ;;      Temps:          0       0       0       0       0       0       0
  8780 ;;      Totals:         0       0      11       0       0       0       0
  8781 ;;Total ram usage:       11 bytes
  8782 ;; Hardware stack levels used:    1
  8783 ;; Hardware stack levels required when called:    7
  8784 ;; This function calls:
  8785 ;;		_BusyADC
  8786 ;;		_ConvertADC
  8787 ;;		_Delay10TCYx
  8788 ;;		_ReadADC
  8789 ;;		___awtoft
  8790 ;;		___ftadd
  8791 ;;		___ftmul
  8792 ;;		___ftneg
  8793 ;;		___fttol
  8794 ;; This function is called by:
  8795 ;;		_ReadAndTime
  8796 ;; This function uses a non-reentrant model
  8797 ;;
  8798                           
  8799                           	psect	text17
  8800  003B36                     __ptext17:
  8801                           	opt stack 0
  8802  003B36                     _Read_X:
  8803                           	opt stack 22
  8804                           
  8805                           ;AccelerationFuncs.c: 28: int x;
  8806                           ;AccelerationFuncs.c: 29: ADCON0bits.CHS=0b0110;
  8807                           
  8808                           ;incstack = 0
  8809  003B36  50C2               	movf	4034,w,c	;volatile
  8810  003B38  0BC3               	andlw	-61
  8811  003B3A  0918               	iorlw	24
  8812  003B3C  6EC2               	movwf	4034,c	;volatile
  8813                           
  8814                           ;AccelerationFuncs.c: 30: Delay10TCYx(100);
  8815  003B3E  0E64               	movlw	100
  8816  003B40  EC47  F022         	call	_Delay10TCYx
  8817                           
  8818                           ;AccelerationFuncs.c: 31: ConvertADC();
  8819  003B44  EC9C  F022         	call	_ConvertADC	;wreg free
  8820                           
  8821                           ;AccelerationFuncs.c: 32: while (BusyADC());
  8822  003B48  D000               	goto	l5686
  8823  003B4A                     l5686:
  8824  003B4A  EC81  F022         	call	_BusyADC	;wreg free
  8825  003B4E  0900               	iorlw	0
  8826  003B50  A4D8               	btfss	status,2,c
  8827  003B52  D7FB               	goto	l5686
  8828                           
  8829                           ;AccelerationFuncs.c: 33: x=(ReadADC()*m-c)*100;
  8830  003B54  C11B  F09F         	movff	Read_X@c,___ftneg@f1
  8831  003B58  C11C  F0A0         	movff	Read_X@c+1,___ftneg@f1+1
  8832  003B5C  C11D  F0A1         	movff	Read_X@c+2,___ftneg@f1+2
  8833  003B60  EC8E  F021         	call	___ftneg	;wreg free
  8834  003B64  C09F  F0BD         	movff	?___ftneg,___ftadd@f2
  8835  003B68  C0A0  F0BE         	movff	?___ftneg+1,___ftadd@f2+1
  8836  003B6C  C0A1  F0BF         	movff	?___ftneg+2,___ftadd@f2+2
  8837  003B70  C118  F0AE         	movff	Read_X@m,___ftmul@f2
  8838  003B74  C119  F0AF         	movff	Read_X@m+1,___ftmul@f2+1
  8839  003B78  C11A  F0B0         	movff	Read_X@m+2,___ftmul@f2+2
  8840  003B7C  EC5D  F022         	call	_ReadADC	;wreg free
  8841  003B80  C09F  F0A7         	movff	?_ReadADC,___awtoft@c
  8842  003B84  C0A0  F0A8         	movff	?_ReadADC+1,___awtoft@c+1
  8843  003B88  EC2B  F021         	call	___awtoft	;wreg free
  8844  003B8C  C0A7  F0AB         	movff	?___awtoft,___ftmul@f1
  8845  003B90  C0A8  F0AC         	movff	?___awtoft+1,___ftmul@f1+1
  8846  003B94  C0A9  F0AD         	movff	?___awtoft+2,___ftmul@f1+2
  8847  003B98  EC32  F018         	call	___ftmul	;wreg free
  8848  003B9C  C0AB  F0BA         	movff	?___ftmul,___ftadd@f1
  8849  003BA0  C0AC  F0BB         	movff	?___ftmul+1,___ftadd@f1+1
  8850  003BA4  C0AD  F0BC         	movff	?___ftmul+2,___ftadd@f1+2
  8851  003BA8  ECDF  F012         	call	___ftadd	;wreg free
  8852  003BAC  C0BA  F11E         	movff	?___ftadd,_Read_X$2571
  8853  003BB0  C0BB  F11F         	movff	?___ftadd+1,_Read_X$2571+1
  8854  003BB4  C0BC  F120         	movff	?___ftadd+2,_Read_X$2571+2
  8855                           
  8856                           ;AccelerationFuncs.c: 33: x=(ReadADC()*m-c)*100;
  8857  003BB8  0E00               	movlw	0
  8858  003BBA  0100               	movlb	0	; () banked
  8859  003BBC  6FAE               	movwf	___ftmul@f2& (0+255),b
  8860  003BBE  0EC8               	movlw	200
  8861  003BC0  0100               	movlb	0	; () banked
  8862  003BC2  6FAF               	movwf	(___ftmul@f2+1)& (0+255),b
  8863  003BC4  0E42               	movlw	66
  8864  003BC6  0100               	movlb	0	; () banked
  8865  003BC8  6FB0               	movwf	(___ftmul@f2+2)& (0+255),b
  8866  003BCA  C11E  F0AB         	movff	_Read_X$2571,___ftmul@f1
  8867  003BCE  C11F  F0AC         	movff	_Read_X$2571+1,___ftmul@f1+1
  8868  003BD2  C120  F0AD         	movff	_Read_X$2571+2,___ftmul@f1+2
  8869  003BD6  EC32  F018         	call	___ftmul	;wreg free
  8870  003BDA  C0AB  F109         	movff	?___ftmul,___fttol@f1
  8871  003BDE  C0AC  F10A         	movff	?___ftmul+1,___fttol@f1+1
  8872  003BE2  C0AD  F10B         	movff	?___ftmul+2,___fttol@f1+2
  8873  003BE6  EC21  F01A         	call	___fttol	;wreg free
  8874  003BEA  C109  F121         	movff	?___fttol,Read_X@x
  8875  003BEE  C10A  F122         	movff	?___fttol+1,Read_X@x+1
  8876                           
  8877                           ;AccelerationFuncs.c: 35: return x;
  8878  003BF2  C121  F118         	movff	Read_X@x,?_Read_X
  8879  003BF6  C122  F119         	movff	Read_X@x+1,?_Read_X+1
  8880  003BFA  D000               	goto	l552
  8881  003BFC                     l552:
  8882  003BFC  0012               	return		;funcret
  8883  003BFE                     __end_of_Read_X:
  8884                           	opt stack 0
  8885                           tblptru	equ	0xFF8
  8886                           tblptrh	equ	0xFF7
  8887                           tblptrl	equ	0xFF6
  8888                           tablat	equ	0xFF5
  8889                           postinc0	equ	0xFEE
  8890                           wreg	equ	0xFE8
  8891                           postinc1	equ	0xFE6
  8892                           postdec1	equ	0xFE5
  8893                           plusw1	equ	0xFE3
  8894                           fsr1h	equ	0xFE2
  8895                           fsr1l	equ	0xFE1
  8896                           postinc2	equ	0xFDE
  8897                           postdec2	equ	0xFDD
  8898                           plusw2	equ	0xFDB
  8899                           fsr2h	equ	0xFDA
  8900                           fsr2l	equ	0xFD9
  8901                           status	equ	0xFD8
  8902                           
  8903 ;; *************** function ___fttol *****************
  8904 ;; Defined at:
  8905 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  8906 ;; Parameters:    Size  Location     Type
  8907 ;;  f1              3    9[BANK1 ] float 
  8908 ;; Auto vars:     Size  Location     Type
  8909 ;;  lval            4   19[BANK1 ] unsigned long 
  8910 ;;  exp1            1   23[BANK1 ] unsigned char 
  8911 ;;  sign1           1   18[BANK1 ] unsigned char 
  8912 ;; Return value:  Size  Location     Type
  8913 ;;                  4    9[BANK1 ] long 
  8914 ;; Registers used:
  8915 ;;		wreg, status,2, status,0
  8916 ;; Tracked objects:
  8917 ;;		On entry : 0/0
  8918 ;;		On exit  : 0/0
  8919 ;;		Unchanged: 0/0
  8920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8921 ;;      Params:         0       0       4       0       0       0       0
  8922 ;;      Locals:         0       0       6       0       0       0       0
  8923 ;;      Temps:          0       0       5       0       0       0       0
  8924 ;;      Totals:         0       0      15       0       0       0       0
  8925 ;;Total ram usage:       15 bytes
  8926 ;; Hardware stack levels used:    1
  8927 ;; Hardware stack levels required when called:    5
  8928 ;; This function calls:
  8929 ;;		Nothing
  8930 ;; This function is called by:
  8931 ;;		_cmFftFun
  8932 ;;		_Read_X
  8933 ;;		_Read_Y
  8934 ;;		_Read_Z
  8935 ;; This function uses a non-reentrant model
  8936 ;;
  8937                           
  8938                           	psect	text18
  8939  003442                     __ptext18:
  8940                           	opt stack 0
  8941  003442                     ___fttol:
  8942                           	opt stack 23
  8943                           
  8944                           ;incstack = 0
  8945  003442  C10B  F10D         	movff	___fttol@f1+2,??___fttol
  8946  003446  0101               	movlb	1	; () banked
  8947  003448  6B0E               	clrf	(??___fttol+1)& (0+255),b
  8948  00344A  6B0F               	clrf	(??___fttol+2)& (0+255),b
  8949  00344C  0101               	movlb	1	; () banked
  8950  00344E  350A               	rlcf	(___fttol@f1+1)& (0+255),w,b
  8951  003450  0101               	movlb	1	; () banked
  8952  003452  370D               	rlcf	??___fttol& (0+255),f,b
  8953  003454  E301               	bnc	u6131
  8954  003456  810E               	bsf	(??___fttol+1)& (0+255),0,b
  8955  003458                     u6131:
  8956  003458  0101               	movlb	1	; () banked
  8957  00345A  510D               	movf	??___fttol& (0+255),w,b
  8958  00345C  0101               	movlb	1	; () banked
  8959  00345E  6F17               	movwf	___fttol@exp1& (0+255),b
  8960  003460  0101               	movlb	1	; () banked
  8961  003462  5117               	movf	___fttol@exp1& (0+255),w,b
  8962  003464  A4D8               	btfss	status,2,c
  8963  003466  D002               	goto	l5460
  8964  003468  D051               	goto	l5484
  8965                           
  8966                           ; BSR set to: 1
  8967                           
  8968                           ; BSR set to: 1
  8969  00346A  D083               	goto	l1250
  8970  00346C                     l5460:
  8971                           
  8972                           ; BSR set to: 1
  8973  00346C  0E17               	movlw	23
  8974  00346E  0101               	movlb	1	; () banked
  8975  003470  6F0D               	movwf	??___fttol& (0+255),b
  8976  003472  C109  F10E         	movff	___fttol@f1,??___fttol+1
  8977  003476  C10A  F10F         	movff	___fttol@f1+1,??___fttol+2
  8978  00347A  C10B  F110         	movff	___fttol@f1+2,??___fttol+3
  8979  00347E  0101               	movlb	1	; () banked
  8980  003480  290D               	incf	??___fttol& (0+255),w,b
  8981  003482  0101               	movlb	1	; () banked
  8982  003484  6F11               	movwf	(??___fttol+4)& (0+255),b
  8983  003486  D005               	goto	u6150
  8984  003488                     u6155:
  8985  003488  0101               	movlb	1	; () banked
  8986  00348A  90D8               	bcf	status,0,c
  8987  00348C  3310               	rrcf	(??___fttol+3)& (0+255),f,b
  8988  00348E  330F               	rrcf	(??___fttol+2)& (0+255),f,b
  8989  003490  330E               	rrcf	(??___fttol+1)& (0+255),f,b
  8990  003492                     u6150:
  8991  003492  0101               	movlb	1	; () banked
  8992  003494  2F11               	decfsz	(??___fttol+4)& (0+255),f,b
  8993  003496  D7F8               	goto	u6155
  8994  003498  0101               	movlb	1	; () banked
  8995  00349A  510E               	movf	(??___fttol+1)& (0+255),w,b
  8996  00349C  0101               	movlb	1	; () banked
  8997  00349E  6F12               	movwf	___fttol@sign1& (0+255),b
  8998                           
  8999                           ; BSR set to: 1
  9000  0034A0  0101               	movlb	1	; () banked
  9001  0034A2  8F0A               	bsf	(___fttol@f1+1)& (0+255),7,b
  9002                           
  9003                           ; BSR set to: 1
  9004  0034A4  0EFF               	movlw	255
  9005  0034A6  0101               	movlb	1	; () banked
  9006  0034A8  1709               	andwf	___fttol@f1& (0+255),f,b
  9007  0034AA  0EFF               	movlw	255
  9008  0034AC  0101               	movlb	1	; () banked
  9009  0034AE  170A               	andwf	(___fttol@f1+1)& (0+255),f,b
  9010  0034B0  0E00               	movlw	0
  9011  0034B2  0101               	movlb	1	; () banked
  9012  0034B4  170B               	andwf	(___fttol@f1+2)& (0+255),f,b
  9013                           
  9014                           ; BSR set to: 1
  9015  0034B6  0101               	movlb	1	; () banked
  9016  0034B8  5109               	movf	___fttol@f1& (0+255),w,b
  9017  0034BA  0101               	movlb	1	; () banked
  9018  0034BC  6F13               	movwf	___fttol@lval& (0+255),b
  9019  0034BE  0101               	movlb	1	; () banked
  9020  0034C0  510A               	movf	(___fttol@f1+1)& (0+255),w,b
  9021  0034C2  0101               	movlb	1	; () banked
  9022  0034C4  6F14               	movwf	(___fttol@lval+1)& (0+255),b
  9023  0034C6  0101               	movlb	1	; () banked
  9024  0034C8  510B               	movf	(___fttol@f1+2)& (0+255),w,b
  9025  0034CA  0101               	movlb	1	; () banked
  9026  0034CC  6F15               	movwf	(___fttol@lval+2)& (0+255),b
  9027  0034CE  0101               	movlb	1	; () banked
  9028  0034D0  6B16               	clrf	(___fttol@lval+3)& (0+255),b
  9029                           
  9030                           ; BSR set to: 1
  9031  0034D2  0E8E               	movlw	142
  9032  0034D4  0101               	movlb	1	; () banked
  9033  0034D6  5F17               	subwf	___fttol@exp1& (0+255),f,b
  9034                           
  9035                           ; BSR set to: 1
  9036  0034D8  0101               	movlb	1	; () banked
  9037  0034DA  AF17               	btfss	___fttol@exp1& (0+255),7,b
  9038  0034DC  D013               	goto	l5482
  9039                           
  9040                           ; BSR set to: 1
  9041  0034DE  0101               	movlb	1	; () banked
  9042  0034E0  5117               	movf	___fttol@exp1& (0+255),w,b
  9043  0034E2  0A80               	xorlw	128
  9044  0034E4  0F8F               	addlw	143
  9045  0034E6  B0D8               	btfsc	status,0,c
  9046  0034E8  D003               	goto	l5478
  9047  0034EA  D010               	goto	l5484
  9048                           
  9049                           ; BSR set to: 1
  9050                           
  9051                           ; BSR set to: 1
  9052  0034EC  D042               	goto	l1250
  9053                           
  9054                           ; BSR set to: 1
  9055  0034EE  D000               	goto	l5478
  9056  0034F0                     l5478:
  9057                           
  9058                           ; BSR set to: 1
  9059  0034F0  0101               	movlb	1	; () banked
  9060  0034F2  90D8               	bcf	status,0,c
  9061  0034F4  3316               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9062  0034F6  3315               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9063  0034F8  3314               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9064  0034FA  3313               	rrcf	___fttol@lval& (0+255),f,b
  9065                           
  9066                           ; BSR set to: 1
  9067  0034FC  0101               	movlb	1	; () banked
  9068  0034FE  3F17               	incfsz	___fttol@exp1& (0+255),f,b
  9069  003500  D7F7               	goto	l5478
  9070                           
  9071                           ; BSR set to: 1
  9072  003502  D01F               	goto	l5492
  9073  003504                     l5482:
  9074                           
  9075                           ; BSR set to: 1
  9076  003504  0E17               	movlw	23
  9077  003506  0101               	movlb	1	; () banked
  9078  003508  6517               	cpfsgt	___fttol@exp1& (0+255),b
  9079  00350A  D014               	goto	l5490
  9080  00350C                     l5484:
  9081                           
  9082                           ; BSR set to: 1
  9083  00350C  0E00               	movlw	0
  9084  00350E  0101               	movlb	1	; () banked
  9085  003510  6F09               	movwf	?___fttol& (0+255),b
  9086  003512  0E00               	movlw	0
  9087  003514  6F0A               	movwf	(?___fttol+1)& (0+255),b
  9088  003516  0E00               	movlw	0
  9089  003518  6F0B               	movwf	(?___fttol+2)& (0+255),b
  9090  00351A  0E00               	movlw	0
  9091  00351C  6F0C               	movwf	(?___fttol+3)& (0+255),b
  9092                           
  9093                           ; BSR set to: 1
  9094  00351E  D029               	goto	l1250
  9095                           
  9096                           ; BSR set to: 1
  9097  003520  D009               	goto	l5490
  9098  003522                     l5488:
  9099                           
  9100                           ; BSR set to: 1
  9101  003522  0101               	movlb	1	; () banked
  9102  003524  90D8               	bcf	status,0,c
  9103  003526  3713               	rlcf	___fttol@lval& (0+255),f,b
  9104  003528  3714               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9105  00352A  3715               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9106  00352C  3716               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9107  00352E  0101               	movlb	1	; () banked
  9108  003530  0717               	decf	___fttol@exp1& (0+255),f,b
  9109  003532  D000               	goto	l5490
  9110  003534                     l5490:
  9111                           
  9112                           ; BSR set to: 1
  9113  003534  0101               	movlb	1	; () banked
  9114  003536  5117               	movf	___fttol@exp1& (0+255),w,b
  9115  003538  0101               	movlb	1	; () banked
  9116  00353A  B4D8               	btfsc	status,2,c
  9117  00353C  D002               	goto	l5492
  9118  00353E  D7F1               	goto	l5488
  9119                           
  9120                           ; BSR set to: 1
  9121  003540  D000               	goto	l5492
  9122  003542                     l5492:
  9123                           
  9124                           ; BSR set to: 1
  9125  003542  0101               	movlb	1	; () banked
  9126  003544  5112               	movf	___fttol@sign1& (0+255),w,b
  9127  003546  0101               	movlb	1	; () banked
  9128  003548  B4D8               	btfsc	status,2,c
  9129  00354A  D00A               	goto	l5496
  9130                           
  9131                           ; BSR set to: 1
  9132  00354C  0101               	movlb	1	; () banked
  9133  00354E  1F16               	comf	(___fttol@lval+3)& (0+255),f,b
  9134  003550  1F15               	comf	(___fttol@lval+2)& (0+255),f,b
  9135  003552  1F14               	comf	(___fttol@lval+1)& (0+255),f,b
  9136  003554  6D13               	negf	___fttol@lval& (0+255),b
  9137  003556  0E00               	movlw	0
  9138  003558  2314               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9139  00355A  2315               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9140  00355C  2316               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9141  00355E  D000               	goto	l5496
  9142  003560                     l5496:
  9143                           
  9144                           ; BSR set to: 1
  9145  003560  C113  F109         	movff	___fttol@lval,?___fttol
  9146  003564  C114  F10A         	movff	___fttol@lval+1,?___fttol+1
  9147  003568  C115  F10B         	movff	___fttol@lval+2,?___fttol+2
  9148  00356C  C116  F10C         	movff	___fttol@lval+3,?___fttol+3
  9149  003570  D000               	goto	l1250
  9150  003572                     l1250:
  9151                           
  9152                           ; BSR set to: 1
  9153  003572  0012               	return		;funcret
  9154  003574                     __end_of___fttol:
  9155                           	opt stack 0
  9156                           tblptru	equ	0xFF8
  9157                           tblptrh	equ	0xFF7
  9158                           tblptrl	equ	0xFF6
  9159                           tablat	equ	0xFF5
  9160                           postinc0	equ	0xFEE
  9161                           wreg	equ	0xFE8
  9162                           postinc1	equ	0xFE6
  9163                           postdec1	equ	0xFE5
  9164                           plusw1	equ	0xFE3
  9165                           fsr1h	equ	0xFE2
  9166                           fsr1l	equ	0xFE1
  9167                           postinc2	equ	0xFDE
  9168                           postdec2	equ	0xFDD
  9169                           plusw2	equ	0xFDB
  9170                           fsr2h	equ	0xFDA
  9171                           fsr2l	equ	0xFD9
  9172                           status	equ	0xFD8
  9173                           
  9174 ;; *************** function ___ftneg *****************
  9175 ;; Defined at:
  9176 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  9177 ;; Parameters:    Size  Location     Type
  9178 ;;  f1              3   31[BANK0 ] float 
  9179 ;; Auto vars:     Size  Location     Type
  9180 ;;		None
  9181 ;; Return value:  Size  Location     Type
  9182 ;;                  3   31[BANK0 ] float 
  9183 ;; Registers used:
  9184 ;;		wreg, status,2, status,0
  9185 ;; Tracked objects:
  9186 ;;		On entry : 0/0
  9187 ;;		On exit  : 0/0
  9188 ;;		Unchanged: 0/0
  9189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9190 ;;      Params:         0       3       0       0       0       0       0
  9191 ;;      Locals:         0       0       0       0       0       0       0
  9192 ;;      Temps:          0       0       0       0       0       0       0
  9193 ;;      Totals:         0       3       0       0       0       0       0
  9194 ;;Total ram usage:        3 bytes
  9195 ;; Hardware stack levels used:    1
  9196 ;; Hardware stack levels required when called:    5
  9197 ;; This function calls:
  9198 ;;		Nothing
  9199 ;; This function is called by:
  9200 ;;		_Read_X
  9201 ;;		_Read_Y
  9202 ;;		_Read_Z
  9203 ;; This function uses a non-reentrant model
  9204 ;;
  9205                           
  9206                           	psect	text19
  9207  00431C                     __ptext19:
  9208                           	opt stack 0
  9209  00431C                     ___ftneg:
  9210                           	opt stack 23
  9211                           
  9212                           ; BSR set to: 1
  9213                           ;incstack = 0
  9214  00431C  0100               	movlb	0	; () banked
  9215  00431E  519F               	movf	___ftneg@f1& (0+255),w,b
  9216  004320  0100               	movlb	0	; () banked
  9217  004322  11A0               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  9218  004324  0100               	movlb	0	; () banked
  9219  004326  11A1               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  9220  004328  B4D8               	btfsc	status,2,c
  9221  00432A  D009               	goto	l1239
  9222                           
  9223                           ; BSR set to: 0
  9224  00432C  0E00               	movlw	0
  9225  00432E  0100               	movlb	0	; () banked
  9226  004330  1B9F               	xorwf	___ftneg@f1& (0+255),f,b
  9227  004332  0E00               	movlw	0
  9228  004334  0100               	movlb	0	; () banked
  9229  004336  1BA0               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  9230  004338  0E80               	movlw	128
  9231  00433A  0100               	movlb	0	; () banked
  9232  00433C  1BA1               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  9233  00433E                     l1239:
  9234                           
  9235                           ; BSR set to: 0
  9236  00433E  C09F  F09F         	movff	___ftneg@f1,?___ftneg
  9237  004342  C0A0  F0A0         	movff	___ftneg@f1+1,?___ftneg+1
  9238  004346  C0A1  F0A1         	movff	___ftneg@f1+2,?___ftneg+2
  9239                           
  9240                           ; BSR set to: 0
  9241  00434A  0012               	return		;funcret
  9242  00434C                     __end_of___ftneg:
  9243                           	opt stack 0
  9244                           tblptru	equ	0xFF8
  9245                           tblptrh	equ	0xFF7
  9246                           tblptrl	equ	0xFF6
  9247                           tablat	equ	0xFF5
  9248                           postinc0	equ	0xFEE
  9249                           wreg	equ	0xFE8
  9250                           postinc1	equ	0xFE6
  9251                           postdec1	equ	0xFE5
  9252                           plusw1	equ	0xFE3
  9253                           fsr1h	equ	0xFE2
  9254                           fsr1l	equ	0xFE1
  9255                           postinc2	equ	0xFDE
  9256                           postdec2	equ	0xFDD
  9257                           plusw2	equ	0xFDB
  9258                           fsr2h	equ	0xFDA
  9259                           fsr2l	equ	0xFD9
  9260                           status	equ	0xFD8
  9261                           
  9262 ;; *************** function ___ftmul *****************
  9263 ;; Defined at:
  9264 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  9265 ;; Parameters:    Size  Location     Type
  9266 ;;  f1              3   43[BANK0 ] float 
  9267 ;;  f2              3   46[BANK0 ] float 
  9268 ;; Auto vars:     Size  Location     Type
  9269 ;;  f3_as_produc    3   53[BANK0 ] unsigned um
  9270 ;;  sign            1   57[BANK0 ] unsigned char 
  9271 ;;  cntr            1   56[BANK0 ] unsigned char 
  9272 ;;  exp             1   52[BANK0 ] unsigned char 
  9273 ;; Return value:  Size  Location     Type
  9274 ;;                  3   43[BANK0 ] float 
  9275 ;; Registers used:
  9276 ;;		wreg, status,2, status,0, cstack
  9277 ;; Tracked objects:
  9278 ;;		On entry : 0/0
  9279 ;;		On exit  : 0/0
  9280 ;;		Unchanged: 0/0
  9281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9282 ;;      Params:         0       6       0       0       0       0       0
  9283 ;;      Locals:         0       6       0       0       0       0       0
  9284 ;;      Temps:          0       3       0       0       0       0       0
  9285 ;;      Totals:         0      15       0       0       0       0       0
  9286 ;;Total ram usage:       15 bytes
  9287 ;; Hardware stack levels used:    1
  9288 ;; Hardware stack levels required when called:    6
  9289 ;; This function calls:
  9290 ;;		___ftpack
  9291 ;; This function is called by:
  9292 ;;		_Read_X
  9293 ;;		_Read_Y
  9294 ;;		_Read_Z
  9295 ;;		_log
  9296 ;;		_eval_poly
  9297 ;; This function uses a non-reentrant model
  9298 ;;
  9299                           
  9300                           	psect	text20
  9301  003064                     __ptext20:
  9302                           	opt stack 0
  9303  003064                     ___ftmul:
  9304                           	opt stack 20
  9305                           
  9306                           ; BSR set to: 0
  9307                           ;incstack = 0
  9308  003064  C0AD  F0B1         	movff	___ftmul@f1+2,??___ftmul
  9309  003068  0100               	movlb	0	; () banked
  9310  00306A  6BB2               	clrf	(??___ftmul+1)& (0+255),b
  9311  00306C  6BB3               	clrf	(??___ftmul+2)& (0+255),b
  9312  00306E  0100               	movlb	0	; () banked
  9313  003070  35AC               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  9314  003072  0100               	movlb	0	; () banked
  9315  003074  37B1               	rlcf	??___ftmul& (0+255),f,b
  9316  003076  E301               	bnc	u5411
  9317  003078  81B2               	bsf	(??___ftmul+1)& (0+255),0,b
  9318  00307A                     u5411:
  9319  00307A  0100               	movlb	0	; () banked
  9320  00307C  51B1               	movf	??___ftmul& (0+255),w,b
  9321  00307E  0100               	movlb	0	; () banked
  9322  003080  6FB4               	movwf	___ftmul@exp& (0+255),b
  9323  003082  0100               	movlb	0	; () banked
  9324  003084  51B4               	movf	___ftmul@exp& (0+255),w,b
  9325  003086  A4D8               	btfss	status,2,c
  9326  003088  D002               	goto	l4996
  9327  00308A  D014               	goto	l4998
  9328                           
  9329                           ; BSR set to: 0
  9330                           
  9331                           ; BSR set to: 0
  9332  00308C  D098               	goto	l1229
  9333  00308E                     l4996:
  9334                           
  9335                           ; BSR set to: 0
  9336  00308E  C0B0  F0B1         	movff	___ftmul@f2+2,??___ftmul
  9337  003092  0100               	movlb	0	; () banked
  9338  003094  6BB2               	clrf	(??___ftmul+1)& (0+255),b
  9339  003096  6BB3               	clrf	(??___ftmul+2)& (0+255),b
  9340  003098  0100               	movlb	0	; () banked
  9341  00309A  35AF               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  9342  00309C  0100               	movlb	0	; () banked
  9343  00309E  37B1               	rlcf	??___ftmul& (0+255),f,b
  9344  0030A0  E301               	bnc	u5431
  9345  0030A2  81B2               	bsf	(??___ftmul+1)& (0+255),0,b
  9346  0030A4                     u5431:
  9347  0030A4  0100               	movlb	0	; () banked
  9348  0030A6  51B1               	movf	??___ftmul& (0+255),w,b
  9349  0030A8  0100               	movlb	0	; () banked
  9350  0030AA  6FB9               	movwf	___ftmul@sign& (0+255),b
  9351  0030AC  0100               	movlb	0	; () banked
  9352  0030AE  51B9               	movf	___ftmul@sign& (0+255),w,b
  9353  0030B0  A4D8               	btfss	status,2,c
  9354  0030B2  D00A               	goto	l5002
  9355  0030B4                     l4998:
  9356                           
  9357                           ; BSR set to: 0
  9358  0030B4  0E00               	movlw	0
  9359  0030B6  0100               	movlb	0	; () banked
  9360  0030B8  6FAB               	movwf	?___ftmul& (0+255),b
  9361  0030BA  0E00               	movlw	0
  9362  0030BC  0100               	movlb	0	; () banked
  9363  0030BE  6FAC               	movwf	(?___ftmul+1)& (0+255),b
  9364  0030C0  0E00               	movlw	0
  9365  0030C2  0100               	movlb	0	; () banked
  9366  0030C4  6FAD               	movwf	(?___ftmul+2)& (0+255),b
  9367                           
  9368                           ; BSR set to: 0
  9369  0030C6  D07B               	goto	l1229
  9370  0030C8                     l5002:
  9371                           
  9372                           ; BSR set to: 0
  9373  0030C8  0100               	movlb	0	; () banked
  9374  0030CA  51B9               	movf	___ftmul@sign& (0+255),w,b
  9375  0030CC  0F7B               	addlw	123
  9376  0030CE  0100               	movlb	0	; () banked
  9377  0030D0  27B4               	addwf	___ftmul@exp& (0+255),f,b
  9378                           
  9379                           ; BSR set to: 0
  9380  0030D2  C0AD  F0B9         	movff	___ftmul@f1+2,___ftmul@sign
  9381  0030D6  0100               	movlb	0	; () banked
  9382  0030D8  51B0               	movf	(___ftmul@f2+2)& (0+255),w,b
  9383  0030DA  0100               	movlb	0	; () banked
  9384  0030DC  1BB9               	xorwf	___ftmul@sign& (0+255),f,b
  9385  0030DE  0E80               	movlw	128
  9386  0030E0  0100               	movlb	0	; () banked
  9387  0030E2  17B9               	andwf	___ftmul@sign& (0+255),f,b
  9388                           
  9389                           ; BSR set to: 0
  9390  0030E4  0100               	movlb	0	; () banked
  9391  0030E6  8FAC               	bsf	(___ftmul@f1+1)& (0+255),7,b
  9392                           
  9393                           ; BSR set to: 0
  9394  0030E8  0100               	movlb	0	; () banked
  9395  0030EA  8FAF               	bsf	(___ftmul@f2+1)& (0+255),7,b
  9396                           
  9397                           ; BSR set to: 0
  9398  0030EC  0EFF               	movlw	255
  9399  0030EE  0100               	movlb	0	; () banked
  9400  0030F0  17AE               	andwf	___ftmul@f2& (0+255),f,b
  9401  0030F2  0EFF               	movlw	255
  9402  0030F4  0100               	movlb	0	; () banked
  9403  0030F6  17AF               	andwf	(___ftmul@f2+1)& (0+255),f,b
  9404  0030F8  0E00               	movlw	0
  9405  0030FA  0100               	movlb	0	; () banked
  9406  0030FC  17B0               	andwf	(___ftmul@f2+2)& (0+255),f,b
  9407                           
  9408                           ; BSR set to: 0
  9409  0030FE  0E00               	movlw	0
  9410  003100  0100               	movlb	0	; () banked
  9411  003102  6FB5               	movwf	___ftmul@f3_as_product& (0+255),b
  9412  003104  0E00               	movlw	0
  9413  003106  0100               	movlb	0	; () banked
  9414  003108  6FB6               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  9415  00310A  0E00               	movlw	0
  9416  00310C  0100               	movlb	0	; () banked
  9417  00310E  6FB7               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  9418                           
  9419                           ; BSR set to: 0
  9420  003110  0E07               	movlw	7
  9421  003112  0100               	movlb	0	; () banked
  9422  003114  6FB8               	movwf	___ftmul@cntr& (0+255),b
  9423  003116  D000               	goto	l5016
  9424  003118                     l5016:
  9425                           
  9426                           ; BSR set to: 0
  9427  003118  0100               	movlb	0	; () banked
  9428  00311A  A1AB               	btfss	___ftmul@f1& (0+255),0,b
  9429  00311C  D00D               	goto	l5020
  9430                           
  9431                           ; BSR set to: 0
  9432  00311E  0100               	movlb	0	; () banked
  9433  003120  51AE               	movf	___ftmul@f2& (0+255),w,b
  9434  003122  0100               	movlb	0	; () banked
  9435  003124  27B5               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9436  003126  0100               	movlb	0	; () banked
  9437  003128  51AF               	movf	(___ftmul@f2+1)& (0+255),w,b
  9438  00312A  0100               	movlb	0	; () banked
  9439  00312C  23B6               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9440  00312E  0100               	movlb	0	; () banked
  9441  003130  51B0               	movf	(___ftmul@f2+2)& (0+255),w,b
  9442  003132  0100               	movlb	0	; () banked
  9443  003134  23B7               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9444  003136  D000               	goto	l5020
  9445  003138                     l5020:
  9446                           
  9447                           ; BSR set to: 0
  9448  003138  0100               	movlb	0	; () banked
  9449  00313A  90D8               	bcf	status,0,c
  9450  00313C  33AD               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9451  00313E  33AC               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9452  003140  33AB               	rrcf	___ftmul@f1& (0+255),f,b
  9453  003142  0100               	movlb	0	; () banked
  9454  003144  90D8               	bcf	status,0,c
  9455  003146  37AE               	rlcf	___ftmul@f2& (0+255),f,b
  9456  003148  37AF               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  9457  00314A  37B0               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  9458                           
  9459                           ; BSR set to: 0
  9460  00314C  0100               	movlb	0	; () banked
  9461  00314E  2FB8               	decfsz	___ftmul@cntr& (0+255),f,b
  9462  003150  D7E3               	goto	l5016
  9463  003152  D000               	goto	l5024
  9464  003154                     l5024:
  9465                           
  9466                           ; BSR set to: 0
  9467  003154  0E09               	movlw	9
  9468  003156  0100               	movlb	0	; () banked
  9469  003158  6FB8               	movwf	___ftmul@cntr& (0+255),b
  9470  00315A  D000               	goto	l5026
  9471  00315C                     l5026:
  9472                           
  9473                           ; BSR set to: 0
  9474  00315C  0100               	movlb	0	; () banked
  9475  00315E  A1AB               	btfss	___ftmul@f1& (0+255),0,b
  9476  003160  D00D               	goto	l5030
  9477                           
  9478                           ; BSR set to: 0
  9479  003162  0100               	movlb	0	; () banked
  9480  003164  51AE               	movf	___ftmul@f2& (0+255),w,b
  9481  003166  0100               	movlb	0	; () banked
  9482  003168  27B5               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9483  00316A  0100               	movlb	0	; () banked
  9484  00316C  51AF               	movf	(___ftmul@f2+1)& (0+255),w,b
  9485  00316E  0100               	movlb	0	; () banked
  9486  003170  23B6               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9487  003172  0100               	movlb	0	; () banked
  9488  003174  51B0               	movf	(___ftmul@f2+2)& (0+255),w,b
  9489  003176  0100               	movlb	0	; () banked
  9490  003178  23B7               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9491  00317A  D000               	goto	l5030
  9492  00317C                     l5030:
  9493                           
  9494                           ; BSR set to: 0
  9495  00317C  0100               	movlb	0	; () banked
  9496  00317E  90D8               	bcf	status,0,c
  9497  003180  33AD               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9498  003182  33AC               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9499  003184  33AB               	rrcf	___ftmul@f1& (0+255),f,b
  9500  003186  0100               	movlb	0	; () banked
  9501  003188  90D8               	bcf	status,0,c
  9502  00318A  33B7               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  9503  00318C  33B6               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  9504  00318E  33B5               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  9505                           
  9506                           ; BSR set to: 0
  9507  003190  0100               	movlb	0	; () banked
  9508  003192  2FB8               	decfsz	___ftmul@cntr& (0+255),f,b
  9509  003194  D7E3               	goto	l5026
  9510  003196  D000               	goto	l5034
  9511  003198                     l5034:
  9512                           
  9513                           ; BSR set to: 0
  9514  003198  C0B5  F09F         	movff	___ftmul@f3_as_product,___ftpack@arg
  9515  00319C  C0B6  F0A0         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9516  0031A0  C0B7  F0A1         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9517  0031A4  C0B4  F0A2         	movff	___ftmul@exp,___ftpack@exp
  9518  0031A8  C0B9  F0A3         	movff	___ftmul@sign,___ftpack@sign
  9519  0031AC  EC50  F01B         	call	___ftpack	;wreg free
  9520  0031B0  C09F  F0AB         	movff	?___ftpack,?___ftmul
  9521  0031B4  C0A0  F0AC         	movff	?___ftpack+1,?___ftmul+1
  9522  0031B8  C0A1  F0AD         	movff	?___ftpack+2,?___ftmul+2
  9523  0031BC  D000               	goto	l1229
  9524  0031BE                     l1229:
  9525  0031BE  0012               	return		;funcret
  9526  0031C0                     __end_of___ftmul:
  9527                           	opt stack 0
  9528                           tblptru	equ	0xFF8
  9529                           tblptrh	equ	0xFF7
  9530                           tblptrl	equ	0xFF6
  9531                           tablat	equ	0xFF5
  9532                           postinc0	equ	0xFEE
  9533                           wreg	equ	0xFE8
  9534                           postinc1	equ	0xFE6
  9535                           postdec1	equ	0xFE5
  9536                           plusw1	equ	0xFE3
  9537                           fsr1h	equ	0xFE2
  9538                           fsr1l	equ	0xFE1
  9539                           postinc2	equ	0xFDE
  9540                           postdec2	equ	0xFDD
  9541                           plusw2	equ	0xFDB
  9542                           fsr2h	equ	0xFDA
  9543                           fsr2l	equ	0xFD9
  9544                           status	equ	0xFD8
  9545                           
  9546 ;; *************** function ___ftadd *****************
  9547 ;; Defined at:
  9548 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  9549 ;; Parameters:    Size  Location     Type
  9550 ;;  f1              3   58[BANK0 ] float 
  9551 ;;  f2              3   61[BANK0 ] float 
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;  exp1            1   69[BANK0 ] unsigned char 
  9554 ;;  exp2            1   68[BANK0 ] unsigned char 
  9555 ;;  sign            1   67[BANK0 ] unsigned char 
  9556 ;; Return value:  Size  Location     Type
  9557 ;;                  3   58[BANK0 ] float 
  9558 ;; Registers used:
  9559 ;;		wreg, status,2, status,0, cstack
  9560 ;; Tracked objects:
  9561 ;;		On entry : 0/0
  9562 ;;		On exit  : 0/0
  9563 ;;		Unchanged: 0/0
  9564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9565 ;;      Params:         0       6       0       0       0       0       0
  9566 ;;      Locals:         0       3       0       0       0       0       0
  9567 ;;      Temps:          0       3       0       0       0       0       0
  9568 ;;      Totals:         0      12       0       0       0       0       0
  9569 ;;Total ram usage:       12 bytes
  9570 ;; Hardware stack levels used:    1
  9571 ;; Hardware stack levels required when called:    6
  9572 ;; This function calls:
  9573 ;;		___ftpack
  9574 ;; This function is called by:
  9575 ;;		_Read_X
  9576 ;;		_Read_Y
  9577 ;;		_Read_Z
  9578 ;;		_log
  9579 ;;		_eval_poly
  9580 ;; This function uses a non-reentrant model
  9581 ;;
  9582                           
  9583                           	psect	text21
  9584  0025BE                     __ptext21:
  9585                           	opt stack 0
  9586  0025BE                     ___ftadd:
  9587                           	opt stack 20
  9588                           
  9589                           ;incstack = 0
  9590  0025BE  C0BC  F0C0         	movff	___ftadd@f1+2,??___ftadd
  9591  0025C2  0100               	movlb	0	; () banked
  9592  0025C4  6BC1               	clrf	(??___ftadd+1)& (0+255),b
  9593  0025C6  6BC2               	clrf	(??___ftadd+2)& (0+255),b
  9594  0025C8  0100               	movlb	0	; () banked
  9595  0025CA  35BB               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9596  0025CC  0100               	movlb	0	; () banked
  9597  0025CE  37C0               	rlcf	??___ftadd& (0+255),f,b
  9598  0025D0  E301               	bnc	u5201
  9599  0025D2  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
  9600  0025D4                     u5201:
  9601  0025D4  0100               	movlb	0	; () banked
  9602  0025D6  51C0               	movf	??___ftadd& (0+255),w,b
  9603  0025D8  0100               	movlb	0	; () banked
  9604  0025DA  6FC5               	movwf	___ftadd@exp1& (0+255),b
  9605  0025DC  C0BF  F0C0         	movff	___ftadd@f2+2,??___ftadd
  9606  0025E0  0100               	movlb	0	; () banked
  9607  0025E2  6BC1               	clrf	(??___ftadd+1)& (0+255),b
  9608  0025E4  6BC2               	clrf	(??___ftadd+2)& (0+255),b
  9609  0025E6  0100               	movlb	0	; () banked
  9610  0025E8  35BE               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9611  0025EA  0100               	movlb	0	; () banked
  9612  0025EC  37C0               	rlcf	??___ftadd& (0+255),f,b
  9613  0025EE  E301               	bnc	u5211
  9614  0025F0  81C1               	bsf	(??___ftadd+1)& (0+255),0,b
  9615  0025F2                     u5211:
  9616  0025F2  0100               	movlb	0	; () banked
  9617  0025F4  51C0               	movf	??___ftadd& (0+255),w,b
  9618  0025F6  0100               	movlb	0	; () banked
  9619  0025F8  6FC4               	movwf	___ftadd@exp2& (0+255),b
  9620                           
  9621                           ; BSR set to: 0
  9622  0025FA  0100               	movlb	0	; () banked
  9623  0025FC  51C5               	movf	___ftadd@exp1& (0+255),w,b
  9624  0025FE  0100               	movlb	0	; () banked
  9625  002600  B4D8               	btfsc	status,2,c
  9626  002602  D011               	goto	l1182
  9627                           
  9628                           ; BSR set to: 0
  9629  002604  0100               	movlb	0	; () banked
  9630  002606  51C4               	movf	___ftadd@exp2& (0+255),w,b
  9631  002608  0100               	movlb	0	; () banked
  9632  00260A  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
  9633  00260C  B0D8               	btfsc	status,0,c
  9634  00260E  D012               	goto	l4928
  9635                           
  9636                           ; BSR set to: 0
  9637  002610  0100               	movlb	0	; () banked
  9638  002612  51C5               	movf	___ftadd@exp1& (0+255),w,b
  9639  002614  0800               	sublw	0
  9640  002616  0100               	movlb	0	; () banked
  9641  002618  25C4               	addwf	___ftadd@exp2& (0+255),w,b
  9642  00261A  0100               	movlb	0	; () banked
  9643  00261C  6FC0               	movwf	??___ftadd& (0+255),b
  9644  00261E  0E18               	movlw	24
  9645  002620  0100               	movlb	0	; () banked
  9646  002622  65C0               	cpfsgt	??___ftadd& (0+255),b
  9647  002624  D007               	goto	l4928
  9648  002626                     l1182:
  9649                           
  9650                           ; BSR set to: 0
  9651  002626  C0BD  F0BA         	movff	___ftadd@f2,?___ftadd
  9652  00262A  C0BE  F0BB         	movff	___ftadd@f2+1,?___ftadd+1
  9653  00262E  C0BF  F0BC         	movff	___ftadd@f2+2,?___ftadd+2
  9654  002632  D103               	goto	l1183
  9655  002634                     l4928:
  9656                           
  9657                           ; BSR set to: 0
  9658  002634  0100               	movlb	0	; () banked
  9659  002636  51C4               	movf	___ftadd@exp2& (0+255),w,b
  9660  002638  0100               	movlb	0	; () banked
  9661  00263A  B4D8               	btfsc	status,2,c
  9662  00263C  D011               	goto	l1186
  9663                           
  9664                           ; BSR set to: 0
  9665  00263E  0100               	movlb	0	; () banked
  9666  002640  51C5               	movf	___ftadd@exp1& (0+255),w,b
  9667  002642  0100               	movlb	0	; () banked
  9668  002644  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
  9669  002646  B0D8               	btfsc	status,0,c
  9670  002648  D012               	goto	l4934
  9671                           
  9672                           ; BSR set to: 0
  9673  00264A  0100               	movlb	0	; () banked
  9674  00264C  51C4               	movf	___ftadd@exp2& (0+255),w,b
  9675  00264E  0800               	sublw	0
  9676  002650  0100               	movlb	0	; () banked
  9677  002652  25C5               	addwf	___ftadd@exp1& (0+255),w,b
  9678  002654  0100               	movlb	0	; () banked
  9679  002656  6FC0               	movwf	??___ftadd& (0+255),b
  9680  002658  0E18               	movlw	24
  9681  00265A  0100               	movlb	0	; () banked
  9682  00265C  65C0               	cpfsgt	??___ftadd& (0+255),b
  9683  00265E  D007               	goto	l4934
  9684  002660                     l1186:
  9685                           
  9686                           ; BSR set to: 0
  9687  002660  C0BA  F0BA         	movff	___ftadd@f1,?___ftadd
  9688  002664  C0BB  F0BB         	movff	___ftadd@f1+1,?___ftadd+1
  9689  002668  C0BC  F0BC         	movff	___ftadd@f1+2,?___ftadd+2
  9690  00266C  D0E6               	goto	l1183
  9691  00266E                     l4934:
  9692                           
  9693                           ; BSR set to: 0
  9694  00266E  0E06               	movlw	6
  9695  002670  0100               	movlb	0	; () banked
  9696  002672  6FC3               	movwf	___ftadd@sign& (0+255),b
  9697                           
  9698                           ; BSR set to: 0
  9699  002674  0100               	movlb	0	; () banked
  9700  002676  AFBC               	btfss	(___ftadd@f1+2)& (0+255),7,b
  9701  002678  D003               	goto	l4940
  9702                           
  9703                           ; BSR set to: 0
  9704  00267A  0100               	movlb	0	; () banked
  9705  00267C  8FC3               	bsf	___ftadd@sign& (0+255),7,b
  9706  00267E  D000               	goto	l4940
  9707  002680                     l4940:
  9708                           
  9709                           ; BSR set to: 0
  9710  002680  0100               	movlb	0	; () banked
  9711  002682  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9712  002684  D002               	goto	l1188
  9713                           
  9714                           ; BSR set to: 0
  9715  002686  0100               	movlb	0	; () banked
  9716  002688  8DC3               	bsf	___ftadd@sign& (0+255),6,b
  9717  00268A                     l1188:
  9718                           
  9719                           ; BSR set to: 0
  9720  00268A  0100               	movlb	0	; () banked
  9721  00268C  8FBB               	bsf	(___ftadd@f1+1)& (0+255),7,b
  9722                           
  9723                           ; BSR set to: 0
  9724  00268E  0EFF               	movlw	255
  9725  002690  0100               	movlb	0	; () banked
  9726  002692  17BA               	andwf	___ftadd@f1& (0+255),f,b
  9727  002694  0EFF               	movlw	255
  9728  002696  0100               	movlb	0	; () banked
  9729  002698  17BB               	andwf	(___ftadd@f1+1)& (0+255),f,b
  9730  00269A  0E00               	movlw	0
  9731  00269C  0100               	movlb	0	; () banked
  9732  00269E  17BC               	andwf	(___ftadd@f1+2)& (0+255),f,b
  9733  0026A0  0100               	movlb	0	; () banked
  9734  0026A2  8FBE               	bsf	(___ftadd@f2+1)& (0+255),7,b
  9735                           
  9736                           ; BSR set to: 0
  9737  0026A4  0EFF               	movlw	255
  9738  0026A6  0100               	movlb	0	; () banked
  9739  0026A8  17BD               	andwf	___ftadd@f2& (0+255),f,b
  9740  0026AA  0EFF               	movlw	255
  9741  0026AC  0100               	movlb	0	; () banked
  9742  0026AE  17BE               	andwf	(___ftadd@f2+1)& (0+255),f,b
  9743  0026B0  0E00               	movlw	0
  9744  0026B2  0100               	movlb	0	; () banked
  9745  0026B4  17BF               	andwf	(___ftadd@f2+2)& (0+255),f,b
  9746                           
  9747                           ; BSR set to: 0
  9748  0026B6  0100               	movlb	0	; () banked
  9749  0026B8  51C4               	movf	___ftadd@exp2& (0+255),w,b
  9750  0026BA  0100               	movlb	0	; () banked
  9751  0026BC  5DC5               	subwf	___ftadd@exp1& (0+255),w,b
  9752  0026BE  B0D8               	btfsc	status,0,c
  9753  0026C0  D028               	goto	l4960
  9754  0026C2                     l4950:
  9755                           
  9756                           ; BSR set to: 0
  9757  0026C2  0100               	movlb	0	; () banked
  9758  0026C4  90D8               	bcf	status,0,c
  9759  0026C6  37BD               	rlcf	___ftadd@f2& (0+255),f,b
  9760  0026C8  37BE               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  9761  0026CA  37BF               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  9762  0026CC  0100               	movlb	0	; () banked
  9763  0026CE  07C4               	decf	___ftadd@exp2& (0+255),f,b
  9764                           
  9765                           ; BSR set to: 0
  9766  0026D0  0100               	movlb	0	; () banked
  9767  0026D2  51C5               	movf	___ftadd@exp1& (0+255),w,b
  9768  0026D4  0100               	movlb	0	; () banked
  9769  0026D6  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
  9770  0026D8  B4D8               	btfsc	status,2,c
  9771  0026DA  D013               	goto	l4958
  9772                           
  9773                           ; BSR set to: 0
  9774  0026DC  0100               	movlb	0	; () banked
  9775  0026DE  07C3               	decf	___ftadd@sign& (0+255),f,b
  9776  0026E0  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
  9777  0026E4  0E07               	movlw	7
  9778  0026E6  0100               	movlb	0	; () banked
  9779  0026E8  17C0               	andwf	??___ftadd& (0+255),f,b
  9780  0026EA  B4D8               	btfsc	status,2,c
  9781  0026EC  D00A               	goto	l4958
  9782  0026EE  D7E9               	goto	l4950
  9783                           
  9784                           ; BSR set to: 0
  9785                           
  9786                           ; BSR set to: 0
  9787  0026F0  D008               	goto	l4958
  9788  0026F2                     l4956:
  9789                           
  9790                           ; BSR set to: 0
  9791  0026F2  0100               	movlb	0	; () banked
  9792  0026F4  90D8               	bcf	status,0,c
  9793  0026F6  33BC               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  9794  0026F8  33BB               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  9795  0026FA  33BA               	rrcf	___ftadd@f1& (0+255),f,b
  9796  0026FC  0100               	movlb	0	; () banked
  9797  0026FE  2BC5               	incf	___ftadd@exp1& (0+255),f,b
  9798  002700  D000               	goto	l4958
  9799  002702                     l4958:
  9800                           
  9801                           ; BSR set to: 0
  9802  002702  0100               	movlb	0	; () banked
  9803  002704  51C4               	movf	___ftadd@exp2& (0+255),w,b
  9804  002706  0100               	movlb	0	; () banked
  9805  002708  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
  9806  00270A  B4D8               	btfsc	status,2,c
  9807  00270C  D030               	goto	l1197
  9808  00270E  D7F1               	goto	l4956
  9809                           
  9810                           ; BSR set to: 0
  9811  002710  D02E               	goto	l1197
  9812  002712                     l4960:
  9813                           
  9814                           ; BSR set to: 0
  9815  002712  0100               	movlb	0	; () banked
  9816  002714  51C5               	movf	___ftadd@exp1& (0+255),w,b
  9817  002716  0100               	movlb	0	; () banked
  9818  002718  5DC4               	subwf	___ftadd@exp2& (0+255),w,b
  9819  00271A  B0D8               	btfsc	status,0,c
  9820  00271C  D028               	goto	l1197
  9821  00271E                     l4962:
  9822                           
  9823                           ; BSR set to: 0
  9824  00271E  0100               	movlb	0	; () banked
  9825  002720  90D8               	bcf	status,0,c
  9826  002722  37BA               	rlcf	___ftadd@f1& (0+255),f,b
  9827  002724  37BB               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  9828  002726  37BC               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  9829  002728  0100               	movlb	0	; () banked
  9830  00272A  07C5               	decf	___ftadd@exp1& (0+255),f,b
  9831                           
  9832                           ; BSR set to: 0
  9833  00272C  0100               	movlb	0	; () banked
  9834  00272E  51C5               	movf	___ftadd@exp1& (0+255),w,b
  9835  002730  0100               	movlb	0	; () banked
  9836  002732  19C4               	xorwf	___ftadd@exp2& (0+255),w,b
  9837  002734  B4D8               	btfsc	status,2,c
  9838  002736  D013               	goto	l4970
  9839                           
  9840                           ; BSR set to: 0
  9841  002738  0100               	movlb	0	; () banked
  9842  00273A  07C3               	decf	___ftadd@sign& (0+255),f,b
  9843  00273C  C0C3  F0C0         	movff	___ftadd@sign,??___ftadd
  9844  002740  0E07               	movlw	7
  9845  002742  0100               	movlb	0	; () banked
  9846  002744  17C0               	andwf	??___ftadd& (0+255),f,b
  9847  002746  B4D8               	btfsc	status,2,c
  9848  002748  D00A               	goto	l4970
  9849  00274A  D7E9               	goto	l4962
  9850                           
  9851                           ; BSR set to: 0
  9852                           
  9853                           ; BSR set to: 0
  9854  00274C  D008               	goto	l4970
  9855  00274E                     l4968:
  9856                           
  9857                           ; BSR set to: 0
  9858  00274E  0100               	movlb	0	; () banked
  9859  002750  90D8               	bcf	status,0,c
  9860  002752  33BF               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  9861  002754  33BE               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  9862  002756  33BD               	rrcf	___ftadd@f2& (0+255),f,b
  9863  002758  0100               	movlb	0	; () banked
  9864  00275A  2BC4               	incf	___ftadd@exp2& (0+255),f,b
  9865  00275C  D000               	goto	l4970
  9866  00275E                     l4970:
  9867                           
  9868                           ; BSR set to: 0
  9869  00275E  0100               	movlb	0	; () banked
  9870  002760  51C4               	movf	___ftadd@exp2& (0+255),w,b
  9871  002762  0100               	movlb	0	; () banked
  9872  002764  19C5               	xorwf	___ftadd@exp1& (0+255),w,b
  9873  002766  B4D8               	btfsc	status,2,c
  9874  002768  D002               	goto	l1197
  9875  00276A  D7F1               	goto	l4968
  9876                           
  9877                           ; BSR set to: 0
  9878  00276C  D000               	goto	l1197
  9879  00276E                     l1197:
  9880                           
  9881                           ; BSR set to: 0
  9882  00276E  0100               	movlb	0	; () banked
  9883  002770  AFC3               	btfss	___ftadd@sign& (0+255),7,b
  9884  002772  D012               	goto	l1206
  9885                           
  9886                           ; BSR set to: 0
  9887  002774  0EFF               	movlw	255
  9888  002776  0100               	movlb	0	; () banked
  9889  002778  1BBA               	xorwf	___ftadd@f1& (0+255),f,b
  9890  00277A  0EFF               	movlw	255
  9891  00277C  0100               	movlb	0	; () banked
  9892  00277E  1BBB               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  9893  002780  0EFF               	movlw	255
  9894  002782  0100               	movlb	0	; () banked
  9895  002784  1BBC               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  9896  002786  0E01               	movlw	1
  9897  002788  0100               	movlb	0	; () banked
  9898  00278A  27BA               	addwf	___ftadd@f1& (0+255),f,b
  9899  00278C  0E00               	movlw	0
  9900  00278E  0100               	movlb	0	; () banked
  9901  002790  23BB               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  9902  002792  0E00               	movlw	0
  9903  002794  0100               	movlb	0	; () banked
  9904  002796  23BC               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  9905  002798                     l1206:
  9906                           
  9907                           ; BSR set to: 0
  9908  002798  0100               	movlb	0	; () banked
  9909  00279A  ADC3               	btfss	___ftadd@sign& (0+255),6,b
  9910  00279C  D013               	goto	l4976
  9911                           
  9912                           ; BSR set to: 0
  9913  00279E  0EFF               	movlw	255
  9914  0027A0  0100               	movlb	0	; () banked
  9915  0027A2  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
  9916  0027A4  0EFF               	movlw	255
  9917  0027A6  0100               	movlb	0	; () banked
  9918  0027A8  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9919  0027AA  0EFF               	movlw	255
  9920  0027AC  0100               	movlb	0	; () banked
  9921  0027AE  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9922  0027B0  0E01               	movlw	1
  9923  0027B2  0100               	movlb	0	; () banked
  9924  0027B4  27BD               	addwf	___ftadd@f2& (0+255),f,b
  9925  0027B6  0E00               	movlw	0
  9926  0027B8  0100               	movlb	0	; () banked
  9927  0027BA  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9928  0027BC  0E00               	movlw	0
  9929  0027BE  0100               	movlb	0	; () banked
  9930  0027C0  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9931  0027C2  D000               	goto	l4976
  9932  0027C4                     l4976:
  9933                           
  9934                           ; BSR set to: 0
  9935  0027C4  0E00               	movlw	0
  9936  0027C6  0100               	movlb	0	; () banked
  9937  0027C8  6FC3               	movwf	___ftadd@sign& (0+255),b
  9938                           
  9939                           ; BSR set to: 0
  9940  0027CA  0100               	movlb	0	; () banked
  9941  0027CC  51BA               	movf	___ftadd@f1& (0+255),w,b
  9942  0027CE  0100               	movlb	0	; () banked
  9943  0027D0  27BD               	addwf	___ftadd@f2& (0+255),f,b
  9944  0027D2  0100               	movlb	0	; () banked
  9945  0027D4  51BB               	movf	(___ftadd@f1+1)& (0+255),w,b
  9946  0027D6  0100               	movlb	0	; () banked
  9947  0027D8  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9948  0027DA  0100               	movlb	0	; () banked
  9949  0027DC  51BC               	movf	(___ftadd@f1+2)& (0+255),w,b
  9950  0027DE  0100               	movlb	0	; () banked
  9951  0027E0  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9952                           
  9953                           ; BSR set to: 0
  9954  0027E2  0100               	movlb	0	; () banked
  9955  0027E4  AFBF               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9956  0027E6  D016               	goto	l4986
  9957                           
  9958                           ; BSR set to: 0
  9959  0027E8  0EFF               	movlw	255
  9960  0027EA  0100               	movlb	0	; () banked
  9961  0027EC  1BBD               	xorwf	___ftadd@f2& (0+255),f,b
  9962  0027EE  0EFF               	movlw	255
  9963  0027F0  0100               	movlb	0	; () banked
  9964  0027F2  1BBE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9965  0027F4  0EFF               	movlw	255
  9966  0027F6  0100               	movlb	0	; () banked
  9967  0027F8  1BBF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9968  0027FA  0E01               	movlw	1
  9969  0027FC  0100               	movlb	0	; () banked
  9970  0027FE  27BD               	addwf	___ftadd@f2& (0+255),f,b
  9971  002800  0E00               	movlw	0
  9972  002802  0100               	movlb	0	; () banked
  9973  002804  23BE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9974  002806  0E00               	movlw	0
  9975  002808  0100               	movlb	0	; () banked
  9976  00280A  23BF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9977                           
  9978                           ; BSR set to: 0
  9979  00280C  0E01               	movlw	1
  9980  00280E  0100               	movlb	0	; () banked
  9981  002810  6FC3               	movwf	___ftadd@sign& (0+255),b
  9982  002812  D000               	goto	l4986
  9983  002814                     l4986:
  9984                           
  9985                           ; BSR set to: 0
  9986  002814  C0BD  F09F         	movff	___ftadd@f2,___ftpack@arg
  9987  002818  C0BE  F0A0         	movff	___ftadd@f2+1,___ftpack@arg+1
  9988  00281C  C0BF  F0A1         	movff	___ftadd@f2+2,___ftpack@arg+2
  9989  002820  C0C5  F0A2         	movff	___ftadd@exp1,___ftpack@exp
  9990  002824  C0C3  F0A3         	movff	___ftadd@sign,___ftpack@sign
  9991  002828  EC50  F01B         	call	___ftpack	;wreg free
  9992  00282C  C09F  F0BA         	movff	?___ftpack,?___ftadd
  9993  002830  C0A0  F0BB         	movff	?___ftpack+1,?___ftadd+1
  9994  002834  C0A1  F0BC         	movff	?___ftpack+2,?___ftadd+2
  9995  002838  D000               	goto	l1183
  9996  00283A                     l1183:
  9997  00283A  0012               	return		;funcret
  9998  00283C                     __end_of___ftadd:
  9999                           	opt stack 0
 10000                           tblptru	equ	0xFF8
 10001                           tblptrh	equ	0xFF7
 10002                           tblptrl	equ	0xFF6
 10003                           tablat	equ	0xFF5
 10004                           postinc0	equ	0xFEE
 10005                           wreg	equ	0xFE8
 10006                           postinc1	equ	0xFE6
 10007                           postdec1	equ	0xFE5
 10008                           plusw1	equ	0xFE3
 10009                           fsr1h	equ	0xFE2
 10010                           fsr1l	equ	0xFE1
 10011                           postinc2	equ	0xFDE
 10012                           postdec2	equ	0xFDD
 10013                           plusw2	equ	0xFDB
 10014                           fsr2h	equ	0xFDA
 10015                           fsr2l	equ	0xFD9
 10016                           status	equ	0xFD8
 10017                           
 10018 ;; *************** function ___awtoft *****************
 10019 ;; Defined at:
 10020 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;  c               2   39[BANK0 ] int 
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;  sign            1   42[BANK0 ] unsigned char 
 10025 ;; Return value:  Size  Location     Type
 10026 ;;                  3   39[BANK0 ] float 
 10027 ;; Registers used:
 10028 ;;		wreg, status,2, status,0, cstack
 10029 ;; Tracked objects:
 10030 ;;		On entry : 0/0
 10031 ;;		On exit  : 0/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10034 ;;      Params:         0       3       0       0       0       0       0
 10035 ;;      Locals:         0       1       0       0       0       0       0
 10036 ;;      Temps:          0       0       0       0       0       0       0
 10037 ;;      Totals:         0       4       0       0       0       0       0
 10038 ;;Total ram usage:        4 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; Hardware stack levels required when called:    6
 10041 ;; This function calls:
 10042 ;;		___ftpack
 10043 ;; This function is called by:
 10044 ;;		_Read_X
 10045 ;;		_Read_Y
 10046 ;;		_Read_Z
 10047 ;;		_log
 10048 ;; This function uses a non-reentrant model
 10049 ;;
 10050                           
 10051                           	psect	text22
 10052  004256                     __ptext22:
 10053                           	opt stack 0
 10054  004256                     ___awtoft:
 10055                           	opt stack 21
 10056                           
 10057                           ;incstack = 0
 10058  004256  0E00               	movlw	0
 10059  004258  0100               	movlb	0	; () banked
 10060  00425A  6FAA               	movwf	___awtoft@sign& (0+255),b
 10061                           
 10062                           ; BSR set to: 0
 10063  00425C  0100               	movlb	0	; () banked
 10064  00425E  AFA8               	btfss	(___awtoft@c+1)& (0+255),7,b
 10065  004260  D009               	goto	l5072
 10066                           
 10067                           ; BSR set to: 0
 10068  004262  0100               	movlb	0	; () banked
 10069  004264  6DA7               	negf	___awtoft@c& (0+255),b
 10070  004266  1FA8               	comf	(___awtoft@c+1)& (0+255),f,b
 10071  004268  B0D8               	btfsc	status,0,c
 10072  00426A  2BA8               	incf	(___awtoft@c+1)& (0+255),f,b
 10073                           
 10074                           ; BSR set to: 0
 10075  00426C  0E01               	movlw	1
 10076  00426E  0100               	movlb	0	; () banked
 10077  004270  6FAA               	movwf	___awtoft@sign& (0+255),b
 10078  004272  D000               	goto	l5072
 10079  004274                     l5072:
 10080                           
 10081                           ; BSR set to: 0
 10082  004274  C0A7  F09F         	movff	___awtoft@c,___ftpack@arg
 10083  004278  C0A8  F0A0         	movff	___awtoft@c+1,___ftpack@arg+1
 10084  00427C  0100               	movlb	0	; () banked
 10085  00427E  6BA1               	clrf	(___ftpack@arg+2)& (0+255),b
 10086  004280  0E8E               	movlw	142
 10087  004282  0100               	movlb	0	; () banked
 10088  004284  6FA2               	movwf	___ftpack@exp& (0+255),b
 10089  004286  C0AA  F0A3         	movff	___awtoft@sign,___ftpack@sign
 10090  00428A  EC50  F01B         	call	___ftpack	;wreg free
 10091  00428E  C09F  F0A7         	movff	?___ftpack,?___awtoft
 10092  004292  C0A0  F0A8         	movff	?___ftpack+1,?___awtoft+1
 10093  004296  C0A1  F0A9         	movff	?___ftpack+2,?___awtoft+2
 10094  00429A  D000               	goto	l1031
 10095  00429C                     l1031:
 10096  00429C  0012               	return		;funcret
 10097  00429E                     __end_of___awtoft:
 10098                           	opt stack 0
 10099                           tblptru	equ	0xFF8
 10100                           tblptrh	equ	0xFF7
 10101                           tblptrl	equ	0xFF6
 10102                           tablat	equ	0xFF5
 10103                           postinc0	equ	0xFEE
 10104                           wreg	equ	0xFE8
 10105                           postinc1	equ	0xFE6
 10106                           postdec1	equ	0xFE5
 10107                           plusw1	equ	0xFE3
 10108                           fsr1h	equ	0xFE2
 10109                           fsr1l	equ	0xFE1
 10110                           postinc2	equ	0xFDE
 10111                           postdec2	equ	0xFDD
 10112                           plusw2	equ	0xFDB
 10113                           fsr2h	equ	0xFDA
 10114                           fsr2l	equ	0xFD9
 10115                           status	equ	0xFD8
 10116                           
 10117 ;; *************** function ___ftpack *****************
 10118 ;; Defined at:
 10119 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 10120 ;; Parameters:    Size  Location     Type
 10121 ;;  arg             3   31[BANK0 ] unsigned um
 10122 ;;  exp             1   34[BANK0 ] unsigned char 
 10123 ;;  sign            1   35[BANK0 ] unsigned char 
 10124 ;; Auto vars:     Size  Location     Type
 10125 ;;		None
 10126 ;; Return value:  Size  Location     Type
 10127 ;;                  3   31[BANK0 ] float 
 10128 ;; Registers used:
 10129 ;;		wreg, status,2, status,0
 10130 ;; Tracked objects:
 10131 ;;		On entry : 0/0
 10132 ;;		On exit  : 0/0
 10133 ;;		Unchanged: 0/0
 10134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10135 ;;      Params:         0       5       0       0       0       0       0
 10136 ;;      Locals:         0       0       0       0       0       0       0
 10137 ;;      Temps:          0       3       0       0       0       0       0
 10138 ;;      Totals:         0       8       0       0       0       0       0
 10139 ;;Total ram usage:        8 bytes
 10140 ;; Hardware stack levels used:    1
 10141 ;; Hardware stack levels required when called:    5
 10142 ;; This function calls:
 10143 ;;		Nothing
 10144 ;; This function is called by:
 10145 ;;		___awtoft
 10146 ;;		___ftadd
 10147 ;;		___ftdiv
 10148 ;;		___ftmul
 10149 ;; This function uses a non-reentrant model
 10150 ;;
 10151                           
 10152                           	psect	text23
 10153  0036A0                     __ptext23:
 10154                           	opt stack 0
 10155  0036A0                     ___ftpack:
 10156                           	opt stack 20
 10157                           
 10158                           ;incstack = 0
 10159  0036A0  0100               	movlb	0	; () banked
 10160  0036A2  51A2               	movf	___ftpack@exp& (0+255),w,b
 10161  0036A4  0100               	movlb	0	; () banked
 10162  0036A6  B4D8               	btfsc	status,2,c
 10163  0036A8  D008               	goto	l4882
 10164                           
 10165                           ; BSR set to: 0
 10166  0036AA  0100               	movlb	0	; () banked
 10167  0036AC  519F               	movf	___ftpack@arg& (0+255),w,b
 10168  0036AE  0100               	movlb	0	; () banked
 10169  0036B0  11A0               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 10170  0036B2  0100               	movlb	0	; () banked
 10171  0036B4  11A1               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 10172  0036B6  A4D8               	btfss	status,2,c
 10173  0036B8  D013               	goto	l4888
 10174  0036BA                     l4882:
 10175                           
 10176                           ; BSR set to: 0
 10177  0036BA  0E00               	movlw	0
 10178  0036BC  0100               	movlb	0	; () banked
 10179  0036BE  6F9F               	movwf	?___ftpack& (0+255),b
 10180  0036C0  0E00               	movlw	0
 10181  0036C2  0100               	movlb	0	; () banked
 10182  0036C4  6FA0               	movwf	(?___ftpack+1)& (0+255),b
 10183  0036C6  0E00               	movlw	0
 10184  0036C8  0100               	movlb	0	; () banked
 10185  0036CA  6FA1               	movwf	(?___ftpack+2)& (0+255),b
 10186                           
 10187                           ; BSR set to: 0
 10188  0036CC  D078               	goto	l1142
 10189                           
 10190                           ; BSR set to: 0
 10191  0036CE  D008               	goto	l4888
 10192  0036D0                     l4886:
 10193                           
 10194                           ; BSR set to: 0
 10195  0036D0  0100               	movlb	0	; () banked
 10196  0036D2  2BA2               	incf	___ftpack@exp& (0+255),f,b
 10197  0036D4  0100               	movlb	0	; () banked
 10198  0036D6  90D8               	bcf	status,0,c
 10199  0036D8  33A1               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10200  0036DA  33A0               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10201  0036DC  339F               	rrcf	___ftpack@arg& (0+255),f,b
 10202  0036DE  D000               	goto	l4888
 10203  0036E0                     l4888:
 10204                           
 10205                           ; BSR set to: 0
 10206  0036E0  0E00               	movlw	0
 10207  0036E2  0100               	movlb	0	; () banked
 10208  0036E4  159F               	andwf	___ftpack@arg& (0+255),w,b
 10209  0036E6  0100               	movlb	0	; () banked
 10210  0036E8  6FA4               	movwf	??___ftpack& (0+255),b
 10211  0036EA  0E00               	movlw	0
 10212  0036EC  0100               	movlb	0	; () banked
 10213  0036EE  15A0               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10214  0036F0  0100               	movlb	0	; () banked
 10215  0036F2  6FA5               	movwf	(??___ftpack+1)& (0+255),b
 10216  0036F4  0EFE               	movlw	254
 10217  0036F6  0100               	movlb	0	; () banked
 10218  0036F8  15A1               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10219  0036FA  0100               	movlb	0	; () banked
 10220  0036FC  6FA6               	movwf	(??___ftpack+2)& (0+255),b
 10221  0036FE  0100               	movlb	0	; () banked
 10222  003700  51A4               	movf	??___ftpack& (0+255),w,b
 10223  003702  0100               	movlb	0	; () banked
 10224  003704  11A5               	iorwf	(??___ftpack+1)& (0+255),w,b
 10225  003706  0100               	movlb	0	; () banked
 10226  003708  11A6               	iorwf	(??___ftpack+2)& (0+255),w,b
 10227  00370A  B4D8               	btfsc	status,2,c
 10228  00370C  D013               	goto	l4894
 10229  00370E  D7E0               	goto	l4886
 10230                           
 10231                           ; BSR set to: 0
 10232  003710  D011               	goto	l4894
 10233  003712                     l4890:
 10234                           
 10235                           ; BSR set to: 0
 10236  003712  0100               	movlb	0	; () banked
 10237  003714  2BA2               	incf	___ftpack@exp& (0+255),f,b
 10238                           
 10239                           ; BSR set to: 0
 10240  003716  0E01               	movlw	1
 10241  003718  0100               	movlb	0	; () banked
 10242  00371A  279F               	addwf	___ftpack@arg& (0+255),f,b
 10243  00371C  0E00               	movlw	0
 10244  00371E  0100               	movlb	0	; () banked
 10245  003720  23A0               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 10246  003722  0E00               	movlw	0
 10247  003724  0100               	movlb	0	; () banked
 10248  003726  23A1               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 10249  003728  0100               	movlb	0	; () banked
 10250  00372A  90D8               	bcf	status,0,c
 10251  00372C  33A1               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10252  00372E  33A0               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10253  003730  339F               	rrcf	___ftpack@arg& (0+255),f,b
 10254  003732  D000               	goto	l4894
 10255  003734                     l4894:
 10256                           
 10257                           ; BSR set to: 0
 10258  003734  0E00               	movlw	0
 10259  003736  0100               	movlb	0	; () banked
 10260  003738  159F               	andwf	___ftpack@arg& (0+255),w,b
 10261  00373A  0100               	movlb	0	; () banked
 10262  00373C  6FA4               	movwf	??___ftpack& (0+255),b
 10263  00373E  0E00               	movlw	0
 10264  003740  0100               	movlb	0	; () banked
 10265  003742  15A0               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10266  003744  0100               	movlb	0	; () banked
 10267  003746  6FA5               	movwf	(??___ftpack+1)& (0+255),b
 10268  003748  0EFF               	movlw	255
 10269  00374A  0100               	movlb	0	; () banked
 10270  00374C  15A1               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10271  00374E  0100               	movlb	0	; () banked
 10272  003750  6FA6               	movwf	(??___ftpack+2)& (0+255),b
 10273  003752  0100               	movlb	0	; () banked
 10274  003754  51A4               	movf	??___ftpack& (0+255),w,b
 10275  003756  0100               	movlb	0	; () banked
 10276  003758  11A5               	iorwf	(??___ftpack+1)& (0+255),w,b
 10277  00375A  0100               	movlb	0	; () banked
 10278  00375C  11A6               	iorwf	(??___ftpack+2)& (0+255),w,b
 10279  00375E  B4D8               	btfsc	status,2,c
 10280  003760  D00A               	goto	l4898
 10281  003762  D7D7               	goto	l4890
 10282                           
 10283                           ; BSR set to: 0
 10284  003764  D008               	goto	l4898
 10285  003766                     l4896:
 10286                           
 10287                           ; BSR set to: 0
 10288  003766  0100               	movlb	0	; () banked
 10289  003768  07A2               	decf	___ftpack@exp& (0+255),f,b
 10290  00376A  0100               	movlb	0	; () banked
 10291  00376C  90D8               	bcf	status,0,c
 10292  00376E  379F               	rlcf	___ftpack@arg& (0+255),f,b
 10293  003770  37A0               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 10294  003772  37A1               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 10295  003774  D000               	goto	l4898
 10296  003776                     l4898:
 10297                           
 10298                           ; BSR set to: 0
 10299  003776  0100               	movlb	0	; () banked
 10300  003778  BFA0               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 10301  00377A  D005               	goto	l1153
 10302                           
 10303                           ; BSR set to: 0
 10304  00377C  0E02               	movlw	2
 10305  00377E  0100               	movlb	0	; () banked
 10306  003780  61A2               	cpfslt	___ftpack@exp& (0+255),b
 10307  003782  D7F1               	goto	l4896
 10308  003784  D000               	goto	l1153
 10309  003786                     l1153:
 10310                           
 10311                           ; BSR set to: 0
 10312  003786  0100               	movlb	0	; () banked
 10313  003788  B1A2               	btfsc	___ftpack@exp& (0+255),0,b
 10314  00378A  D003               	goto	l4904
 10315                           
 10316                           ; BSR set to: 0
 10317  00378C  0100               	movlb	0	; () banked
 10318  00378E  9FA0               	bcf	(___ftpack@arg+1)& (0+255),7,b
 10319  003790  D000               	goto	l4904
 10320  003792                     l4904:
 10321                           
 10322                           ; BSR set to: 0
 10323  003792  0100               	movlb	0	; () banked
 10324  003794  90D8               	bcf	status,0,c
 10325  003796  33A2               	rrcf	___ftpack@exp& (0+255),f,b
 10326  003798  0100               	movlb	0	; () banked
 10327  00379A  51A2               	movf	___ftpack@exp& (0+255),w,b
 10328  00379C  0100               	movlb	0	; () banked
 10329  00379E  13A1               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 10330                           
 10331                           ; BSR set to: 0
 10332  0037A0  0100               	movlb	0	; () banked
 10333  0037A2  51A3               	movf	___ftpack@sign& (0+255),w,b
 10334  0037A4  0100               	movlb	0	; () banked
 10335  0037A6  B4D8               	btfsc	status,2,c
 10336  0037A8  D003               	goto	l4910
 10337                           
 10338                           ; BSR set to: 0
 10339  0037AA  0100               	movlb	0	; () banked
 10340  0037AC  8FA1               	bsf	(___ftpack@arg+2)& (0+255),7,b
 10341  0037AE  D000               	goto	l4910
 10342  0037B0                     l4910:
 10343                           
 10344                           ; BSR set to: 0
 10345  0037B0  C09F  F09F         	movff	___ftpack@arg,?___ftpack
 10346  0037B4  C0A0  F0A0         	movff	___ftpack@arg+1,?___ftpack+1
 10347  0037B8  C0A1  F0A1         	movff	___ftpack@arg+2,?___ftpack+2
 10348  0037BC  D000               	goto	l1142
 10349  0037BE                     l1142:
 10350                           
 10351                           ; BSR set to: 0
 10352  0037BE  0012               	return		;funcret
 10353  0037C0                     __end_of___ftpack:
 10354                           	opt stack 0
 10355                           tblptru	equ	0xFF8
 10356                           tblptrh	equ	0xFF7
 10357                           tblptrl	equ	0xFF6
 10358                           tablat	equ	0xFF5
 10359                           postinc0	equ	0xFEE
 10360                           wreg	equ	0xFE8
 10361                           postinc1	equ	0xFE6
 10362                           postdec1	equ	0xFE5
 10363                           plusw1	equ	0xFE3
 10364                           fsr1h	equ	0xFE2
 10365                           fsr1l	equ	0xFE1
 10366                           postinc2	equ	0xFDE
 10367                           postdec2	equ	0xFDD
 10368                           plusw2	equ	0xFDB
 10369                           fsr2h	equ	0xFDA
 10370                           fsr2l	equ	0xFD9
 10371                           status	equ	0xFD8
 10372                           
 10373 ;; *************** function _ReadADC *****************
 10374 ;; Defined at:
 10375 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcread.c"
 10376 ;; Parameters:    Size  Location     Type
 10377 ;;		None
 10378 ;; Auto vars:     Size  Location     Type
 10379 ;;		None
 10380 ;; Return value:  Size  Location     Type
 10381 ;;                  2   31[BANK0 ] int 
 10382 ;; Registers used:
 10383 ;;		wreg, status,2
 10384 ;; Tracked objects:
 10385 ;;		On entry : 0/0
 10386 ;;		On exit  : 0/0
 10387 ;;		Unchanged: 0/0
 10388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10389 ;;      Params:         0       2       0       0       0       0       0
 10390 ;;      Locals:         0       0       0       0       0       0       0
 10391 ;;      Temps:          0       2       0       0       0       0       0
 10392 ;;      Totals:         0       4       0       0       0       0       0
 10393 ;;Total ram usage:        4 bytes
 10394 ;; Hardware stack levels used:    1
 10395 ;; Hardware stack levels required when called:    5
 10396 ;; This function calls:
 10397 ;;		Nothing
 10398 ;; This function is called by:
 10399 ;;		_Read_X
 10400 ;;		_Read_Y
 10401 ;;		_Read_Z
 10402 ;; This function uses a non-reentrant model
 10403 ;;
 10404                           
 10405                           	psect	text24
 10406  0044BA                     __ptext24:
 10407                           	opt stack 0
 10408  0044BA                     _ReadADC:
 10409                           	opt stack 23
 10410                           
 10411                           ; BSR set to: 0
 10412                           ;incstack = 0
 10413  0044BA  50C4               	movf	4036,w,c	;volatile
 10414  0044BC  0100               	movlb	0	; () banked
 10415  0044BE  6FA1               	movwf	??_ReadADC& (0+255),b
 10416  0044C0  50C3               	movf	4035,w,c	;volatile
 10417  0044C2  0100               	movlb	0	; () banked
 10418  0044C4  6F9F               	movwf	?_ReadADC& (0+255),b
 10419  0044C6  C0A1  F0A0         	movff	??_ReadADC,?_ReadADC+1
 10420  0044CA  D000               	goto	l704
 10421  0044CC                     l704:
 10422                           
 10423                           ; BSR set to: 0
 10424  0044CC  0012               	return		;funcret
 10425  0044CE                     __end_of_ReadADC:
 10426                           	opt stack 0
 10427                           tblptru	equ	0xFF8
 10428                           tblptrh	equ	0xFF7
 10429                           tblptrl	equ	0xFF6
 10430                           tablat	equ	0xFF5
 10431                           postinc0	equ	0xFEE
 10432                           wreg	equ	0xFE8
 10433                           postinc1	equ	0xFE6
 10434                           postdec1	equ	0xFE5
 10435                           plusw1	equ	0xFE3
 10436                           fsr1h	equ	0xFE2
 10437                           fsr1l	equ	0xFE1
 10438                           postinc2	equ	0xFDE
 10439                           postdec2	equ	0xFDD
 10440                           plusw2	equ	0xFDB
 10441                           fsr2h	equ	0xFDA
 10442                           fsr2l	equ	0xFD9
 10443                           status	equ	0xFD8
 10444                           
 10445 ;; *************** function _Delay10TCYx *****************
 10446 ;; Defined at:
 10447 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d10tcyx.c"
 10448 ;; Parameters:    Size  Location     Type
 10449 ;;  unit            1    wreg     unsigned char 
 10450 ;; Auto vars:     Size  Location     Type
 10451 ;;  unit            1   31[BANK0 ] unsigned char 
 10452 ;; Return value:  Size  Location     Type
 10453 ;;		None               void
 10454 ;; Registers used:
 10455 ;;		wreg
 10456 ;; Tracked objects:
 10457 ;;		On entry : 0/0
 10458 ;;		On exit  : 0/0
 10459 ;;		Unchanged: 0/0
 10460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10461 ;;      Params:         0       0       0       0       0       0       0
 10462 ;;      Locals:         0       1       0       0       0       0       0
 10463 ;;      Temps:          0       0       0       0       0       0       0
 10464 ;;      Totals:         0       1       0       0       0       0       0
 10465 ;;Total ram usage:        1 bytes
 10466 ;; Hardware stack levels used:    1
 10467 ;; Hardware stack levels required when called:    5
 10468 ;; This function calls:
 10469 ;;		Nothing
 10470 ;; This function is called by:
 10471 ;;		_Read_X
 10472 ;;		_Read_Y
 10473 ;;		_Read_Z
 10474 ;; This function uses a non-reentrant model
 10475 ;;
 10476                           
 10477                           	psect	text25
 10478  00448E                     __ptext25:
 10479                           	opt stack 0
 10480  00448E                     _Delay10TCYx:
 10481                           	opt stack 23
 10482                           
 10483                           ; BSR set to: 0
 10484                           ;incstack = 0
 10485                           ;Delay10TCYx@unit stored from wreg
 10486  00448E  0100               	movlb	0	; () banked
 10487  004490  6F9F               	movwf	Delay10TCYx@unit& (0+255),b
 10488  004492                     
 10489                           ; BSR set to: 0
 10490  004492  0E03               	movlw	3
 10491  004494                     u7227:
 10492  004494  2EE8               	decfsz	wreg,f,c
 10493  004496  D7FE               	goto	u7227
 10494  004498  F000               	nop	
 10495  00449A  0100               	movlb	0	; () banked
 10496  00449C  2F9F               	decfsz	Delay10TCYx@unit& (0+255),f,b
 10497  00449E  D7F9               	goto	l5390
 10498  0044A0  D000               	goto	l1045
 10499  0044A2                     l1045:
 10500                           
 10501                           ; BSR set to: 0
 10502  0044A2  0012               	return		;funcret
 10503  0044A4                     __end_of_Delay10TCYx:
 10504                           	opt stack 0
 10505                           tblptru	equ	0xFF8
 10506                           tblptrh	equ	0xFF7
 10507                           tblptrl	equ	0xFF6
 10508                           tablat	equ	0xFF5
 10509                           postinc0	equ	0xFEE
 10510                           wreg	equ	0xFE8
 10511                           postinc1	equ	0xFE6
 10512                           postdec1	equ	0xFE5
 10513                           plusw1	equ	0xFE3
 10514                           fsr1h	equ	0xFE2
 10515                           fsr1l	equ	0xFE1
 10516                           postinc2	equ	0xFDE
 10517                           postdec2	equ	0xFDD
 10518                           plusw2	equ	0xFDB
 10519                           fsr2h	equ	0xFDA
 10520                           fsr2l	equ	0xFD9
 10521                           status	equ	0xFD8
 10522                           
 10523 ;; *************** function _ConvertADC *****************
 10524 ;; Defined at:
 10525 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcconv.c"
 10526 ;; Parameters:    Size  Location     Type
 10527 ;;		None
 10528 ;; Auto vars:     Size  Location     Type
 10529 ;;		None
 10530 ;; Return value:  Size  Location     Type
 10531 ;;		None               void
 10532 ;; Registers used:
 10533 ;;		None
 10534 ;; Tracked objects:
 10535 ;;		On entry : 0/0
 10536 ;;		On exit  : 0/0
 10537 ;;		Unchanged: 0/0
 10538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10539 ;;      Params:         0       0       0       0       0       0       0
 10540 ;;      Locals:         0       0       0       0       0       0       0
 10541 ;;      Temps:          0       0       0       0       0       0       0
 10542 ;;      Totals:         0       0       0       0       0       0       0
 10543 ;;Total ram usage:        0 bytes
 10544 ;; Hardware stack levels used:    1
 10545 ;; Hardware stack levels required when called:    5
 10546 ;; This function calls:
 10547 ;;		Nothing
 10548 ;; This function is called by:
 10549 ;;		_Read_X
 10550 ;;		_Read_Y
 10551 ;;		_Read_Z
 10552 ;; This function uses a non-reentrant model
 10553 ;;
 10554                           
 10555                           	psect	text26
 10556  004538                     __ptext26:
 10557                           	opt stack 0
 10558  004538                     _ConvertADC:
 10559                           	opt stack 23
 10560                           
 10561                           ; BSR set to: 0
 10562                           ;incstack = 0
 10563  004538  82C2               	bsf	4034,1,c	;volatile
 10564  00453A  0012               	return		;funcret
 10565  00453C                     __end_of_ConvertADC:
 10566                           	opt stack 0
 10567                           tblptru	equ	0xFF8
 10568                           tblptrh	equ	0xFF7
 10569                           tblptrl	equ	0xFF6
 10570                           tablat	equ	0xFF5
 10571                           postinc0	equ	0xFEE
 10572                           wreg	equ	0xFE8
 10573                           postinc1	equ	0xFE6
 10574                           postdec1	equ	0xFE5
 10575                           plusw1	equ	0xFE3
 10576                           fsr1h	equ	0xFE2
 10577                           fsr1l	equ	0xFE1
 10578                           postinc2	equ	0xFDE
 10579                           postdec2	equ	0xFDD
 10580                           plusw2	equ	0xFDB
 10581                           fsr2h	equ	0xFDA
 10582                           fsr2l	equ	0xFD9
 10583                           status	equ	0xFD8
 10584                           
 10585 ;; *************** function _BusyADC *****************
 10586 ;; Defined at:
 10587 ;;		line 26 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcbusy.c"
 10588 ;; Parameters:    Size  Location     Type
 10589 ;;		None
 10590 ;; Auto vars:     Size  Location     Type
 10591 ;;		None
 10592 ;; Return value:  Size  Location     Type
 10593 ;;                  1    wreg      unsigned char 
 10594 ;; Registers used:
 10595 ;;		wreg
 10596 ;; Tracked objects:
 10597 ;;		On entry : 0/0
 10598 ;;		On exit  : 0/0
 10599 ;;		Unchanged: 0/0
 10600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10601 ;;      Params:         0       0       0       0       0       0       0
 10602 ;;      Locals:         0       0       0       0       0       0       0
 10603 ;;      Temps:          0       0       0       0       0       0       0
 10604 ;;      Totals:         0       0       0       0       0       0       0
 10605 ;;Total ram usage:        0 bytes
 10606 ;; Hardware stack levels used:    1
 10607 ;; Hardware stack levels required when called:    5
 10608 ;; This function calls:
 10609 ;;		Nothing
 10610 ;; This function is called by:
 10611 ;;		_Read_X
 10612 ;;		_Read_Y
 10613 ;;		_Read_Z
 10614 ;; This function uses a non-reentrant model
 10615 ;;
 10616                           
 10617                           	psect	text27
 10618  004502                     __ptext27:
 10619                           	opt stack 0
 10620  004502                     _BusyADC:
 10621                           	opt stack 23
 10622                           
 10623                           ;incstack = 0
 10624  004502  A2C2               	btfss	4034,1,c	;volatile
 10625  004504  D002               	goto	u6060
 10626  004506  0E01               	movlw	1
 10627  004508  D002               	goto	l692
 10628  00450A                     u6060:
 10629  00450A  0E00               	movlw	0
 10630  00450C  D000               	goto	l692
 10631  00450E                     l692:
 10632  00450E  0012               	return		;funcret
 10633  004510                     __end_of_BusyADC:
 10634                           	opt stack 0
 10635                           tblptru	equ	0xFF8
 10636                           tblptrh	equ	0xFF7
 10637                           tblptrl	equ	0xFF6
 10638                           tablat	equ	0xFF5
 10639                           postinc0	equ	0xFEE
 10640                           wreg	equ	0xFE8
 10641                           postinc1	equ	0xFE6
 10642                           postdec1	equ	0xFE5
 10643                           plusw1	equ	0xFE3
 10644                           fsr1h	equ	0xFE2
 10645                           fsr1l	equ	0xFE1
 10646                           postinc2	equ	0xFDE
 10647                           postdec2	equ	0xFDD
 10648                           plusw2	equ	0xFDB
 10649                           fsr2h	equ	0xFDA
 10650                           fsr2l	equ	0xFD9
 10651                           status	equ	0xFD8
 10652                           
 10653 ;; *************** function _PumpDetect *****************
 10654 ;; Defined at:
 10655 ;;		line 88 in file "AccelerationFuncs.c"
 10656 ;; Parameters:    Size  Location     Type
 10657 ;;		None
 10658 ;; Auto vars:     Size  Location     Type
 10659 ;;		None
 10660 ;; Return value:  Size  Location     Type
 10661 ;;                  2   35[BANK0 ] int 
 10662 ;; Registers used:
 10663 ;;		wreg, status,2, status,0, cstack
 10664 ;; Tracked objects:
 10665 ;;		On entry : 0/0
 10666 ;;		On exit  : 0/0
 10667 ;;		Unchanged: 0/0
 10668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10669 ;;      Params:         0       2       0       0       0       0       0
 10670 ;;      Locals:         0       0       0       0       0       0       0
 10671 ;;      Temps:          0       4       0       0       0       0       0
 10672 ;;      Totals:         0       6       0       0       0       0       0
 10673 ;;Total ram usage:        6 bytes
 10674 ;; Hardware stack levels used:    1
 10675 ;; Hardware stack levels required when called:    6
 10676 ;; This function calls:
 10677 ;;		_abs
 10678 ;; This function is called by:
 10679 ;;		_main
 10680 ;; This function uses a non-reentrant model
 10681 ;;
 10682                           
 10683                           	psect	text28
 10684  002EB4                     __ptext28:
 10685                           	opt stack 0
 10686  002EB4                     _PumpDetect:
 10687                           	opt stack 24
 10688                           
 10689                           ;AccelerationFuncs.c: 90: if (offcount>offcountmax+1)
 10690                           
 10691                           ;incstack = 0
 10692  002EB4  0E01               	movlw	1
 10693  002EB6  245A               	addwf	_offcountmax,w,c
 10694  002EB8  0100               	movlb	0	; () banked
 10695  002EBA  6FA5               	movwf	??_PumpDetect& (0+255),b
 10696  002EBC  0E00               	movlw	0
 10697  002EBE  205B               	addwfc	_offcountmax+1,w,c
 10698  002EC0  0100               	movlb	0	; () banked
 10699  002EC2  6FA6               	movwf	(??_PumpDetect+1)& (0+255),b
 10700  002EC4  0100               	movlb	0	; () banked
 10701  002EC6  6BA7               	clrf	(??_PumpDetect+2)& (0+255),b
 10702  002EC8  0100               	movlb	0	; () banked
 10703  002ECA  6BA8               	clrf	(??_PumpDetect+3)& (0+255),b
 10704  002ECC  0101               	movlb	1	; () banked
 10705  002ECE  51AE               	movf	_offcount& (0+255),w,b
 10706  002ED0  0100               	movlb	0	; () banked
 10707  002ED2  5DA5               	subwf	??_PumpDetect& (0+255),w,b
 10708  002ED4  0101               	movlb	1	; () banked
 10709  002ED6  51AF               	movf	(_offcount+1)& (0+255),w,b
 10710  002ED8  0100               	movlb	0	; () banked
 10711  002EDA  59A6               	subwfb	(??_PumpDetect+1)& (0+255),w,b
 10712  002EDC  0101               	movlb	1	; () banked
 10713  002EDE  51B0               	movf	(_offcount+2)& (0+255),w,b
 10714  002EE0  0100               	movlb	0	; () banked
 10715  002EE2  59A7               	subwfb	(??_PumpDetect+2)& (0+255),w,b
 10716  002EE4  0101               	movlb	1	; () banked
 10717  002EE6  51B1               	movf	(_offcount+3)& (0+255),w,b
 10718  002EE8  0100               	movlb	0	; () banked
 10719  002EEA  59A8               	subwfb	(??_PumpDetect+3)& (0+255),w,b
 10720  002EEC  B0D8               	btfsc	status,0,c
 10721  002EEE  D010               	goto	l4232
 10722                           
 10723                           ; BSR set to: 0
 10724                           ;AccelerationFuncs.c: 91: {
 10725                           ;AccelerationFuncs.c: 92: offcount=offcountmax+1;
 10726  002EF0  0E01               	movlw	1
 10727  002EF2  245A               	addwf	_offcountmax,w,c
 10728  002EF4  0100               	movlb	0	; () banked
 10729  002EF6  6FA5               	movwf	??_PumpDetect& (0+255),b
 10730  002EF8  0E00               	movlw	0
 10731  002EFA  205B               	addwfc	_offcountmax+1,w,c
 10732  002EFC  0100               	movlb	0	; () banked
 10733  002EFE  6FA6               	movwf	(??_PumpDetect+1)& (0+255),b
 10734  002F00  C0A5  F1AE         	movff	??_PumpDetect,_offcount
 10735  002F04  C0A6  F1AF         	movff	??_PumpDetect+1,_offcount+1
 10736  002F08  0101               	movlb	1	; () banked
 10737  002F0A  6BB0               	clrf	(_offcount+2)& (0+255),b
 10738  002F0C  6BB1               	clrf	(_offcount+3)& (0+255),b
 10739  002F0E  D000               	goto	l4232
 10740  002F10                     l4232:
 10741                           
 10742                           ;AccelerationFuncs.c: 93: }
 10743                           ;AccelerationFuncs.c: 96: if ((abs(xlongavg-xshortavg)>onthresh)||(abs(ylongavg-yshortav
      +                          g)>onthresh)||(abs(zlongavg-zshortavg)>onthresh))
 10744  002F10  C1B6  F0A5         	movff	_xshortavg,??_PumpDetect
 10745  002F14  C1B7  F0A6         	movff	_xshortavg+1,??_PumpDetect+1
 10746  002F18  0100               	movlb	0	; () banked
 10747  002F1A  1FA5               	comf	??_PumpDetect& (0+255),f,b
 10748  002F1C  1FA6               	comf	(??_PumpDetect+1)& (0+255),f,b
 10749  002F1E  4BA5               	infsnz	??_PumpDetect& (0+255),f,b
 10750  002F20  2BA6               	incf	(??_PumpDetect+1)& (0+255),f,b
 10751  002F22  0101               	movlb	1	; () banked
 10752  002F24  51B2               	movf	_xlongavg& (0+255),w,b
 10753  002F26  0100               	movlb	0	; () banked
 10754  002F28  25A5               	addwf	??_PumpDetect& (0+255),w,b
 10755  002F2A  0100               	movlb	0	; () banked
 10756  002F2C  6F9F               	movwf	abs@a& (0+255),b
 10757  002F2E  0101               	movlb	1	; () banked
 10758  002F30  51B3               	movf	(_xlongavg+1)& (0+255),w,b
 10759  002F32  0100               	movlb	0	; () banked
 10760  002F34  21A6               	addwfc	(??_PumpDetect+1)& (0+255),w,b
 10761  002F36  0100               	movlb	0	; () banked
 10762  002F38  6FA0               	movwf	(abs@a+1)& (0+255),b
 10763  002F3A  ECBD  F021         	call	_abs	;wreg free
 10764  002F3E  0100               	movlb	0	; () banked
 10765  002F40  519F               	movf	?_abs& (0+255),w,b
 10766  002F42  5C5C               	subwf	_onthresh,w,c
 10767  002F44  505D               	movf	_onthresh+1,w,c
 10768  002F46  0A80               	xorlw	128
 10769  002F48  0100               	movlb	0	; () banked
 10770  002F4A  6FA7               	movwf	(??_PumpDetect+2)& (0+255),b
 10771  002F4C  0100               	movlb	0	; () banked
 10772  002F4E  51A0               	movf	(?_abs+1)& (0+255),w,b
 10773  002F50  0A80               	xorlw	128
 10774  002F52  0100               	movlb	0	; () banked
 10775  002F54  59A7               	subwfb	(??_PumpDetect+2)& (0+255),w,b
 10776  002F56  A0D8               	btfss	status,0,c
 10777  002F58  D04A               	goto	l4238
 10778                           
 10779                           ; BSR set to: 0
 10780  002F5A  C1BE  F0A5         	movff	_yshortavg,??_PumpDetect
 10781  002F5E  C1BF  F0A6         	movff	_yshortavg+1,??_PumpDetect+1
 10782  002F62  0100               	movlb	0	; () banked
 10783  002F64  1FA5               	comf	??_PumpDetect& (0+255),f,b
 10784  002F66  1FA6               	comf	(??_PumpDetect+1)& (0+255),f,b
 10785  002F68  4BA5               	infsnz	??_PumpDetect& (0+255),f,b
 10786  002F6A  2BA6               	incf	(??_PumpDetect+1)& (0+255),f,b
 10787  002F6C  0101               	movlb	1	; () banked
 10788  002F6E  51BA               	movf	_ylongavg& (0+255),w,b
 10789  002F70  0100               	movlb	0	; () banked
 10790  002F72  25A5               	addwf	??_PumpDetect& (0+255),w,b
 10791  002F74  0100               	movlb	0	; () banked
 10792  002F76  6F9F               	movwf	abs@a& (0+255),b
 10793  002F78  0101               	movlb	1	; () banked
 10794  002F7A  51BB               	movf	(_ylongavg+1)& (0+255),w,b
 10795  002F7C  0100               	movlb	0	; () banked
 10796  002F7E  21A6               	addwfc	(??_PumpDetect+1)& (0+255),w,b
 10797  002F80  0100               	movlb	0	; () banked
 10798  002F82  6FA0               	movwf	(abs@a+1)& (0+255),b
 10799  002F84  ECBD  F021         	call	_abs	;wreg free
 10800  002F88  0100               	movlb	0	; () banked
 10801  002F8A  519F               	movf	?_abs& (0+255),w,b
 10802  002F8C  5C5C               	subwf	_onthresh,w,c
 10803  002F8E  505D               	movf	_onthresh+1,w,c
 10804  002F90  0A80               	xorlw	128
 10805  002F92  0100               	movlb	0	; () banked
 10806  002F94  6FA7               	movwf	(??_PumpDetect+2)& (0+255),b
 10807  002F96  0100               	movlb	0	; () banked
 10808  002F98  51A0               	movf	(?_abs+1)& (0+255),w,b
 10809  002F9A  0A80               	xorlw	128
 10810  002F9C  0100               	movlb	0	; () banked
 10811  002F9E  59A7               	subwfb	(??_PumpDetect+2)& (0+255),w,b
 10812  002FA0  A0D8               	btfss	status,0,c
 10813  002FA2  D025               	goto	l4238
 10814                           
 10815                           ; BSR set to: 0
 10816  002FA4  C1C6  F0A5         	movff	_zshortavg,??_PumpDetect
 10817  002FA8  C1C7  F0A6         	movff	_zshortavg+1,??_PumpDetect+1
 10818  002FAC  0100               	movlb	0	; () banked
 10819  002FAE  1FA5               	comf	??_PumpDetect& (0+255),f,b
 10820  002FB0  1FA6               	comf	(??_PumpDetect+1)& (0+255),f,b
 10821  002FB2  4BA5               	infsnz	??_PumpDetect& (0+255),f,b
 10822  002FB4  2BA6               	incf	(??_PumpDetect+1)& (0+255),f,b
 10823  002FB6  0101               	movlb	1	; () banked
 10824  002FB8  51C2               	movf	_zlongavg& (0+255),w,b
 10825  002FBA  0100               	movlb	0	; () banked
 10826  002FBC  25A5               	addwf	??_PumpDetect& (0+255),w,b
 10827  002FBE  0100               	movlb	0	; () banked
 10828  002FC0  6F9F               	movwf	abs@a& (0+255),b
 10829  002FC2  0101               	movlb	1	; () banked
 10830  002FC4  51C3               	movf	(_zlongavg+1)& (0+255),w,b
 10831  002FC6  0100               	movlb	0	; () banked
 10832  002FC8  21A6               	addwfc	(??_PumpDetect+1)& (0+255),w,b
 10833  002FCA  0100               	movlb	0	; () banked
 10834  002FCC  6FA0               	movwf	(abs@a+1)& (0+255),b
 10835  002FCE  ECBD  F021         	call	_abs	;wreg free
 10836  002FD2  0100               	movlb	0	; () banked
 10837  002FD4  519F               	movf	?_abs& (0+255),w,b
 10838  002FD6  5C5C               	subwf	_onthresh,w,c
 10839  002FD8  505D               	movf	_onthresh+1,w,c
 10840  002FDA  0A80               	xorlw	128
 10841  002FDC  0100               	movlb	0	; () banked
 10842  002FDE  6FA7               	movwf	(??_PumpDetect+2)& (0+255),b
 10843  002FE0  0100               	movlb	0	; () banked
 10844  002FE2  51A0               	movf	(?_abs+1)& (0+255),w,b
 10845  002FE4  0A80               	xorlw	128
 10846  002FE6  0100               	movlb	0	; () banked
 10847  002FE8  59A7               	subwfb	(??_PumpDetect+2)& (0+255),w,b
 10848  002FEA  B0D8               	btfsc	status,0,c
 10849  002FEC  D00B               	goto	l4244
 10850  002FEE                     l4238:
 10851                           
 10852                           ; BSR set to: 0
 10853                           ;AccelerationFuncs.c: 97: {
 10854                           ;AccelerationFuncs.c: 98: offcount=0;
 10855  002FEE  0E00               	movlw	0
 10856  002FF0  0101               	movlb	1	; () banked
 10857  002FF2  6FAE               	movwf	_offcount& (0+255),b
 10858  002FF4  0E00               	movlw	0
 10859  002FF6  6FAF               	movwf	(_offcount+1)& (0+255),b
 10860  002FF8  0E00               	movlw	0
 10861  002FFA  6FB0               	movwf	(_offcount+2)& (0+255),b
 10862  002FFC  0E00               	movlw	0
 10863  002FFE  6FB1               	movwf	(_offcount+3)& (0+255),b
 10864  003000  D02A               	goto	l4254
 10865                           
 10866                           ; BSR set to: 0
 10867                           ;AccelerationFuncs.c: 100: }
 10868                           
 10869                           ; BSR set to: 0
 10870                           
 10871                           ;AccelerationFuncs.c: 99: return 1;
 10872  003002  D02F               	goto	l577
 10873  003004                     l4244:
 10874                           
 10875                           ; BSR set to: 0
 10876                           ;AccelerationFuncs.c: 101: else
 10877                           ;AccelerationFuncs.c: 102: {
 10878                           ;AccelerationFuncs.c: 103: if (offcount>offcountmax)
 10879  003004  505A               	movf	_offcountmax,w,c
 10880  003006  0100               	movlb	0	; () banked
 10881  003008  6FA5               	movwf	??_PumpDetect& (0+255),b
 10882  00300A  505B               	movf	_offcountmax+1,w,c
 10883  00300C  0100               	movlb	0	; () banked
 10884  00300E  6FA6               	movwf	(??_PumpDetect+1)& (0+255),b
 10885  003010  0100               	movlb	0	; () banked
 10886  003012  6BA7               	clrf	(??_PumpDetect+2)& (0+255),b
 10887  003014  0100               	movlb	0	; () banked
 10888  003016  6BA8               	clrf	(??_PumpDetect+3)& (0+255),b
 10889  003018  0101               	movlb	1	; () banked
 10890  00301A  51AE               	movf	_offcount& (0+255),w,b
 10891  00301C  0100               	movlb	0	; () banked
 10892  00301E  5DA5               	subwf	??_PumpDetect& (0+255),w,b
 10893  003020  0101               	movlb	1	; () banked
 10894  003022  51AF               	movf	(_offcount+1)& (0+255),w,b
 10895  003024  0100               	movlb	0	; () banked
 10896  003026  59A6               	subwfb	(??_PumpDetect+1)& (0+255),w,b
 10897  003028  0101               	movlb	1	; () banked
 10898  00302A  51B0               	movf	(_offcount+2)& (0+255),w,b
 10899  00302C  0100               	movlb	0	; () banked
 10900  00302E  59A7               	subwfb	(??_PumpDetect+2)& (0+255),w,b
 10901  003030  0101               	movlb	1	; () banked
 10902  003032  51B1               	movf	(_offcount+3)& (0+255),w,b
 10903  003034  0100               	movlb	0	; () banked
 10904  003036  59A8               	subwfb	(??_PumpDetect+3)& (0+255),w,b
 10905  003038  B0D8               	btfsc	status,0,c
 10906  00303A  D006               	goto	l4252
 10907                           
 10908                           ; BSR set to: 0
 10909                           ;AccelerationFuncs.c: 104: {
 10910                           ;AccelerationFuncs.c: 106: return 0;
 10911  00303C  0E00               	movlw	0
 10912  00303E  0100               	movlb	0	; () banked
 10913  003040  6FA4               	movwf	(?_PumpDetect+1)& (0+255),b
 10914  003042  0E00               	movlw	0
 10915  003044  D00C               	goto	L5
 10916                           
 10917                           ; BSR set to: 0
 10918                           ;AccelerationFuncs.c: 107: }
 10919                           
 10920                           ; BSR set to: 0
 10921  003046  D00D               	goto	l577
 10922  003048                     l4252:
 10923                           
 10924                           ; BSR set to: 0
 10925  003048  0E01               	movlw	1
 10926  00304A  0101               	movlb	1	; () banked
 10927  00304C  27AE               	addwf	_offcount& (0+255),f,b
 10928  00304E  0E00               	movlw	0
 10929  003050  23AF               	addwfc	(_offcount+1)& (0+255),f,b
 10930  003052  23B0               	addwfc	(_offcount+2)& (0+255),f,b
 10931  003054  23B1               	addwfc	(_offcount+3)& (0+255),f,b
 10932  003056                     l4254:
 10933                           
 10934                           ; BSR set to: 1
 10935                           ;AccelerationFuncs.c: 112: return 1;
 10936  003056  0E00               	movlw	0
 10937  003058  0100               	movlb	0	; () banked
 10938  00305A  6FA4               	movwf	(?_PumpDetect+1)& (0+255),b
 10939  00305C  0E01               	movlw	1
 10940  00305E                     L5:
 10941  00305E  6FA3               	movwf	?_PumpDetect& (0+255),b
 10942                           
 10943                           ; BSR set to: 0
 10944                           
 10945                           ; BSR set to: 0
 10946  003060  D000               	goto	l577
 10947  003062                     l577:
 10948                           
 10949                           ; BSR set to: 0
 10950  003062  0012               	return		;funcret
 10951  003064                     __end_of_PumpDetect:
 10952                           	opt stack 0
 10953                           tblptru	equ	0xFF8
 10954                           tblptrh	equ	0xFF7
 10955                           tblptrl	equ	0xFF6
 10956                           tablat	equ	0xFF5
 10957                           postinc0	equ	0xFEE
 10958                           wreg	equ	0xFE8
 10959                           postinc1	equ	0xFE6
 10960                           postdec1	equ	0xFE5
 10961                           plusw1	equ	0xFE3
 10962                           fsr1h	equ	0xFE2
 10963                           fsr1l	equ	0xFE1
 10964                           postinc2	equ	0xFDE
 10965                           postdec2	equ	0xFDD
 10966                           plusw2	equ	0xFDB
 10967                           fsr2h	equ	0xFDA
 10968                           fsr2l	equ	0xFD9
 10969                           status	equ	0xFD8
 10970                           
 10971 ;; *************** function _abs *****************
 10972 ;; Defined at:
 10973 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\abs.c"
 10974 ;; Parameters:    Size  Location     Type
 10975 ;;  a               2   31[BANK0 ] int 
 10976 ;; Auto vars:     Size  Location     Type
 10977 ;;		None
 10978 ;; Return value:  Size  Location     Type
 10979 ;;                  2   31[BANK0 ] int 
 10980 ;; Registers used:
 10981 ;;		wreg, status,2, status,0
 10982 ;; Tracked objects:
 10983 ;;		On entry : 0/0
 10984 ;;		On exit  : 0/0
 10985 ;;		Unchanged: 0/0
 10986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10987 ;;      Params:         0       2       0       0       0       0       0
 10988 ;;      Locals:         0       0       0       0       0       0       0
 10989 ;;      Temps:          0       2       0       0       0       0       0
 10990 ;;      Totals:         0       4       0       0       0       0       0
 10991 ;;Total ram usage:        4 bytes
 10992 ;; Hardware stack levels used:    1
 10993 ;; Hardware stack levels required when called:    5
 10994 ;; This function calls:
 10995 ;;		Nothing
 10996 ;; This function is called by:
 10997 ;;		_PumpDetect
 10998 ;; This function uses a non-reentrant model
 10999 ;;
 11000                           
 11001                           	psect	text29
 11002  00437A                     __ptext29:
 11003                           	opt stack 0
 11004  00437A                     _abs:
 11005                           	opt stack 24
 11006                           
 11007                           ; BSR set to: 0
 11008                           ;incstack = 0
 11009  00437A  0100               	movlb	0	; () banked
 11010  00437C  AFA0               	btfss	(abs@a+1)& (0+255),7,b
 11011  00437E  D00E               	goto	l841
 11012                           
 11013                           ; BSR set to: 0
 11014  004380  C09F  F0A1         	movff	abs@a,??_abs
 11015  004384  C0A0  F0A2         	movff	abs@a+1,??_abs+1
 11016  004388  0100               	movlb	0	; () banked
 11017  00438A  1FA1               	comf	??_abs& (0+255),f,b
 11018  00438C  1FA2               	comf	(??_abs+1)& (0+255),f,b
 11019  00438E  4BA1               	infsnz	??_abs& (0+255),f,b
 11020  004390  2BA2               	incf	(??_abs+1)& (0+255),f,b
 11021  004392  C0A1  F09F         	movff	??_abs,?_abs
 11022  004396  C0A2  F0A0         	movff	??_abs+1,?_abs+1
 11023  00439A  D004               	goto	l842
 11024  00439C                     l841:
 11025                           
 11026                           ; BSR set to: 0
 11027  00439C  C09F  F09F         	movff	abs@a,?_abs
 11028  0043A0  C0A0  F0A0         	movff	abs@a+1,?_abs+1
 11029  0043A4                     l842:
 11030                           
 11031                           ; BSR set to: 0
 11032  0043A4  0012               	return		;funcret
 11033  0043A6                     __end_of_abs:
 11034                           	opt stack 0
 11035                           tblptru	equ	0xFF8
 11036                           tblptrh	equ	0xFF7
 11037                           tblptrl	equ	0xFF6
 11038                           tablat	equ	0xFF5
 11039                           postinc0	equ	0xFEE
 11040                           wreg	equ	0xFE8
 11041                           postinc1	equ	0xFE6
 11042                           postdec1	equ	0xFE5
 11043                           plusw1	equ	0xFE3
 11044                           fsr1h	equ	0xFE2
 11045                           fsr1l	equ	0xFE1
 11046                           postinc2	equ	0xFDE
 11047                           postdec2	equ	0xFDD
 11048                           plusw2	equ	0xFDB
 11049                           fsr2h	equ	0xFDA
 11050                           fsr2l	equ	0xFD9
 11051                           status	equ	0xFD8
 11052                           
 11053 ;; *************** function _MessageRoutine *****************
 11054 ;; Defined at:
 11055 ;;		line 127 in file "SerialFuncs.c"
 11056 ;; Parameters:    Size  Location     Type
 11057 ;;		None
 11058 ;; Auto vars:     Size  Location     Type
 11059 ;;  str2           20   20[BANK1 ] unsigned char [20]
 11060 ;;  str1           20    0[BANK1 ] unsigned char [20]
 11061 ;;  ret             2   40[BANK1 ] int 
 11062 ;; Return value:  Size  Location     Type
 11063 ;;		None               void
 11064 ;; Registers used:
 11065 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11066 ;; Tracked objects:
 11067 ;;		On entry : 0/0
 11068 ;;		On exit  : 0/0
 11069 ;;		Unchanged: 0/0
 11070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11071 ;;      Params:         0       0       0       0       0       0       0
 11072 ;;      Locals:         0       0      42       0       0       0       0
 11073 ;;      Temps:          0       0       0       0       0       0       0
 11074 ;;      Totals:         0       0      42       0       0       0       0
 11075 ;;Total ram usage:       42 bytes
 11076 ;; Hardware stack levels used:    1
 11077 ;; Hardware stack levels required when called:    8
 11078 ;; This function calls:
 11079 ;;		_Delay1KTCYx
 11080 ;;		_SetDateTime
 11081 ;;		_atoi
 11082 ;;		_printf
 11083 ;;		_strcmp
 11084 ;;		_strcpy
 11085 ;; This function is called by:
 11086 ;;		_main
 11087 ;; This function uses a non-reentrant model
 11088 ;;
 11089                           
 11090                           	psect	text30
 11091  000BCA                     __ptext30:
 11092                           	opt stack 0
 11093  000BCA                     _MessageRoutine:
 11094                           	opt stack 22
 11095                           
 11096                           ;SerialFuncs.c: 130: char str1[20];
 11097                           ;SerialFuncs.c: 131: char str2[20];
 11098                           ;SerialFuncs.c: 132: int ret;
 11099                           ;SerialFuncs.c: 134: NewMessage=0;
 11100                           
 11101                           ; BSR set to: 0
 11102                           ;incstack = 0
 11103  000BCA  0E00               	movlw	0
 11104  000BCC  0100               	movlb	0	; () banked
 11105  000BCE  6FDE               	movwf	(_NewMessage+1)& (0+255),b
 11106  000BD0  0E00               	movlw	0
 11107  000BD2  6FDD               	movwf	_NewMessage& (0+255),b
 11108                           
 11109                           ; BSR set to: 0
 11110                           ;SerialFuncs.c: 136: strcpy(str1,LastMessage);
 11111  000BD4  0E00               	movlw	low MessageRoutine@str1
 11112  000BD6  0100               	movlb	0	; () banked
 11113  000BD8  6F9F               	movwf	strcpy@to& (0+255),b
 11114  000BDA  0E01               	movlw	high MessageRoutine@str1
 11115  000BDC  0100               	movlb	0	; () banked
 11116  000BDE  6FA0               	movwf	(strcpy@to+1)& (0+255),b
 11117  000BE0  0ED2               	movlw	low _LastMessage
 11118  000BE2  0100               	movlb	0	; () banked
 11119  000BE4  6FA1               	movwf	strcpy@from& (0+255),b
 11120  000BE6  0E01               	movlw	high _LastMessage
 11121  000BE8  0100               	movlb	0	; () banked
 11122  000BEA  6FA2               	movwf	(strcpy@from+1)& (0+255),b
 11123  000BEC  EC06  F021         	call	_strcpy	;wreg free
 11124                           
 11125                           ;SerialFuncs.c: 137: strcpy(str2,ConfigWord);
 11126  000BF0  0E14               	movlw	low MessageRoutine@str2
 11127  000BF2  0100               	movlb	0	; () banked
 11128  000BF4  6F9F               	movwf	strcpy@to& (0+255),b
 11129  000BF6  0E01               	movlw	high MessageRoutine@str2
 11130  000BF8  0100               	movlb	0	; () banked
 11131  000BFA  6FA0               	movwf	(strcpy@to+1)& (0+255),b
 11132  000BFC  0E9A               	movlw	low _ConfigWord
 11133  000BFE  0100               	movlb	0	; () banked
 11134  000C00  6FA1               	movwf	strcpy@from& (0+255),b
 11135  000C02  0E01               	movlw	high _ConfigWord
 11136  000C04  0100               	movlb	0	; () banked
 11137  000C06  6FA2               	movwf	(strcpy@from+1)& (0+255),b
 11138  000C08  EC06  F021         	call	_strcpy	;wreg free
 11139                           
 11140                           ;SerialFuncs.c: 138: ret = strcmp(str1,str2);
 11141  000C0C  0E00               	movlw	low MessageRoutine@str1
 11142  000C0E  0100               	movlb	0	; () banked
 11143  000C10  6F9F               	movwf	strcmp@s1& (0+255),b
 11144  000C12  0E01               	movlw	high MessageRoutine@str1
 11145  000C14  0100               	movlb	0	; () banked
 11146  000C16  6FA0               	movwf	(strcmp@s1+1)& (0+255),b
 11147  000C18  0E14               	movlw	low MessageRoutine@str2
 11148  000C1A  0100               	movlb	0	; () banked
 11149  000C1C  6FA1               	movwf	strcmp@s2& (0+255),b
 11150  000C1E  0E01               	movlw	high MessageRoutine@str2
 11151  000C20  0100               	movlb	0	; () banked
 11152  000C22  6FA2               	movwf	(strcmp@s2+1)& (0+255),b
 11153  000C24  EC32  F020         	call	_strcmp	;wreg free
 11154  000C28  C09F  F128         	movff	?_strcmp,MessageRoutine@ret
 11155  000C2C  C0A0  F129         	movff	?_strcmp+1,MessageRoutine@ret+1
 11156                           
 11157                           ;SerialFuncs.c: 139: if (ret==0)
 11158  000C30  0101               	movlb	1	; () banked
 11159  000C32  5128               	movf	MessageRoutine@ret& (0+255),w,b
 11160  000C34  0101               	movlb	1	; () banked
 11161  000C36  1129               	iorwf	(MessageRoutine@ret+1)& (0+255),w,b
 11162  000C38  A4D8               	btfss	status,2,c
 11163  000C3A  D003               	goto	l5876
 11164                           
 11165                           ; BSR set to: 1
 11166                           ;SerialFuncs.c: 140: {
 11167                           ;SerialFuncs.c: 141: SetDateTime();
 11168  000C3C  EC1E  F014         	call	_SetDateTime	;wreg free
 11169  000C40  D000               	goto	l5876
 11170  000C42                     l5876:
 11171                           
 11172                           ;SerialFuncs.c: 142: }
 11173                           ;SerialFuncs.c: 144: strcpy(str2,"SET\r");
 11174  000C42  0E14               	movlw	low MessageRoutine@str2
 11175  000C44  0100               	movlb	0	; () banked
 11176  000C46  6F9F               	movwf	strcpy@to& (0+255),b
 11177  000C48  0E01               	movlw	high MessageRoutine@str2
 11178  000C4A  0100               	movlb	0	; () banked
 11179  000C4C  6FA0               	movwf	(strcpy@to+1)& (0+255),b
 11180  000C4E  0EF5               	movlw	low STR_39
 11181  000C50  0100               	movlb	0	; () banked
 11182  000C52  6FA1               	movwf	strcpy@from& (0+255),b
 11183  000C54  0E7F               	movlw	high STR_39
 11184  000C56  0100               	movlb	0	; () banked
 11185  000C58  6FA2               	movwf	(strcpy@from+1)& (0+255),b
 11186  000C5A  EC06  F021         	call	_strcpy	;wreg free
 11187                           
 11188                           ;SerialFuncs.c: 145: ret = strcmp(str1,str2);
 11189  000C5E  0E00               	movlw	low MessageRoutine@str1
 11190  000C60  0100               	movlb	0	; () banked
 11191  000C62  6F9F               	movwf	strcmp@s1& (0+255),b
 11192  000C64  0E01               	movlw	high MessageRoutine@str1
 11193  000C66  0100               	movlb	0	; () banked
 11194  000C68  6FA0               	movwf	(strcmp@s1+1)& (0+255),b
 11195  000C6A  0E14               	movlw	low MessageRoutine@str2
 11196  000C6C  0100               	movlb	0	; () banked
 11197  000C6E  6FA1               	movwf	strcmp@s2& (0+255),b
 11198  000C70  0E01               	movlw	high MessageRoutine@str2
 11199  000C72  0100               	movlb	0	; () banked
 11200  000C74  6FA2               	movwf	(strcmp@s2+1)& (0+255),b
 11201  000C76  EC32  F020         	call	_strcmp	;wreg free
 11202  000C7A  C09F  F128         	movff	?_strcmp,MessageRoutine@ret
 11203  000C7E  C0A0  F129         	movff	?_strcmp+1,MessageRoutine@ret+1
 11204                           
 11205                           ;SerialFuncs.c: 146: if (ret==0)
 11206  000C82  0101               	movlb	1	; () banked
 11207  000C84  5128               	movf	MessageRoutine@ret& (0+255),w,b
 11208  000C86  0101               	movlb	1	; () banked
 11209  000C88  1129               	iorwf	(MessageRoutine@ret+1)& (0+255),w,b
 11210  000C8A  A4D8               	btfss	status,2,c
 11211  000C8C  D0D9               	goto	l5924
 11212                           
 11213                           ; BSR set to: 1
 11214                           ;SerialFuncs.c: 147: {
 11215                           ;SerialFuncs.c: 148: printf(MessageBuffer);
 11216  000C8E  0EE6               	movlw	low _MessageBuffer
 11217  000C90  0100               	movlb	0	; () banked
 11218  000C92  6FAB               	movwf	printf@f& (0+255),b
 11219  000C94  0E01               	movlw	high _MessageBuffer
 11220  000C96  0100               	movlb	0	; () banked
 11221  000C98  6FAC               	movwf	(printf@f+1)& (0+255),b
 11222  000C9A  ECFA  F009         	call	_printf	;wreg free
 11223                           
 11224                           ;SerialFuncs.c: 149: printf("\r\n");
 11225  000C9E  0E1B               	movlw	low (STR_7+15)
 11226  000CA0  0100               	movlb	0	; () banked
 11227  000CA2  6FAB               	movwf	printf@f& (0+255),b
 11228  000CA4  0E7F               	movlw	high (STR_7+15)
 11229  000CA6  0100               	movlb	0	; () banked
 11230  000CA8  6FAC               	movwf	(printf@f+1)& (0+255),b
 11231  000CAA  ECFA  F009         	call	_printf	;wreg free
 11232                           
 11233                           ;SerialFuncs.c: 150: printf("Set offcountmax (default 2000):\r\n");
 11234  000CAE  0E86               	movlw	low STR_41
 11235  000CB0  0100               	movlb	0	; () banked
 11236  000CB2  6FAB               	movwf	printf@f& (0+255),b
 11237  000CB4  0E7D               	movlw	high STR_41
 11238  000CB6  0100               	movlb	0	; () banked
 11239  000CB8  6FAC               	movwf	(printf@f+1)& (0+255),b
 11240  000CBA  ECFA  F009         	call	_printf	;wreg free
 11241                           
 11242                           ;SerialFuncs.c: 151: while(NewMessage==0){};
 11243  000CBE  D000               	goto	l5884
 11244  000CC0                     l5884:
 11245  000CC0  0100               	movlb	0	; () banked
 11246  000CC2  51DD               	movf	_NewMessage& (0+255),w,b
 11247  000CC4  0100               	movlb	0	; () banked
 11248  000CC6  11DE               	iorwf	(_NewMessage+1)& (0+255),w,b
 11249  000CC8  B4D8               	btfsc	status,2,c
 11250  000CCA  D7FA               	goto	l5884
 11251                           
 11252                           ; BSR set to: 0
 11253                           ;SerialFuncs.c: 152: printf(MessageBuffer);
 11254                           
 11255                           ; BSR set to: 0
 11256  000CCC  0EE6               	movlw	low _MessageBuffer
 11257  000CCE  0100               	movlb	0	; () banked
 11258  000CD0  6FAB               	movwf	printf@f& (0+255),b
 11259  000CD2  0E01               	movlw	high _MessageBuffer
 11260  000CD4  0100               	movlb	0	; () banked
 11261  000CD6  6FAC               	movwf	(printf@f+1)& (0+255),b
 11262  000CD8  ECFA  F009         	call	_printf	;wreg free
 11263                           
 11264                           ;SerialFuncs.c: 153: printf("\r\n");
 11265  000CDC  0E1B               	movlw	low (STR_7+15)
 11266  000CDE  0100               	movlb	0	; () banked
 11267  000CE0  6FAB               	movwf	printf@f& (0+255),b
 11268  000CE2  0E7F               	movlw	high (STR_7+15)
 11269  000CE4  0100               	movlb	0	; () banked
 11270  000CE6  6FAC               	movwf	(printf@f+1)& (0+255),b
 11271  000CE8  ECFA  F009         	call	_printf	;wreg free
 11272                           
 11273                           ;SerialFuncs.c: 154: offcountmax=atoi(LastMessage);
 11274  000CEC  0ED2               	movlw	low _LastMessage
 11275  000CEE  0100               	movlb	0	; () banked
 11276  000CF0  6FA5               	movwf	atoi@s& (0+255),b
 11277  000CF2  0E01               	movlw	high _LastMessage
 11278  000CF4  0100               	movlb	0	; () banked
 11279  000CF6  6FA6               	movwf	(atoi@s+1)& (0+255),b
 11280  000CF8  ECE0  F01B         	call	_atoi	;wreg free
 11281  000CFC  C0A5  F05A         	movff	?_atoi,_offcountmax
 11282  000D00  C0A6  F05B         	movff	?_atoi+1,_offcountmax+1
 11283                           
 11284                           ;SerialFuncs.c: 155: NewMessage=0;
 11285  000D04  0E00               	movlw	0
 11286  000D06  0100               	movlb	0	; () banked
 11287  000D08  6FDE               	movwf	(_NewMessage+1)& (0+255),b
 11288  000D0A  0E00               	movlw	0
 11289  000D0C  6FDD               	movwf	_NewMessage& (0+255),b
 11290                           
 11291                           ; BSR set to: 0
 11292                           ;SerialFuncs.c: 157: printf("Set Nlong (default 50):\r\n");
 11293  000D0E  0EE2               	movlw	low STR_43
 11294  000D10  0100               	movlb	0	; () banked
 11295  000D12  6FAB               	movwf	printf@f& (0+255),b
 11296  000D14  0E7D               	movlw	high STR_43
 11297  000D16  0100               	movlb	0	; () banked
 11298  000D18  6FAC               	movwf	(printf@f+1)& (0+255),b
 11299  000D1A  ECFA  F009         	call	_printf	;wreg free
 11300                           
 11301                           ;SerialFuncs.c: 158: while(NewMessage==0){};
 11302  000D1E  D000               	goto	l5894
 11303  000D20                     l5894:
 11304  000D20  0100               	movlb	0	; () banked
 11305  000D22  51DD               	movf	_NewMessage& (0+255),w,b
 11306  000D24  0100               	movlb	0	; () banked
 11307  000D26  11DE               	iorwf	(_NewMessage+1)& (0+255),w,b
 11308  000D28  B4D8               	btfsc	status,2,c
 11309  000D2A  D7FA               	goto	l5894
 11310                           
 11311                           ; BSR set to: 0
 11312                           ;SerialFuncs.c: 159: printf(MessageBuffer);
 11313                           
 11314                           ; BSR set to: 0
 11315  000D2C  0EE6               	movlw	low _MessageBuffer
 11316  000D2E  0100               	movlb	0	; () banked
 11317  000D30  6FAB               	movwf	printf@f& (0+255),b
 11318  000D32  0E01               	movlw	high _MessageBuffer
 11319  000D34  0100               	movlb	0	; () banked
 11320  000D36  6FAC               	movwf	(printf@f+1)& (0+255),b
 11321  000D38  ECFA  F009         	call	_printf	;wreg free
 11322                           
 11323                           ;SerialFuncs.c: 160: printf("\r\n");
 11324  000D3C  0E1B               	movlw	low (STR_7+15)
 11325  000D3E  0100               	movlb	0	; () banked
 11326  000D40  6FAB               	movwf	printf@f& (0+255),b
 11327  000D42  0E7F               	movlw	high (STR_7+15)
 11328  000D44  0100               	movlb	0	; () banked
 11329  000D46  6FAC               	movwf	(printf@f+1)& (0+255),b
 11330  000D48  ECFA  F009         	call	_printf	;wreg free
 11331                           
 11332                           ;SerialFuncs.c: 161: Nlong=atoi(LastMessage);
 11333  000D4C  0ED2               	movlw	low _LastMessage
 11334  000D4E  0100               	movlb	0	; () banked
 11335  000D50  6FA5               	movwf	atoi@s& (0+255),b
 11336  000D52  0E01               	movlw	high _LastMessage
 11337  000D54  0100               	movlb	0	; () banked
 11338  000D56  6FA6               	movwf	(atoi@s+1)& (0+255),b
 11339  000D58  ECE0  F01B         	call	_atoi	;wreg free
 11340  000D5C  C0A5  F052         	movff	?_atoi,_Nlong
 11341  000D60  C0A6  F053         	movff	?_atoi+1,_Nlong+1
 11342                           
 11343                           ;SerialFuncs.c: 162: NewMessage=0;
 11344  000D64  0E00               	movlw	0
 11345  000D66  0100               	movlb	0	; () banked
 11346  000D68  6FDE               	movwf	(_NewMessage+1)& (0+255),b
 11347  000D6A  0E00               	movlw	0
 11348  000D6C  6FDD               	movwf	_NewMessage& (0+255),b
 11349                           
 11350                           ; BSR set to: 0
 11351                           ;SerialFuncs.c: 164: printf("Set Nshort (default 10):\r\n");
 11352  000D6E  0EC7               	movlw	low STR_45
 11353  000D70  0100               	movlb	0	; () banked
 11354  000D72  6FAB               	movwf	printf@f& (0+255),b
 11355  000D74  0E7D               	movlw	high STR_45
 11356  000D76  0100               	movlb	0	; () banked
 11357  000D78  6FAC               	movwf	(printf@f+1)& (0+255),b
 11358  000D7A  ECFA  F009         	call	_printf	;wreg free
 11359                           
 11360                           ;SerialFuncs.c: 165: while(NewMessage==0){};
 11361  000D7E  D000               	goto	l5904
 11362  000D80                     l5904:
 11363  000D80  0100               	movlb	0	; () banked
 11364  000D82  51DD               	movf	_NewMessage& (0+255),w,b
 11365  000D84  0100               	movlb	0	; () banked
 11366  000D86  11DE               	iorwf	(_NewMessage+1)& (0+255),w,b
 11367  000D88  B4D8               	btfsc	status,2,c
 11368  000D8A  D7FA               	goto	l5904
 11369                           
 11370                           ; BSR set to: 0
 11371                           ;SerialFuncs.c: 166: printf(MessageBuffer);
 11372                           
 11373                           ; BSR set to: 0
 11374  000D8C  0EE6               	movlw	low _MessageBuffer
 11375  000D8E  0100               	movlb	0	; () banked
 11376  000D90  6FAB               	movwf	printf@f& (0+255),b
 11377  000D92  0E01               	movlw	high _MessageBuffer
 11378  000D94  0100               	movlb	0	; () banked
 11379  000D96  6FAC               	movwf	(printf@f+1)& (0+255),b
 11380  000D98  ECFA  F009         	call	_printf	;wreg free
 11381                           
 11382                           ;SerialFuncs.c: 167: printf("\r\n");
 11383  000D9C  0E1B               	movlw	low (STR_7+15)
 11384  000D9E  0100               	movlb	0	; () banked
 11385  000DA0  6FAB               	movwf	printf@f& (0+255),b
 11386  000DA2  0E7F               	movlw	high (STR_7+15)
 11387  000DA4  0100               	movlb	0	; () banked
 11388  000DA6  6FAC               	movwf	(printf@f+1)& (0+255),b
 11389  000DA8  ECFA  F009         	call	_printf	;wreg free
 11390                           
 11391                           ;SerialFuncs.c: 168: Nshort=atoi(LastMessage);
 11392  000DAC  0ED2               	movlw	low _LastMessage
 11393  000DAE  0100               	movlb	0	; () banked
 11394  000DB0  6FA5               	movwf	atoi@s& (0+255),b
 11395  000DB2  0E01               	movlw	high _LastMessage
 11396  000DB4  0100               	movlb	0	; () banked
 11397  000DB6  6FA6               	movwf	(atoi@s+1)& (0+255),b
 11398  000DB8  ECE0  F01B         	call	_atoi	;wreg free
 11399  000DBC  C0A5  F054         	movff	?_atoi,_Nshort
 11400  000DC0  C0A6  F055         	movff	?_atoi+1,_Nshort+1
 11401                           
 11402                           ;SerialFuncs.c: 169: NewMessage=0;
 11403  000DC4  0E00               	movlw	0
 11404  000DC6  0100               	movlb	0	; () banked
 11405  000DC8  6FDE               	movwf	(_NewMessage+1)& (0+255),b
 11406  000DCA  0E00               	movlw	0
 11407  000DCC  6FDD               	movwf	_NewMessage& (0+255),b
 11408                           
 11409                           ; BSR set to: 0
 11410                           ;SerialFuncs.c: 171: printf("Set onthresh (default 2000):\r\n");
 11411  000DCE  0EA8               	movlw	low STR_47
 11412  000DD0  0100               	movlb	0	; () banked
 11413  000DD2  6FAB               	movwf	printf@f& (0+255),b
 11414  000DD4  0E7D               	movlw	high STR_47
 11415  000DD6  0100               	movlb	0	; () banked
 11416  000DD8  6FAC               	movwf	(printf@f+1)& (0+255),b
 11417  000DDA  ECFA  F009         	call	_printf	;wreg free
 11418                           
 11419                           ;SerialFuncs.c: 172: while(NewMessage==0){};
 11420  000DDE  D000               	goto	l5914
 11421  000DE0                     l5914:
 11422  000DE0  0100               	movlb	0	; () banked
 11423  000DE2  51DD               	movf	_NewMessage& (0+255),w,b
 11424  000DE4  0100               	movlb	0	; () banked
 11425  000DE6  11DE               	iorwf	(_NewMessage+1)& (0+255),w,b
 11426  000DE8  B4D8               	btfsc	status,2,c
 11427  000DEA  D7FA               	goto	l5914
 11428                           
 11429                           ; BSR set to: 0
 11430                           ;SerialFuncs.c: 173: printf(MessageBuffer);
 11431                           
 11432                           ; BSR set to: 0
 11433  000DEC  0EE6               	movlw	low _MessageBuffer
 11434  000DEE  0100               	movlb	0	; () banked
 11435  000DF0  6FAB               	movwf	printf@f& (0+255),b
 11436  000DF2  0E01               	movlw	high _MessageBuffer
 11437  000DF4  0100               	movlb	0	; () banked
 11438  000DF6  6FAC               	movwf	(printf@f+1)& (0+255),b
 11439  000DF8  ECFA  F009         	call	_printf	;wreg free
 11440                           
 11441                           ;SerialFuncs.c: 174: printf("\r\n");
 11442  000DFC  0E1B               	movlw	low (STR_7+15)
 11443  000DFE  0100               	movlb	0	; () banked
 11444  000E00  6FAB               	movwf	printf@f& (0+255),b
 11445  000E02  0E7F               	movlw	high (STR_7+15)
 11446  000E04  0100               	movlb	0	; () banked
 11447  000E06  6FAC               	movwf	(printf@f+1)& (0+255),b
 11448  000E08  ECFA  F009         	call	_printf	;wreg free
 11449                           
 11450                           ;SerialFuncs.c: 175: onthresh=atoi(LastMessage);
 11451  000E0C  0ED2               	movlw	low _LastMessage
 11452  000E0E  0100               	movlb	0	; () banked
 11453  000E10  6FA5               	movwf	atoi@s& (0+255),b
 11454  000E12  0E01               	movlw	high _LastMessage
 11455  000E14  0100               	movlb	0	; () banked
 11456  000E16  6FA6               	movwf	(atoi@s+1)& (0+255),b
 11457  000E18  ECE0  F01B         	call	_atoi	;wreg free
 11458  000E1C  C0A5  F05C         	movff	?_atoi,_onthresh
 11459  000E20  C0A6  F05D         	movff	?_atoi+1,_onthresh+1
 11460                           
 11461                           ;SerialFuncs.c: 176: NewMessage=0;
 11462  000E24  0E00               	movlw	0
 11463  000E26  0100               	movlb	0	; () banked
 11464  000E28  6FDE               	movwf	(_NewMessage+1)& (0+255),b
 11465  000E2A  0E00               	movlw	0
 11466  000E2C  6FDD               	movwf	_NewMessage& (0+255),b
 11467                           
 11468                           ; BSR set to: 0
 11469                           ;SerialFuncs.c: 177: printf("Setting Complete!\r\n");
 11470  000E2E  0E97               	movlw	low STR_49
 11471  000E30  0100               	movlb	0	; () banked
 11472  000E32  6FAB               	movwf	printf@f& (0+255),b
 11473  000E34  0E7E               	movlw	high STR_49
 11474  000E36  0100               	movlb	0	; () banked
 11475  000E38  6FAC               	movwf	(printf@f+1)& (0+255),b
 11476  000E3A  ECFA  F009         	call	_printf	;wreg free
 11477  000E3E  D000               	goto	l5924
 11478  000E40                     l5924:
 11479                           
 11480                           ;SerialFuncs.c: 178: }
 11481                           ;SerialFuncs.c: 180: strcpy(str2,"Time?\r");
 11482  000E40  0E14               	movlw	low MessageRoutine@str2
 11483  000E42  0100               	movlb	0	; () banked
 11484  000E44  6F9F               	movwf	strcpy@to& (0+255),b
 11485  000E46  0E01               	movlw	high MessageRoutine@str2
 11486  000E48  0100               	movlb	0	; () banked
 11487  000E4A  6FA0               	movwf	(strcpy@to+1)& (0+255),b
 11488  000E4C  0EE2               	movlw	low STR_50
 11489  000E4E  0100               	movlb	0	; () banked
 11490  000E50  6FA1               	movwf	strcpy@from& (0+255),b
 11491  000E52  0E7F               	movlw	high STR_50
 11492  000E54  0100               	movlb	0	; () banked
 11493  000E56  6FA2               	movwf	(strcpy@from+1)& (0+255),b
 11494  000E58  EC06  F021         	call	_strcpy	;wreg free
 11495                           
 11496                           ;SerialFuncs.c: 181: ret = strcmp(str1,str2);
 11497  000E5C  0E00               	movlw	low MessageRoutine@str1
 11498  000E5E  0100               	movlb	0	; () banked
 11499  000E60  6F9F               	movwf	strcmp@s1& (0+255),b
 11500  000E62  0E01               	movlw	high MessageRoutine@str1
 11501  000E64  0100               	movlb	0	; () banked
 11502  000E66  6FA0               	movwf	(strcmp@s1+1)& (0+255),b
 11503  000E68  0E14               	movlw	low MessageRoutine@str2
 11504  000E6A  0100               	movlb	0	; () banked
 11505  000E6C  6FA1               	movwf	strcmp@s2& (0+255),b
 11506  000E6E  0E01               	movlw	high MessageRoutine@str2
 11507  000E70  0100               	movlb	0	; () banked
 11508  000E72  6FA2               	movwf	(strcmp@s2+1)& (0+255),b
 11509  000E74  EC32  F020         	call	_strcmp	;wreg free
 11510  000E78  C09F  F128         	movff	?_strcmp,MessageRoutine@ret
 11511  000E7C  C0A0  F129         	movff	?_strcmp+1,MessageRoutine@ret+1
 11512                           
 11513                           ;SerialFuncs.c: 182: if (ret==0)
 11514  000E80  0101               	movlb	1	; () banked
 11515  000E82  5128               	movf	MessageRoutine@ret& (0+255),w,b
 11516  000E84  0101               	movlb	1	; () banked
 11517  000E86  1129               	iorwf	(MessageRoutine@ret+1)& (0+255),w,b
 11518  000E88  A4D8               	btfss	status,2,c
 11519  000E8A  D025               	goto	l5932
 11520                           
 11521                           ; BSR set to: 1
 11522                           ;SerialFuncs.c: 183: {
 11523                           ;SerialFuncs.c: 184: printf(MessageBuffer);
 11524  000E8C  0EE6               	movlw	low _MessageBuffer
 11525  000E8E  0100               	movlb	0	; () banked
 11526  000E90  6FAB               	movwf	printf@f& (0+255),b
 11527  000E92  0E01               	movlw	high _MessageBuffer
 11528  000E94  0100               	movlb	0	; () banked
 11529  000E96  6FAC               	movwf	(printf@f+1)& (0+255),b
 11530  000E98  ECFA  F009         	call	_printf	;wreg free
 11531                           
 11532                           ;SerialFuncs.c: 185: printf("\r\n");
 11533  000E9C  0E1B               	movlw	low (STR_7+15)
 11534  000E9E  0100               	movlb	0	; () banked
 11535  000EA0  6FAB               	movwf	printf@f& (0+255),b
 11536  000EA2  0E7F               	movlw	high (STR_7+15)
 11537  000EA4  0100               	movlb	0	; () banked
 11538  000EA6  6FAC               	movwf	(printf@f+1)& (0+255),b
 11539  000EA8  ECFA  F009         	call	_printf	;wreg free
 11540                           
 11541                           ;SerialFuncs.c: 186: printf("Time: %2i:%2i:%2i\r\n",hours,minutes,seconds);
 11542  000EAC  0EAB               	movlw	low STR_38
 11543  000EAE  0100               	movlb	0	; () banked
 11544  000EB0  6FAB               	movwf	printf@f& (0+255),b
 11545  000EB2  0E7E               	movlw	high STR_38
 11546  000EB4  0100               	movlb	0	; () banked
 11547  000EB6  6FAC               	movwf	(printf@f+1)& (0+255),b
 11548  000EB8  C032  F0AD         	movff	_hours,?_printf+2
 11549  000EBC  C033  F0AE         	movff	_hours+1,?_printf+3
 11550  000EC0  C036  F0AF         	movff	_minutes,?_printf+4
 11551  000EC4  C037  F0B0         	movff	_minutes+1,?_printf+5
 11552  000EC8  C038  F0B1         	movff	_seconds,?_printf+6
 11553  000ECC  C039  F0B2         	movff	_seconds+1,?_printf+7
 11554  000ED0  ECFA  F009         	call	_printf	;wreg free
 11555  000ED4  D000               	goto	l5932
 11556  000ED6                     l5932:
 11557                           
 11558                           ;SerialFuncs.c: 187: }
 11559                           ;SerialFuncs.c: 188: strcpy(str2,"Date?\r");
 11560  000ED6  0E14               	movlw	low MessageRoutine@str2
 11561  000ED8  0100               	movlb	0	; () banked
 11562  000EDA  6F9F               	movwf	strcpy@to& (0+255),b
 11563  000EDC  0E01               	movlw	high MessageRoutine@str2
 11564  000EDE  0100               	movlb	0	; () banked
 11565  000EE0  6FA0               	movwf	(strcpy@to+1)& (0+255),b
 11566  000EE2  0EE9               	movlw	low STR_53
 11567  000EE4  0100               	movlb	0	; () banked
 11568  000EE6  6FA1               	movwf	strcpy@from& (0+255),b
 11569  000EE8  0E7F               	movlw	high STR_53
 11570  000EEA  0100               	movlb	0	; () banked
 11571  000EEC  6FA2               	movwf	(strcpy@from+1)& (0+255),b
 11572  000EEE  EC06  F021         	call	_strcpy	;wreg free
 11573                           
 11574                           ;SerialFuncs.c: 189: ret = strcmp(str1,str2);
 11575  000EF2  0E00               	movlw	low MessageRoutine@str1
 11576  000EF4  0100               	movlb	0	; () banked
 11577  000EF6  6F9F               	movwf	strcmp@s1& (0+255),b
 11578  000EF8  0E01               	movlw	high MessageRoutine@str1
 11579  000EFA  0100               	movlb	0	; () banked
 11580  000EFC  6FA0               	movwf	(strcmp@s1+1)& (0+255),b
 11581  000EFE  0E14               	movlw	low MessageRoutine@str2
 11582  000F00  0100               	movlb	0	; () banked
 11583  000F02  6FA1               	movwf	strcmp@s2& (0+255),b
 11584  000F04  0E01               	movlw	high MessageRoutine@str2
 11585  000F06  0100               	movlb	0	; () banked
 11586  000F08  6FA2               	movwf	(strcmp@s2+1)& (0+255),b
 11587  000F0A  EC32  F020         	call	_strcmp	;wreg free
 11588  000F0E  C09F  F128         	movff	?_strcmp,MessageRoutine@ret
 11589  000F12  C0A0  F129         	movff	?_strcmp+1,MessageRoutine@ret+1
 11590                           
 11591                           ;SerialFuncs.c: 190: if (ret==0)
 11592  000F16  0101               	movlb	1	; () banked
 11593  000F18  5128               	movf	MessageRoutine@ret& (0+255),w,b
 11594  000F1A  0101               	movlb	1	; () banked
 11595  000F1C  1129               	iorwf	(MessageRoutine@ret+1)& (0+255),w,b
 11596  000F1E  A4D8               	btfss	status,2,c
 11597  000F20  D025               	goto	l5940
 11598                           
 11599                           ; BSR set to: 1
 11600                           ;SerialFuncs.c: 191: {
 11601                           ;SerialFuncs.c: 192: printf(MessageBuffer);
 11602  000F22  0EE6               	movlw	low _MessageBuffer
 11603  000F24  0100               	movlb	0	; () banked
 11604  000F26  6FAB               	movwf	printf@f& (0+255),b
 11605  000F28  0E01               	movlw	high _MessageBuffer
 11606  000F2A  0100               	movlb	0	; () banked
 11607  000F2C  6FAC               	movwf	(printf@f+1)& (0+255),b
 11608  000F2E  ECFA  F009         	call	_printf	;wreg free
 11609                           
 11610                           ;SerialFuncs.c: 193: printf("\r\n");
 11611  000F32  0E1B               	movlw	low (STR_7+15)
 11612  000F34  0100               	movlb	0	; () banked
 11613  000F36  6FAB               	movwf	printf@f& (0+255),b
 11614  000F38  0E7F               	movlw	high (STR_7+15)
 11615  000F3A  0100               	movlb	0	; () banked
 11616  000F3C  6FAC               	movwf	(printf@f+1)& (0+255),b
 11617  000F3E  ECFA  F009         	call	_printf	;wreg free
 11618                           
 11619                           ;SerialFuncs.c: 194: printf("Date: %2i/%2i/%4i\r\n",day,month,year);
 11620  000F42  0EBF               	movlw	low STR_37
 11621  000F44  0100               	movlb	0	; () banked
 11622  000F46  6FAB               	movwf	printf@f& (0+255),b
 11623  000F48  0E7E               	movlw	high STR_37
 11624  000F4A  0100               	movlb	0	; () banked
 11625  000F4C  6FAC               	movwf	(printf@f+1)& (0+255),b
 11626  000F4E  C0DF  F0AD         	movff	_day,?_printf+2
 11627  000F52  C0E0  F0AE         	movff	_day+1,?_printf+3
 11628  000F56  C058  F0AF         	movff	_month,?_printf+4
 11629  000F5A  C059  F0B0         	movff	_month+1,?_printf+5
 11630  000F5E  C05E  F0B1         	movff	_year,?_printf+6
 11631  000F62  C05F  F0B2         	movff	_year+1,?_printf+7
 11632  000F66  ECFA  F009         	call	_printf	;wreg free
 11633  000F6A  D000               	goto	l5940
 11634  000F6C                     l5940:
 11635                           
 11636                           ;SerialFuncs.c: 195: }
 11637                           ;SerialFuncs.c: 196: strcpy(str2,"LOG\r");
 11638  000F6C  0E14               	movlw	low MessageRoutine@str2
 11639  000F6E  0100               	movlb	0	; () banked
 11640  000F70  6F9F               	movwf	strcpy@to& (0+255),b
 11641  000F72  0E01               	movlw	high MessageRoutine@str2
 11642  000F74  0100               	movlb	0	; () banked
 11643  000F76  6FA0               	movwf	(strcpy@to+1)& (0+255),b
 11644  000F78  0EF0               	movlw	low STR_56
 11645  000F7A  0100               	movlb	0	; () banked
 11646  000F7C  6FA1               	movwf	strcpy@from& (0+255),b
 11647  000F7E  0E7F               	movlw	high STR_56
 11648  000F80  0100               	movlb	0	; () banked
 11649  000F82  6FA2               	movwf	(strcpy@from+1)& (0+255),b
 11650  000F84  EC06  F021         	call	_strcpy	;wreg free
 11651                           
 11652                           ;SerialFuncs.c: 197: ret = strcmp(str1,str2);
 11653  000F88  0E00               	movlw	low MessageRoutine@str1
 11654  000F8A  0100               	movlb	0	; () banked
 11655  000F8C  6F9F               	movwf	strcmp@s1& (0+255),b
 11656  000F8E  0E01               	movlw	high MessageRoutine@str1
 11657  000F90  0100               	movlb	0	; () banked
 11658  000F92  6FA0               	movwf	(strcmp@s1+1)& (0+255),b
 11659  000F94  0E14               	movlw	low MessageRoutine@str2
 11660  000F96  0100               	movlb	0	; () banked
 11661  000F98  6FA1               	movwf	strcmp@s2& (0+255),b
 11662  000F9A  0E01               	movlw	high MessageRoutine@str2
 11663  000F9C  0100               	movlb	0	; () banked
 11664  000F9E  6FA2               	movwf	(strcmp@s2+1)& (0+255),b
 11665  000FA0  EC32  F020         	call	_strcmp	;wreg free
 11666  000FA4  C09F  F128         	movff	?_strcmp,MessageRoutine@ret
 11667  000FA8  C0A0  F129         	movff	?_strcmp+1,MessageRoutine@ret+1
 11668                           
 11669                           ;SerialFuncs.c: 198: if (ret==0)
 11670  000FAC  0101               	movlb	1	; () banked
 11671  000FAE  5128               	movf	MessageRoutine@ret& (0+255),w,b
 11672  000FB0  0101               	movlb	1	; () banked
 11673  000FB2  1129               	iorwf	(MessageRoutine@ret+1)& (0+255),w,b
 11674  000FB4  A4D8               	btfss	status,2,c
 11675  000FB6  D013               	goto	l372
 11676                           
 11677                           ; BSR set to: 1
 11678                           ;SerialFuncs.c: 199: {
 11679                           ;SerialFuncs.c: 200: printf("Switching over to Data Logging.\r\n"
 11680                           ;SerialFuncs.c: 201: "To reconnect via bluetooth, the logger must be power cycled.\r\n"
 11681                           ;SerialFuncs.c: 202: "Bluetooth module will be powered down now.\r\n");
 11682  000FB8  0EFA               	movlw	low STR_57
 11683  000FBA  0100               	movlb	0	; () banked
 11684  000FBC  6FAB               	movwf	printf@f& (0+255),b
 11685  000FBE  0E7C               	movlw	high STR_57
 11686  000FC0  0100               	movlb	0	; () banked
 11687  000FC2  6FAC               	movwf	(printf@f+1)& (0+255),b
 11688  000FC4  ECFA  F009         	call	_printf	;wreg free
 11689                           
 11690                           ;SerialFuncs.c: 203: Delay1KTCYx(1000);
 11691  000FC8  0EE8               	movlw	232
 11692  000FCA  EC52  F022         	call	_Delay1KTCYx
 11693                           
 11694                           ;SerialFuncs.c: 204: LATBbits.LATB4=0;
 11695  000FCE  988A               	bcf	3978,4,c	;volatile
 11696                           
 11697                           ;SerialFuncs.c: 231: NewMessage=0;
 11698  000FD0  0E00               	movlw	0
 11699  000FD2  0100               	movlb	0	; () banked
 11700  000FD4  6FDE               	movwf	(_NewMessage+1)& (0+255),b
 11701  000FD6  0E00               	movlw	0
 11702  000FD8  6FDD               	movwf	_NewMessage& (0+255),b
 11703                           
 11704                           ; BSR set to: 0
 11705                           ;SerialFuncs.c: 232: LATBbits.LATB3=1;
 11706  000FDA  868A               	bsf	3978,3,c	;volatile
 11707  000FDC  D000               	goto	l372
 11708  000FDE                     l372:
 11709  000FDE  0012               	return		;funcret
 11710  000FE0                     __end_of_MessageRoutine:
 11711                           	opt stack 0
 11712                           tblptru	equ	0xFF8
 11713                           tblptrh	equ	0xFF7
 11714                           tblptrl	equ	0xFF6
 11715                           tablat	equ	0xFF5
 11716                           postinc0	equ	0xFEE
 11717                           wreg	equ	0xFE8
 11718                           postinc1	equ	0xFE6
 11719                           postdec1	equ	0xFE5
 11720                           plusw1	equ	0xFE3
 11721                           fsr1h	equ	0xFE2
 11722                           fsr1l	equ	0xFE1
 11723                           postinc2	equ	0xFDE
 11724                           postdec2	equ	0xFDD
 11725                           plusw2	equ	0xFDB
 11726                           fsr2h	equ	0xFDA
 11727                           fsr2l	equ	0xFD9
 11728                           status	equ	0xFD8
 11729                           
 11730 ;; *************** function _strcpy *****************
 11731 ;; Defined at:
 11732 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 11733 ;; Parameters:    Size  Location     Type
 11734 ;;  to              2   31[BANK0 ] PTR unsigned char 
 11735 ;;		 -> MessageRoutine@str2(20), MessageRoutine@str1(20), LastMessage(20), 
 11736 ;;  from            2   33[BANK0 ] PTR const unsigned char 
 11737 ;;		 -> STR_56(5), STR_53(7), STR_50(7), STR_39(5), 
 11738 ;;		 -> ConfigWord(20), LastMessage(20), MessageBuffer(20), 
 11739 ;; Auto vars:     Size  Location     Type
 11740 ;;  cp              2   35[BANK0 ] PTR unsigned char 
 11741 ;;		 -> MessageRoutine@str2(20), MessageRoutine@str1(20), LastMessage(20), 
 11742 ;; Return value:  Size  Location     Type
 11743 ;;                  2   31[BANK0 ] PTR unsigned char 
 11744 ;; Registers used:
 11745 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11746 ;; Tracked objects:
 11747 ;;		On entry : 0/0
 11748 ;;		On exit  : 0/0
 11749 ;;		Unchanged: 0/0
 11750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11751 ;;      Params:         0       4       0       0       0       0       0
 11752 ;;      Locals:         0       2       0       0       0       0       0
 11753 ;;      Temps:          0       0       0       0       0       0       0
 11754 ;;      Totals:         0       6       0       0       0       0       0
 11755 ;;Total ram usage:        6 bytes
 11756 ;; Hardware stack levels used:    1
 11757 ;; Hardware stack levels required when called:    5
 11758 ;; This function calls:
 11759 ;;		Nothing
 11760 ;; This function is called by:
 11761 ;;		_MessageRoutine
 11762 ;; This function uses a non-reentrant model
 11763 ;;
 11764                           
 11765                           	psect	text31
 11766  00420C                     __ptext31:
 11767                           	opt stack 0
 11768  00420C                     _strcpy:
 11769                           	opt stack 24
 11770                           
 11771                           ;incstack = 0
 11772  00420C  C09F  F0A3         	movff	strcpy@to,strcpy@cp
 11773  004210  C0A0  F0A4         	movff	strcpy@to+1,strcpy@cp+1
 11774  004214  D007               	goto	l5600
 11775  004216                     l5598:
 11776  004216  0100               	movlb	0	; () banked
 11777  004218  4BA3               	infsnz	strcpy@cp& (0+255),f,b
 11778  00421A  2BA4               	incf	(strcpy@cp+1)& (0+255),f,b
 11779  00421C  0100               	movlb	0	; () banked
 11780  00421E  4BA1               	infsnz	strcpy@from& (0+255),f,b
 11781  004220  2BA2               	incf	(strcpy@from+1)& (0+255),f,b
 11782  004222  D000               	goto	l5600
 11783  004224                     l5600:
 11784  004224  C0A1  FFF6         	movff	strcpy@from,tblptrl
 11785  004228  C0A2  FFF7         	movff	strcpy@from+1,tblptrh
 11786  00422C  6AF8               	clrf	tblptru,c
 11787  00422E  C0A3  FFD9         	movff	strcpy@cp,fsr2l
 11788  004232  C0A4  FFDA         	movff	strcpy@cp+1,fsr2h
 11789  004236  0E05               	movlw	(high __ramtop+-1)
 11790  004238  64F7               	cpfsgt	tblptrh,c
 11791  00423A  D003               	bra	u6387
 11792  00423C  0008               	tblrd		*
 11793  00423E  50F5               	movf	tablat,w,c
 11794  004240  D005               	bra	u6380
 11795  004242                     u6387:
 11796  004242  CFF6 FFE9          	movff	tblptrl,fsr0l
 11797  004246  CFF7 FFEA          	movff	tblptrh,fsr0h
 11798  00424A  50EF               	movf	indf0,w,c
 11799  00424C                     u6380:
 11800  00424C  6EDF               	movwf	indf2,c
 11801  00424E  50DF               	movf	indf2,w,c
 11802  004250  A4D8               	btfss	status,2,c
 11803  004252  D7E1               	goto	l5598
 11804                           
 11805                           ;	Return value of _strcpy is never used
 11806  004254  0012               	return		;funcret
 11807  004256                     __end_of_strcpy:
 11808                           	opt stack 0
 11809                           tblptru	equ	0xFF8
 11810                           tblptrh	equ	0xFF7
 11811                           tblptrl	equ	0xFF6
 11812                           tablat	equ	0xFF5
 11813                           indf0	equ	0xFEF
 11814                           postinc0	equ	0xFEE
 11815                           fsr0h	equ	0xFEA
 11816                           fsr0l	equ	0xFE9
 11817                           wreg	equ	0xFE8
 11818                           postinc1	equ	0xFE6
 11819                           postdec1	equ	0xFE5
 11820                           plusw1	equ	0xFE3
 11821                           fsr1h	equ	0xFE2
 11822                           fsr1l	equ	0xFE1
 11823                           indf2	equ	0xFDF
 11824                           postinc2	equ	0xFDE
 11825                           postdec2	equ	0xFDD
 11826                           plusw2	equ	0xFDB
 11827                           fsr2h	equ	0xFDA
 11828                           fsr2l	equ	0xFD9
 11829                           status	equ	0xFD8
 11830                           
 11831 ;; *************** function _strcmp *****************
 11832 ;; Defined at:
 11833 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcmp.c"
 11834 ;; Parameters:    Size  Location     Type
 11835 ;;  s1              2   31[BANK0 ] PTR const unsigned char 
 11836 ;;		 -> MessageRoutine@str1(20), 
 11837 ;;  s2              2   33[BANK0 ] PTR const unsigned char 
 11838 ;;		 -> MessageRoutine@str2(20), 
 11839 ;; Auto vars:     Size  Location     Type
 11840 ;;  r               1   36[BANK0 ] char 
 11841 ;; Return value:  Size  Location     Type
 11842 ;;                  2   31[BANK0 ] int 
 11843 ;; Registers used:
 11844 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11845 ;; Tracked objects:
 11846 ;;		On entry : 0/0
 11847 ;;		On exit  : 0/0
 11848 ;;		Unchanged: 0/0
 11849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11850 ;;      Params:         0       4       0       0       0       0       0
 11851 ;;      Locals:         0       1       0       0       0       0       0
 11852 ;;      Temps:          0       1       0       0       0       0       0
 11853 ;;      Totals:         0       6       0       0       0       0       0
 11854 ;;Total ram usage:        6 bytes
 11855 ;; Hardware stack levels used:    1
 11856 ;; Hardware stack levels required when called:    5
 11857 ;; This function calls:
 11858 ;;		Nothing
 11859 ;; This function is called by:
 11860 ;;		_MessageRoutine
 11861 ;; This function uses a non-reentrant model
 11862 ;;
 11863                           
 11864                           	psect	text32
 11865  004064                     __ptext32:
 11866                           	opt stack 0
 11867  004064                     _strcmp:
 11868                           	opt stack 24
 11869                           
 11870                           ;incstack = 0
 11871  004064  D007               	goto	l5668
 11872  004066                     l5666:
 11873  004066  0100               	movlb	0	; () banked
 11874  004068  4B9F               	infsnz	strcmp@s1& (0+255),f,b
 11875  00406A  2BA0               	incf	(strcmp@s1+1)& (0+255),f,b
 11876  00406C  0100               	movlb	0	; () banked
 11877  00406E  4BA1               	infsnz	strcmp@s2& (0+255),f,b
 11878  004070  2BA2               	incf	(strcmp@s2+1)& (0+255),f,b
 11879  004072  D000               	goto	l5668
 11880  004074                     l5668:
 11881  004074  C09F  FFD9         	movff	strcmp@s1,fsr2l
 11882  004078  C0A0  FFDA         	movff	strcmp@s1+1,fsr2h
 11883  00407C  50DF               	movf	indf2,w,c
 11884  00407E  0100               	movlb	0	; () banked
 11885  004080  6FA3               	movwf	??_strcmp& (0+255),b
 11886  004082  C0A1  FFD9         	movff	strcmp@s2,fsr2l
 11887  004086  C0A2  FFDA         	movff	strcmp@s2+1,fsr2h
 11888  00408A  50DF               	movf	indf2,w,c
 11889  00408C  0800               	sublw	0
 11890  00408E  0100               	movlb	0	; () banked
 11891  004090  25A3               	addwf	??_strcmp& (0+255),w,b
 11892  004092  0100               	movlb	0	; () banked
 11893  004094  6FA4               	movwf	strcmp@r& (0+255),b
 11894  004096  0100               	movlb	0	; () banked
 11895  004098  51A4               	movf	strcmp@r& (0+255),w,b
 11896  00409A  A4D8               	btfss	status,2,c
 11897  00409C  D009               	goto	l5672
 11898                           
 11899                           ; BSR set to: 0
 11900  00409E  C09F  FFD9         	movff	strcmp@s1,fsr2l
 11901  0040A2  C0A0  FFDA         	movff	strcmp@s1+1,fsr2h
 11902  0040A6  50DF               	movf	indf2,w,c
 11903  0040A8  B4D8               	btfsc	status,2,c
 11904  0040AA  D002               	goto	l5672
 11905  0040AC  D7DC               	goto	l5666
 11906                           
 11907                           ; BSR set to: 0
 11908  0040AE  D000               	goto	l5672
 11909  0040B0                     l5672:
 11910                           
 11911                           ; BSR set to: 0
 11912  0040B0  0100               	movlb	0	; () banked
 11913  0040B2  51A4               	movf	strcmp@r& (0+255),w,b
 11914  0040B4  0100               	movlb	0	; () banked
 11915  0040B6  6F9F               	movwf	?_strcmp& (0+255),b
 11916  0040B8  6BA0               	clrf	(?_strcmp+1)& (0+255),b
 11917  0040BA  BF9F               	btfsc	?_strcmp& (0+255),7,b
 11918  0040BC  07A0               	decf	(?_strcmp+1)& (0+255),f,b
 11919  0040BE  D000               	goto	l1414
 11920  0040C0                     l1414:
 11921                           
 11922                           ; BSR set to: 0
 11923  0040C0  0012               	return		;funcret
 11924  0040C2                     __end_of_strcmp:
 11925                           	opt stack 0
 11926                           tblptru	equ	0xFF8
 11927                           tblptrh	equ	0xFF7
 11928                           tblptrl	equ	0xFF6
 11929                           tablat	equ	0xFF5
 11930                           indf0	equ	0xFEF
 11931                           postinc0	equ	0xFEE
 11932                           fsr0h	equ	0xFEA
 11933                           fsr0l	equ	0xFE9
 11934                           wreg	equ	0xFE8
 11935                           postinc1	equ	0xFE6
 11936                           postdec1	equ	0xFE5
 11937                           plusw1	equ	0xFE3
 11938                           fsr1h	equ	0xFE2
 11939                           fsr1l	equ	0xFE1
 11940                           indf2	equ	0xFDF
 11941                           postinc2	equ	0xFDE
 11942                           postdec2	equ	0xFDD
 11943                           plusw2	equ	0xFDB
 11944                           fsr2h	equ	0xFDA
 11945                           fsr2l	equ	0xFD9
 11946                           status	equ	0xFD8
 11947                           
 11948 ;; *************** function _SetDateTime *****************
 11949 ;; Defined at:
 11950 ;;		line 83 in file "SerialFuncs.c"
 11951 ;; Parameters:    Size  Location     Type
 11952 ;;		None
 11953 ;; Auto vars:     Size  Location     Type
 11954 ;;		None
 11955 ;; Return value:  Size  Location     Type
 11956 ;;		None               void
 11957 ;; Registers used:
 11958 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11959 ;; Tracked objects:
 11960 ;;		On entry : 0/0
 11961 ;;		On exit  : 0/0
 11962 ;;		Unchanged: 0/0
 11963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11964 ;;      Params:         0       0       0       0       0       0       0
 11965 ;;      Locals:         0       0       0       0       0       0       0
 11966 ;;      Temps:          0       0       0       0       0       0       0
 11967 ;;      Totals:         0       0       0       0       0       0       0
 11968 ;;Total ram usage:        0 bytes
 11969 ;; Hardware stack levels used:    1
 11970 ;; Hardware stack levels required when called:    7
 11971 ;; This function calls:
 11972 ;;		_atoi
 11973 ;;		_printf
 11974 ;; This function is called by:
 11975 ;;		_MessageRoutine
 11976 ;; This function uses a non-reentrant model
 11977 ;;
 11978                           
 11979                           	psect	text33
 11980  00283C                     __ptext33:
 11981                           	opt stack 0
 11982  00283C                     _SetDateTime:
 11983                           	opt stack 22
 11984                           
 11985                           ;SerialFuncs.c: 85: printf("Set Year: ");
 11986                           
 11987                           ; BSR set to: 0
 11988                           ;incstack = 0
 11989  00283C  0EB9               	movlw	low STR_26
 11990  00283E  0100               	movlb	0	; () banked
 11991  002840  6FAB               	movwf	printf@f& (0+255),b
 11992  002842  0E7F               	movlw	high STR_26
 11993  002844  0100               	movlb	0	; () banked
 11994  002846  6FAC               	movwf	(printf@f+1)& (0+255),b
 11995  002848  ECFA  F009         	call	_printf	;wreg free
 11996                           
 11997                           ;SerialFuncs.c: 86: while(NewMessage==0){};
 11998  00284C  D000               	goto	l5604
 11999  00284E                     l5604:
 12000  00284E  0100               	movlb	0	; () banked
 12001  002850  51DD               	movf	_NewMessage& (0+255),w,b
 12002  002852  0100               	movlb	0	; () banked
 12003  002854  11DE               	iorwf	(_NewMessage+1)& (0+255),w,b
 12004  002856  B4D8               	btfsc	status,2,c
 12005  002858  D7FA               	goto	l5604
 12006                           
 12007                           ; BSR set to: 0
 12008                           ;SerialFuncs.c: 87: printf(MessageBuffer);
 12009                           
 12010                           ; BSR set to: 0
 12011  00285A  0EE6               	movlw	low _MessageBuffer
 12012  00285C  0100               	movlb	0	; () banked
 12013  00285E  6FAB               	movwf	printf@f& (0+255),b
 12014  002860  0E01               	movlw	high _MessageBuffer
 12015  002862  0100               	movlb	0	; () banked
 12016  002864  6FAC               	movwf	(printf@f+1)& (0+255),b
 12017  002866  ECFA  F009         	call	_printf	;wreg free
 12018                           
 12019                           ;SerialFuncs.c: 88: printf("\r\n");
 12020  00286A  0E1B               	movlw	low (STR_7+15)
 12021  00286C  0100               	movlb	0	; () banked
 12022  00286E  6FAB               	movwf	printf@f& (0+255),b
 12023  002870  0E7F               	movlw	high (STR_7+15)
 12024  002872  0100               	movlb	0	; () banked
 12025  002874  6FAC               	movwf	(printf@f+1)& (0+255),b
 12026  002876  ECFA  F009         	call	_printf	;wreg free
 12027                           
 12028                           ;SerialFuncs.c: 89: year=atoi(LastMessage);
 12029  00287A  0ED2               	movlw	low _LastMessage
 12030  00287C  0100               	movlb	0	; () banked
 12031  00287E  6FA5               	movwf	atoi@s& (0+255),b
 12032  002880  0E01               	movlw	high _LastMessage
 12033  002882  0100               	movlb	0	; () banked
 12034  002884  6FA6               	movwf	(atoi@s+1)& (0+255),b
 12035  002886  ECE0  F01B         	call	_atoi	;wreg free
 12036  00288A  C0A5  F05E         	movff	?_atoi,_year
 12037  00288E  C0A6  F05F         	movff	?_atoi+1,_year+1
 12038                           
 12039                           ;SerialFuncs.c: 90: NewMessage=0;
 12040  002892  0E00               	movlw	0
 12041  002894  0100               	movlb	0	; () banked
 12042  002896  6FDE               	movwf	(_NewMessage+1)& (0+255),b
 12043  002898  0E00               	movlw	0
 12044  00289A  6FDD               	movwf	_NewMessage& (0+255),b
 12045                           
 12046                           ; BSR set to: 0
 12047                           ;SerialFuncs.c: 91: printf("Set Month: ");
 12048  00289C  0EA1               	movlw	low STR_28
 12049  00289E  0100               	movlb	0	; () banked
 12050  0028A0  6FAB               	movwf	printf@f& (0+255),b
 12051  0028A2  0E7F               	movlw	high STR_28
 12052  0028A4  0100               	movlb	0	; () banked
 12053  0028A6  6FAC               	movwf	(printf@f+1)& (0+255),b
 12054  0028A8  ECFA  F009         	call	_printf	;wreg free
 12055                           
 12056                           ;SerialFuncs.c: 92: while(NewMessage==0){};
 12057  0028AC  D000               	goto	l5614
 12058  0028AE                     l5614:
 12059  0028AE  0100               	movlb	0	; () banked
 12060  0028B0  51DD               	movf	_NewMessage& (0+255),w,b
 12061  0028B2  0100               	movlb	0	; () banked
 12062  0028B4  11DE               	iorwf	(_NewMessage+1)& (0+255),w,b
 12063  0028B6  B4D8               	btfsc	status,2,c
 12064  0028B8  D7FA               	goto	l5614
 12065                           
 12066                           ; BSR set to: 0
 12067                           ;SerialFuncs.c: 93: printf(MessageBuffer);
 12068                           
 12069                           ; BSR set to: 0
 12070  0028BA  0EE6               	movlw	low _MessageBuffer
 12071  0028BC  0100               	movlb	0	; () banked
 12072  0028BE  6FAB               	movwf	printf@f& (0+255),b
 12073  0028C0  0E01               	movlw	high _MessageBuffer
 12074  0028C2  0100               	movlb	0	; () banked
 12075  0028C4  6FAC               	movwf	(printf@f+1)& (0+255),b
 12076  0028C6  ECFA  F009         	call	_printf	;wreg free
 12077                           
 12078                           ;SerialFuncs.c: 94: printf("\r\n");
 12079  0028CA  0E1B               	movlw	low (STR_7+15)
 12080  0028CC  0100               	movlb	0	; () banked
 12081  0028CE  6FAB               	movwf	printf@f& (0+255),b
 12082  0028D0  0E7F               	movlw	high (STR_7+15)
 12083  0028D2  0100               	movlb	0	; () banked
 12084  0028D4  6FAC               	movwf	(printf@f+1)& (0+255),b
 12085  0028D6  ECFA  F009         	call	_printf	;wreg free
 12086                           
 12087                           ;SerialFuncs.c: 95: month=atoi(LastMessage);
 12088  0028DA  0ED2               	movlw	low _LastMessage
 12089  0028DC  0100               	movlb	0	; () banked
 12090  0028DE  6FA5               	movwf	atoi@s& (0+255),b
 12091  0028E0  0E01               	movlw	high _LastMessage
 12092  0028E2  0100               	movlb	0	; () banked
 12093  0028E4  6FA6               	movwf	(atoi@s+1)& (0+255),b
 12094  0028E6  ECE0  F01B         	call	_atoi	;wreg free
 12095  0028EA  C0A5  F058         	movff	?_atoi,_month
 12096  0028EE  C0A6  F059         	movff	?_atoi+1,_month+1
 12097                           
 12098                           ;SerialFuncs.c: 96: NewMessage=0;
 12099  0028F2  0E00               	movlw	0
 12100  0028F4  0100               	movlb	0	; () banked
 12101  0028F6  6FDE               	movwf	(_NewMessage+1)& (0+255),b
 12102  0028F8  0E00               	movlw	0
 12103  0028FA  6FDD               	movwf	_NewMessage& (0+255),b
 12104                           
 12105                           ; BSR set to: 0
 12106                           ;SerialFuncs.c: 97: printf("Set Day: ");
 12107  0028FC  0ECF               	movlw	low STR_30
 12108  0028FE  0100               	movlb	0	; () banked
 12109  002900  6FAB               	movwf	printf@f& (0+255),b
 12110  002902  0E7F               	movlw	high STR_30
 12111  002904  0100               	movlb	0	; () banked
 12112  002906  6FAC               	movwf	(printf@f+1)& (0+255),b
 12113  002908  ECFA  F009         	call	_printf	;wreg free
 12114                           
 12115                           ;SerialFuncs.c: 98: while(NewMessage==0){};
 12116  00290C  D000               	goto	l5624
 12117  00290E                     l5624:
 12118  00290E  0100               	movlb	0	; () banked
 12119  002910  51DD               	movf	_NewMessage& (0+255),w,b
 12120  002912  0100               	movlb	0	; () banked
 12121  002914  11DE               	iorwf	(_NewMessage+1)& (0+255),w,b
 12122  002916  B4D8               	btfsc	status,2,c
 12123  002918  D7FA               	goto	l5624
 12124                           
 12125                           ; BSR set to: 0
 12126                           ;SerialFuncs.c: 99: printf(MessageBuffer);
 12127                           
 12128                           ; BSR set to: 0
 12129  00291A  0EE6               	movlw	low _MessageBuffer
 12130  00291C  0100               	movlb	0	; () banked
 12131  00291E  6FAB               	movwf	printf@f& (0+255),b
 12132  002920  0E01               	movlw	high _MessageBuffer
 12133  002922  0100               	movlb	0	; () banked
 12134  002924  6FAC               	movwf	(printf@f+1)& (0+255),b
 12135  002926  ECFA  F009         	call	_printf	;wreg free
 12136                           
 12137                           ;SerialFuncs.c: 100: printf("\r\n");
 12138  00292A  0E1B               	movlw	low (STR_7+15)
 12139  00292C  0100               	movlb	0	; () banked
 12140  00292E  6FAB               	movwf	printf@f& (0+255),b
 12141  002930  0E7F               	movlw	high (STR_7+15)
 12142  002932  0100               	movlb	0	; () banked
 12143  002934  6FAC               	movwf	(printf@f+1)& (0+255),b
 12144  002936  ECFA  F009         	call	_printf	;wreg free
 12145                           
 12146                           ;SerialFuncs.c: 101: day=atoi(LastMessage);
 12147  00293A  0ED2               	movlw	low _LastMessage
 12148  00293C  0100               	movlb	0	; () banked
 12149  00293E  6FA5               	movwf	atoi@s& (0+255),b
 12150  002940  0E01               	movlw	high _LastMessage
 12151  002942  0100               	movlb	0	; () banked
 12152  002944  6FA6               	movwf	(atoi@s+1)& (0+255),b
 12153  002946  ECE0  F01B         	call	_atoi	;wreg free
 12154  00294A  C0A5  F0DF         	movff	?_atoi,_day
 12155  00294E  C0A6  F0E0         	movff	?_atoi+1,_day+1
 12156                           
 12157                           ;SerialFuncs.c: 102: NewMessage=0;
 12158  002952  0E00               	movlw	0
 12159  002954  0100               	movlb	0	; () banked
 12160  002956  6FDE               	movwf	(_NewMessage+1)& (0+255),b
 12161  002958  0E00               	movlw	0
 12162  00295A  6FDD               	movwf	_NewMessage& (0+255),b
 12163                           
 12164                           ; BSR set to: 0
 12165                           ;SerialFuncs.c: 103: printf("Set Hours: ");
 12166  00295C  0EAD               	movlw	low STR_32
 12167  00295E  0100               	movlb	0	; () banked
 12168  002960  6FAB               	movwf	printf@f& (0+255),b
 12169  002962  0E7F               	movlw	high STR_32
 12170  002964  0100               	movlb	0	; () banked
 12171  002966  6FAC               	movwf	(printf@f+1)& (0+255),b
 12172  002968  ECFA  F009         	call	_printf	;wreg free
 12173                           
 12174                           ;SerialFuncs.c: 104: while(NewMessage==0){};
 12175  00296C  D000               	goto	l5634
 12176  00296E                     l5634:
 12177  00296E  0100               	movlb	0	; () banked
 12178  002970  51DD               	movf	_NewMessage& (0+255),w,b
 12179  002972  0100               	movlb	0	; () banked
 12180  002974  11DE               	iorwf	(_NewMessage+1)& (0+255),w,b
 12181  002976  B4D8               	btfsc	status,2,c
 12182  002978  D7FA               	goto	l5634
 12183                           
 12184                           ; BSR set to: 0
 12185                           ;SerialFuncs.c: 105: printf(MessageBuffer);
 12186                           
 12187                           ; BSR set to: 0
 12188  00297A  0EE6               	movlw	low _MessageBuffer
 12189  00297C  0100               	movlb	0	; () banked
 12190  00297E  6FAB               	movwf	printf@f& (0+255),b
 12191  002980  0E01               	movlw	high _MessageBuffer
 12192  002982  0100               	movlb	0	; () banked
 12193  002984  6FAC               	movwf	(printf@f+1)& (0+255),b
 12194  002986  ECFA  F009         	call	_printf	;wreg free
 12195                           
 12196                           ;SerialFuncs.c: 106: printf("\r\n");
 12197  00298A  0E1B               	movlw	low (STR_7+15)
 12198  00298C  0100               	movlb	0	; () banked
 12199  00298E  6FAB               	movwf	printf@f& (0+255),b
 12200  002990  0E7F               	movlw	high (STR_7+15)
 12201  002992  0100               	movlb	0	; () banked
 12202  002994  6FAC               	movwf	(printf@f+1)& (0+255),b
 12203  002996  ECFA  F009         	call	_printf	;wreg free
 12204                           
 12205                           ;SerialFuncs.c: 107: hours=atoi(LastMessage);
 12206  00299A  0ED2               	movlw	low _LastMessage
 12207  00299C  0100               	movlb	0	; () banked
 12208  00299E  6FA5               	movwf	atoi@s& (0+255),b
 12209  0029A0  0E01               	movlw	high _LastMessage
 12210  0029A2  0100               	movlb	0	; () banked
 12211  0029A4  6FA6               	movwf	(atoi@s+1)& (0+255),b
 12212  0029A6  ECE0  F01B         	call	_atoi	;wreg free
 12213  0029AA  C0A5  F032         	movff	?_atoi,_hours
 12214  0029AE  C0A6  F033         	movff	?_atoi+1,_hours+1
 12215                           
 12216                           ;SerialFuncs.c: 108: NewMessage=0;
 12217  0029B2  0E00               	movlw	0
 12218  0029B4  0100               	movlb	0	; () banked
 12219  0029B6  6FDE               	movwf	(_NewMessage+1)& (0+255),b
 12220  0029B8  0E00               	movlw	0
 12221  0029BA  6FDD               	movwf	_NewMessage& (0+255),b
 12222                           
 12223                           ; BSR set to: 0
 12224                           ;SerialFuncs.c: 109: printf("Set Minutes: ");
 12225  0029BC  0E86               	movlw	low STR_34
 12226  0029BE  0100               	movlb	0	; () banked
 12227  0029C0  6FAB               	movwf	printf@f& (0+255),b
 12228  0029C2  0E7F               	movlw	high STR_34
 12229  0029C4  0100               	movlb	0	; () banked
 12230  0029C6  6FAC               	movwf	(printf@f+1)& (0+255),b
 12231  0029C8  ECFA  F009         	call	_printf	;wreg free
 12232                           
 12233                           ;SerialFuncs.c: 110: while(NewMessage==0){};
 12234  0029CC  D000               	goto	l5644
 12235  0029CE                     l5644:
 12236  0029CE  0100               	movlb	0	; () banked
 12237  0029D0  51DD               	movf	_NewMessage& (0+255),w,b
 12238  0029D2  0100               	movlb	0	; () banked
 12239  0029D4  11DE               	iorwf	(_NewMessage+1)& (0+255),w,b
 12240  0029D6  B4D8               	btfsc	status,2,c
 12241  0029D8  D7FA               	goto	l5644
 12242                           
 12243                           ; BSR set to: 0
 12244                           ;SerialFuncs.c: 111: printf(MessageBuffer);
 12245                           
 12246                           ; BSR set to: 0
 12247  0029DA  0EE6               	movlw	low _MessageBuffer
 12248  0029DC  0100               	movlb	0	; () banked
 12249  0029DE  6FAB               	movwf	printf@f& (0+255),b
 12250  0029E0  0E01               	movlw	high _MessageBuffer
 12251  0029E2  0100               	movlb	0	; () banked
 12252  0029E4  6FAC               	movwf	(printf@f+1)& (0+255),b
 12253  0029E6  ECFA  F009         	call	_printf	;wreg free
 12254                           
 12255                           ;SerialFuncs.c: 112: printf("\r\n");
 12256  0029EA  0E1B               	movlw	low (STR_7+15)
 12257  0029EC  0100               	movlb	0	; () banked
 12258  0029EE  6FAB               	movwf	printf@f& (0+255),b
 12259  0029F0  0E7F               	movlw	high (STR_7+15)
 12260  0029F2  0100               	movlb	0	; () banked
 12261  0029F4  6FAC               	movwf	(printf@f+1)& (0+255),b
 12262  0029F6  ECFA  F009         	call	_printf	;wreg free
 12263                           
 12264                           ;SerialFuncs.c: 113: minutes=atoi(LastMessage);
 12265  0029FA  0ED2               	movlw	low _LastMessage
 12266  0029FC  0100               	movlb	0	; () banked
 12267  0029FE  6FA5               	movwf	atoi@s& (0+255),b
 12268  002A00  0E01               	movlw	high _LastMessage
 12269  002A02  0100               	movlb	0	; () banked
 12270  002A04  6FA6               	movwf	(atoi@s+1)& (0+255),b
 12271  002A06  ECE0  F01B         	call	_atoi	;wreg free
 12272  002A0A  C0A5  F036         	movff	?_atoi,_minutes
 12273  002A0E  C0A6  F037         	movff	?_atoi+1,_minutes+1
 12274                           
 12275                           ;SerialFuncs.c: 114: NewMessage=0;
 12276  002A12  0E00               	movlw	0
 12277  002A14  0100               	movlb	0	; () banked
 12278  002A16  6FDE               	movwf	(_NewMessage+1)& (0+255),b
 12279  002A18  0E00               	movlw	0
 12280  002A1A  6FDD               	movwf	_NewMessage& (0+255),b
 12281                           
 12282                           ; BSR set to: 0
 12283                           ;SerialFuncs.c: 119: seconds=0;
 12284  002A1C  0E00               	movlw	0
 12285  002A1E  6E39               	movwf	_seconds+1,c
 12286  002A20  0E00               	movlw	0
 12287  002A22  6E38               	movwf	_seconds,c
 12288                           
 12289                           ; BSR set to: 0
 12290                           ;SerialFuncs.c: 120: printf("Date and Time Set!\r\n");
 12291  002A24  0E2E               	movlw	low STR_36
 12292  002A26  0100               	movlb	0	; () banked
 12293  002A28  6FAB               	movwf	printf@f& (0+255),b
 12294  002A2A  0E7E               	movlw	high STR_36
 12295  002A2C  0100               	movlb	0	; () banked
 12296  002A2E  6FAC               	movwf	(printf@f+1)& (0+255),b
 12297  002A30  ECFA  F009         	call	_printf	;wreg free
 12298                           
 12299                           ;SerialFuncs.c: 121: printf("Date: %2i/%2i/%4i\r\n",day,month,year);
 12300  002A34  0EBF               	movlw	low STR_37
 12301  002A36  0100               	movlb	0	; () banked
 12302  002A38  6FAB               	movwf	printf@f& (0+255),b
 12303  002A3A  0E7E               	movlw	high STR_37
 12304  002A3C  0100               	movlb	0	; () banked
 12305  002A3E  6FAC               	movwf	(printf@f+1)& (0+255),b
 12306  002A40  C0DF  F0AD         	movff	_day,?_printf+2
 12307  002A44  C0E0  F0AE         	movff	_day+1,?_printf+3
 12308  002A48  C058  F0AF         	movff	_month,?_printf+4
 12309  002A4C  C059  F0B0         	movff	_month+1,?_printf+5
 12310  002A50  C05E  F0B1         	movff	_year,?_printf+6
 12311  002A54  C05F  F0B2         	movff	_year+1,?_printf+7
 12312  002A58  ECFA  F009         	call	_printf	;wreg free
 12313                           
 12314                           ;SerialFuncs.c: 122: printf("Time: %2i:%2i:%2i\r\n",hours,minutes,seconds);
 12315  002A5C  0EAB               	movlw	low STR_38
 12316  002A5E  0100               	movlb	0	; () banked
 12317  002A60  6FAB               	movwf	printf@f& (0+255),b
 12318  002A62  0E7E               	movlw	high STR_38
 12319  002A64  0100               	movlb	0	; () banked
 12320  002A66  6FAC               	movwf	(printf@f+1)& (0+255),b
 12321  002A68  C032  F0AD         	movff	_hours,?_printf+2
 12322  002A6C  C033  F0AE         	movff	_hours+1,?_printf+3
 12323  002A70  C036  F0AF         	movff	_minutes,?_printf+4
 12324  002A74  C037  F0B0         	movff	_minutes+1,?_printf+5
 12325  002A78  C038  F0B1         	movff	_seconds,?_printf+6
 12326  002A7C  C039  F0B2         	movff	_seconds+1,?_printf+7
 12327  002A80  ECFA  F009         	call	_printf	;wreg free
 12328                           
 12329                           ;SerialFuncs.c: 123: NewDay=1;
 12330  002A84  0E00               	movlw	0
 12331  002A86  6E51               	movwf	_NewDay+1,c
 12332  002A88  0E01               	movlw	1
 12333  002A8A  6E50               	movwf	_NewDay,c
 12334                           
 12335                           ;SerialFuncs.c: 124: NewMonth=1;
 12336  002A8C  0E00               	movlw	0
 12337  002A8E  0101               	movlb	1	; () banked
 12338  002A90  6F6F               	movwf	(_NewMonth+1)& (0+255),b
 12339  002A92  0E01               	movlw	1
 12340  002A94  6F6E               	movwf	_NewMonth& (0+255),b
 12341                           
 12342                           ; BSR set to: 1
 12343  002A96  0012               	return		;funcret
 12344  002A98                     __end_of_SetDateTime:
 12345                           	opt stack 0
 12346                           tblptru	equ	0xFF8
 12347                           tblptrh	equ	0xFF7
 12348                           tblptrl	equ	0xFF6
 12349                           tablat	equ	0xFF5
 12350                           indf0	equ	0xFEF
 12351                           postinc0	equ	0xFEE
 12352                           fsr0h	equ	0xFEA
 12353                           fsr0l	equ	0xFE9
 12354                           wreg	equ	0xFE8
 12355                           postinc1	equ	0xFE6
 12356                           postdec1	equ	0xFE5
 12357                           plusw1	equ	0xFE3
 12358                           fsr1h	equ	0xFE2
 12359                           fsr1l	equ	0xFE1
 12360                           indf2	equ	0xFDF
 12361                           postinc2	equ	0xFDE
 12362                           postdec2	equ	0xFDD
 12363                           plusw2	equ	0xFDB
 12364                           fsr2h	equ	0xFDA
 12365                           fsr2l	equ	0xFD9
 12366                           status	equ	0xFD8
 12367                           
 12368 ;; *************** function _printf *****************
 12369 ;; Defined at:
 12370 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 12371 ;; Parameters:    Size  Location     Type
 12372 ;;  f               2   43[BANK0 ] PTR const unsigned char 
 12373 ;;		 -> STR_57(140), STR_55(20), STR_54(3), STR_52(20), 
 12374 ;;		 -> STR_51(3), STR_49(20), STR_48(3), STR_47(31), 
 12375 ;;		 -> STR_46(3), STR_45(27), STR_44(3), STR_43(26), 
 12376 ;;		 -> STR_42(3), STR_41(34), STR_40(3), STR_38(20), 
 12377 ;;		 -> STR_37(20), STR_36(21), STR_35(3), STR_34(14), 
 12378 ;;		 -> STR_33(3), STR_32(12), STR_31(3), STR_30(10), 
 12379 ;;		 -> STR_29(3), STR_28(12), STR_27(3), STR_26(11), 
 12380 ;;		 -> MessageBuffer(20), STR_25(21), STR_24(11), STR_23(11), 
 12381 ;;		 -> STR_22(24), STR_21(9), STR_20(19), STR_19(9), 
 12382 ;;		 -> STR_18(19), STR_17(13), STR_16(17), STR_15(26), 
 12383 ;;		 -> STR_14(18), STR_13(4), STR_12(15), STR_11(14), 
 12384 ;;		 -> STR_10(19), STR_9(15), STR_8(14), STR_7(18), 
 12385 ;;		 -> STR_6(21), STR_5(18), STR_4(21), STR_3(18), 
 12386 ;;		 -> STR_2(21), STR_1(18), 
 12387 ;; Auto vars:     Size  Location     Type
 12388 ;;  tmpval          4    0        struct .
 12389 ;;  width           2   69[BANK0 ] int 
 12390 ;;  val             2   67[BANK0 ] unsigned int 
 12391 ;;  len             2   64[BANK0 ] unsigned int 
 12392 ;;  ap              2   62[BANK0 ] PTR void [1]
 12393 ;;		 -> ?i1_printf(2), ?_printf(2), 
 12394 ;;  cp              2   59[BANK0 ] PTR const unsigned char 
 12395 ;;		 -> printf@c(1), 
 12396 ;;  c               1   71[BANK0 ] char 
 12397 ;;  flag            1   66[BANK0 ] unsigned char 
 12398 ;;  prec            1   61[BANK0 ] char 
 12399 ;; Return value:  Size  Location     Type
 12400 ;;                  2   43[BANK0 ] int 
 12401 ;; Registers used:
 12402 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12403 ;; Tracked objects:
 12404 ;;		On entry : 0/0
 12405 ;;		On exit  : 0/0
 12406 ;;		Unchanged: 0/0
 12407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12408 ;;      Params:         0      12       0       0       0       0       0
 12409 ;;      Locals:         0      13       0       0       0       0       0
 12410 ;;      Temps:          0       4       0       0       0       0       0
 12411 ;;      Totals:         0      29       0       0       0       0       0
 12412 ;;Total ram usage:       29 bytes
 12413 ;; Hardware stack levels used:    1
 12414 ;; Hardware stack levels required when called:    6
 12415 ;; This function calls:
 12416 ;;		___lwdiv
 12417 ;;		___lwmod
 12418 ;;		___wmul
 12419 ;;		_isdigit
 12420 ;;		_putch
 12421 ;; This function is called by:
 12422 ;;		_main
 12423 ;;		_cmStuffsWrapperFun
 12424 ;;		_SetDateTime
 12425 ;;		_MessageRoutine
 12426 ;; This function uses a non-reentrant model
 12427 ;;
 12428                           
 12429                           	psect	text34
 12430  0013F4                     __ptext34:
 12431                           	opt stack 0
 12432  0013F4                     _printf:
 12433                           	opt stack 24
 12434                           
 12435                           ;doprnt.c: 466: va_list ap;
 12436                           ;doprnt.c: 499: signed char c;
 12437                           ;doprnt.c: 501: int width;
 12438                           ;doprnt.c: 506: signed char prec;
 12439                           ;doprnt.c: 508: unsigned char flag;
 12440                           ;doprnt.c: 523: union {
 12441                           ;doprnt.c: 524: unsigned long vd;
 12442                           ;doprnt.c: 525: double integ;
 12443                           ;doprnt.c: 526: } tmpval;
 12444                           ;doprnt.c: 528: unsigned int val;
 12445                           ;doprnt.c: 529: unsigned len;
 12446                           ;doprnt.c: 530: const char * cp;
 12447                           ;doprnt.c: 533: *ap = __va_start();
 12448                           
 12449                           ; BSR set to: 1
 12450                           ;incstack = 0
 12451  0013F4  0EAD               	movlw	low (?_printf+2)
 12452  0013F6  0100               	movlb	0	; () banked
 12453  0013F8  6FBE               	movwf	printf@ap& (0+255),b
 12454  0013FA  0E00               	movlw	high (?_printf+2)
 12455  0013FC  0100               	movlb	0	; () banked
 12456  0013FE  6FBF               	movwf	(printf@ap+1)& (0+255),b
 12457                           
 12458                           ;doprnt.c: 536: while(c = *f++) {
 12459  001400  D1D1               	goto	l5244
 12460  001402                     l5142:
 12461                           
 12462                           ; BSR set to: 0
 12463                           ;doprnt.c: 538: if(c != '%')
 12464  001402  0E25               	movlw	37
 12465  001404  0100               	movlb	0	; () banked
 12466  001406  19C7               	xorwf	printf@c& (0+255),w,b
 12467  001408  B4D8               	btfsc	status,2,c
 12468  00140A  D005               	goto	l5146
 12469                           
 12470                           ; BSR set to: 0
 12471                           ;doprnt.c: 540: {
 12472                           ;doprnt.c: 541: (putch(c) );
 12473  00140C  0100               	movlb	0	; () banked
 12474  00140E  51C7               	movf	printf@c& (0+255),w,b
 12475  001410  EC79  F022         	call	_putch
 12476                           
 12477                           ;doprnt.c: 542: continue;
 12478  001414  D1C7               	goto	l5244
 12479  001416                     l5146:
 12480                           
 12481                           ;doprnt.c: 543: }
 12482                           ;doprnt.c: 546: width = 0;
 12483  001416  0E00               	movlw	0
 12484  001418  0100               	movlb	0	; () banked
 12485  00141A  6FC6               	movwf	(printf@width+1)& (0+255),b
 12486  00141C  0E00               	movlw	0
 12487  00141E  6FC5               	movwf	printf@width& (0+255),b
 12488                           
 12489                           ;doprnt.c: 548: flag = 0;
 12490  001420  0E00               	movlw	0
 12491  001422  0100               	movlb	0	; () banked
 12492  001424  6FC2               	movwf	printf@flag& (0+255),b
 12493                           
 12494                           ; BSR set to: 0
 12495                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12496  001426  C0AB  FFF6         	movff	printf@f,tblptrl
 12497  00142A  C0AC  FFF7         	movff	printf@f+1,tblptrh
 12498  00142E  6AF8               	clrf	tblptru,c
 12499  001430  0E05               	movlw	(high __ramtop+-1)
 12500  001432  64F7               	cpfsgt	tblptrh,c
 12501  001434  D003               	bra	u5637
 12502  001436  0008               	tblrd		*
 12503  001438  50F5               	movf	tablat,w,c
 12504  00143A  D005               	bra	u5630
 12505  00143C                     u5637:
 12506  00143C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12507  001440  CFF7 FFEA          	movff	tblptrh,fsr0h
 12508  001444  50EF               	movf	indf0,w,c
 12509  001446                     u5630:
 12510  001446  ECA6  F021         	call	_isdigit
 12511  00144A  A0D8               	btfss	status,0,c
 12512  00144C  D0AA               	goto	l5184
 12513                           
 12514                           ;doprnt.c: 598: width = 0;
 12515  00144E  0E00               	movlw	0
 12516  001450  0100               	movlb	0	; () banked
 12517  001452  6FC6               	movwf	(printf@width+1)& (0+255),b
 12518  001454  0E00               	movlw	0
 12519  001456  6FC5               	movwf	printf@width& (0+255),b
 12520  001458  D000               	goto	l5152
 12521  00145A                     l5152:
 12522                           
 12523                           ;doprnt.c: 600: width *= 10;
 12524  00145A  C0C5  F09F         	movff	printf@width,___wmul@multiplier
 12525  00145E  C0C6  F0A0         	movff	printf@width+1,___wmul@multiplier+1
 12526  001462  0E00               	movlw	0
 12527  001464  0100               	movlb	0	; () banked
 12528  001466  6FA2               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12529  001468  0E0A               	movlw	10
 12530  00146A  6FA1               	movwf	___wmul@multiplicand& (0+255),b
 12531  00146C  EC72  F021         	call	___wmul	;wreg free
 12532  001470  C09F  F0C5         	movff	?___wmul,printf@width
 12533  001474  C0A0  F0C6         	movff	?___wmul+1,printf@width+1
 12534                           
 12535                           ;doprnt.c: 601: width += *f++ - '0';
 12536  001478  0ED0               	movlw	208
 12537  00147A  0100               	movlb	0	; () banked
 12538  00147C  6FB7               	movwf	??_printf& (0+255),b
 12539  00147E  0EFF               	movlw	255
 12540  001480  0100               	movlb	0	; () banked
 12541  001482  6FB8               	movwf	(??_printf+1)& (0+255),b
 12542  001484  C0AB  FFF6         	movff	printf@f,tblptrl
 12543  001488  C0AC  FFF7         	movff	printf@f+1,tblptrh
 12544  00148C  6AF8               	clrf	tblptru,c
 12545  00148E  0E05               	movlw	(high __ramtop+-1)
 12546  001490  64F7               	cpfsgt	tblptrh,c
 12547  001492  D003               	bra	u5657
 12548  001494  0008               	tblrd		*
 12549  001496  50F5               	movf	tablat,w,c
 12550  001498  D005               	bra	u5650
 12551  00149A                     u5657:
 12552  00149A  CFF6 FFE9          	movff	tblptrl,fsr0l
 12553  00149E  CFF7 FFEA          	movff	tblptrh,fsr0h
 12554  0014A2  50EF               	movf	indf0,w,c
 12555  0014A4                     u5650:
 12556  0014A4  0100               	movlb	0	; () banked
 12557  0014A6  6FB9               	movwf	(??_printf+2)& (0+255),b
 12558  0014A8  6BBA               	clrf	(??_printf+3)& (0+255),b
 12559  0014AA  0100               	movlb	0	; () banked
 12560  0014AC  51B7               	movf	??_printf& (0+255),w,b
 12561  0014AE  0100               	movlb	0	; () banked
 12562  0014B0  27B9               	addwf	(??_printf+2)& (0+255),f,b
 12563  0014B2  0100               	movlb	0	; () banked
 12564  0014B4  51B8               	movf	(??_printf+1)& (0+255),w,b
 12565  0014B6  0100               	movlb	0	; () banked
 12566  0014B8  23BA               	addwfc	(??_printf+3)& (0+255),f,b
 12567  0014BA  0100               	movlb	0	; () banked
 12568  0014BC  51B9               	movf	(??_printf+2)& (0+255),w,b
 12569  0014BE  0100               	movlb	0	; () banked
 12570  0014C0  27C5               	addwf	printf@width& (0+255),f,b
 12571  0014C2  0100               	movlb	0	; () banked
 12572  0014C4  51BA               	movf	(??_printf+3)& (0+255),w,b
 12573  0014C6  0100               	movlb	0	; () banked
 12574  0014C8  23C6               	addwfc	(printf@width+1)& (0+255),f,b
 12575                           
 12576                           ; BSR set to: 0
 12577  0014CA  0100               	movlb	0	; () banked
 12578  0014CC  4BAB               	infsnz	printf@f& (0+255),f,b
 12579  0014CE  2BAC               	incf	(printf@f+1)& (0+255),f,b
 12580                           
 12581                           ; BSR set to: 0
 12582                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12583  0014D0  C0AB  FFF6         	movff	printf@f,tblptrl
 12584  0014D4  C0AC  FFF7         	movff	printf@f+1,tblptrh
 12585  0014D8  6AF8               	clrf	tblptru,c
 12586  0014DA  0E05               	movlw	(high __ramtop+-1)
 12587  0014DC  64F7               	cpfsgt	tblptrh,c
 12588  0014DE  D003               	bra	u5667
 12589  0014E0  0008               	tblrd		*
 12590  0014E2  50F5               	movf	tablat,w,c
 12591  0014E4  D005               	bra	u5660
 12592  0014E6                     u5667:
 12593  0014E6  CFF6 FFE9          	movff	tblptrl,fsr0l
 12594  0014EA  CFF7 FFEA          	movff	tblptrh,fsr0h
 12595  0014EE  50EF               	movf	indf0,w,c
 12596  0014F0                     u5660:
 12597  0014F0  ECA6  F021         	call	_isdigit
 12598  0014F4  A0D8               	btfss	status,0,c
 12599  0014F6  D055               	goto	l5184
 12600  0014F8  D7B0               	goto	l5152
 12601                           
 12602                           ;doprnt.c: 608: }
 12603                           ;doprnt.c: 635: switch(c = *f++) {
 12604  0014FA  D053               	goto	l5184
 12605                           
 12606                           ;doprnt.c: 638: goto alldone;
 12607                           
 12608                           ;doprnt.c: 637: case 0:
 12609  0014FC  D176               	goto	l687
 12610                           
 12611                           ;doprnt.c: 698: case 'i':
 12612                           ;doprnt.c: 699: break;
 12613                           
 12614                           ;doprnt.c: 697: case 'd':
 12615  0014FE  D07D               	goto	l658
 12616  001500                     l5160:
 12617                           
 12618                           ;doprnt.c: 757: if(width > len)
 12619  001500  0100               	movlb	0	; () banked
 12620  001502  51C5               	movf	printf@width& (0+255),w,b
 12621  001504  0100               	movlb	0	; () banked
 12622  001506  5DC0               	subwf	printf@len& (0+255),w,b
 12623  001508  0100               	movlb	0	; () banked
 12624  00150A  51C6               	movf	(printf@width+1)& (0+255),w,b
 12625  00150C  0100               	movlb	0	; () banked
 12626  00150E  59C1               	subwfb	(printf@len+1)& (0+255),w,b
 12627  001510  B0D8               	btfsc	status,0,c
 12628  001512  D009               	goto	l5164
 12629                           
 12630                           ; BSR set to: 0
 12631                           ;doprnt.c: 758: width -= len;
 12632  001514  0100               	movlb	0	; () banked
 12633  001516  51C0               	movf	printf@len& (0+255),w,b
 12634  001518  0100               	movlb	0	; () banked
 12635  00151A  5FC5               	subwf	printf@width& (0+255),f,b
 12636  00151C  0100               	movlb	0	; () banked
 12637  00151E  51C1               	movf	(printf@len+1)& (0+255),w,b
 12638  001520  0100               	movlb	0	; () banked
 12639  001522  5BC6               	subwfb	(printf@width+1)& (0+255),f,b
 12640  001524  D00A               	goto	l5168
 12641  001526                     l5164:
 12642                           
 12643                           ; BSR set to: 0
 12644                           ;doprnt.c: 759: else
 12645                           ;doprnt.c: 760: width = 0;
 12646  001526  0E00               	movlw	0
 12647  001528  0100               	movlb	0	; () banked
 12648  00152A  6FC6               	movwf	(printf@width+1)& (0+255),b
 12649  00152C  0E00               	movlw	0
 12650  00152E  6FC5               	movwf	printf@width& (0+255),b
 12651                           
 12652                           ; BSR set to: 0
 12653                           ;doprnt.c: 764: while(width--)
 12654  001530  D004               	goto	l5168
 12655  001532                     l5166:
 12656                           
 12657                           ; BSR set to: 0
 12658                           ;doprnt.c: 765: (putch(' ') );
 12659  001532  0E20               	movlw	32
 12660  001534  EC79  F022         	call	_putch
 12661  001538  D000               	goto	l5168
 12662  00153A                     l5168:
 12663  00153A  0100               	movlb	0	; () banked
 12664  00153C  07C5               	decf	printf@width& (0+255),f,b
 12665  00153E  A0D8               	btfss	status,0,c
 12666  001540  07C6               	decf	(printf@width+1)& (0+255),f,b
 12667  001542  0100               	movlb	0	; () banked
 12668  001544  29C5               	incf	printf@width& (0+255),w,b
 12669  001546  E1F5               	bnz	l5166
 12670  001548  0100               	movlb	0	; () banked
 12671  00154A  29C6               	incf	(printf@width+1)& (0+255),w,b
 12672  00154C  B4D8               	btfsc	status,2,c
 12673  00154E  D00D               	goto	l5174
 12674  001550  D7F0               	goto	l5166
 12675                           
 12676                           ; BSR set to: 0
 12677                           ;doprnt.c: 767: while(len--)
 12678  001552  D00B               	goto	l5174
 12679  001554                     l5170:
 12680                           
 12681                           ; BSR set to: 0
 12682                           ;doprnt.c: 768: (putch(*cp++) );
 12683  001554  C0BB  FFD9         	movff	printf@cp,fsr2l
 12684  001558  C0BC  FFDA         	movff	printf@cp+1,fsr2h
 12685  00155C  50DF               	movf	indf2,w,c
 12686  00155E  EC79  F022         	call	_putch
 12687  001562  0100               	movlb	0	; () banked
 12688  001564  4BBB               	infsnz	printf@cp& (0+255),f,b
 12689  001566  2BBC               	incf	(printf@cp+1)& (0+255),f,b
 12690  001568  D000               	goto	l5174
 12691  00156A                     l5174:
 12692                           
 12693                           ; BSR set to: 0
 12694  00156A  0100               	movlb	0	; () banked
 12695  00156C  07C0               	decf	printf@len& (0+255),f,b
 12696  00156E  A0D8               	btfss	status,0,c
 12697  001570  07C1               	decf	(printf@len+1)& (0+255),f,b
 12698  001572  0100               	movlb	0	; () banked
 12699  001574  29C0               	incf	printf@len& (0+255),w,b
 12700  001576  E1EE               	bnz	l5170
 12701  001578  0100               	movlb	0	; () banked
 12702  00157A  29C1               	incf	(printf@len+1)& (0+255),w,b
 12703  00157C  B4D8               	btfsc	status,2,c
 12704  00157E  D112               	goto	l5244
 12705  001580  D7E9               	goto	l5170
 12706                           
 12707                           ; BSR set to: 0
 12708                           ;doprnt.c: 774: continue;
 12709  001582  D110               	goto	l5244
 12710  001584                     l5176:
 12711                           
 12712                           ; BSR set to: 0
 12713                           ;doprnt.c: 805: cp = (char *)&c;
 12714  001584  0EC7               	movlw	low printf@c
 12715  001586  0100               	movlb	0	; () banked
 12716  001588  6FBB               	movwf	printf@cp& (0+255),b
 12717  00158A  0E00               	movlw	high printf@c
 12718  00158C  0100               	movlb	0	; () banked
 12719  00158E  6FBC               	movwf	(printf@cp+1)& (0+255),b
 12720                           
 12721                           ; BSR set to: 0
 12722                           ;doprnt.c: 806: len = 1;
 12723  001590  0E00               	movlw	0
 12724  001592  0100               	movlb	0	; () banked
 12725  001594  6FC1               	movwf	(printf@len+1)& (0+255),b
 12726  001596  0E01               	movlw	1
 12727  001598  6FC0               	movwf	printf@len& (0+255),b
 12728                           
 12729                           ;doprnt.c: 807: goto dostring;
 12730  00159A  D7B2               	goto	l5160
 12731  00159C                     l5180:
 12732                           
 12733                           ; BSR set to: 0
 12734                           ;doprnt.c: 818: flag |= 0x40;
 12735  00159C  0100               	movlb	0	; () banked
 12736  00159E  8DC2               	bsf	printf@flag& (0+255),6,b
 12737                           
 12738                           ; BSR set to: 0
 12739                           ;doprnt.c: 822: }
 12740                           
 12741                           ;doprnt.c: 819: break;
 12742  0015A0  D02C               	goto	l658
 12743  0015A2                     l5184:
 12744  0015A2  0100               	movlb	0	; () banked
 12745  0015A4  51AB               	movf	printf@f& (0+255),w,b
 12746  0015A6  0100               	movlb	0	; () banked
 12747  0015A8  6FB7               	movwf	??_printf& (0+255),b
 12748  0015AA  0100               	movlb	0	; () banked
 12749  0015AC  51AC               	movf	(printf@f+1)& (0+255),w,b
 12750  0015AE  0100               	movlb	0	; () banked
 12751  0015B0  6FB8               	movwf	(??_printf+1)& (0+255),b
 12752  0015B2  0100               	movlb	0	; () banked
 12753  0015B4  4BAB               	infsnz	printf@f& (0+255),f,b
 12754  0015B6  2BAC               	incf	(printf@f+1)& (0+255),f,b
 12755  0015B8  C0B7  FFF6         	movff	??_printf,tblptrl
 12756  0015BC  C0B8  FFF7         	movff	??_printf+1,tblptrh
 12757  0015C0  6AF8               	clrf	tblptru,c
 12758  0015C2  0E05               	movlw	(high __ramtop+-1)
 12759  0015C4  64F7               	cpfsgt	tblptrh,c
 12760  0015C6  D003               	bra	u5717
 12761  0015C8  0008               	tblrd		*
 12762  0015CA  50F5               	movf	tablat,w,c
 12763  0015CC  D005               	bra	u5710
 12764  0015CE                     u5717:
 12765  0015CE  CFF6 FFE9          	movff	tblptrl,fsr0l
 12766  0015D2  CFF7 FFEA          	movff	tblptrh,fsr0h
 12767  0015D6  50EF               	movf	indf0,w,c
 12768  0015D8                     u5710:
 12769  0015D8  0100               	movlb	0	; () banked
 12770  0015DA  6FC7               	movwf	printf@c& (0+255),b
 12771  0015DC  0100               	movlb	0	; () banked
 12772  0015DE  51C7               	movf	printf@c& (0+255),w,b
 12773                           
 12774                           ; Switch size 1, requested type "space"
 12775                           ; Number of cases is 4, Range of values is 0 to 117
 12776                           ; switch strategies available:
 12777                           ; Name         Instructions Cycles
 12778                           ; simple_byte           13     7 (average)
 12779                           ;	Chosen strategy is simple_byte
 12780  0015E0  0A00               	xorlw	0	; case 0
 12781  0015E2  B4D8               	btfsc	status,2,c
 12782  0015E4  D102               	goto	l687
 12783  0015E6  0A64               	xorlw	100	; case 100
 12784  0015E8  B4D8               	btfsc	status,2,c
 12785  0015EA  D007               	goto	l658
 12786  0015EC  0A0D               	xorlw	13	; case 105
 12787  0015EE  B4D8               	btfsc	status,2,c
 12788  0015F0  D004               	goto	l658
 12789  0015F2  0A1C               	xorlw	28	; case 117
 12790  0015F4  B4D8               	btfsc	status,2,c
 12791  0015F6  D7D2               	goto	l5180
 12792  0015F8  D7C5               	goto	l5176
 12793  0015FA                     l658:
 12794                           
 12795                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 12796  0015FA  0100               	movlb	0	; () banked
 12797  0015FC  BDC2               	btfsc	printf@flag& (0+255),6,b
 12798  0015FE  D019               	goto	l5196
 12799                           
 12800                           ; BSR set to: 0
 12801                           ;doprnt.c: 1253: {
 12802                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12803  001600  C0BE  FFD9         	movff	printf@ap,fsr2l
 12804  001604  C0BF  FFDA         	movff	printf@ap+1,fsr2h
 12805  001608  CFDE F0C3          	movff	postinc2,printf@val
 12806  00160C  CFDD F0C4          	movff	postdec2,printf@val+1
 12807                           
 12808                           ; BSR set to: 0
 12809  001610  0E02               	movlw	2
 12810  001612  0100               	movlb	0	; () banked
 12811  001614  27BE               	addwf	printf@ap& (0+255),f,b
 12812  001616  0E00               	movlw	0
 12813  001618  23BF               	addwfc	(printf@ap+1)& (0+255),f,b
 12814                           
 12815                           ; BSR set to: 0
 12816                           ;doprnt.c: 1261: if((int)val < 0) {
 12817  00161A  0100               	movlb	0	; () banked
 12818  00161C  AFC4               	btfss	(printf@val+1)& (0+255),7,b
 12819  00161E  D017               	goto	l5200
 12820                           
 12821                           ; BSR set to: 0
 12822                           ;doprnt.c: 1262: flag |= 0x03;
 12823  001620  0E03               	movlw	3
 12824  001622  0100               	movlb	0	; () banked
 12825  001624  13C2               	iorwf	printf@flag& (0+255),f,b
 12826                           
 12827                           ; BSR set to: 0
 12828                           ;doprnt.c: 1263: val = -val;
 12829  001626  0100               	movlb	0	; () banked
 12830  001628  6DC3               	negf	printf@val& (0+255),b
 12831  00162A  1FC4               	comf	(printf@val+1)& (0+255),f,b
 12832  00162C  B0D8               	btfsc	status,0,c
 12833  00162E  2BC4               	incf	(printf@val+1)& (0+255),f,b
 12834                           
 12835                           ; BSR set to: 0
 12836                           ;doprnt.c: 1264: }
 12837                           ;doprnt.c: 1266: }
 12838  001630  D00E               	goto	l5200
 12839  001632                     l5196:
 12840                           
 12841                           ; BSR set to: 0
 12842                           ;doprnt.c: 1268: else
 12843                           ;doprnt.c: 1273: {
 12844                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12845  001632  C0BE  FFD9         	movff	printf@ap,fsr2l
 12846  001636  C0BF  FFDA         	movff	printf@ap+1,fsr2h
 12847  00163A  CFDE F0C3          	movff	postinc2,printf@val
 12848  00163E  CFDD F0C4          	movff	postdec2,printf@val+1
 12849                           
 12850                           ; BSR set to: 0
 12851  001642  0E02               	movlw	2
 12852  001644  0100               	movlb	0	; () banked
 12853  001646  27BE               	addwf	printf@ap& (0+255),f,b
 12854  001648  0E00               	movlw	0
 12855  00164A  23BF               	addwfc	(printf@ap+1)& (0+255),f,b
 12856  00164C  D000               	goto	l5200
 12857  00164E                     l5200:
 12858                           
 12859                           ; BSR set to: 0
 12860                           ;doprnt.c: 1287: }
 12861                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12862  00164E  0E01               	movlw	1
 12863  001650  0100               	movlb	0	; () banked
 12864  001652  6FC7               	movwf	printf@c& (0+255),b
 12865  001654                     l5202:
 12866                           
 12867                           ; BSR set to: 0
 12868  001654  0E05               	movlw	5
 12869  001656  0100               	movlb	0	; () banked
 12870  001658  19C7               	xorwf	printf@c& (0+255),w,b
 12871  00165A  B4D8               	btfsc	status,2,c
 12872  00165C  D01A               	goto	l5214
 12873  00165E  D001               	goto	l5206
 12874                           
 12875                           ; BSR set to: 0
 12876  001660  D018               	goto	l5214
 12877  001662                     l5206:
 12878                           
 12879                           ; BSR set to: 0
 12880                           ;doprnt.c: 1306: if(val < dpowers[c])
 12881  001662  0100               	movlb	0	; () banked
 12882  001664  51C7               	movf	printf@c& (0+255),w,b
 12883  001666  0D02               	mullw	2
 12884  001668  0ED5               	movlw	low _dpowers
 12885  00166A  24F3               	addwf	prodl,w,c
 12886  00166C  6EF6               	movwf	tblptrl,c
 12887  00166E  0E7C               	movlw	high _dpowers
 12888  001670  20F4               	addwfc	prodh,w,c
 12889  001672  6EF7               	movwf	tblptrh,c
 12890  001674                     	if	0	;There are less than 3 active tblptr bytes
 12891  001674                     	endif
 12892  001674  0009               	tblrd		*+
 12893  001676  50F5               	movf	tablat,w,c
 12894  001678  0100               	movlb	0	; () banked
 12895  00167A  5DC3               	subwf	printf@val& (0+255),w,b
 12896  00167C  0009               	tblrd		*+
 12897  00167E  50F5               	movf	tablat,w,c
 12898  001680  0100               	movlb	0	; () banked
 12899  001682  59C4               	subwfb	(printf@val+1)& (0+255),w,b
 12900  001684  A0D8               	btfss	status,0,c
 12901  001686  D005               	goto	l5214
 12902  001688  D001               	goto	l5210
 12903                           
 12904                           ; BSR set to: 0
 12905                           ;doprnt.c: 1307: break;
 12906  00168A  D003               	goto	l5214
 12907  00168C                     l5210:
 12908                           
 12909                           ; BSR set to: 0
 12910  00168C  0100               	movlb	0	; () banked
 12911  00168E  2BC7               	incf	printf@c& (0+255),f,b
 12912  001690  D7E1               	goto	l5202
 12913  001692                     l5214:
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12917  001692  0100               	movlb	0	; () banked
 12918  001694  51C5               	movf	printf@width& (0+255),w,b
 12919  001696  0100               	movlb	0	; () banked
 12920  001698  11C6               	iorwf	(printf@width+1)& (0+255),w,b
 12921  00169A  B4D8               	btfsc	status,2,c
 12922  00169C  D00C               	goto	l5220
 12923                           
 12924                           ; BSR set to: 0
 12925  00169E  C0C2  F0B7         	movff	printf@flag,??_printf
 12926  0016A2  0E03               	movlw	3
 12927  0016A4  0100               	movlb	0	; () banked
 12928  0016A6  17B7               	andwf	??_printf& (0+255),f,b
 12929  0016A8  B4D8               	btfsc	status,2,c
 12930  0016AA  D005               	goto	l5220
 12931                           
 12932                           ; BSR set to: 0
 12933                           ;doprnt.c: 1346: width--;
 12934  0016AC  0100               	movlb	0	; () banked
 12935  0016AE  07C5               	decf	printf@width& (0+255),f,b
 12936  0016B0  A0D8               	btfss	status,0,c
 12937  0016B2  07C6               	decf	(printf@width+1)& (0+255),f,b
 12938  0016B4  D000               	goto	l5220
 12939  0016B6                     l5220:
 12940                           
 12941                           ; BSR set to: 0
 12942                           ;doprnt.c: 1381: if(width > c)
 12943  0016B6  0E80               	movlw	128
 12944  0016B8  0100               	movlb	0	; () banked
 12945  0016BA  BFC7               	btfsc	printf@c& (0+255),7,b
 12946  0016BC  0E7F               	movlw	127
 12947  0016BE  0100               	movlb	0	; () banked
 12948  0016C0  6FB7               	movwf	??_printf& (0+255),b
 12949  0016C2  0100               	movlb	0	; () banked
 12950  0016C4  51C5               	movf	printf@width& (0+255),w,b
 12951  0016C6  0100               	movlb	0	; () banked
 12952  0016C8  5DC7               	subwf	printf@c& (0+255),w,b
 12953  0016CA  0100               	movlb	0	; () banked
 12954  0016CC  51C6               	movf	(printf@width+1)& (0+255),w,b
 12955  0016CE  0A80               	xorlw	128
 12956  0016D0  0100               	movlb	0	; () banked
 12957  0016D2  59B7               	subwfb	??_printf& (0+255),w,b
 12958  0016D4  B0D8               	btfsc	status,0,c
 12959  0016D6  D00B               	goto	l5224
 12960                           
 12961                           ; BSR set to: 0
 12962                           ;doprnt.c: 1382: width -= c;
 12963  0016D8  0100               	movlb	0	; () banked
 12964  0016DA  51C7               	movf	printf@c& (0+255),w,b
 12965  0016DC  0100               	movlb	0	; () banked
 12966  0016DE  5FC5               	subwf	printf@width& (0+255),f,b
 12967  0016E0  0E00               	movlw	0
 12968  0016E2  0100               	movlb	0	; () banked
 12969  0016E4  BFC7               	btfsc	printf@c& (0+255),7,b
 12970  0016E6  0EFF               	movlw	255
 12971  0016E8  0100               	movlb	0	; () banked
 12972  0016EA  5BC6               	subwfb	(printf@width+1)& (0+255),f,b
 12973  0016EC  D006               	goto	l5226
 12974  0016EE                     l5224:
 12975                           
 12976                           ; BSR set to: 0
 12977                           ;doprnt.c: 1383: else
 12978                           ;doprnt.c: 1384: width = 0;
 12979  0016EE  0E00               	movlw	0
 12980  0016F0  0100               	movlb	0	; () banked
 12981  0016F2  6FC6               	movwf	(printf@width+1)& (0+255),b
 12982  0016F4  0E00               	movlw	0
 12983  0016F6  6FC5               	movwf	printf@width& (0+255),b
 12984  0016F8  D000               	goto	l5226
 12985  0016FA                     l5226:
 12986                           
 12987                           ; BSR set to: 0
 12988                           ;doprnt.c: 1422: {
 12989                           ;doprnt.c: 1424: if(width
 12990                           ;doprnt.c: 1428: )
 12991  0016FA  0100               	movlb	0	; () banked
 12992  0016FC  51C5               	movf	printf@width& (0+255),w,b
 12993  0016FE  0100               	movlb	0	; () banked
 12994  001700  11C6               	iorwf	(printf@width+1)& (0+255),w,b
 12995  001702  B4D8               	btfsc	status,2,c
 12996  001704  D00F               	goto	l5232
 12997  001706                     l5228:
 12998                           
 12999                           ; BSR set to: 0
 13000                           ;doprnt.c: 1430: (putch(' ') );
 13001  001706  0E20               	movlw	32
 13002  001708  EC79  F022         	call	_putch
 13003                           
 13004                           ;doprnt.c: 1431: while(--width);
 13005  00170C  0100               	movlb	0	; () banked
 13006  00170E  07C5               	decf	printf@width& (0+255),f,b
 13007  001710  A0D8               	btfss	status,0,c
 13008  001712  07C6               	decf	(printf@width+1)& (0+255),f,b
 13009  001714  0100               	movlb	0	; () banked
 13010  001716  51C5               	movf	printf@width& (0+255),w,b
 13011  001718  0100               	movlb	0	; () banked
 13012  00171A  11C6               	iorwf	(printf@width+1)& (0+255),w,b
 13013  00171C  B4D8               	btfsc	status,2,c
 13014  00171E  D002               	goto	l5232
 13015  001720  D7F2               	goto	l5228
 13016                           
 13017                           ; BSR set to: 0
 13018  001722  D000               	goto	l5232
 13019  001724                     l5232:
 13020                           
 13021                           ; BSR set to: 0
 13022                           ;doprnt.c: 1438: if(flag & 0x03)
 13023  001724  C0C2  F0B7         	movff	printf@flag,??_printf
 13024  001728  0E03               	movlw	3
 13025  00172A  0100               	movlb	0	; () banked
 13026  00172C  17B7               	andwf	??_printf& (0+255),f,b
 13027  00172E  B4D8               	btfsc	status,2,c
 13028  001730  D004               	goto	l5236
 13029                           
 13030                           ; BSR set to: 0
 13031                           ;doprnt.c: 1439: (putch('-') );
 13032  001732  0E2D               	movlw	45
 13033  001734  EC79  F022         	call	_putch
 13034  001738  D000               	goto	l5236
 13035  00173A                     l5236:
 13036                           
 13037                           ;doprnt.c: 1469: }
 13038                           ;doprnt.c: 1472: prec = c;
 13039  00173A  C0C7  F0BD         	movff	printf@c,printf@prec
 13040                           
 13041                           ;doprnt.c: 1474: while(prec--) {
 13042  00173E  D02A               	goto	l5242
 13043  001740                     l5238:
 13044                           
 13045                           ;doprnt.c: 1478: {
 13046                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13047  001740  0100               	movlb	0	; () banked
 13048  001742  51BD               	movf	printf@prec& (0+255),w,b
 13049  001744  0D02               	mullw	2
 13050  001746  0ED5               	movlw	low _dpowers
 13051  001748  24F3               	addwf	prodl,w,c
 13052  00174A  6EF6               	movwf	tblptrl,c
 13053  00174C  0E7C               	movlw	high _dpowers
 13054  00174E  20F4               	addwfc	prodh,w,c
 13055  001750  6EF7               	movwf	tblptrh,c
 13056  001752                     	if	0	;There are less than 3 active tblptr bytes
 13057  001752                     	endif
 13058  001752  0009               	tblrd		*+
 13059  001754  CFF5 F0A1          	movff	tablat,___lwdiv@divisor
 13060  001758  000A               	tblrd		*-
 13061  00175A  CFF5 F0A2          	movff	tablat,___lwdiv@divisor+1
 13062  00175E  C0C3  F09F         	movff	printf@val,___lwdiv@dividend
 13063  001762  C0C4  F0A0         	movff	printf@val+1,___lwdiv@dividend+1
 13064  001766  EC7E  F01F         	call	___lwdiv	;wreg free
 13065  00176A  C09F  F0A6         	movff	?___lwdiv,___lwmod@dividend
 13066  00176E  C0A0  F0A7         	movff	?___lwdiv+1,___lwmod@dividend+1
 13067  001772  0E00               	movlw	0
 13068  001774  0100               	movlb	0	; () banked
 13069  001776  6FA9               	movwf	(___lwmod@divisor+1)& (0+255),b
 13070  001778  0E0A               	movlw	10
 13071  00177A  6FA8               	movwf	___lwmod@divisor& (0+255),b
 13072  00177C  ECFC  F01F         	call	___lwmod	;wreg free
 13073  001780  0100               	movlb	0	; () banked
 13074  001782  51A6               	movf	?___lwmod& (0+255),w,b
 13075  001784  0F30               	addlw	48
 13076  001786  0100               	movlb	0	; () banked
 13077  001788  6FC7               	movwf	printf@c& (0+255),b
 13078                           
 13079                           ; BSR set to: 0
 13080                           ;doprnt.c: 1523: }
 13081                           ;doprnt.c: 1524: (putch(c) );
 13082  00178A  0100               	movlb	0	; () banked
 13083  00178C  51C7               	movf	printf@c& (0+255),w,b
 13084  00178E  EC79  F022         	call	_putch
 13085  001792  D000               	goto	l5242
 13086  001794                     l5242:
 13087  001794  0100               	movlb	0	; () banked
 13088  001796  07BD               	decf	printf@prec& (0+255),f,b
 13089  001798  0100               	movlb	0	; () banked
 13090  00179A  29BD               	incf	printf@prec& (0+255),w,b
 13091  00179C  B4D8               	btfsc	status,2,c
 13092  00179E  D002               	goto	l5244
 13093  0017A0  D7CF               	goto	l5238
 13094                           
 13095                           ; BSR set to: 0
 13096  0017A2  D000               	goto	l5244
 13097  0017A4                     l5244:
 13098  0017A4  0100               	movlb	0	; () banked
 13099  0017A6  51AB               	movf	printf@f& (0+255),w,b
 13100  0017A8  0100               	movlb	0	; () banked
 13101  0017AA  6FB7               	movwf	??_printf& (0+255),b
 13102  0017AC  0100               	movlb	0	; () banked
 13103  0017AE  51AC               	movf	(printf@f+1)& (0+255),w,b
 13104  0017B0  0100               	movlb	0	; () banked
 13105  0017B2  6FB8               	movwf	(??_printf+1)& (0+255),b
 13106  0017B4  0100               	movlb	0	; () banked
 13107  0017B6  4BAB               	infsnz	printf@f& (0+255),f,b
 13108  0017B8  2BAC               	incf	(printf@f+1)& (0+255),f,b
 13109  0017BA  C0B7  FFF6         	movff	??_printf,tblptrl
 13110  0017BE  C0B8  FFF7         	movff	??_printf+1,tblptrh
 13111  0017C2  6AF8               	clrf	tblptru,c
 13112  0017C4  0E05               	movlw	(high __ramtop+-1)
 13113  0017C6  64F7               	cpfsgt	tblptrh,c
 13114  0017C8  D003               	bra	u5847
 13115  0017CA  0008               	tblrd		*
 13116  0017CC  50F5               	movf	tablat,w,c
 13117  0017CE  D005               	bra	u5840
 13118  0017D0                     u5847:
 13119  0017D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 13120  0017D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 13121  0017D8  50EF               	movf	indf0,w,c
 13122  0017DA                     u5840:
 13123  0017DA  0100               	movlb	0	; () banked
 13124  0017DC  6FC7               	movwf	printf@c& (0+255),b
 13125  0017DE  0100               	movlb	0	; () banked
 13126  0017E0  51C7               	movf	printf@c& (0+255),w,b
 13127  0017E2  B4D8               	btfsc	status,2,c
 13128  0017E4  D002               	goto	l687
 13129  0017E6  D60D               	goto	l5142
 13130                           
 13131                           ; BSR set to: 0
 13132  0017E8  D000               	goto	l687
 13133  0017EA                     l687:
 13134  0017EA  0012               	return		;funcret
 13135  0017EC                     __end_of_printf:
 13136                           	opt stack 0
 13137                           tblptru	equ	0xFF8
 13138                           tblptrh	equ	0xFF7
 13139                           tblptrl	equ	0xFF6
 13140                           tablat	equ	0xFF5
 13141                           prodh	equ	0xFF4
 13142                           prodl	equ	0xFF3
 13143                           indf0	equ	0xFEF
 13144                           postinc0	equ	0xFEE
 13145                           fsr0h	equ	0xFEA
 13146                           fsr0l	equ	0xFE9
 13147                           wreg	equ	0xFE8
 13148                           postinc1	equ	0xFE6
 13149                           postdec1	equ	0xFE5
 13150                           plusw1	equ	0xFE3
 13151                           fsr1h	equ	0xFE2
 13152                           fsr1l	equ	0xFE1
 13153                           indf2	equ	0xFDF
 13154                           postinc2	equ	0xFDE
 13155                           postdec2	equ	0xFDD
 13156                           plusw2	equ	0xFDB
 13157                           fsr2h	equ	0xFDA
 13158                           fsr2l	equ	0xFD9
 13159                           status	equ	0xFD8
 13160                           
 13161 ;; *************** function _putch *****************
 13162 ;; Defined at:
 13163 ;;		line 77 in file "SerialFuncs.c"
 13164 ;; Parameters:    Size  Location     Type
 13165 ;;  c               1    wreg     unsigned char 
 13166 ;; Auto vars:     Size  Location     Type
 13167 ;;  c               1   31[BANK0 ] unsigned char 
 13168 ;; Return value:  Size  Location     Type
 13169 ;;		None               void
 13170 ;; Registers used:
 13171 ;;		wreg
 13172 ;; Tracked objects:
 13173 ;;		On entry : 0/0
 13174 ;;		On exit  : 0/0
 13175 ;;		Unchanged: 0/0
 13176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13177 ;;      Params:         0       0       0       0       0       0       0
 13178 ;;      Locals:         0       1       0       0       0       0       0
 13179 ;;      Temps:          0       0       0       0       0       0       0
 13180 ;;      Totals:         0       1       0       0       0       0       0
 13181 ;;Total ram usage:        1 bytes
 13182 ;; Hardware stack levels used:    1
 13183 ;; Hardware stack levels required when called:    5
 13184 ;; This function calls:
 13185 ;;		Nothing
 13186 ;; This function is called by:
 13187 ;;		_printf
 13188 ;; This function uses a non-reentrant model
 13189 ;;
 13190                           
 13191                           	psect	text35
 13192  0044F2                     __ptext35:
 13193                           	opt stack 0
 13194  0044F2                     _putch:
 13195                           	opt stack 24
 13196                           
 13197                           ;incstack = 0
 13198                           ;putch@c stored from wreg
 13199  0044F2  0100               	movlb	0	; () banked
 13200  0044F4  6F9F               	movwf	putch@c& (0+255),b
 13201                           
 13202                           ; BSR set to: 0
 13203                           ;SerialFuncs.c: 79: while (!TXIF);
 13204  0044F6  D000               	goto	l331
 13205  0044F8                     l331:
 13206  0044F8  A89E               	btfss	3998,4,c	;volatile
 13207  0044FA  D7FE               	goto	l331
 13208                           
 13209                           ;SerialFuncs.c: 80: TXREG = c;
 13210  0044FC  C09F  FFAD         	movff	putch@c,4013	;volatile
 13211  004500  0012               	return		;funcret
 13212  004502                     __end_of_putch:
 13213                           	opt stack 0
 13214                           tblptru	equ	0xFF8
 13215                           tblptrh	equ	0xFF7
 13216                           tblptrl	equ	0xFF6
 13217                           tablat	equ	0xFF5
 13218                           prodh	equ	0xFF4
 13219                           prodl	equ	0xFF3
 13220                           indf0	equ	0xFEF
 13221                           postinc0	equ	0xFEE
 13222                           fsr0h	equ	0xFEA
 13223                           fsr0l	equ	0xFE9
 13224                           wreg	equ	0xFE8
 13225                           postinc1	equ	0xFE6
 13226                           postdec1	equ	0xFE5
 13227                           plusw1	equ	0xFE3
 13228                           fsr1h	equ	0xFE2
 13229                           fsr1l	equ	0xFE1
 13230                           indf2	equ	0xFDF
 13231                           postinc2	equ	0xFDE
 13232                           postdec2	equ	0xFDD
 13233                           plusw2	equ	0xFDB
 13234                           fsr2h	equ	0xFDA
 13235                           fsr2l	equ	0xFD9
 13236                           status	equ	0xFD8
 13237                           
 13238 ;; *************** function ___lwmod *****************
 13239 ;; Defined at:
 13240 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 13241 ;; Parameters:    Size  Location     Type
 13242 ;;  dividend        2   38[BANK0 ] unsigned int 
 13243 ;;  divisor         2   40[BANK0 ] unsigned int 
 13244 ;; Auto vars:     Size  Location     Type
 13245 ;;  counter         1   42[BANK0 ] unsigned char 
 13246 ;; Return value:  Size  Location     Type
 13247 ;;                  2   38[BANK0 ] unsigned int 
 13248 ;; Registers used:
 13249 ;;		wreg, status,2, status,0
 13250 ;; Tracked objects:
 13251 ;;		On entry : 0/0
 13252 ;;		On exit  : 0/0
 13253 ;;		Unchanged: 0/0
 13254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13255 ;;      Params:         0       4       0       0       0       0       0
 13256 ;;      Locals:         0       1       0       0       0       0       0
 13257 ;;      Temps:          0       0       0       0       0       0       0
 13258 ;;      Totals:         0       5       0       0       0       0       0
 13259 ;;Total ram usage:        5 bytes
 13260 ;; Hardware stack levels used:    1
 13261 ;; Hardware stack levels required when called:    5
 13262 ;; This function calls:
 13263 ;;		Nothing
 13264 ;; This function is called by:
 13265 ;;		_printf
 13266 ;; This function uses a non-reentrant model
 13267 ;;
 13268                           
 13269                           	psect	text36
 13270  003FF8                     __ptext36:
 13271                           	opt stack 0
 13272  003FF8                     ___lwmod:
 13273                           	opt stack 24
 13274                           
 13275                           ;incstack = 0
 13276  003FF8  0100               	movlb	0	; () banked
 13277  003FFA  51A8               	movf	___lwmod@divisor& (0+255),w,b
 13278  003FFC  0100               	movlb	0	; () banked
 13279  003FFE  11A9               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 13280  004000  B4D8               	btfsc	status,2,c
 13281  004002  D02B               	goto	l1383
 13282                           
 13283                           ; BSR set to: 0
 13284  004004  0E01               	movlw	1
 13285  004006  0100               	movlb	0	; () banked
 13286  004008  6FAA               	movwf	___lwmod@counter& (0+255),b
 13287  00400A  D007               	goto	l5130
 13288  00400C                     l5128:
 13289                           
 13290                           ; BSR set to: 0
 13291  00400C  0100               	movlb	0	; () banked
 13292  00400E  90D8               	bcf	status,0,c
 13293  004010  37A8               	rlcf	___lwmod@divisor& (0+255),f,b
 13294  004012  37A9               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 13295  004014  0100               	movlb	0	; () banked
 13296  004016  2BAA               	incf	___lwmod@counter& (0+255),f,b
 13297  004018  D000               	goto	l5130
 13298  00401A                     l5130:
 13299                           
 13300                           ; BSR set to: 0
 13301  00401A  0100               	movlb	0	; () banked
 13302  00401C  BFA9               	btfsc	(___lwmod@divisor+1)& (0+255),7,b
 13303  00401E  D002               	goto	l5132
 13304  004020  D7F5               	goto	l5128
 13305                           
 13306                           ; BSR set to: 0
 13307  004022  D000               	goto	l5132
 13308  004024                     l5132:
 13309                           
 13310                           ; BSR set to: 0
 13311  004024  0100               	movlb	0	; () banked
 13312  004026  51A8               	movf	___lwmod@divisor& (0+255),w,b
 13313  004028  0100               	movlb	0	; () banked
 13314  00402A  5DA6               	subwf	___lwmod@dividend& (0+255),w,b
 13315  00402C  0100               	movlb	0	; () banked
 13316  00402E  51A9               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13317  004030  0100               	movlb	0	; () banked
 13318  004032  59A7               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 13319  004034  A0D8               	btfss	status,0,c
 13320  004036  D009               	goto	l5136
 13321                           
 13322                           ; BSR set to: 0
 13323  004038  0100               	movlb	0	; () banked
 13324  00403A  51A8               	movf	___lwmod@divisor& (0+255),w,b
 13325  00403C  0100               	movlb	0	; () banked
 13326  00403E  5FA6               	subwf	___lwmod@dividend& (0+255),f,b
 13327  004040  0100               	movlb	0	; () banked
 13328  004042  51A9               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13329  004044  0100               	movlb	0	; () banked
 13330  004046  5BA7               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 13331  004048  D000               	goto	l5136
 13332  00404A                     l5136:
 13333                           
 13334                           ; BSR set to: 0
 13335  00404A  0100               	movlb	0	; () banked
 13336  00404C  90D8               	bcf	status,0,c
 13337  00404E  33A9               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 13338  004050  33A8               	rrcf	___lwmod@divisor& (0+255),f,b
 13339                           
 13340                           ; BSR set to: 0
 13341  004052  0100               	movlb	0	; () banked
 13342  004054  2FAA               	decfsz	___lwmod@counter& (0+255),f,b
 13343  004056  D7E6               	goto	l5132
 13344  004058  D000               	goto	l1383
 13345  00405A                     l1383:
 13346                           
 13347                           ; BSR set to: 0
 13348  00405A  C0A6  F0A6         	movff	___lwmod@dividend,?___lwmod
 13349  00405E  C0A7  F0A7         	movff	___lwmod@dividend+1,?___lwmod+1
 13350                           
 13351                           ; BSR set to: 0
 13352  004062  0012               	return		;funcret
 13353  004064                     __end_of___lwmod:
 13354                           	opt stack 0
 13355                           tblptru	equ	0xFF8
 13356                           tblptrh	equ	0xFF7
 13357                           tblptrl	equ	0xFF6
 13358                           tablat	equ	0xFF5
 13359                           prodh	equ	0xFF4
 13360                           prodl	equ	0xFF3
 13361                           indf0	equ	0xFEF
 13362                           postinc0	equ	0xFEE
 13363                           fsr0h	equ	0xFEA
 13364                           fsr0l	equ	0xFE9
 13365                           wreg	equ	0xFE8
 13366                           postinc1	equ	0xFE6
 13367                           postdec1	equ	0xFE5
 13368                           plusw1	equ	0xFE3
 13369                           fsr1h	equ	0xFE2
 13370                           fsr1l	equ	0xFE1
 13371                           indf2	equ	0xFDF
 13372                           postinc2	equ	0xFDE
 13373                           postdec2	equ	0xFDD
 13374                           plusw2	equ	0xFDB
 13375                           fsr2h	equ	0xFDA
 13376                           fsr2l	equ	0xFD9
 13377                           status	equ	0xFD8
 13378                           
 13379 ;; *************** function ___lwdiv *****************
 13380 ;; Defined at:
 13381 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 13382 ;; Parameters:    Size  Location     Type
 13383 ;;  dividend        2   31[BANK0 ] unsigned int 
 13384 ;;  divisor         2   33[BANK0 ] unsigned int 
 13385 ;; Auto vars:     Size  Location     Type
 13386 ;;  quotient        2   36[BANK0 ] unsigned int 
 13387 ;;  counter         1   35[BANK0 ] unsigned char 
 13388 ;; Return value:  Size  Location     Type
 13389 ;;                  2   31[BANK0 ] unsigned int 
 13390 ;; Registers used:
 13391 ;;		wreg, status,2, status,0
 13392 ;; Tracked objects:
 13393 ;;		On entry : 0/0
 13394 ;;		On exit  : 0/0
 13395 ;;		Unchanged: 0/0
 13396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13397 ;;      Params:         0       4       0       0       0       0       0
 13398 ;;      Locals:         0       3       0       0       0       0       0
 13399 ;;      Temps:          0       0       0       0       0       0       0
 13400 ;;      Totals:         0       7       0       0       0       0       0
 13401 ;;Total ram usage:        7 bytes
 13402 ;; Hardware stack levels used:    1
 13403 ;; Hardware stack levels required when called:    5
 13404 ;; This function calls:
 13405 ;;		Nothing
 13406 ;; This function is called by:
 13407 ;;		_printf
 13408 ;; This function uses a non-reentrant model
 13409 ;;
 13410                           
 13411                           	psect	text37
 13412  003EFC                     __ptext37:
 13413                           	opt stack 0
 13414  003EFC                     ___lwdiv:
 13415                           	opt stack 24
 13416                           
 13417                           ; BSR set to: 0
 13418                           ;incstack = 0
 13419  003EFC  0E00               	movlw	0
 13420  003EFE  0100               	movlb	0	; () banked
 13421  003F00  6FA5               	movwf	(___lwdiv@quotient+1)& (0+255),b
 13422  003F02  0E00               	movlw	0
 13423  003F04  6FA4               	movwf	___lwdiv@quotient& (0+255),b
 13424                           
 13425                           ; BSR set to: 0
 13426  003F06  0100               	movlb	0	; () banked
 13427  003F08  51A1               	movf	___lwdiv@divisor& (0+255),w,b
 13428  003F0A  0100               	movlb	0	; () banked
 13429  003F0C  11A2               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 13430  003F0E  B4D8               	btfsc	status,2,c
 13431  003F10  D031               	goto	l1373
 13432                           
 13433                           ; BSR set to: 0
 13434  003F12  0E01               	movlw	1
 13435  003F14  0100               	movlb	0	; () banked
 13436  003F16  6FA3               	movwf	___lwdiv@counter& (0+255),b
 13437  003F18  D007               	goto	l5110
 13438  003F1A                     l5108:
 13439                           
 13440                           ; BSR set to: 0
 13441  003F1A  0100               	movlb	0	; () banked
 13442  003F1C  90D8               	bcf	status,0,c
 13443  003F1E  37A1               	rlcf	___lwdiv@divisor& (0+255),f,b
 13444  003F20  37A2               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 13445  003F22  0100               	movlb	0	; () banked
 13446  003F24  2BA3               	incf	___lwdiv@counter& (0+255),f,b
 13447  003F26  D000               	goto	l5110
 13448  003F28                     l5110:
 13449                           
 13450                           ; BSR set to: 0
 13451  003F28  0100               	movlb	0	; () banked
 13452  003F2A  BFA2               	btfsc	(___lwdiv@divisor+1)& (0+255),7,b
 13453  003F2C  D002               	goto	l5112
 13454  003F2E  D7F5               	goto	l5108
 13455                           
 13456                           ; BSR set to: 0
 13457  003F30  D000               	goto	l5112
 13458  003F32                     l5112:
 13459                           
 13460                           ; BSR set to: 0
 13461  003F32  0100               	movlb	0	; () banked
 13462  003F34  90D8               	bcf	status,0,c
 13463  003F36  37A4               	rlcf	___lwdiv@quotient& (0+255),f,b
 13464  003F38  37A5               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 13465                           
 13466                           ; BSR set to: 0
 13467  003F3A  0100               	movlb	0	; () banked
 13468  003F3C  51A1               	movf	___lwdiv@divisor& (0+255),w,b
 13469  003F3E  0100               	movlb	0	; () banked
 13470  003F40  5D9F               	subwf	___lwdiv@dividend& (0+255),w,b
 13471  003F42  0100               	movlb	0	; () banked
 13472  003F44  51A2               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13473  003F46  0100               	movlb	0	; () banked
 13474  003F48  59A0               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 13475  003F4A  A0D8               	btfss	status,0,c
 13476  003F4C  D00B               	goto	l5120
 13477                           
 13478                           ; BSR set to: 0
 13479  003F4E  0100               	movlb	0	; () banked
 13480  003F50  51A1               	movf	___lwdiv@divisor& (0+255),w,b
 13481  003F52  0100               	movlb	0	; () banked
 13482  003F54  5F9F               	subwf	___lwdiv@dividend& (0+255),f,b
 13483  003F56  0100               	movlb	0	; () banked
 13484  003F58  51A2               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13485  003F5A  0100               	movlb	0	; () banked
 13486  003F5C  5BA0               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 13487                           
 13488                           ; BSR set to: 0
 13489  003F5E  0100               	movlb	0	; () banked
 13490  003F60  81A4               	bsf	___lwdiv@quotient& (0+255),0,b
 13491  003F62  D000               	goto	l5120
 13492  003F64                     l5120:
 13493                           
 13494                           ; BSR set to: 0
 13495  003F64  0100               	movlb	0	; () banked
 13496  003F66  90D8               	bcf	status,0,c
 13497  003F68  33A2               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 13498  003F6A  33A1               	rrcf	___lwdiv@divisor& (0+255),f,b
 13499                           
 13500                           ; BSR set to: 0
 13501  003F6C  0100               	movlb	0	; () banked
 13502  003F6E  2FA3               	decfsz	___lwdiv@counter& (0+255),f,b
 13503  003F70  D7E0               	goto	l5112
 13504  003F72  D000               	goto	l1373
 13505  003F74                     l1373:
 13506                           
 13507                           ; BSR set to: 0
 13508  003F74  C0A4  F09F         	movff	___lwdiv@quotient,?___lwdiv
 13509  003F78  C0A5  F0A0         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13510                           
 13511                           ; BSR set to: 0
 13512  003F7C  0012               	return		;funcret
 13513  003F7E                     __end_of___lwdiv:
 13514                           	opt stack 0
 13515                           tblptru	equ	0xFF8
 13516                           tblptrh	equ	0xFF7
 13517                           tblptrl	equ	0xFF6
 13518                           tablat	equ	0xFF5
 13519                           prodh	equ	0xFF4
 13520                           prodl	equ	0xFF3
 13521                           indf0	equ	0xFEF
 13522                           postinc0	equ	0xFEE
 13523                           fsr0h	equ	0xFEA
 13524                           fsr0l	equ	0xFE9
 13525                           wreg	equ	0xFE8
 13526                           postinc1	equ	0xFE6
 13527                           postdec1	equ	0xFE5
 13528                           plusw1	equ	0xFE3
 13529                           fsr1h	equ	0xFE2
 13530                           fsr1l	equ	0xFE1
 13531                           indf2	equ	0xFDF
 13532                           postinc2	equ	0xFDE
 13533                           postdec2	equ	0xFDD
 13534                           plusw2	equ	0xFDB
 13535                           fsr2h	equ	0xFDA
 13536                           fsr2l	equ	0xFD9
 13537                           status	equ	0xFD8
 13538                           
 13539 ;; *************** function _atoi *****************
 13540 ;; Defined at:
 13541 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\atoi.c"
 13542 ;; Parameters:    Size  Location     Type
 13543 ;;  s               2   37[BANK0 ] PTR const unsigned char 
 13544 ;;		 -> LastMessage(20), 
 13545 ;; Auto vars:     Size  Location     Type
 13546 ;;  a               2   42[BANK0 ] int 
 13547 ;;  sign            1   41[BANK0 ] unsigned char 
 13548 ;; Return value:  Size  Location     Type
 13549 ;;                  2   37[BANK0 ] int 
 13550 ;; Registers used:
 13551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13552 ;; Tracked objects:
 13553 ;;		On entry : 0/0
 13554 ;;		On exit  : 0/0
 13555 ;;		Unchanged: 0/0
 13556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13557 ;;      Params:         0       2       0       0       0       0       0
 13558 ;;      Locals:         0       3       0       0       0       0       0
 13559 ;;      Temps:          0       2       0       0       0       0       0
 13560 ;;      Totals:         0       7       0       0       0       0       0
 13561 ;;Total ram usage:        7 bytes
 13562 ;; Hardware stack levels used:    1
 13563 ;; Hardware stack levels required when called:    6
 13564 ;; This function calls:
 13565 ;;		___wmul
 13566 ;;		_isdigit
 13567 ;; This function is called by:
 13568 ;;		_SetDateTime
 13569 ;;		_MessageRoutine
 13570 ;; This function uses a non-reentrant model
 13571 ;;
 13572                           
 13573                           	psect	text38
 13574  0037C0                     __ptext38:
 13575                           	opt stack 0
 13576  0037C0                     _atoi:
 13577                           	opt stack 23
 13578                           
 13579                           ; BSR set to: 0
 13580                           ;incstack = 0
 13581  0037C0  D004               	goto	l5366
 13582  0037C2                     l5364:
 13583  0037C2  0100               	movlb	0	; () banked
 13584  0037C4  4BA5               	infsnz	atoi@s& (0+255),f,b
 13585  0037C6  2BA6               	incf	(atoi@s+1)& (0+255),f,b
 13586  0037C8  D000               	goto	l5366
 13587  0037CA                     l5366:
 13588  0037CA  C0A5  FFD9         	movff	atoi@s,fsr2l
 13589  0037CE  C0A6  FFDA         	movff	atoi@s+1,fsr2h
 13590  0037D2  0E20               	movlw	32
 13591  0037D4  18DE               	xorwf	postinc2,w,c
 13592  0037D6  B4D8               	btfsc	status,2,c
 13593  0037D8  D7F4               	goto	l5364
 13594  0037DA  C0A5  FFD9         	movff	atoi@s,fsr2l
 13595  0037DE  C0A6  FFDA         	movff	atoi@s+1,fsr2h
 13596  0037E2  0E09               	movlw	9
 13597  0037E4  18DE               	xorwf	postinc2,w,c
 13598  0037E6  B4D8               	btfsc	status,2,c
 13599  0037E8  D7EC               	goto	l5364
 13600  0037EA  0E00               	movlw	0
 13601  0037EC  0100               	movlb	0	; () banked
 13602  0037EE  6FAB               	movwf	(atoi@a+1)& (0+255),b
 13603  0037F0  0E00               	movlw	0
 13604  0037F2  6FAA               	movwf	atoi@a& (0+255),b
 13605  0037F4  0E00               	movlw	0
 13606  0037F6  0100               	movlb	0	; () banked
 13607  0037F8  6FA9               	movwf	atoi@sign& (0+255),b
 13608                           
 13609                           ; BSR set to: 0
 13610  0037FA  C0A5  FFD9         	movff	atoi@s,fsr2l
 13611  0037FE  C0A6  FFDA         	movff	atoi@s+1,fsr2h
 13612  003802  0E2D               	movlw	45
 13613  003804  18DE               	xorwf	postinc2,w,c
 13614  003806  A4D8               	btfss	status,2,c
 13615  003808  D003               	goto	l5376
 13616                           
 13617                           ; BSR set to: 0
 13618  00380A  0100               	movlb	0	; () banked
 13619  00380C  2BA9               	incf	atoi@sign& (0+255),f,b
 13620  00380E  D02F               	goto	l5382
 13621  003810                     l5376:
 13622                           
 13623                           ; BSR set to: 0
 13624  003810  C0A5  FFD9         	movff	atoi@s,fsr2l
 13625  003814  C0A6  FFDA         	movff	atoi@s+1,fsr2h
 13626  003818  0E2B               	movlw	43
 13627  00381A  18DE               	xorwf	postinc2,w,c
 13628  00381C  A4D8               	btfss	status,2,c
 13629  00381E  D02B               	goto	l5384
 13630  003820  D026               	goto	l5382
 13631                           
 13632                           ; BSR set to: 0
 13633                           
 13634                           ; BSR set to: 0
 13635                           
 13636                           ; BSR set to: 0
 13637  003822  D029               	goto	l5384
 13638  003824                     l5380:
 13639  003824  C0AA  F09F         	movff	atoi@a,___wmul@multiplier
 13640  003828  C0AB  F0A0         	movff	atoi@a+1,___wmul@multiplier+1
 13641  00382C  0E00               	movlw	0
 13642  00382E  0100               	movlb	0	; () banked
 13643  003830  6FA2               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13644  003832  0E0A               	movlw	10
 13645  003834  6FA1               	movwf	___wmul@multiplicand& (0+255),b
 13646  003836  EC72  F021         	call	___wmul	;wreg free
 13647  00383A  C0A5  FFD9         	movff	atoi@s,fsr2l
 13648  00383E  C0A6  FFDA         	movff	atoi@s+1,fsr2h
 13649  003842  50DF               	movf	indf2,w,c
 13650  003844  0100               	movlb	0	; () banked
 13651  003846  6FA7               	movwf	??_atoi& (0+255),b
 13652  003848  6BA8               	clrf	(??_atoi+1)& (0+255),b
 13653  00384A  0100               	movlb	0	; () banked
 13654  00384C  519F               	movf	?___wmul& (0+255),w,b
 13655  00384E  0100               	movlb	0	; () banked
 13656  003850  27A7               	addwf	??_atoi& (0+255),f,b
 13657  003852  0100               	movlb	0	; () banked
 13658  003854  51A0               	movf	(?___wmul+1)& (0+255),w,b
 13659  003856  0100               	movlb	0	; () banked
 13660  003858  23A8               	addwfc	(??_atoi+1)& (0+255),f,b
 13661  00385A  0ED0               	movlw	208
 13662  00385C  0100               	movlb	0	; () banked
 13663  00385E  25A7               	addwf	??_atoi& (0+255),w,b
 13664  003860  0100               	movlb	0	; () banked
 13665  003862  6FAA               	movwf	atoi@a& (0+255),b
 13666  003864  0EFF               	movlw	255
 13667  003866  0100               	movlb	0	; () banked
 13668  003868  21A8               	addwfc	(??_atoi+1)& (0+255),w,b
 13669  00386A  0100               	movlb	0	; () banked
 13670  00386C  6FAB               	movwf	(atoi@a+1)& (0+255),b
 13671  00386E                     l5382:
 13672                           
 13673                           ; BSR set to: 0
 13674  00386E  0100               	movlb	0	; () banked
 13675  003870  4BA5               	infsnz	atoi@s& (0+255),f,b
 13676  003872  2BA6               	incf	(atoi@s+1)& (0+255),f,b
 13677  003874  D000               	goto	l5384
 13678  003876                     l5384:
 13679                           
 13680                           ; BSR set to: 0
 13681  003876  C0A5  FFD9         	movff	atoi@s,fsr2l
 13682  00387A  C0A6  FFDA         	movff	atoi@s+1,fsr2h
 13683  00387E  50DF               	movf	indf2,w,c
 13684  003880  ECA6  F021         	call	_isdigit
 13685  003884  B0D8               	btfsc	status,0,c
 13686  003886  D7CE               	goto	l5380
 13687  003888  0100               	movlb	0	; () banked
 13688  00388A  51A9               	movf	atoi@sign& (0+255),w,b
 13689  00388C  0100               	movlb	0	; () banked
 13690  00388E  B4D8               	btfsc	status,2,c
 13691  003890  D00E               	goto	l980
 13692                           
 13693                           ; BSR set to: 0
 13694  003892  C0AA  F0A7         	movff	atoi@a,??_atoi
 13695  003896  C0AB  F0A8         	movff	atoi@a+1,??_atoi+1
 13696  00389A  0100               	movlb	0	; () banked
 13697  00389C  1FA7               	comf	??_atoi& (0+255),f,b
 13698  00389E  1FA8               	comf	(??_atoi+1)& (0+255),f,b
 13699  0038A0  4BA7               	infsnz	??_atoi& (0+255),f,b
 13700  0038A2  2BA8               	incf	(??_atoi+1)& (0+255),f,b
 13701  0038A4  C0A7  F0A5         	movff	??_atoi,?_atoi
 13702  0038A8  C0A8  F0A6         	movff	??_atoi+1,?_atoi+1
 13703  0038AC  D004               	goto	l981
 13704  0038AE                     l980:
 13705                           
 13706                           ; BSR set to: 0
 13707  0038AE  C0AA  F0A5         	movff	atoi@a,?_atoi
 13708  0038B2  C0AB  F0A6         	movff	atoi@a+1,?_atoi+1
 13709  0038B6                     l981:
 13710                           
 13711                           ; BSR set to: 0
 13712  0038B6  0012               	return		;funcret
 13713  0038B8                     __end_of_atoi:
 13714                           	opt stack 0
 13715                           tblptru	equ	0xFF8
 13716                           tblptrh	equ	0xFF7
 13717                           tblptrl	equ	0xFF6
 13718                           tablat	equ	0xFF5
 13719                           prodh	equ	0xFF4
 13720                           prodl	equ	0xFF3
 13721                           indf0	equ	0xFEF
 13722                           postinc0	equ	0xFEE
 13723                           fsr0h	equ	0xFEA
 13724                           fsr0l	equ	0xFE9
 13725                           wreg	equ	0xFE8
 13726                           postinc1	equ	0xFE6
 13727                           postdec1	equ	0xFE5
 13728                           plusw1	equ	0xFE3
 13729                           fsr1h	equ	0xFE2
 13730                           fsr1l	equ	0xFE1
 13731                           indf2	equ	0xFDF
 13732                           postinc2	equ	0xFDE
 13733                           postdec2	equ	0xFDD
 13734                           plusw2	equ	0xFDB
 13735                           fsr2h	equ	0xFDA
 13736                           fsr2l	equ	0xFD9
 13737                           status	equ	0xFD8
 13738                           
 13739 ;; *************** function _isdigit *****************
 13740 ;; Defined at:
 13741 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 13742 ;; Parameters:    Size  Location     Type
 13743 ;;  c               1    wreg     unsigned char 
 13744 ;; Auto vars:     Size  Location     Type
 13745 ;;  c               1   33[BANK0 ] unsigned char 
 13746 ;; Return value:  Size  Location     Type
 13747 ;;		None               void
 13748 ;; Registers used:
 13749 ;;		wreg, status,2, status,0
 13750 ;; Tracked objects:
 13751 ;;		On entry : 0/0
 13752 ;;		On exit  : 0/0
 13753 ;;		Unchanged: 0/0
 13754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13755 ;;      Params:         0       0       0       0       0       0       0
 13756 ;;      Locals:         0       2       0       0       0       0       0
 13757 ;;      Temps:          0       1       0       0       0       0       0
 13758 ;;      Totals:         0       3       0       0       0       0       0
 13759 ;;Total ram usage:        3 bytes
 13760 ;; Hardware stack levels used:    1
 13761 ;; Hardware stack levels required when called:    5
 13762 ;; This function calls:
 13763 ;;		Nothing
 13764 ;; This function is called by:
 13765 ;;		_printf
 13766 ;;		_atoi
 13767 ;; This function uses a non-reentrant model
 13768 ;;
 13769                           
 13770                           	psect	text39
 13771  00434C                     __ptext39:
 13772                           	opt stack 0
 13773  00434C                     _isdigit:
 13774                           	opt stack 24
 13775                           
 13776                           ; BSR set to: 0
 13777                           ;incstack = 0
 13778                           ;isdigit@c stored from wreg
 13779  00434C  0100               	movlb	0	; () banked
 13780  00434E  6FA1               	movwf	isdigit@c& (0+255),b
 13781                           
 13782                           ; BSR set to: 0
 13783  004350  0E00               	movlw	0
 13784  004352  0100               	movlb	0	; () banked
 13785  004354  6FA0               	movwf	_isdigit$2250& (0+255),b
 13786                           
 13787                           ; BSR set to: 0
 13788  004356  0E3A               	movlw	58
 13789  004358  0100               	movlb	0	; () banked
 13790  00435A  61A1               	cpfslt	isdigit@c& (0+255),b
 13791  00435C  D008               	goto	l5050
 13792                           
 13793                           ; BSR set to: 0
 13794  00435E  0E2F               	movlw	47
 13795  004360  0100               	movlb	0	; () banked
 13796  004362  65A1               	cpfsgt	isdigit@c& (0+255),b
 13797  004364  D004               	goto	l5050
 13798                           
 13799                           ; BSR set to: 0
 13800  004366  0E01               	movlw	1
 13801  004368  0100               	movlb	0	; () banked
 13802  00436A  6FA0               	movwf	_isdigit$2250& (0+255),b
 13803  00436C  D000               	goto	l5050
 13804  00436E                     l5050:
 13805                           
 13806                           ; BSR set to: 0
 13807  00436E  C0A0  F09F         	movff	_isdigit$2250,??_isdigit
 13808  004372  0100               	movlb	0	; () banked
 13809  004374  319F               	rrcf	??_isdigit& (0+255),w,b
 13810  004376  D000               	goto	l1265
 13811  004378                     l1265:
 13812                           
 13813                           ; BSR set to: 0
 13814  004378  0012               	return		;funcret
 13815  00437A                     __end_of_isdigit:
 13816                           	opt stack 0
 13817                           tblptru	equ	0xFF8
 13818                           tblptrh	equ	0xFF7
 13819                           tblptrl	equ	0xFF6
 13820                           tablat	equ	0xFF5
 13821                           prodh	equ	0xFF4
 13822                           prodl	equ	0xFF3
 13823                           indf0	equ	0xFEF
 13824                           postinc0	equ	0xFEE
 13825                           fsr0h	equ	0xFEA
 13826                           fsr0l	equ	0xFE9
 13827                           wreg	equ	0xFE8
 13828                           postinc1	equ	0xFE6
 13829                           postdec1	equ	0xFE5
 13830                           plusw1	equ	0xFE3
 13831                           fsr1h	equ	0xFE2
 13832                           fsr1l	equ	0xFE1
 13833                           indf2	equ	0xFDF
 13834                           postinc2	equ	0xFDE
 13835                           postdec2	equ	0xFDD
 13836                           plusw2	equ	0xFDB
 13837                           fsr2h	equ	0xFDA
 13838                           fsr2l	equ	0xFD9
 13839                           status	equ	0xFD8
 13840                           
 13841 ;; *************** function ___wmul *****************
 13842 ;; Defined at:
 13843 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 13844 ;; Parameters:    Size  Location     Type
 13845 ;;  multiplier      2   31[BANK0 ] unsigned int 
 13846 ;;  multiplicand    2   33[BANK0 ] unsigned int 
 13847 ;; Auto vars:     Size  Location     Type
 13848 ;;  product         2   35[BANK0 ] unsigned int 
 13849 ;; Return value:  Size  Location     Type
 13850 ;;                  2   31[BANK0 ] unsigned int 
 13851 ;; Registers used:
 13852 ;;		wreg, status,2, status,0, prodl, prodh
 13853 ;; Tracked objects:
 13854 ;;		On entry : 0/0
 13855 ;;		On exit  : 0/0
 13856 ;;		Unchanged: 0/0
 13857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13858 ;;      Params:         0       4       0       0       0       0       0
 13859 ;;      Locals:         0       2       0       0       0       0       0
 13860 ;;      Temps:          0       0       0       0       0       0       0
 13861 ;;      Totals:         0       6       0       0       0       0       0
 13862 ;;Total ram usage:        6 bytes
 13863 ;; Hardware stack levels used:    1
 13864 ;; Hardware stack levels required when called:    5
 13865 ;; This function calls:
 13866 ;;		Nothing
 13867 ;; This function is called by:
 13868 ;;		_cmStuffsWrapperFun
 13869 ;;		_cmFilterHighPassUsingLowPass
 13870 ;;		_cmFftFun
 13871 ;;		_printf
 13872 ;;		_atoi
 13873 ;;		_eval_poly
 13874 ;; This function uses a non-reentrant model
 13875 ;;
 13876                           
 13877                           	psect	text40
 13878  0042E4                     __ptext40:
 13879                           	opt stack 0
 13880  0042E4                     ___wmul:
 13881                           	opt stack 24
 13882                           
 13883                           ; BSR set to: 0
 13884                           ;incstack = 0
 13885  0042E4  0100               	movlb	0	; () banked
 13886  0042E6  519F               	movf	___wmul@multiplier& (0+255),w,b
 13887  0042E8  0100               	movlb	0	; () banked
 13888  0042EA  03A1               	mulwf	___wmul@multiplicand& (0+255),b
 13889  0042EC  CFF3 F0A3          	movff	prodl,___wmul@product
 13890  0042F0  CFF4 F0A4          	movff	prodh,___wmul@product+1
 13891  0042F4  0100               	movlb	0	; () banked
 13892  0042F6  519F               	movf	___wmul@multiplier& (0+255),w,b
 13893  0042F8  0100               	movlb	0	; () banked
 13894  0042FA  03A2               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13895  0042FC  50F3               	movf	prodl,w,c
 13896  0042FE  0100               	movlb	0	; () banked
 13897  004300  27A4               	addwf	(___wmul@product+1)& (0+255),f,b
 13898  004302  0100               	movlb	0	; () banked
 13899  004304  51A0               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13900  004306  0100               	movlb	0	; () banked
 13901  004308  03A1               	mulwf	___wmul@multiplicand& (0+255),b
 13902  00430A  50F3               	movf	prodl,w,c
 13903  00430C  0100               	movlb	0	; () banked
 13904  00430E  27A4               	addwf	(___wmul@product+1)& (0+255),f,b
 13905                           
 13906                           ; BSR set to: 0
 13907  004310  C0A3  F09F         	movff	___wmul@product,?___wmul
 13908  004314  C0A4  F0A0         	movff	___wmul@product+1,?___wmul+1
 13909  004318  D000               	goto	l794
 13910  00431A                     l794:
 13911                           
 13912                           ; BSR set to: 0
 13913  00431A  0012               	return		;funcret
 13914  00431C                     __end_of___wmul:
 13915                           	opt stack 0
 13916                           tblptru	equ	0xFF8
 13917                           tblptrh	equ	0xFF7
 13918                           tblptrl	equ	0xFF6
 13919                           tablat	equ	0xFF5
 13920                           prodh	equ	0xFF4
 13921                           prodl	equ	0xFF3
 13922                           indf0	equ	0xFEF
 13923                           postinc0	equ	0xFEE
 13924                           fsr0h	equ	0xFEA
 13925                           fsr0l	equ	0xFE9
 13926                           wreg	equ	0xFE8
 13927                           postinc1	equ	0xFE6
 13928                           postdec1	equ	0xFE5
 13929                           plusw1	equ	0xFE3
 13930                           fsr1h	equ	0xFE2
 13931                           fsr1l	equ	0xFE1
 13932                           indf2	equ	0xFDF
 13933                           postinc2	equ	0xFDE
 13934                           postdec2	equ	0xFDD
 13935                           plusw2	equ	0xFDB
 13936                           fsr2h	equ	0xFDA
 13937                           fsr2l	equ	0xFD9
 13938                           status	equ	0xFD8
 13939                           
 13940 ;; *************** function _Delay1KTCYx *****************
 13941 ;; Defined at:
 13942 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
 13943 ;; Parameters:    Size  Location     Type
 13944 ;;  unit            1    wreg     unsigned char 
 13945 ;; Auto vars:     Size  Location     Type
 13946 ;;  unit            1   31[BANK0 ] unsigned char 
 13947 ;; Return value:  Size  Location     Type
 13948 ;;		None               void
 13949 ;; Registers used:
 13950 ;;		wreg
 13951 ;; Tracked objects:
 13952 ;;		On entry : 0/0
 13953 ;;		On exit  : 0/0
 13954 ;;		Unchanged: 0/0
 13955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13956 ;;      Params:         0       0       0       0       0       0       0
 13957 ;;      Locals:         0       1       0       0       0       0       0
 13958 ;;      Temps:          0       0       0       0       0       0       0
 13959 ;;      Totals:         0       1       0       0       0       0       0
 13960 ;;Total ram usage:        1 bytes
 13961 ;; Hardware stack levels used:    1
 13962 ;; Hardware stack levels required when called:    5
 13963 ;; This function calls:
 13964 ;;		Nothing
 13965 ;; This function is called by:
 13966 ;;		_MessageRoutine
 13967 ;; This function uses a non-reentrant model
 13968 ;;
 13969                           
 13970                           	psect	text41
 13971  0044A4                     __ptext41:
 13972                           	opt stack 0
 13973  0044A4                     _Delay1KTCYx:
 13974                           	opt stack 24
 13975                           
 13976                           ; BSR set to: 0
 13977                           ;incstack = 0
 13978                           ;Delay1KTCYx@unit stored from wreg
 13979  0044A4  0100               	movlb	0	; () banked
 13980  0044A6  6F9F               	movwf	Delay1KTCYx@unit& (0+255),b
 13981  0044A8                     
 13982                           ; BSR set to: 0
 13983  0044A8  0EFA               	movlw	250
 13984  0044AA                     u7237:
 13985  0044AA  F000               	nop	
 13986  0044AC  2EE8               	decfsz	wreg,f,c
 13987  0044AE  D7FD               	goto	u7237
 13988  0044B0  0100               	movlb	0	; () banked
 13989  0044B2  2F9F               	decfsz	Delay1KTCYx@unit& (0+255),f,b
 13990  0044B4  D7F9               	goto	l5676
 13991  0044B6  D000               	goto	l1052
 13992  0044B8                     l1052:
 13993                           
 13994                           ; BSR set to: 0
 13995  0044B8  0012               	return		;funcret
 13996  0044BA                     __end_of_Delay1KTCYx:
 13997                           	opt stack 0
 13998                           tblptru	equ	0xFF8
 13999                           tblptrh	equ	0xFF7
 14000                           tblptrl	equ	0xFF6
 14001                           tablat	equ	0xFF5
 14002                           prodh	equ	0xFF4
 14003                           prodl	equ	0xFF3
 14004                           indf0	equ	0xFEF
 14005                           postinc0	equ	0xFEE
 14006                           fsr0h	equ	0xFEA
 14007                           fsr0l	equ	0xFE9
 14008                           wreg	equ	0xFE8
 14009                           postinc1	equ	0xFE6
 14010                           postdec1	equ	0xFE5
 14011                           plusw1	equ	0xFE3
 14012                           fsr1h	equ	0xFE2
 14013                           fsr1l	equ	0xFE1
 14014                           indf2	equ	0xFDF
 14015                           postinc2	equ	0xFDE
 14016                           postdec2	equ	0xFDD
 14017                           plusw2	equ	0xFDB
 14018                           fsr2h	equ	0xFDA
 14019                           fsr2l	equ	0xFD9
 14020                           status	equ	0xFD8
 14021                           
 14022 ;; *************** function _InitUSART *****************
 14023 ;; Defined at:
 14024 ;;		line 55 in file "SerialFuncs.c"
 14025 ;; Parameters:    Size  Location     Type
 14026 ;;		None
 14027 ;; Auto vars:     Size  Location     Type
 14028 ;;		None
 14029 ;; Return value:  Size  Location     Type
 14030 ;;		None               void
 14031 ;; Registers used:
 14032 ;;		wreg, status,2, cstack
 14033 ;; Tracked objects:
 14034 ;;		On entry : 0/0
 14035 ;;		On exit  : 0/0
 14036 ;;		Unchanged: 0/0
 14037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14038 ;;      Params:         0       0       0       0       0       0       0
 14039 ;;      Locals:         0       0       0       0       0       0       0
 14040 ;;      Temps:          0       0       0       0       0       0       0
 14041 ;;      Totals:         0       0       0       0       0       0       0
 14042 ;;Total ram usage:        0 bytes
 14043 ;; Hardware stack levels used:    1
 14044 ;; Hardware stack levels required when called:    6
 14045 ;; This function calls:
 14046 ;;		_OpenUSART
 14047 ;; This function is called by:
 14048 ;;		_main
 14049 ;; This function uses a non-reentrant model
 14050 ;;
 14051                           
 14052                           	psect	text42
 14053  00443A                     __ptext42:
 14054                           	opt stack 0
 14055  00443A                     _InitUSART:
 14056                           	opt stack 24
 14057                           
 14058                           ;SerialFuncs.c: 57: TRISCbits.RC6 = 0;
 14059                           
 14060                           ; BSR set to: 0
 14061                           ;incstack = 0
 14062  00443A  9C94               	bcf	3988,6,c	;volatile
 14063                           
 14064                           ;SerialFuncs.c: 58: TRISCbits.RC7 = 1;
 14065  00443C  8E94               	bsf	3988,7,c	;volatile
 14066                           
 14067                           ;SerialFuncs.c: 60: UART1Config = 0b01111111 & 0b11111111 & 0b11111110 & 0b11111101 & 0b
      +                          11111111 ;
 14068  00443E  0E7C               	movlw	124
 14069  004440  6E60               	movwf	_UART1Config,c
 14070                           
 14071                           ;SerialFuncs.c: 61: baud = 35;
 14072  004442  0E23               	movlw	35
 14073  004444  0101               	movlb	1	; () banked
 14074  004446  6FFA               	movwf	_baud& (0+255),b
 14075                           
 14076                           ; BSR set to: 1
 14077                           ;SerialFuncs.c: 62: OpenUSART(UART1Config,baud);
 14078  004448  C1FA  F09F         	movff	_baud,OpenUSART@spbrg
 14079  00444C  0100               	movlb	0	; () banked
 14080  00444E  6BA0               	clrf	(OpenUSART@spbrg+1)& (0+255),b
 14081  004450  5060               	movf	_UART1Config,w,c
 14082  004452  EC3C  F01F         	call	_OpenUSART
 14083                           
 14084                           ;SerialFuncs.c: 63: BAUDCONbits.BRG16=1;
 14085  004456  86B8               	bsf	4024,3,c	;volatile
 14086  004458  0012               	return		;funcret
 14087  00445A                     __end_of_InitUSART:
 14088                           	opt stack 0
 14089                           tblptru	equ	0xFF8
 14090                           tblptrh	equ	0xFF7
 14091                           tblptrl	equ	0xFF6
 14092                           tablat	equ	0xFF5
 14093                           prodh	equ	0xFF4
 14094                           prodl	equ	0xFF3
 14095                           indf0	equ	0xFEF
 14096                           postinc0	equ	0xFEE
 14097                           fsr0h	equ	0xFEA
 14098                           fsr0l	equ	0xFE9
 14099                           wreg	equ	0xFE8
 14100                           postinc1	equ	0xFE6
 14101                           postdec1	equ	0xFE5
 14102                           plusw1	equ	0xFE3
 14103                           fsr1h	equ	0xFE2
 14104                           fsr1l	equ	0xFE1
 14105                           indf2	equ	0xFDF
 14106                           postinc2	equ	0xFDE
 14107                           postdec2	equ	0xFDD
 14108                           plusw2	equ	0xFDB
 14109                           fsr2h	equ	0xFDA
 14110                           fsr2l	equ	0xFD9
 14111                           status	equ	0xFD8
 14112                           
 14113 ;; *************** function _OpenUSART *****************
 14114 ;; Defined at:
 14115 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 14116 ;; Parameters:    Size  Location     Type
 14117 ;;  config          1    wreg     unsigned char 
 14118 ;;  spbrg           2   31[BANK0 ] unsigned int 
 14119 ;; Auto vars:     Size  Location     Type
 14120 ;;  config          1   33[BANK0 ] unsigned char 
 14121 ;; Return value:  Size  Location     Type
 14122 ;;		None               void
 14123 ;; Registers used:
 14124 ;;		wreg, status,2
 14125 ;; Tracked objects:
 14126 ;;		On entry : 0/0
 14127 ;;		On exit  : 0/0
 14128 ;;		Unchanged: 0/0
 14129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14130 ;;      Params:         0       2       0       0       0       0       0
 14131 ;;      Locals:         0       1       0       0       0       0       0
 14132 ;;      Temps:          0       0       0       0       0       0       0
 14133 ;;      Totals:         0       3       0       0       0       0       0
 14134 ;;Total ram usage:        3 bytes
 14135 ;; Hardware stack levels used:    1
 14136 ;; Hardware stack levels required when called:    5
 14137 ;; This function calls:
 14138 ;;		Nothing
 14139 ;; This function is called by:
 14140 ;;		_InitUSART
 14141 ;; This function uses a non-reentrant model
 14142 ;;
 14143                           
 14144                           	psect	text43
 14145  003E78                     __ptext43:
 14146                           	opt stack 0
 14147  003E78                     _OpenUSART:
 14148                           	opt stack 24
 14149                           
 14150                           ;incstack = 0
 14151                           ;OpenUSART@config stored from wreg
 14152  003E78  0100               	movlb	0	; () banked
 14153  003E7A  6FA1               	movwf	OpenUSART@config& (0+255),b
 14154                           
 14155                           ; BSR set to: 0
 14156  003E7C  0E00               	movlw	0
 14157  003E7E  6EAC               	movwf	4012,c	;volatile
 14158  003E80  0E00               	movlw	0
 14159  003E82  6EAB               	movwf	4011,c	;volatile
 14160                           
 14161                           ; BSR set to: 0
 14162  003E84  0100               	movlb	0	; () banked
 14163  003E86  A1A1               	btfss	OpenUSART@config& (0+255),0,b
 14164  003E88  D002               	goto	l3954
 14165                           
 14166                           ; BSR set to: 0
 14167  003E8A  88AC               	bsf	4012,4,c	;volatile
 14168  003E8C  D000               	goto	l3954
 14169  003E8E                     l3954:
 14170                           
 14171                           ; BSR set to: 0
 14172  003E8E  0100               	movlb	0	; () banked
 14173  003E90  A3A1               	btfss	OpenUSART@config& (0+255),1,b
 14174  003E92  D003               	goto	l3958
 14175                           
 14176                           ; BSR set to: 0
 14177  003E94  8CAC               	bsf	4012,6,c	;volatile
 14178  003E96  8CAB               	bsf	4011,6,c	;volatile
 14179  003E98  D000               	goto	l3958
 14180  003E9A                     l3958:
 14181                           
 14182                           ; BSR set to: 0
 14183  003E9A  0100               	movlb	0	; () banked
 14184  003E9C  A5A1               	btfss	OpenUSART@config& (0+255),2,b
 14185  003E9E  D002               	goto	l3962
 14186                           
 14187                           ; BSR set to: 0
 14188  003EA0  8EAC               	bsf	4012,7,c	;volatile
 14189  003EA2  D000               	goto	l3962
 14190  003EA4                     l3962:
 14191                           
 14192                           ; BSR set to: 0
 14193  003EA4  0100               	movlb	0	; () banked
 14194  003EA6  A7A1               	btfss	OpenUSART@config& (0+255),3,b
 14195  003EA8  D002               	goto	l769
 14196                           
 14197                           ; BSR set to: 0
 14198  003EAA  88AB               	bsf	4011,4,c	;volatile
 14199  003EAC  D002               	goto	l3966
 14200  003EAE                     l769:
 14201                           
 14202                           ; BSR set to: 0
 14203  003EAE  8AAB               	bsf	4011,5,c	;volatile
 14204  003EB0  D000               	goto	l3966
 14205  003EB2                     l3966:
 14206                           
 14207                           ; BSR set to: 0
 14208  003EB2  0100               	movlb	0	; () banked
 14209  003EB4  B9A1               	btfsc	OpenUSART@config& (0+255),4,b
 14210                           
 14211                           ; BSR set to: 0
 14212  003EB6  84AC               	bsf	4012,2,c	;volatile
 14213                           
 14214                           ; BSR set to: 0
 14215  003EB8  989E               	bcf	3998,4,c	;volatile
 14216                           
 14217                           ; BSR set to: 0
 14218  003EBA  0100               	movlb	0	; () banked
 14219  003EBC  ABA1               	btfss	OpenUSART@config& (0+255),5,b
 14220  003EBE  D002               	goto	l3974
 14221                           
 14222                           ; BSR set to: 0
 14223  003EC0  86AB               	bsf	4011,3,c	;volatile
 14224  003EC2  D000               	goto	l3974
 14225  003EC4                     l3974:
 14226                           
 14227                           ; BSR set to: 0
 14228  003EC4  0100               	movlb	0	; () banked
 14229  003EC6  ADA1               	btfss	OpenUSART@config& (0+255),6,b
 14230  003EC8  D002               	goto	l773
 14231                           
 14232                           ; BSR set to: 0
 14233  003ECA  8A9D               	bsf	3997,5,c	;volatile
 14234  003ECC  D001               	goto	l774
 14235  003ECE                     l773:
 14236                           
 14237                           ; BSR set to: 0
 14238  003ECE  9A9D               	bcf	3997,5,c	;volatile
 14239  003ED0                     l774:
 14240                           
 14241                           ; BSR set to: 0
 14242  003ED0  9A9E               	bcf	3998,5,c	;volatile
 14243                           
 14244                           ; BSR set to: 0
 14245  003ED2  0100               	movlb	0	; () banked
 14246  003ED4  AFA1               	btfss	OpenUSART@config& (0+255),7,b
 14247  003ED6  D002               	goto	l775
 14248                           
 14249                           ; BSR set to: 0
 14250  003ED8  889D               	bsf	3997,4,c	;volatile
 14251  003EDA  D001               	goto	l776
 14252  003EDC                     l775:
 14253                           
 14254                           ; BSR set to: 0
 14255  003EDC  989D               	bcf	3997,4,c	;volatile
 14256  003EDE                     l776:
 14257                           
 14258                           ; BSR set to: 0
 14259  003EDE  C09F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 14260                           
 14261                           ; BSR set to: 0
 14262  003EE2  0100               	movlb	0	; () banked
 14263  003EE4  51A0               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 14264  003EE6  6EB0               	movwf	4016,c	;volatile
 14265                           
 14266                           ; BSR set to: 0
 14267  003EE8  8AAC               	bsf	4012,5,c	;volatile
 14268                           
 14269                           ; BSR set to: 0
 14270  003EEA  8EAB               	bsf	4011,7,c	;volatile
 14271                           
 14272                           ; BSR set to: 0
 14273  003EEC  9C94               	bcf	3988,6,c	;volatile
 14274                           
 14275                           ; BSR set to: 0
 14276  003EEE  8E94               	bsf	3988,7,c	;volatile
 14277                           
 14278                           ; BSR set to: 0
 14279  003EF0  B8AC               	btfsc	4012,4,c	;volatile
 14280                           
 14281                           ; BSR set to: 0
 14282  003EF2  BEAC               	btfsc	4012,7,c	;volatile
 14283  003EF4  D002               	goto	l778
 14284                           
 14285                           ; BSR set to: 0
 14286  003EF6  8C94               	bsf	3988,6,c	;volatile
 14287  003EF8  D000               	goto	l778
 14288  003EFA                     l778:
 14289                           
 14290                           ; BSR set to: 0
 14291  003EFA  0012               	return		;funcret
 14292  003EFC                     __end_of_OpenUSART:
 14293                           	opt stack 0
 14294                           tblptru	equ	0xFF8
 14295                           tblptrh	equ	0xFF7
 14296                           tblptrl	equ	0xFF6
 14297                           tablat	equ	0xFF5
 14298                           prodh	equ	0xFF4
 14299                           prodl	equ	0xFF3
 14300                           indf0	equ	0xFEF
 14301                           postinc0	equ	0xFEE
 14302                           fsr0h	equ	0xFEA
 14303                           fsr0l	equ	0xFE9
 14304                           wreg	equ	0xFE8
 14305                           postinc1	equ	0xFE6
 14306                           postdec1	equ	0xFE5
 14307                           plusw1	equ	0xFE3
 14308                           fsr1h	equ	0xFE2
 14309                           fsr1l	equ	0xFE1
 14310                           indf2	equ	0xFDF
 14311                           postinc2	equ	0xFDE
 14312                           postdec2	equ	0xFDD
 14313                           plusw2	equ	0xFDB
 14314                           fsr2h	equ	0xFDA
 14315                           fsr2l	equ	0xFD9
 14316                           status	equ	0xFD8
 14317                           
 14318 ;; *************** function _InitTimer0 *****************
 14319 ;; Defined at:
 14320 ;;		line 10 in file "TimingFuncs.c"
 14321 ;; Parameters:    Size  Location     Type
 14322 ;;		None
 14323 ;; Auto vars:     Size  Location     Type
 14324 ;;		None
 14325 ;; Return value:  Size  Location     Type
 14326 ;;		None               void
 14327 ;; Registers used:
 14328 ;;		wreg, status,2, status,0, cstack
 14329 ;; Tracked objects:
 14330 ;;		On entry : 0/0
 14331 ;;		On exit  : 0/0
 14332 ;;		Unchanged: 0/0
 14333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14334 ;;      Params:         0       0       0       0       0       0       0
 14335 ;;      Locals:         0       0       0       0       0       0       0
 14336 ;;      Temps:          0       0       0       0       0       0       0
 14337 ;;      Totals:         0       0       0       0       0       0       0
 14338 ;;Total ram usage:        0 bytes
 14339 ;; Hardware stack levels used:    1
 14340 ;; Hardware stack levels required when called:    6
 14341 ;; This function calls:
 14342 ;;		_OpenTimer0
 14343 ;; This function is called by:
 14344 ;;		_main
 14345 ;; This function uses a non-reentrant model
 14346 ;;
 14347                           
 14348                           	psect	text44
 14349  00452C                     __ptext44:
 14350                           	opt stack 0
 14351  00452C                     _InitTimer0:
 14352                           	opt stack 24
 14353                           
 14354                           ;TimingFuncs.c: 12: Timer0Config = 0b11111111 & 0b10111111 & 0b11011111 & 0b11111111 ;
 14355                           
 14356                           ; BSR set to: 0
 14357                           ;incstack = 0
 14358  00452C  0E9F               	movlw	159
 14359  00452E  6E46               	movwf	_Timer0Config,c
 14360                           
 14361                           ;TimingFuncs.c: 13: OpenTimer0(Timer0Config);
 14362  004530  5046               	movf	_Timer0Config,w,c
 14363  004532  ECE7  F021         	call	_OpenTimer0
 14364  004536  0012               	return		;funcret
 14365  004538                     __end_of_InitTimer0:
 14366                           	opt stack 0
 14367                           tblptru	equ	0xFF8
 14368                           tblptrh	equ	0xFF7
 14369                           tblptrl	equ	0xFF6
 14370                           tablat	equ	0xFF5
 14371                           prodh	equ	0xFF4
 14372                           prodl	equ	0xFF3
 14373                           indf0	equ	0xFEF
 14374                           postinc0	equ	0xFEE
 14375                           fsr0h	equ	0xFEA
 14376                           fsr0l	equ	0xFE9
 14377                           wreg	equ	0xFE8
 14378                           postinc1	equ	0xFE6
 14379                           postdec1	equ	0xFE5
 14380                           plusw1	equ	0xFE3
 14381                           fsr1h	equ	0xFE2
 14382                           fsr1l	equ	0xFE1
 14383                           indf2	equ	0xFDF
 14384                           postinc2	equ	0xFDE
 14385                           postdec2	equ	0xFDD
 14386                           plusw2	equ	0xFDB
 14387                           fsr2h	equ	0xFDA
 14388                           fsr2l	equ	0xFD9
 14389                           status	equ	0xFD8
 14390                           
 14391 ;; *************** function _OpenTimer0 *****************
 14392 ;; Defined at:
 14393 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\Timers\t0open.c"
 14394 ;; Parameters:    Size  Location     Type
 14395 ;;  config          1    wreg     unsigned char 
 14396 ;; Auto vars:     Size  Location     Type
 14397 ;;  config          1   31[BANK0 ] unsigned char 
 14398 ;; Return value:  Size  Location     Type
 14399 ;;		None               void
 14400 ;; Registers used:
 14401 ;;		wreg, status,2, status,0
 14402 ;; Tracked objects:
 14403 ;;		On entry : 0/0
 14404 ;;		On exit  : 0/0
 14405 ;;		Unchanged: 0/0
 14406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14407 ;;      Params:         0       0       0       0       0       0       0
 14408 ;;      Locals:         0       1       0       0       0       0       0
 14409 ;;      Temps:          0       0       0       0       0       0       0
 14410 ;;      Totals:         0       1       0       0       0       0       0
 14411 ;;Total ram usage:        1 bytes
 14412 ;; Hardware stack levels used:    1
 14413 ;; Hardware stack levels required when called:    5
 14414 ;; This function calls:
 14415 ;;		Nothing
 14416 ;; This function is called by:
 14417 ;;		_InitTimer0
 14418 ;; This function uses a non-reentrant model
 14419 ;;
 14420                           
 14421                           	psect	text45
 14422  0043CE                     __ptext45:
 14423                           	opt stack 0
 14424  0043CE                     _OpenTimer0:
 14425                           	opt stack 24
 14426                           
 14427                           ;incstack = 0
 14428                           ;OpenTimer0@config stored from wreg
 14429  0043CE  0100               	movlb	0	; () banked
 14430  0043D0  6F9F               	movwf	OpenTimer0@config& (0+255),b
 14431                           
 14432                           ; BSR set to: 0
 14433  0043D2  0100               	movlb	0	; () banked
 14434  0043D4  519F               	movf	OpenTimer0@config& (0+255),w,b
 14435  0043D6  0B7F               	andlw	127
 14436  0043D8  6ED5               	movwf	4053,c	;volatile
 14437                           
 14438                           ; BSR set to: 0
 14439  0043DA  0E00               	movlw	0
 14440  0043DC  6ED7               	movwf	4055,c	;volatile
 14441                           
 14442                           ; BSR set to: 0
 14443  0043DE  0E00               	movlw	0
 14444  0043E0  6ED6               	movwf	4054,c	;volatile
 14445                           
 14446                           ; BSR set to: 0
 14447  0043E2  94F2               	bcf	intcon,2,c	;volatile
 14448                           
 14449                           ; BSR set to: 0
 14450  0043E4  0100               	movlb	0	; () banked
 14451  0043E6  AF9F               	btfss	OpenTimer0@config& (0+255),7,b
 14452  0043E8  D002               	goto	l717
 14453                           
 14454                           ; BSR set to: 0
 14455  0043EA  8AF2               	bsf	intcon,5,c	;volatile
 14456  0043EC  D001               	goto	l718
 14457  0043EE                     l717:
 14458                           
 14459                           ; BSR set to: 0
 14460  0043EE  9AF2               	bcf	intcon,5,c	;volatile
 14461  0043F0                     l718:
 14462                           
 14463                           ; BSR set to: 0
 14464  0043F0  8ED5               	bsf	4053,7,c	;volatile
 14465                           
 14466                           ; BSR set to: 0
 14467  0043F2  0012               	return		;funcret
 14468  0043F4                     __end_of_OpenTimer0:
 14469                           	opt stack 0
 14470                           tblptru	equ	0xFF8
 14471                           tblptrh	equ	0xFF7
 14472                           tblptrl	equ	0xFF6
 14473                           tablat	equ	0xFF5
 14474                           prodh	equ	0xFF4
 14475                           prodl	equ	0xFF3
 14476                           intcon	equ	0xFF2
 14477                           indf0	equ	0xFEF
 14478                           postinc0	equ	0xFEE
 14479                           fsr0h	equ	0xFEA
 14480                           fsr0l	equ	0xFE9
 14481                           wreg	equ	0xFE8
 14482                           postinc1	equ	0xFE6
 14483                           postdec1	equ	0xFE5
 14484                           plusw1	equ	0xFE3
 14485                           fsr1h	equ	0xFE2
 14486                           fsr1l	equ	0xFE1
 14487                           indf2	equ	0xFDF
 14488                           postinc2	equ	0xFDE
 14489                           postdec2	equ	0xFDD
 14490                           plusw2	equ	0xFDB
 14491                           fsr2h	equ	0xFDA
 14492                           fsr2l	equ	0xFD9
 14493                           status	equ	0xFD8
 14494                           
 14495 ;; *************** function _InitInterrupts *****************
 14496 ;; Defined at:
 14497 ;;		line 13 in file "InterruptFuncs.c"
 14498 ;; Parameters:    Size  Location     Type
 14499 ;;		None
 14500 ;; Auto vars:     Size  Location     Type
 14501 ;;		None
 14502 ;; Return value:  Size  Location     Type
 14503 ;;		None               void
 14504 ;; Registers used:
 14505 ;;		None
 14506 ;; Tracked objects:
 14507 ;;		On entry : 0/0
 14508 ;;		On exit  : 0/0
 14509 ;;		Unchanged: 0/0
 14510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14511 ;;      Params:         0       0       0       0       0       0       0
 14512 ;;      Locals:         0       0       0       0       0       0       0
 14513 ;;      Temps:          0       0       0       0       0       0       0
 14514 ;;      Totals:         0       0       0       0       0       0       0
 14515 ;;Total ram usage:        0 bytes
 14516 ;; Hardware stack levels used:    1
 14517 ;; Hardware stack levels required when called:    5
 14518 ;; This function calls:
 14519 ;;		Nothing
 14520 ;; This function is called by:
 14521 ;;		_main
 14522 ;; This function uses a non-reentrant model
 14523 ;;
 14524                           
 14525                           	psect	text46
 14526  0044E0                     __ptext46:
 14527                           	opt stack 0
 14528  0044E0                     _InitInterrupts:
 14529                           	opt stack 25
 14530                           
 14531                           ;InterruptFuncs.c: 15: INTCONbits.PEIE=1;
 14532                           
 14533                           ; BSR set to: 0
 14534                           ;incstack = 0
 14535  0044E0  8CF2               	bsf	intcon,6,c	;volatile
 14536                           
 14537                           ;InterruptFuncs.c: 16: RCONbits.IPEN=1;
 14538  0044E2  8ED0               	bsf	4048,7,c	;volatile
 14539                           
 14540                           ;InterruptFuncs.c: 17: INTCONbits.GIE=1;
 14541  0044E4  8EF2               	bsf	intcon,7,c	;volatile
 14542                           
 14543                           ;InterruptFuncs.c: 18: INTCONbits.GIEH=1;
 14544  0044E6  8EF2               	bsf	intcon,7,c	;volatile
 14545                           
 14546                           ;InterruptFuncs.c: 19: INTCONbits.GIEL=1;
 14547  0044E8  8CF2               	bsf	intcon,6,c	;volatile
 14548                           
 14549                           ;InterruptFuncs.c: 20: INTCON2bits.TMR0IP=1;
 14550  0044EA  84F1               	bsf	intcon2,2,c	;volatile
 14551                           
 14552                           ;InterruptFuncs.c: 21: PIR1bits.RCIF=1;
 14553  0044EC  8A9E               	bsf	3998,5,c	;volatile
 14554                           
 14555                           ;InterruptFuncs.c: 22: IPR1bits.RCIP=0;
 14556  0044EE  9A9F               	bcf	3999,5,c	;volatile
 14557  0044F0  0012               	return		;funcret
 14558  0044F2                     __end_of_InitInterrupts:
 14559                           	opt stack 0
 14560                           tblptru	equ	0xFF8
 14561                           tblptrh	equ	0xFF7
 14562                           tblptrl	equ	0xFF6
 14563                           tablat	equ	0xFF5
 14564                           prodh	equ	0xFF4
 14565                           prodl	equ	0xFF3
 14566                           intcon	equ	0xFF2
 14567                           intcon2	equ	0xFF1
 14568                           indf0	equ	0xFEF
 14569                           postinc0	equ	0xFEE
 14570                           fsr0h	equ	0xFEA
 14571                           fsr0l	equ	0xFE9
 14572                           wreg	equ	0xFE8
 14573                           postinc1	equ	0xFE6
 14574                           postdec1	equ	0xFE5
 14575                           plusw1	equ	0xFE3
 14576                           fsr1h	equ	0xFE2
 14577                           fsr1l	equ	0xFE1
 14578                           indf2	equ	0xFDF
 14579                           postinc2	equ	0xFDE
 14580                           postdec2	equ	0xFDD
 14581                           plusw2	equ	0xFDB
 14582                           fsr2h	equ	0xFDA
 14583                           fsr2l	equ	0xFD9
 14584                           status	equ	0xFD8
 14585                           
 14586 ;; *************** function _Delay10KTCYx *****************
 14587 ;; Defined at:
 14588 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d10ktcyx.c"
 14589 ;; Parameters:    Size  Location     Type
 14590 ;;  unit            1    wreg     unsigned char 
 14591 ;; Auto vars:     Size  Location     Type
 14592 ;;  unit            1   32[BANK0 ] unsigned char 
 14593 ;; Return value:  Size  Location     Type
 14594 ;;		None               void
 14595 ;; Registers used:
 14596 ;;		wreg
 14597 ;; Tracked objects:
 14598 ;;		On entry : 0/0
 14599 ;;		On exit  : 0/0
 14600 ;;		Unchanged: 0/0
 14601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14602 ;;      Params:         0       0       0       0       0       0       0
 14603 ;;      Locals:         0       1       0       0       0       0       0
 14604 ;;      Temps:          0       1       0       0       0       0       0
 14605 ;;      Totals:         0       2       0       0       0       0       0
 14606 ;;Total ram usage:        2 bytes
 14607 ;; Hardware stack levels used:    1
 14608 ;; Hardware stack levels required when called:    5
 14609 ;; This function calls:
 14610 ;;		Nothing
 14611 ;; This function is called by:
 14612 ;;		_main
 14613 ;; This function uses a non-reentrant model
 14614 ;;
 14615                           
 14616                           	psect	text47
 14617  00445A                     __ptext47:
 14618                           	opt stack 0
 14619  00445A                     _Delay10KTCYx:
 14620                           	opt stack 25
 14621                           
 14622                           ;incstack = 0
 14623                           ;Delay10KTCYx@unit stored from wreg
 14624  00445A  0100               	movlb	0	; () banked
 14625  00445C  6FA0               	movwf	Delay10KTCYx@unit& (0+255),b
 14626  00445E                     
 14627                           ; BSR set to: 0
 14628  00445E  0E0D               	movlw	13
 14629  004460  0100               	movlb	0	; () banked
 14630  004462  6F9F               	movwf	??_Delay10KTCYx& (0+255),b
 14631  004464  0EFC               	movlw	252
 14632  004466                     u7247:
 14633  004466  2EE8               	decfsz	wreg,f,c
 14634  004468  D7FE               	goto	u7247
 14635  00446A  2F9F               	decfsz	??_Delay10KTCYx& (0+255),f,b
 14636  00446C  D7FC               	goto	u7247
 14637  00446E  0100               	movlb	0	; () banked
 14638  004470  2FA0               	decfsz	Delay10KTCYx@unit& (0+255),f,b
 14639  004472  D7F5               	goto	l4258
 14640  004474  D000               	goto	l1038
 14641  004476                     l1038:
 14642                           
 14643                           ; BSR set to: 0
 14644  004476  0012               	return		;funcret
 14645  004478                     __end_of_Delay10KTCYx:
 14646                           	opt stack 0
 14647                           tblptru	equ	0xFF8
 14648                           tblptrh	equ	0xFF7
 14649                           tblptrl	equ	0xFF6
 14650                           tablat	equ	0xFF5
 14651                           prodh	equ	0xFF4
 14652                           prodl	equ	0xFF3
 14653                           intcon	equ	0xFF2
 14654                           intcon2	equ	0xFF1
 14655                           indf0	equ	0xFEF
 14656                           postinc0	equ	0xFEE
 14657                           fsr0h	equ	0xFEA
 14658                           fsr0l	equ	0xFE9
 14659                           wreg	equ	0xFE8
 14660                           postinc1	equ	0xFE6
 14661                           postdec1	equ	0xFE5
 14662                           plusw1	equ	0xFE3
 14663                           fsr1h	equ	0xFE2
 14664                           fsr1l	equ	0xFE1
 14665                           indf2	equ	0xFDF
 14666                           postinc2	equ	0xFDE
 14667                           postdec2	equ	0xFDD
 14668                           plusw2	equ	0xFDB
 14669                           fsr2h	equ	0xFDA
 14670                           fsr2l	equ	0xFD9
 14671                           status	equ	0xFD8
 14672                           
 14673 ;; *************** function _ConfigADC *****************
 14674 ;; Defined at:
 14675 ;;		line 17 in file "AccelerationFuncs.c"
 14676 ;; Parameters:    Size  Location     Type
 14677 ;;		None
 14678 ;; Auto vars:     Size  Location     Type
 14679 ;;		None
 14680 ;; Return value:  Size  Location     Type
 14681 ;;		None               void
 14682 ;; Registers used:
 14683 ;;		wreg, status,2
 14684 ;; Tracked objects:
 14685 ;;		On entry : 0/0
 14686 ;;		On exit  : 0/0
 14687 ;;		Unchanged: 0/0
 14688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14689 ;;      Params:         0       0       0       0       0       0       0
 14690 ;;      Locals:         0       0       0       0       0       0       0
 14691 ;;      Temps:          0       0       0       0       0       0       0
 14692 ;;      Totals:         0       0       0       0       0       0       0
 14693 ;;Total ram usage:        0 bytes
 14694 ;; Hardware stack levels used:    1
 14695 ;; Hardware stack levels required when called:    5
 14696 ;; This function calls:
 14697 ;;		Nothing
 14698 ;; This function is called by:
 14699 ;;		_main
 14700 ;; This function uses a non-reentrant model
 14701 ;;
 14702                           
 14703                           	psect	text48
 14704  004510                     __ptext48:
 14705                           	opt stack 0
 14706  004510                     _ConfigADC:
 14707                           	opt stack 25
 14708                           
 14709                           ;AccelerationFuncs.c: 19: ADCON1=0b00011000;
 14710                           
 14711                           ; BSR set to: 0
 14712                           ;incstack = 0
 14713  004510  0E18               	movlw	24
 14714  004512  6EC1               	movwf	4033,c	;volatile
 14715                           
 14716                           ;AccelerationFuncs.c: 20: ADCON2=0b10111111;
 14717  004514  0EBF               	movlw	191
 14718  004516  6EC0               	movwf	4032,c	;volatile
 14719                           
 14720                           ;AccelerationFuncs.c: 21: ADCON0=0b00010001;
 14721  004518  0E11               	movlw	17
 14722  00451A  6EC2               	movwf	4034,c	;volatile
 14723  00451C  0012               	return		;funcret
 14724  00451E                     __end_of_ConfigADC:
 14725                           	opt stack 0
 14726                           tblptru	equ	0xFF8
 14727                           tblptrh	equ	0xFF7
 14728                           tblptrl	equ	0xFF6
 14729                           tablat	equ	0xFF5
 14730                           prodh	equ	0xFF4
 14731                           prodl	equ	0xFF3
 14732                           intcon	equ	0xFF2
 14733                           intcon2	equ	0xFF1
 14734                           indf0	equ	0xFEF
 14735                           postinc0	equ	0xFEE
 14736                           fsr0h	equ	0xFEA
 14737                           fsr0l	equ	0xFE9
 14738                           wreg	equ	0xFE8
 14739                           postinc1	equ	0xFE6
 14740                           postdec1	equ	0xFE5
 14741                           plusw1	equ	0xFE3
 14742                           fsr1h	equ	0xFE2
 14743                           fsr1l	equ	0xFE1
 14744                           indf2	equ	0xFDF
 14745                           postinc2	equ	0xFDE
 14746                           postdec2	equ	0xFDD
 14747                           plusw2	equ	0xFDB
 14748                           fsr2h	equ	0xFDA
 14749                           fsr2l	equ	0xFD9
 14750                           status	equ	0xFD8
 14751                           
 14752 ;; *************** function _SerialRxPinInterrupt *****************
 14753 ;; Defined at:
 14754 ;;		line 15 in file "SerialFuncs.c"
 14755 ;; Parameters:    Size  Location     Type
 14756 ;;		None
 14757 ;; Auto vars:     Size  Location     Type
 14758 ;;		None
 14759 ;; Return value:  Size  Location     Type
 14760 ;;		None               void
 14761 ;; Registers used:
 14762 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14763 ;; Tracked objects:
 14764 ;;		On entry : 0/0
 14765 ;;		On exit  : 0/0
 14766 ;;		Unchanged: 0/0
 14767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14768 ;;      Params:         0       0       0       0       0       0       0
 14769 ;;      Locals:         0       0       0       0       0       0       0
 14770 ;;      Temps:          0      18       0       0       0       0       0
 14771 ;;      Totals:         0      18       0       0       0       0       0
 14772 ;;Total ram usage:       18 bytes
 14773 ;; Hardware stack levels used:    1
 14774 ;; Hardware stack levels required when called:    4
 14775 ;; This function calls:
 14776 ;;		_ReadUSART
 14777 ;;		i1_printf
 14778 ;;		i1_strcpy
 14779 ;; This function is called by:
 14780 ;;		Interrupt level 1
 14781 ;; This function uses a non-reentrant model
 14782 ;;
 14783                           
 14784                           	psect	intcodelo
 14785  000018                     __pintcodelo:
 14786                           	opt stack 0
 14787  000018                     _SerialRxPinInterrupt:
 14788                           	opt stack 20
 14789                           
 14790                           ;incstack = 0
 14791  000018  CFD8 F08E          	movff	status,??_SerialRxPinInterrupt+1
 14792  00001C  CFE8 F08F          	movff	wreg,??_SerialRxPinInterrupt+2
 14793  000020  CFE0 F090          	movff	bsr,??_SerialRxPinInterrupt+3
 14794  000024  CFFA F091          	movff	pclath,??_SerialRxPinInterrupt+4
 14795  000028  CFFB F092          	movff	pclatu,??_SerialRxPinInterrupt+5
 14796  00002C  CFE9 F093          	movff	fsr0l,??_SerialRxPinInterrupt+6
 14797  000030  CFEA F094          	movff	fsr0h,??_SerialRxPinInterrupt+7
 14798  000034  CFE1 F095          	movff	fsr1l,??_SerialRxPinInterrupt+8
 14799  000038  CFE2 F096          	movff	fsr1h,??_SerialRxPinInterrupt+9
 14800  00003C  CFD9 F097          	movff	fsr2l,??_SerialRxPinInterrupt+10
 14801  000040  CFDA F098          	movff	fsr2h,??_SerialRxPinInterrupt+11
 14802  000044  CFF3 F099          	movff	prodl,??_SerialRxPinInterrupt+12
 14803  000048  CFF4 F09A          	movff	prodh,??_SerialRxPinInterrupt+13
 14804  00004C  CFF6 F09B          	movff	tblptrl,??_SerialRxPinInterrupt+14
 14805  000050  CFF7 F09C          	movff	tblptrh,??_SerialRxPinInterrupt+15
 14806  000054  CFF8 F09D          	movff	tblptru,??_SerialRxPinInterrupt+16
 14807  000058  CFF5 F09E          	movff	tablat,??_SerialRxPinInterrupt+17
 14808                           
 14809                           ;SerialFuncs.c: 18: if(PIR1bits.RCIF == 1)
 14810  00005C  AA9E               	btfss	3998,5,c	;volatile
 14811  00005E  D071               	goto	i1l319
 14812                           
 14813                           ;SerialFuncs.c: 19: {
 14814                           ;SerialFuncs.c: 20: if(i<100)
 14815  000060  BE35               	btfsc	_i+1,7,c
 14816  000062  D006               	goto	i1l6200
 14817  000064  5035               	movf	_i+1,w,c
 14818  000066  E149               	bnz	i1l6224
 14819  000068  0E64               	movlw	100
 14820  00006A  5C34               	subwf	_i,w,c
 14821  00006C  B0D8               	btfsc	status,0,c
 14822  00006E  D045               	goto	i1l6224
 14823  000070                     i1l6200:
 14824                           
 14825                           ;SerialFuncs.c: 21: {
 14826                           ;SerialFuncs.c: 22: MessageBuffer[i] = ReadUSART();
 14827  000070  0EE6               	movlw	low _MessageBuffer
 14828  000072  2434               	addwf	_i,w,c
 14829  000074  6ED9               	movwf	fsr2l,c
 14830  000076  0E01               	movlw	high _MessageBuffer
 14831  000078  2035               	addwfc	_i+1,w,c
 14832  00007A  6EDA               	movwf	fsr2h,c
 14833  00007C  ECFA  F021         	call	_ReadUSART	;wreg free
 14834  000080  6EDF               	movwf	indf2,c
 14835                           
 14836                           ;SerialFuncs.c: 26: if(MessageBuffer[i] == 0x0D)
 14837  000082  0EE6               	movlw	low _MessageBuffer
 14838  000084  2434               	addwf	_i,w,c
 14839  000086  6ED9               	movwf	fsr2l,c
 14840  000088  0E01               	movlw	high _MessageBuffer
 14841  00008A  2035               	addwfc	_i+1,w,c
 14842  00008C  6EDA               	movwf	fsr2h,c
 14843  00008E  0E0D               	movlw	13
 14844  000090  18DE               	xorwf	postinc2,w,c
 14845  000092  A4D8               	btfss	status,2,c
 14846  000094  D02E               	goto	i1l6220
 14847                           
 14848                           ;SerialFuncs.c: 27: {
 14849                           ;SerialFuncs.c: 28: NewMessage=1;
 14850  000096  0E00               	movlw	0
 14851  000098  0100               	movlb	0	; () banked
 14852  00009A  6FDE               	movwf	(_NewMessage+1)& (0+255),b
 14853  00009C  0E01               	movlw	1
 14854  00009E  6FDD               	movwf	_NewMessage& (0+255),b
 14855                           
 14856                           ; BSR set to: 0
 14857                           ;SerialFuncs.c: 29: printf(MessageBuffer);
 14858  0000A0  0EE6               	movlw	low _MessageBuffer
 14859  0000A2  6E22               	movwf	i1printf@f,c
 14860  0000A4  0E01               	movlw	high _MessageBuffer
 14861  0000A6  6E23               	movwf	i1printf@f+1,c
 14862  0000A8  ECF6  F00B         	call	i1_printf	;wreg free
 14863                           
 14864                           ;SerialFuncs.c: 30: strcpy(LastMessage,MessageBuffer);
 14865  0000AC  0ED2               	movlw	low _LastMessage
 14866  0000AE  6E16               	movwf	i1strcpy@to,c
 14867  0000B0  0E01               	movlw	high _LastMessage
 14868  0000B2  6E17               	movwf	i1strcpy@to+1,c
 14869  0000B4  0EE6               	movlw	low _MessageBuffer
 14870  0000B6  6E18               	movwf	i1strcpy@from,c
 14871  0000B8  0E01               	movlw	high _MessageBuffer
 14872  0000BA  6E19               	movwf	i1strcpy@from+1,c
 14873  0000BC  EC4F  F021         	call	i1_strcpy	;wreg free
 14874                           
 14875                           ;SerialFuncs.c: 31: for(;i>0;i--)
 14876  0000C0  D00C               	goto	i1l6214
 14877  0000C2                     i1l6210:
 14878                           
 14879                           ;SerialFuncs.c: 32: MessageBuffer[i] = 0x00;
 14880  0000C2  0EE6               	movlw	low _MessageBuffer
 14881  0000C4  2434               	addwf	_i,w,c
 14882  0000C6  6ED9               	movwf	fsr2l,c
 14883  0000C8  0E01               	movlw	high _MessageBuffer
 14884  0000CA  2035               	addwfc	_i+1,w,c
 14885  0000CC  6EDA               	movwf	fsr2h,c
 14886  0000CE  0E00               	movlw	0
 14887  0000D0  6EDF               	movwf	indf2,c
 14888  0000D2  0634               	decf	_i,f,c
 14889  0000D4  A0D8               	btfss	status,0,c
 14890  0000D6  0635               	decf	_i+1,f,c
 14891  0000D8  D000               	goto	i1l6214
 14892  0000DA                     i1l6214:
 14893  0000DA  BE35               	btfsc	_i+1,7,c
 14894  0000DC  D005               	goto	i1l6216
 14895  0000DE  5035               	movf	_i+1,w,c
 14896  0000E0  E1F0               	bnz	i1l6210
 14897  0000E2  0434               	decf	_i,w,c
 14898  0000E4  B0D8               	btfsc	status,0,c
 14899  0000E6  D7ED               	goto	i1l6210
 14900  0000E8                     i1l6216:
 14901                           
 14902                           ;SerialFuncs.c: 33: i=0;
 14903  0000E8  0E00               	movlw	0
 14904  0000EA  6E35               	movwf	_i+1,c
 14905  0000EC  0E00               	movlw	0
 14906  0000EE  6E34               	movwf	_i,c
 14907                           
 14908                           ;SerialFuncs.c: 34: return;
 14909  0000F0  D028               	goto	i1l319
 14910  0000F2                     i1l6220:
 14911                           
 14912                           ;SerialFuncs.c: 35: }
 14913                           ;SerialFuncs.c: 36: i++;
 14914  0000F2  4A34               	infsnz	_i,f,c
 14915  0000F4  2A35               	incf	_i+1,f,c
 14916                           
 14917                           ;SerialFuncs.c: 37: PIR1bits.RCIF = 0;
 14918  0000F6  9A9E               	bcf	3998,5,c	;volatile
 14919                           
 14920                           ;SerialFuncs.c: 38: }
 14921  0000F8  D024               	goto	i1l319
 14922  0000FA                     i1l6224:
 14923                           
 14924                           ;SerialFuncs.c: 39: else
 14925                           ;SerialFuncs.c: 40: {
 14926                           ;SerialFuncs.c: 41: NewMessage=0;
 14927  0000FA  0E00               	movlw	0
 14928  0000FC  0100               	movlb	0	; () banked
 14929  0000FE  6FDE               	movwf	(_NewMessage+1)& (0+255),b
 14930  000100  0E00               	movlw	0
 14931  000102  6FDD               	movwf	_NewMessage& (0+255),b
 14932                           
 14933                           ;SerialFuncs.c: 45: for(i=20;i>0;i--)
 14934  000104  0E00               	movlw	0
 14935  000106  6E35               	movwf	_i+1,c
 14936  000108  0E14               	movlw	20
 14937  00010A  6E34               	movwf	_i,c
 14938  00010C                     i1l6226:
 14939                           
 14940                           ; BSR set to: 0
 14941  00010C  BE35               	btfsc	_i+1,7,c
 14942  00010E  D019               	goto	i1l319
 14943  000110  5035               	movf	_i+1,w,c
 14944  000112  E105               	bnz	i1l6230
 14945  000114  0434               	decf	_i,w,c
 14946  000116  A0D8               	btfss	status,0,c
 14947  000118  D014               	goto	i1l319
 14948  00011A  D001               	goto	i1l6230
 14949                           
 14950                           ; BSR set to: 0
 14951  00011C  D012               	goto	i1l319
 14952  00011E                     i1l6230:
 14953                           
 14954                           ;SerialFuncs.c: 46: {
 14955                           ;SerialFuncs.c: 47: MessageBuffer[i] = 0x00;
 14956  00011E  0EE6               	movlw	low _MessageBuffer
 14957  000120  2434               	addwf	_i,w,c
 14958  000122  6ED9               	movwf	fsr2l,c
 14959  000124  0E01               	movlw	high _MessageBuffer
 14960  000126  2035               	addwfc	_i+1,w,c
 14961  000128  6EDA               	movwf	fsr2h,c
 14962  00012A  0E00               	movlw	0
 14963  00012C  6EDF               	movwf	indf2,c
 14964                           
 14965                           ;SerialFuncs.c: 48: i=0;
 14966  00012E  0E00               	movlw	0
 14967  000130  6E35               	movwf	_i+1,c
 14968  000132  0E00               	movlw	0
 14969  000134  6E34               	movwf	_i,c
 14970  000136  0634               	decf	_i,f,c
 14971  000138  A0D8               	btfss	status,0,c
 14972  00013A  0635               	decf	_i+1,f,c
 14973  00013C  D7E7               	goto	i1l6226
 14974  00013E  D7EF               	goto	i1l6230
 14975                           
 14976                           ;SerialFuncs.c: 49: }
 14977                           ;SerialFuncs.c: 50: return;
 14978  000140  D000               	goto	i1l319
 14979  000142                     i1l319:
 14980  000142  C09E  FFF5         	movff	??_SerialRxPinInterrupt+17,tablat
 14981  000146  C09D  FFF8         	movff	??_SerialRxPinInterrupt+16,tblptru
 14982  00014A  C09C  FFF7         	movff	??_SerialRxPinInterrupt+15,tblptrh
 14983  00014E  C09B  FFF6         	movff	??_SerialRxPinInterrupt+14,tblptrl
 14984  000152  C09A  FFF4         	movff	??_SerialRxPinInterrupt+13,prodh
 14985  000156  C099  FFF3         	movff	??_SerialRxPinInterrupt+12,prodl
 14986  00015A  C098  FFDA         	movff	??_SerialRxPinInterrupt+11,fsr2h
 14987  00015E  C097  FFD9         	movff	??_SerialRxPinInterrupt+10,fsr2l
 14988  000162  C096  FFE2         	movff	??_SerialRxPinInterrupt+9,fsr1h
 14989  000166  C095  FFE1         	movff	??_SerialRxPinInterrupt+8,fsr1l
 14990  00016A  C094  FFEA         	movff	??_SerialRxPinInterrupt+7,fsr0h
 14991  00016E  C093  FFE9         	movff	??_SerialRxPinInterrupt+6,fsr0l
 14992  000172  C092  FFFB         	movff	??_SerialRxPinInterrupt+5,pclatu
 14993  000176  C091  FFFA         	movff	??_SerialRxPinInterrupt+4,pclath
 14994  00017A  C090  FFE0         	movff	??_SerialRxPinInterrupt+3,bsr
 14995  00017E  C08F  FFE8         	movff	??_SerialRxPinInterrupt+2,wreg
 14996  000182  C08E  FFD8         	movff	??_SerialRxPinInterrupt+1,status
 14997  000186  0010               	retfie	
 14998  000188                     __end_of_SerialRxPinInterrupt:
 14999                           	opt stack 0
 15000                           pclatu	equ	0xFFB
 15001                           pclath	equ	0xFFA
 15002                           tblptru	equ	0xFF8
 15003                           tblptrh	equ	0xFF7
 15004                           tblptrl	equ	0xFF6
 15005                           tablat	equ	0xFF5
 15006                           prodh	equ	0xFF4
 15007                           prodl	equ	0xFF3
 15008                           intcon	equ	0xFF2
 15009                           intcon2	equ	0xFF1
 15010                           indf0	equ	0xFEF
 15011                           postinc0	equ	0xFEE
 15012                           fsr0h	equ	0xFEA
 15013                           fsr0l	equ	0xFE9
 15014                           wreg	equ	0xFE8
 15015                           postinc1	equ	0xFE6
 15016                           postdec1	equ	0xFE5
 15017                           plusw1	equ	0xFE3
 15018                           fsr1h	equ	0xFE2
 15019                           fsr1l	equ	0xFE1
 15020                           bsr	equ	0xFE0
 15021                           indf2	equ	0xFDF
 15022                           postinc2	equ	0xFDE
 15023                           postdec2	equ	0xFDD
 15024                           plusw2	equ	0xFDB
 15025                           fsr2h	equ	0xFDA
 15026                           fsr2l	equ	0xFD9
 15027                           status	equ	0xFD8
 15028                           
 15029 ;; *************** function i1_strcpy *****************
 15030 ;; Defined at:
 15031 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 15032 ;; Parameters:    Size  Location     Type
 15033 ;;  to              2   21[COMRAM] PTR unsigned char 
 15034 ;;		 -> MessageRoutine@str2(20), MessageRoutine@str1(20), LastMessage(20), 
 15035 ;;  from            2   23[COMRAM] PTR const unsigned char 
 15036 ;;		 -> STR_56(5), STR_53(7), STR_50(7), STR_39(5), 
 15037 ;;		 -> ConfigWord(20), LastMessage(20), MessageBuffer(20), 
 15038 ;; Auto vars:     Size  Location     Type
 15039 ;;  strcpy          2   25[COMRAM] PTR unsigned char 
 15040 ;;		 -> MessageRoutine@str2(20), MessageRoutine@str1(20), LastMessage(20), 
 15041 ;; Return value:  Size  Location     Type
 15042 ;;                  2   21[COMRAM] PTR unsigned char 
 15043 ;; Registers used:
 15044 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15045 ;; Tracked objects:
 15046 ;;		On entry : 0/0
 15047 ;;		On exit  : 0/0
 15048 ;;		Unchanged: 0/0
 15049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15050 ;;      Params:         4       0       0       0       0       0       0
 15051 ;;      Locals:         2       0       0       0       0       0       0
 15052 ;;      Temps:          0       0       0       0       0       0       0
 15053 ;;      Totals:         6       0       0       0       0       0       0
 15054 ;;Total ram usage:        6 bytes
 15055 ;; Hardware stack levels used:    1
 15056 ;; Hardware stack levels required when called:    2
 15057 ;; This function calls:
 15058 ;;		Nothing
 15059 ;; This function is called by:
 15060 ;;		_SerialRxPinInterrupt
 15061 ;; This function uses a non-reentrant model
 15062 ;;
 15063                           
 15064                           	psect	text50
 15065  00429E                     __ptext50:
 15066                           	opt stack 0
 15067  00429E                     i1_strcpy:
 15068                           	opt stack 21
 15069                           
 15070                           ;incstack = 0
 15071  00429E  C016  F01A         	movff	i1strcpy@to,i1strcpy@cp
 15072  0042A2  C017  F01B         	movff	i1strcpy@to+1,i1strcpy@cp+1
 15073  0042A6  D005               	goto	i1l6066
 15074  0042A8                     i1l6064:
 15075  0042A8  4A1A               	infsnz	i1strcpy@cp,f,c
 15076  0042AA  2A1B               	incf	i1strcpy@cp+1,f,c
 15077  0042AC  4A18               	infsnz	i1strcpy@from,f,c
 15078  0042AE  2A19               	incf	i1strcpy@from+1,f,c
 15079  0042B0  D000               	goto	i1l6066
 15080  0042B2                     i1l6066:
 15081  0042B2  C018  FFF6         	movff	i1strcpy@from,tblptrl
 15082  0042B6  C019  FFF7         	movff	i1strcpy@from+1,tblptrh
 15083  0042BA  6AF8               	clrf	tblptru,c
 15084  0042BC  C01A  FFD9         	movff	i1strcpy@cp,fsr2l
 15085  0042C0  C01B  FFDA         	movff	i1strcpy@cp+1,fsr2h
 15086  0042C4  0E05               	movlw	(high __ramtop+-1)
 15087  0042C6  64F7               	cpfsgt	tblptrh,c
 15088  0042C8  D003               	bra	i1u701_27
 15089  0042CA  0008               	tblrd		*
 15090  0042CC  50F5               	movf	tablat,w,c
 15091  0042CE  D005               	bra	i1u701_20
 15092  0042D0                     i1u701_27:
 15093  0042D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 15094  0042D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 15095  0042D8  50EF               	movf	indf0,w,c
 15096  0042DA                     i1u701_20:
 15097  0042DA  6EDF               	movwf	indf2,c
 15098  0042DC  50DF               	movf	indf2,w,c
 15099  0042DE  A4D8               	btfss	status,2,c
 15100  0042E0  D7E3               	goto	i1l6064
 15101                           
 15102                           ;	Return value of i1_strcpy is never used
 15103  0042E2  0012               	return		;funcret
 15104  0042E4                     __end_ofi1_strcpy:
 15105                           	opt stack 0
 15106                           pclatu	equ	0xFFB
 15107                           pclath	equ	0xFFA
 15108                           tblptru	equ	0xFF8
 15109                           tblptrh	equ	0xFF7
 15110                           tblptrl	equ	0xFF6
 15111                           tablat	equ	0xFF5
 15112                           prodh	equ	0xFF4
 15113                           prodl	equ	0xFF3
 15114                           intcon	equ	0xFF2
 15115                           intcon2	equ	0xFF1
 15116                           indf0	equ	0xFEF
 15117                           postinc0	equ	0xFEE
 15118                           fsr0h	equ	0xFEA
 15119                           fsr0l	equ	0xFE9
 15120                           wreg	equ	0xFE8
 15121                           postinc1	equ	0xFE6
 15122                           postdec1	equ	0xFE5
 15123                           plusw1	equ	0xFE3
 15124                           fsr1h	equ	0xFE2
 15125                           fsr1l	equ	0xFE1
 15126                           bsr	equ	0xFE0
 15127                           indf2	equ	0xFDF
 15128                           postinc2	equ	0xFDE
 15129                           postdec2	equ	0xFDD
 15130                           plusw2	equ	0xFDB
 15131                           fsr2h	equ	0xFDA
 15132                           fsr2l	equ	0xFD9
 15133                           status	equ	0xFD8
 15134                           
 15135 ;; *************** function i1_printf *****************
 15136 ;; Defined at:
 15137 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 15138 ;; Parameters:    Size  Location     Type
 15139 ;;  f               2   33[COMRAM] PTR const unsigned char 
 15140 ;;		 -> STR_57(140), STR_55(20), STR_54(3), STR_52(20), 
 15141 ;;		 -> STR_51(3), STR_49(20), STR_48(3), STR_47(31), 
 15142 ;;		 -> STR_46(3), STR_45(27), STR_44(3), STR_43(26), 
 15143 ;;		 -> STR_42(3), STR_41(34), STR_40(3), STR_38(20), 
 15144 ;;		 -> STR_37(20), STR_36(21), STR_35(3), STR_34(14), 
 15145 ;;		 -> STR_33(3), STR_32(12), STR_31(3), STR_30(10), 
 15146 ;;		 -> STR_29(3), STR_28(12), STR_27(3), STR_26(11), 
 15147 ;;		 -> MessageBuffer(20), STR_25(21), STR_24(11), STR_23(11), 
 15148 ;;		 -> STR_22(24), STR_21(9), STR_20(19), STR_19(9), 
 15149 ;;		 -> STR_18(19), STR_17(13), STR_16(17), STR_15(26), 
 15150 ;;		 -> STR_14(18), STR_13(4), STR_12(15), STR_11(14), 
 15151 ;;		 -> STR_10(19), STR_9(15), STR_8(14), STR_7(18), 
 15152 ;;		 -> STR_6(21), STR_5(18), STR_4(21), STR_3(18), 
 15153 ;;		 -> STR_2(21), STR_1(18), 
 15154 ;; Auto vars:     Size  Location     Type
 15155 ;;  printf          4    0        struct .
 15156 ;;  printf          2   10[BANK0 ] int 
 15157 ;;  printf          2    8[BANK0 ] unsigned int 
 15158 ;;  printf          2    5[BANK0 ] unsigned int 
 15159 ;;  printf          2    3[BANK0 ] PTR void [1]
 15160 ;;		 -> ?i1_printf(2), ?_printf(2), 
 15161 ;;  printf          2    0[BANK0 ] PTR const unsigned char 
 15162 ;;		 -> printf@c(1), 
 15163 ;;  printf          1   12[BANK0 ] char 
 15164 ;;  printf          1    7[BANK0 ] unsigned char 
 15165 ;;  printf          1    2[BANK0 ] char 
 15166 ;; Return value:  Size  Location     Type
 15167 ;;                  2   33[COMRAM] int 
 15168 ;; Registers used:
 15169 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15170 ;; Tracked objects:
 15171 ;;		On entry : 0/0
 15172 ;;		On exit  : 0/0
 15173 ;;		Unchanged: 0/0
 15174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15175 ;;      Params:         2       0       0       0       0       0       0
 15176 ;;      Locals:         0      13       0       0       0       0       0
 15177 ;;      Temps:          4       0       0       0       0       0       0
 15178 ;;      Totals:         6      13       0       0       0       0       0
 15179 ;;Total ram usage:       19 bytes
 15180 ;; Hardware stack levels used:    1
 15181 ;; Hardware stack levels required when called:    3
 15182 ;; This function calls:
 15183 ;;		i1___lwdiv
 15184 ;;		i1___lwmod
 15185 ;;		i1___wmul
 15186 ;;		i1_isdigit
 15187 ;;		i1_putch
 15188 ;; This function is called by:
 15189 ;;		_SerialRxPinInterrupt
 15190 ;; This function uses a non-reentrant model
 15191 ;;
 15192                           
 15193                           	psect	text51
 15194  0017EC                     __ptext51:
 15195                           	opt stack 0
 15196  0017EC                     i1_printf:
 15197                           	opt stack 20
 15198                           
 15199                           ;doprnt.c: 466: va_list ap;
 15200                           ;doprnt.c: 499: signed char c;
 15201                           ;doprnt.c: 501: int width;
 15202                           ;doprnt.c: 506: signed char prec;
 15203                           ;doprnt.c: 508: unsigned char flag;
 15204                           ;doprnt.c: 523: union {
 15205                           ;doprnt.c: 524: unsigned long vd;
 15206                           ;doprnt.c: 525: double integ;
 15207                           ;doprnt.c: 526: } tmpval;
 15208                           ;doprnt.c: 528: unsigned int val;
 15209                           ;doprnt.c: 529: unsigned len;
 15210                           ;doprnt.c: 530: const char * cp;
 15211                           ;doprnt.c: 533: *ap = __va_start();
 15212                           
 15213                           ;incstack = 0
 15214  0017EC  0E24               	movlw	low (?i1_printf+2)
 15215  0017EE  0100               	movlb	0	; () banked
 15216  0017F0  6F83               	movwf	i1printf@ap& (0+255),b
 15217  0017F2  0E00               	movlw	high (?i1_printf+2)
 15218  0017F4  0100               	movlb	0	; () banked
 15219  0017F6  6F84               	movwf	(i1printf@ap+1)& (0+255),b
 15220                           
 15221                           ;doprnt.c: 536: while(c = *f++) {
 15222  0017F8  D1BB               	goto	i1l6060
 15223  0017FA                     i1l5958:
 15224                           
 15225                           ; BSR set to: 0
 15226                           ;doprnt.c: 538: if(c != '%')
 15227  0017FA  0E25               	movlw	37
 15228  0017FC  0100               	movlb	0	; () banked
 15229  0017FE  198C               	xorwf	i1printf@c& (0+255),w,b
 15230  001800  B4D8               	btfsc	status,2,c
 15231  001802  D005               	goto	i1l5962
 15232                           
 15233                           ; BSR set to: 0
 15234                           ;doprnt.c: 540: {
 15235                           ;doprnt.c: 541: (putch(c) );
 15236  001804  0100               	movlb	0	; () banked
 15237  001806  518C               	movf	i1printf@c& (0+255),w,b
 15238  001808  EC8F  F022         	call	i1_putch
 15239                           
 15240                           ;doprnt.c: 542: continue;
 15241  00180C  D1B1               	goto	i1l6060
 15242  00180E                     i1l5962:
 15243                           
 15244                           ;doprnt.c: 543: }
 15245                           ;doprnt.c: 546: width = 0;
 15246  00180E  0E00               	movlw	0
 15247  001810  0100               	movlb	0	; () banked
 15248  001812  6F8B               	movwf	(i1printf@width+1)& (0+255),b
 15249  001814  0E00               	movlw	0
 15250  001816  6F8A               	movwf	i1printf@width& (0+255),b
 15251                           
 15252                           ;doprnt.c: 548: flag = 0;
 15253  001818  0E00               	movlw	0
 15254  00181A  0100               	movlb	0	; () banked
 15255  00181C  6F87               	movwf	i1printf@flag& (0+255),b
 15256                           
 15257                           ; BSR set to: 0
 15258                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15259  00181E  C022  FFF6         	movff	i1printf@f,tblptrl
 15260  001822  C023  FFF7         	movff	i1printf@f+1,tblptrh
 15261  001826  6AF8               	clrf	tblptru,c
 15262  001828  0E05               	movlw	(high __ramtop+-1)
 15263  00182A  64F7               	cpfsgt	tblptrh,c
 15264  00182C  D003               	bra	i1u678_27
 15265  00182E  0008               	tblrd		*
 15266  001830  50F5               	movf	tablat,w,c
 15267  001832  D005               	bra	i1u678_20
 15268  001834                     i1u678_27:
 15269  001834  CFF6 FFE9          	movff	tblptrl,fsr0l
 15270  001838  CFF7 FFEA          	movff	tblptrh,fsr0h
 15271  00183C  50EF               	movf	indf0,w,c
 15272  00183E                     i1u678_20:
 15273  00183E  EC0C  F022         	call	i1_isdigit
 15274  001842  A0D8               	btfss	status,0,c
 15275  001844  D09F               	goto	i1l6000
 15276                           
 15277                           ;doprnt.c: 598: width = 0;
 15278  001846  0E00               	movlw	0
 15279  001848  0100               	movlb	0	; () banked
 15280  00184A  6F8B               	movwf	(i1printf@width+1)& (0+255),b
 15281  00184C  0E00               	movlw	0
 15282  00184E  6F8A               	movwf	i1printf@width& (0+255),b
 15283  001850  D000               	goto	i1l5968
 15284  001852                     i1l5968:
 15285                           
 15286                           ;doprnt.c: 600: width *= 10;
 15287  001852  C08A  F016         	movff	i1printf@width,i1___wmul@multiplier
 15288  001856  C08B  F017         	movff	i1printf@width+1,i1___wmul@multiplier+1
 15289  00185A  0E00               	movlw	0
 15290  00185C  6E19               	movwf	i1___wmul@multiplicand+1,c
 15291  00185E  0E0A               	movlw	10
 15292  001860  6E18               	movwf	i1___wmul@multiplicand,c
 15293  001862  ECD3  F021         	call	i1___wmul	;wreg free
 15294  001866  C016  F08A         	movff	?i1___wmul,i1printf@width
 15295  00186A  C017  F08B         	movff	?i1___wmul+1,i1printf@width+1
 15296                           
 15297                           ;doprnt.c: 601: width += *f++ - '0';
 15298  00186E  0ED0               	movlw	208
 15299  001870  6E24               	movwf	??i1_printf& (0+255),c
 15300  001872  0EFF               	movlw	255
 15301  001874  6E25               	movwf	(??i1_printf+1)& (0+255),c
 15302  001876  C022  FFF6         	movff	i1printf@f,tblptrl
 15303  00187A  C023  FFF7         	movff	i1printf@f+1,tblptrh
 15304  00187E  6AF8               	clrf	tblptru,c
 15305  001880  0E05               	movlw	(high __ramtop+-1)
 15306  001882  64F7               	cpfsgt	tblptrh,c
 15307  001884  D003               	bra	i1u680_27
 15308  001886  0008               	tblrd		*
 15309  001888  50F5               	movf	tablat,w,c
 15310  00188A  D005               	bra	i1u680_20
 15311  00188C                     i1u680_27:
 15312  00188C  CFF6 FFE9          	movff	tblptrl,fsr0l
 15313  001890  CFF7 FFEA          	movff	tblptrh,fsr0h
 15314  001894  50EF               	movf	indf0,w,c
 15315  001896                     i1u680_20:
 15316  001896  6E26               	movwf	(??i1_printf+2)& (0+255),c
 15317  001898  6A27               	clrf	(??i1_printf+3)& (0+255),c
 15318  00189A  5024               	movf	??i1_printf,w,c
 15319  00189C  2626               	addwf	??i1_printf+2,f,c
 15320  00189E  5025               	movf	??i1_printf+1,w,c
 15321  0018A0  2227               	addwfc	??i1_printf+3,f,c
 15322  0018A2  5026               	movf	??i1_printf+2,w,c
 15323  0018A4  0100               	movlb	0	; () banked
 15324  0018A6  278A               	addwf	i1printf@width& (0+255),f,b
 15325  0018A8  5027               	movf	??i1_printf+3,w,c
 15326  0018AA  0100               	movlb	0	; () banked
 15327  0018AC  238B               	addwfc	(i1printf@width+1)& (0+255),f,b
 15328                           
 15329                           ; BSR set to: 0
 15330  0018AE  4A22               	infsnz	i1printf@f,f,c
 15331  0018B0  2A23               	incf	i1printf@f+1,f,c
 15332                           
 15333                           ; BSR set to: 0
 15334                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15335  0018B2  C022  FFF6         	movff	i1printf@f,tblptrl
 15336  0018B6  C023  FFF7         	movff	i1printf@f+1,tblptrh
 15337  0018BA  6AF8               	clrf	tblptru,c
 15338  0018BC  0E05               	movlw	(high __ramtop+-1)
 15339  0018BE  64F7               	cpfsgt	tblptrh,c
 15340  0018C0  D003               	bra	i1u681_27
 15341  0018C2  0008               	tblrd		*
 15342  0018C4  50F5               	movf	tablat,w,c
 15343  0018C6  D005               	bra	i1u681_20
 15344  0018C8                     i1u681_27:
 15345  0018C8  CFF6 FFE9          	movff	tblptrl,fsr0l
 15346  0018CC  CFF7 FFEA          	movff	tblptrh,fsr0h
 15347  0018D0  50EF               	movf	indf0,w,c
 15348  0018D2                     i1u681_20:
 15349  0018D2  EC0C  F022         	call	i1_isdigit
 15350  0018D6  A0D8               	btfss	status,0,c
 15351  0018D8  D055               	goto	i1l6000
 15352  0018DA  D7BB               	goto	i1l5968
 15353                           
 15354                           ;doprnt.c: 608: }
 15355                           ;doprnt.c: 635: switch(c = *f++) {
 15356  0018DC  D053               	goto	i1l6000
 15357                           
 15358                           ;doprnt.c: 638: goto alldone;
 15359                           
 15360                           ;doprnt.c: 637: case 0:
 15361  0018DE  D166               	goto	i1l687
 15362                           
 15363                           ;doprnt.c: 698: case 'i':
 15364                           ;doprnt.c: 699: break;
 15365                           
 15366                           ;doprnt.c: 697: case 'd':
 15367  0018E0  D078               	goto	i1l658
 15368  0018E2                     i1l5976:
 15369                           
 15370                           ;doprnt.c: 757: if(width > len)
 15371  0018E2  0100               	movlb	0	; () banked
 15372  0018E4  518A               	movf	i1printf@width& (0+255),w,b
 15373  0018E6  0100               	movlb	0	; () banked
 15374  0018E8  5D85               	subwf	i1printf@len& (0+255),w,b
 15375  0018EA  0100               	movlb	0	; () banked
 15376  0018EC  518B               	movf	(i1printf@width+1)& (0+255),w,b
 15377  0018EE  0100               	movlb	0	; () banked
 15378  0018F0  5986               	subwfb	(i1printf@len+1)& (0+255),w,b
 15379  0018F2  B0D8               	btfsc	status,0,c
 15380  0018F4  D009               	goto	i1l5980
 15381                           
 15382                           ; BSR set to: 0
 15383                           ;doprnt.c: 758: width -= len;
 15384  0018F6  0100               	movlb	0	; () banked
 15385  0018F8  5185               	movf	i1printf@len& (0+255),w,b
 15386  0018FA  0100               	movlb	0	; () banked
 15387  0018FC  5F8A               	subwf	i1printf@width& (0+255),f,b
 15388  0018FE  0100               	movlb	0	; () banked
 15389  001900  5186               	movf	(i1printf@len+1)& (0+255),w,b
 15390  001902  0100               	movlb	0	; () banked
 15391  001904  5B8B               	subwfb	(i1printf@width+1)& (0+255),f,b
 15392  001906  D00A               	goto	i1l5984
 15393  001908                     i1l5980:
 15394                           
 15395                           ; BSR set to: 0
 15396                           ;doprnt.c: 759: else
 15397                           ;doprnt.c: 760: width = 0;
 15398  001908  0E00               	movlw	0
 15399  00190A  0100               	movlb	0	; () banked
 15400  00190C  6F8B               	movwf	(i1printf@width+1)& (0+255),b
 15401  00190E  0E00               	movlw	0
 15402  001910  6F8A               	movwf	i1printf@width& (0+255),b
 15403                           
 15404                           ; BSR set to: 0
 15405                           ;doprnt.c: 764: while(width--)
 15406  001912  D004               	goto	i1l5984
 15407  001914                     i1l5982:
 15408                           
 15409                           ; BSR set to: 0
 15410                           ;doprnt.c: 765: (putch(' ') );
 15411  001914  0E20               	movlw	32
 15412  001916  EC8F  F022         	call	i1_putch
 15413  00191A  D000               	goto	i1l5984
 15414  00191C                     i1l5984:
 15415  00191C  0100               	movlb	0	; () banked
 15416  00191E  078A               	decf	i1printf@width& (0+255),f,b
 15417  001920  A0D8               	btfss	status,0,c
 15418  001922  078B               	decf	(i1printf@width+1)& (0+255),f,b
 15419  001924  0100               	movlb	0	; () banked
 15420  001926  298A               	incf	i1printf@width& (0+255),w,b
 15421  001928  E1F5               	bnz	i1l5982
 15422  00192A  0100               	movlb	0	; () banked
 15423  00192C  298B               	incf	(i1printf@width+1)& (0+255),w,b
 15424  00192E  B4D8               	btfsc	status,2,c
 15425  001930  D00D               	goto	i1l5990
 15426  001932  D7F0               	goto	i1l5982
 15427                           
 15428                           ; BSR set to: 0
 15429                           ;doprnt.c: 767: while(len--)
 15430  001934  D00B               	goto	i1l5990
 15431  001936                     i1l5986:
 15432                           
 15433                           ; BSR set to: 0
 15434                           ;doprnt.c: 768: (putch(*cp++) );
 15435  001936  C080  FFD9         	movff	i1printf@cp,fsr2l
 15436  00193A  C081  FFDA         	movff	i1printf@cp+1,fsr2h
 15437  00193E  50DF               	movf	indf2,w,c
 15438  001940  EC8F  F022         	call	i1_putch
 15439  001944  0100               	movlb	0	; () banked
 15440  001946  4B80               	infsnz	i1printf@cp& (0+255),f,b
 15441  001948  2B81               	incf	(i1printf@cp+1)& (0+255),f,b
 15442  00194A  D000               	goto	i1l5990
 15443  00194C                     i1l5990:
 15444                           
 15445                           ; BSR set to: 0
 15446  00194C  0100               	movlb	0	; () banked
 15447  00194E  0785               	decf	i1printf@len& (0+255),f,b
 15448  001950  A0D8               	btfss	status,0,c
 15449  001952  0786               	decf	(i1printf@len+1)& (0+255),f,b
 15450  001954  0100               	movlb	0	; () banked
 15451  001956  2985               	incf	i1printf@len& (0+255),w,b
 15452  001958  E1EE               	bnz	i1l5986
 15453  00195A  0100               	movlb	0	; () banked
 15454  00195C  2986               	incf	(i1printf@len+1)& (0+255),w,b
 15455  00195E  B4D8               	btfsc	status,2,c
 15456  001960  D107               	goto	i1l6060
 15457  001962  D7E9               	goto	i1l5986
 15458                           
 15459                           ; BSR set to: 0
 15460                           ;doprnt.c: 774: continue;
 15461  001964  D105               	goto	i1l6060
 15462  001966                     i1l5992:
 15463                           
 15464                           ; BSR set to: 0
 15465                           ;doprnt.c: 805: cp = (char *)&c;
 15466  001966  0E8C               	movlw	low i1printf@c
 15467  001968  0100               	movlb	0	; () banked
 15468  00196A  6F80               	movwf	i1printf@cp& (0+255),b
 15469  00196C  0E00               	movlw	high i1printf@c
 15470  00196E  0100               	movlb	0	; () banked
 15471  001970  6F81               	movwf	(i1printf@cp+1)& (0+255),b
 15472                           
 15473                           ; BSR set to: 0
 15474                           ;doprnt.c: 806: len = 1;
 15475  001972  0E00               	movlw	0
 15476  001974  0100               	movlb	0	; () banked
 15477  001976  6F86               	movwf	(i1printf@len+1)& (0+255),b
 15478  001978  0E01               	movlw	1
 15479  00197A  6F85               	movwf	i1printf@len& (0+255),b
 15480                           
 15481                           ;doprnt.c: 807: goto dostring;
 15482  00197C  D7B2               	goto	i1l5976
 15483  00197E                     i1l5996:
 15484                           
 15485                           ; BSR set to: 0
 15486                           ;doprnt.c: 818: flag |= 0x40;
 15487  00197E  0100               	movlb	0	; () banked
 15488  001980  8D87               	bsf	i1printf@flag& (0+255),6,b
 15489                           
 15490                           ; BSR set to: 0
 15491                           ;doprnt.c: 822: }
 15492                           
 15493                           ;doprnt.c: 819: break;
 15494  001982  D027               	goto	i1l658
 15495  001984                     i1l6000:
 15496  001984  5022               	movf	i1printf@f,w,c
 15497  001986  6E24               	movwf	??i1_printf& (0+255),c
 15498  001988  5023               	movf	i1printf@f+1,w,c
 15499  00198A  6E25               	movwf	(??i1_printf+1)& (0+255),c
 15500  00198C  4A22               	infsnz	i1printf@f,f,c
 15501  00198E  2A23               	incf	i1printf@f+1,f,c
 15502  001990  C024  FFF6         	movff	??i1_printf,tblptrl
 15503  001994  C025  FFF7         	movff	??i1_printf+1,tblptrh
 15504  001998  6AF8               	clrf	tblptru,c
 15505  00199A  0E05               	movlw	(high __ramtop+-1)
 15506  00199C  64F7               	cpfsgt	tblptrh,c
 15507  00199E  D003               	bra	i1u686_27
 15508  0019A0  0008               	tblrd		*
 15509  0019A2  50F5               	movf	tablat,w,c
 15510  0019A4  D005               	bra	i1u686_20
 15511  0019A6                     i1u686_27:
 15512  0019A6  CFF6 FFE9          	movff	tblptrl,fsr0l
 15513  0019AA  CFF7 FFEA          	movff	tblptrh,fsr0h
 15514  0019AE  50EF               	movf	indf0,w,c
 15515  0019B0                     i1u686_20:
 15516  0019B0  0100               	movlb	0	; () banked
 15517  0019B2  6F8C               	movwf	i1printf@c& (0+255),b
 15518  0019B4  0100               	movlb	0	; () banked
 15519  0019B6  518C               	movf	i1printf@c& (0+255),w,b
 15520                           
 15521                           ; Switch size 1, requested type "space"
 15522                           ; Number of cases is 4, Range of values is 0 to 117
 15523                           ; switch strategies available:
 15524                           ; Name         Instructions Cycles
 15525                           ; simple_byte           13     7 (average)
 15526                           ;	Chosen strategy is simple_byte
 15527  0019B8  0A00               	xorlw	0	; case 0
 15528  0019BA  B4D8               	btfsc	status,2,c
 15529  0019BC  D0F7               	goto	i1l687
 15530  0019BE  0A64               	xorlw	100	; case 100
 15531  0019C0  B4D8               	btfsc	status,2,c
 15532  0019C2  D007               	goto	i1l658
 15533  0019C4  0A0D               	xorlw	13	; case 105
 15534  0019C6  B4D8               	btfsc	status,2,c
 15535  0019C8  D004               	goto	i1l658
 15536  0019CA  0A1C               	xorlw	28	; case 117
 15537  0019CC  B4D8               	btfsc	status,2,c
 15538  0019CE  D7D7               	goto	i1l5996
 15539  0019D0  D7CA               	goto	i1l5992
 15540  0019D2                     i1l658:
 15541                           
 15542                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 15543  0019D2  0100               	movlb	0	; () banked
 15544  0019D4  BD87               	btfsc	i1printf@flag& (0+255),6,b
 15545  0019D6  D019               	goto	i1l6012
 15546                           
 15547                           ; BSR set to: 0
 15548                           ;doprnt.c: 1253: {
 15549                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15550  0019D8  C083  FFD9         	movff	i1printf@ap,fsr2l
 15551  0019DC  C084  FFDA         	movff	i1printf@ap+1,fsr2h
 15552  0019E0  CFDE F088          	movff	postinc2,i1printf@val
 15553  0019E4  CFDD F089          	movff	postdec2,i1printf@val+1
 15554                           
 15555                           ; BSR set to: 0
 15556  0019E8  0E02               	movlw	2
 15557  0019EA  0100               	movlb	0	; () banked
 15558  0019EC  2783               	addwf	i1printf@ap& (0+255),f,b
 15559  0019EE  0E00               	movlw	0
 15560  0019F0  2384               	addwfc	(i1printf@ap+1)& (0+255),f,b
 15561                           
 15562                           ; BSR set to: 0
 15563                           ;doprnt.c: 1261: if((int)val < 0) {
 15564  0019F2  0100               	movlb	0	; () banked
 15565  0019F4  AF89               	btfss	(i1printf@val+1)& (0+255),7,b
 15566  0019F6  D017               	goto	i1l6016
 15567                           
 15568                           ; BSR set to: 0
 15569                           ;doprnt.c: 1262: flag |= 0x03;
 15570  0019F8  0E03               	movlw	3
 15571  0019FA  0100               	movlb	0	; () banked
 15572  0019FC  1387               	iorwf	i1printf@flag& (0+255),f,b
 15573                           
 15574                           ; BSR set to: 0
 15575                           ;doprnt.c: 1263: val = -val;
 15576  0019FE  0100               	movlb	0	; () banked
 15577  001A00  6D88               	negf	i1printf@val& (0+255),b
 15578  001A02  1F89               	comf	(i1printf@val+1)& (0+255),f,b
 15579  001A04  B0D8               	btfsc	status,0,c
 15580  001A06  2B89               	incf	(i1printf@val+1)& (0+255),f,b
 15581                           
 15582                           ; BSR set to: 0
 15583                           ;doprnt.c: 1264: }
 15584                           ;doprnt.c: 1266: }
 15585  001A08  D00E               	goto	i1l6016
 15586  001A0A                     i1l6012:
 15587                           
 15588                           ; BSR set to: 0
 15589                           ;doprnt.c: 1268: else
 15590                           ;doprnt.c: 1273: {
 15591                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15592  001A0A  C083  FFD9         	movff	i1printf@ap,fsr2l
 15593  001A0E  C084  FFDA         	movff	i1printf@ap+1,fsr2h
 15594  001A12  CFDE F088          	movff	postinc2,i1printf@val
 15595  001A16  CFDD F089          	movff	postdec2,i1printf@val+1
 15596                           
 15597                           ; BSR set to: 0
 15598  001A1A  0E02               	movlw	2
 15599  001A1C  0100               	movlb	0	; () banked
 15600  001A1E  2783               	addwf	i1printf@ap& (0+255),f,b
 15601  001A20  0E00               	movlw	0
 15602  001A22  2384               	addwfc	(i1printf@ap+1)& (0+255),f,b
 15603  001A24  D000               	goto	i1l6016
 15604  001A26                     i1l6016:
 15605                           
 15606                           ; BSR set to: 0
 15607                           ;doprnt.c: 1287: }
 15608                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15609  001A26  0E01               	movlw	1
 15610  001A28  0100               	movlb	0	; () banked
 15611  001A2A  6F8C               	movwf	i1printf@c& (0+255),b
 15612  001A2C                     i1l6018:
 15613                           
 15614                           ; BSR set to: 0
 15615  001A2C  0E05               	movlw	5
 15616  001A2E  0100               	movlb	0	; () banked
 15617  001A30  198C               	xorwf	i1printf@c& (0+255),w,b
 15618  001A32  B4D8               	btfsc	status,2,c
 15619  001A34  D01A               	goto	i1l6030
 15620  001A36  D001               	goto	i1l6022
 15621                           
 15622                           ; BSR set to: 0
 15623  001A38  D018               	goto	i1l6030
 15624  001A3A                     i1l6022:
 15625                           
 15626                           ; BSR set to: 0
 15627                           ;doprnt.c: 1306: if(val < dpowers[c])
 15628  001A3A  0100               	movlb	0	; () banked
 15629  001A3C  518C               	movf	i1printf@c& (0+255),w,b
 15630  001A3E  0D02               	mullw	2
 15631  001A40  0ED5               	movlw	low _dpowers
 15632  001A42  24F3               	addwf	prodl,w,c
 15633  001A44  6EF6               	movwf	tblptrl,c
 15634  001A46  0E7C               	movlw	high _dpowers
 15635  001A48  20F4               	addwfc	prodh,w,c
 15636  001A4A  6EF7               	movwf	tblptrh,c
 15637  001A4C                     	if	0	;There are less than 3 active tblptr bytes
 15638  001A4C                     	endif
 15639  001A4C  0009               	tblrd		*+
 15640  001A4E  50F5               	movf	tablat,w,c
 15641  001A50  0100               	movlb	0	; () banked
 15642  001A52  5D88               	subwf	i1printf@val& (0+255),w,b
 15643  001A54  0009               	tblrd		*+
 15644  001A56  50F5               	movf	tablat,w,c
 15645  001A58  0100               	movlb	0	; () banked
 15646  001A5A  5989               	subwfb	(i1printf@val+1)& (0+255),w,b
 15647  001A5C  A0D8               	btfss	status,0,c
 15648  001A5E  D005               	goto	i1l6030
 15649  001A60  D001               	goto	i1l6026
 15650                           
 15651                           ; BSR set to: 0
 15652                           ;doprnt.c: 1307: break;
 15653  001A62  D003               	goto	i1l6030
 15654  001A64                     i1l6026:
 15655                           
 15656                           ; BSR set to: 0
 15657  001A64  0100               	movlb	0	; () banked
 15658  001A66  2B8C               	incf	i1printf@c& (0+255),f,b
 15659  001A68  D7E1               	goto	i1l6018
 15660  001A6A                     i1l6030:
 15661                           
 15662                           ; BSR set to: 0
 15663                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15664  001A6A  0100               	movlb	0	; () banked
 15665  001A6C  518A               	movf	i1printf@width& (0+255),w,b
 15666  001A6E  0100               	movlb	0	; () banked
 15667  001A70  118B               	iorwf	(i1printf@width+1)& (0+255),w,b
 15668  001A72  B4D8               	btfsc	status,2,c
 15669  001A74  D00B               	goto	i1l6036
 15670                           
 15671                           ; BSR set to: 0
 15672  001A76  C087  F024         	movff	i1printf@flag,??i1_printf
 15673  001A7A  0E03               	movlw	3
 15674  001A7C  1624               	andwf	??i1_printf,f,c
 15675  001A7E  B4D8               	btfsc	status,2,c
 15676  001A80  D005               	goto	i1l6036
 15677                           
 15678                           ; BSR set to: 0
 15679                           ;doprnt.c: 1346: width--;
 15680  001A82  0100               	movlb	0	; () banked
 15681  001A84  078A               	decf	i1printf@width& (0+255),f,b
 15682  001A86  A0D8               	btfss	status,0,c
 15683  001A88  078B               	decf	(i1printf@width+1)& (0+255),f,b
 15684  001A8A  D000               	goto	i1l6036
 15685  001A8C                     i1l6036:
 15686                           
 15687                           ; BSR set to: 0
 15688                           ;doprnt.c: 1381: if(width > c)
 15689  001A8C  0E80               	movlw	128
 15690  001A8E  0100               	movlb	0	; () banked
 15691  001A90  BF8C               	btfsc	i1printf@c& (0+255),7,b
 15692  001A92  0E7F               	movlw	127
 15693  001A94  6E24               	movwf	??i1_printf& (0+255),c
 15694  001A96  0100               	movlb	0	; () banked
 15695  001A98  518A               	movf	i1printf@width& (0+255),w,b
 15696  001A9A  0100               	movlb	0	; () banked
 15697  001A9C  5D8C               	subwf	i1printf@c& (0+255),w,b
 15698  001A9E  0100               	movlb	0	; () banked
 15699  001AA0  518B               	movf	(i1printf@width+1)& (0+255),w,b
 15700  001AA2  0A80               	xorlw	128
 15701  001AA4  5824               	subwfb	??i1_printf& (0+255),w,c
 15702  001AA6  B0D8               	btfsc	status,0,c
 15703  001AA8  D00B               	goto	i1l6040
 15704                           
 15705                           ; BSR set to: 0
 15706                           ;doprnt.c: 1382: width -= c;
 15707  001AAA  0100               	movlb	0	; () banked
 15708  001AAC  518C               	movf	i1printf@c& (0+255),w,b
 15709  001AAE  0100               	movlb	0	; () banked
 15710  001AB0  5F8A               	subwf	i1printf@width& (0+255),f,b
 15711  001AB2  0E00               	movlw	0
 15712  001AB4  0100               	movlb	0	; () banked
 15713  001AB6  BF8C               	btfsc	i1printf@c& (0+255),7,b
 15714  001AB8  0EFF               	movlw	255
 15715  001ABA  0100               	movlb	0	; () banked
 15716  001ABC  5B8B               	subwfb	(i1printf@width+1)& (0+255),f,b
 15717  001ABE  D006               	goto	i1l6042
 15718  001AC0                     i1l6040:
 15719                           
 15720                           ; BSR set to: 0
 15721                           ;doprnt.c: 1383: else
 15722                           ;doprnt.c: 1384: width = 0;
 15723  001AC0  0E00               	movlw	0
 15724  001AC2  0100               	movlb	0	; () banked
 15725  001AC4  6F8B               	movwf	(i1printf@width+1)& (0+255),b
 15726  001AC6  0E00               	movlw	0
 15727  001AC8  6F8A               	movwf	i1printf@width& (0+255),b
 15728  001ACA  D000               	goto	i1l6042
 15729  001ACC                     i1l6042:
 15730                           
 15731                           ; BSR set to: 0
 15732                           ;doprnt.c: 1422: {
 15733                           ;doprnt.c: 1424: if(width
 15734                           ;doprnt.c: 1428: )
 15735  001ACC  0100               	movlb	0	; () banked
 15736  001ACE  518A               	movf	i1printf@width& (0+255),w,b
 15737  001AD0  0100               	movlb	0	; () banked
 15738  001AD2  118B               	iorwf	(i1printf@width+1)& (0+255),w,b
 15739  001AD4  B4D8               	btfsc	status,2,c
 15740  001AD6  D00F               	goto	i1l6048
 15741  001AD8                     i1l6044:
 15742                           
 15743                           ; BSR set to: 0
 15744                           ;doprnt.c: 1430: (putch(' ') );
 15745  001AD8  0E20               	movlw	32
 15746  001ADA  EC8F  F022         	call	i1_putch
 15747                           
 15748                           ;doprnt.c: 1431: while(--width);
 15749  001ADE  0100               	movlb	0	; () banked
 15750  001AE0  078A               	decf	i1printf@width& (0+255),f,b
 15751  001AE2  A0D8               	btfss	status,0,c
 15752  001AE4  078B               	decf	(i1printf@width+1)& (0+255),f,b
 15753  001AE6  0100               	movlb	0	; () banked
 15754  001AE8  518A               	movf	i1printf@width& (0+255),w,b
 15755  001AEA  0100               	movlb	0	; () banked
 15756  001AEC  118B               	iorwf	(i1printf@width+1)& (0+255),w,b
 15757  001AEE  B4D8               	btfsc	status,2,c
 15758  001AF0  D002               	goto	i1l6048
 15759  001AF2  D7F2               	goto	i1l6044
 15760                           
 15761                           ; BSR set to: 0
 15762  001AF4  D000               	goto	i1l6048
 15763  001AF6                     i1l6048:
 15764                           
 15765                           ; BSR set to: 0
 15766                           ;doprnt.c: 1438: if(flag & 0x03)
 15767  001AF6  C087  F024         	movff	i1printf@flag,??i1_printf
 15768  001AFA  0E03               	movlw	3
 15769  001AFC  1624               	andwf	??i1_printf,f,c
 15770  001AFE  B4D8               	btfsc	status,2,c
 15771  001B00  D004               	goto	i1l6052
 15772                           
 15773                           ; BSR set to: 0
 15774                           ;doprnt.c: 1439: (putch('-') );
 15775  001B02  0E2D               	movlw	45
 15776  001B04  EC8F  F022         	call	i1_putch
 15777  001B08  D000               	goto	i1l6052
 15778  001B0A                     i1l6052:
 15779                           
 15780                           ;doprnt.c: 1469: }
 15781                           ;doprnt.c: 1472: prec = c;
 15782  001B0A  C08C  F082         	movff	i1printf@c,i1printf@prec
 15783                           
 15784                           ;doprnt.c: 1474: while(prec--) {
 15785  001B0E  D028               	goto	i1l6058
 15786  001B10                     i1l6054:
 15787                           
 15788                           ;doprnt.c: 1478: {
 15789                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15790  001B10  0100               	movlb	0	; () banked
 15791  001B12  5182               	movf	i1printf@prec& (0+255),w,b
 15792  001B14  0D02               	mullw	2
 15793  001B16  0ED5               	movlw	low _dpowers
 15794  001B18  24F3               	addwf	prodl,w,c
 15795  001B1A  6EF6               	movwf	tblptrl,c
 15796  001B1C  0E7C               	movlw	high _dpowers
 15797  001B1E  20F4               	addwfc	prodh,w,c
 15798  001B20  6EF7               	movwf	tblptrh,c
 15799  001B22                     	if	0	;There are less than 3 active tblptr bytes
 15800  001B22                     	endif
 15801  001B22  0009               	tblrd		*+
 15802  001B24  CFF5 F018          	movff	tablat,i1___lwdiv@divisor
 15803  001B28  000A               	tblrd		*-
 15804  001B2A  CFF5 F019          	movff	tablat,i1___lwdiv@divisor+1
 15805  001B2E  C088  F016         	movff	i1printf@val,i1___lwdiv@dividend
 15806  001B32  C089  F017         	movff	i1printf@val+1,i1___lwdiv@dividend+1
 15807  001B36  EC61  F020         	call	i1___lwdiv	;wreg free
 15808  001B3A  C016  F01D         	movff	?i1___lwdiv,i1___lwmod@dividend
 15809  001B3E  C017  F01E         	movff	?i1___lwdiv+1,i1___lwmod@dividend+1
 15810  001B42  0E00               	movlw	0
 15811  001B44  6E20               	movwf	i1___lwmod@divisor+1,c
 15812  001B46  0E0A               	movlw	10
 15813  001B48  6E1F               	movwf	i1___lwmod@divisor,c
 15814  001B4A  ECBA  F020         	call	i1___lwmod	;wreg free
 15815  001B4E  501D               	movf	?i1___lwmod,w,c
 15816  001B50  0F30               	addlw	48
 15817  001B52  0100               	movlb	0	; () banked
 15818  001B54  6F8C               	movwf	i1printf@c& (0+255),b
 15819                           
 15820                           ; BSR set to: 0
 15821                           ;doprnt.c: 1523: }
 15822                           ;doprnt.c: 1524: (putch(c) );
 15823  001B56  0100               	movlb	0	; () banked
 15824  001B58  518C               	movf	i1printf@c& (0+255),w,b
 15825  001B5A  EC8F  F022         	call	i1_putch
 15826  001B5E  D000               	goto	i1l6058
 15827  001B60                     i1l6058:
 15828  001B60  0100               	movlb	0	; () banked
 15829  001B62  0782               	decf	i1printf@prec& (0+255),f,b
 15830  001B64  0100               	movlb	0	; () banked
 15831  001B66  2982               	incf	i1printf@prec& (0+255),w,b
 15832  001B68  B4D8               	btfsc	status,2,c
 15833  001B6A  D002               	goto	i1l6060
 15834  001B6C  D7D1               	goto	i1l6054
 15835                           
 15836                           ; BSR set to: 0
 15837  001B6E  D000               	goto	i1l6060
 15838  001B70                     i1l6060:
 15839  001B70  5022               	movf	i1printf@f,w,c
 15840  001B72  6E24               	movwf	??i1_printf& (0+255),c
 15841  001B74  5023               	movf	i1printf@f+1,w,c
 15842  001B76  6E25               	movwf	(??i1_printf+1)& (0+255),c
 15843  001B78  4A22               	infsnz	i1printf@f,f,c
 15844  001B7A  2A23               	incf	i1printf@f+1,f,c
 15845  001B7C  C024  FFF6         	movff	??i1_printf,tblptrl
 15846  001B80  C025  FFF7         	movff	??i1_printf+1,tblptrh
 15847  001B84  6AF8               	clrf	tblptru,c
 15848  001B86  0E05               	movlw	(high __ramtop+-1)
 15849  001B88  64F7               	cpfsgt	tblptrh,c
 15850  001B8A  D003               	bra	i1u699_27
 15851  001B8C  0008               	tblrd		*
 15852  001B8E  50F5               	movf	tablat,w,c
 15853  001B90  D005               	bra	i1u699_20
 15854  001B92                     i1u699_27:
 15855  001B92  CFF6 FFE9          	movff	tblptrl,fsr0l
 15856  001B96  CFF7 FFEA          	movff	tblptrh,fsr0h
 15857  001B9A  50EF               	movf	indf0,w,c
 15858  001B9C                     i1u699_20:
 15859  001B9C  0100               	movlb	0	; () banked
 15860  001B9E  6F8C               	movwf	i1printf@c& (0+255),b
 15861  001BA0  0100               	movlb	0	; () banked
 15862  001BA2  518C               	movf	i1printf@c& (0+255),w,b
 15863  001BA4  B4D8               	btfsc	status,2,c
 15864  001BA6  D002               	goto	i1l687
 15865  001BA8  D628               	goto	i1l5958
 15866                           
 15867                           ; BSR set to: 0
 15868  001BAA  D000               	goto	i1l687
 15869  001BAC                     i1l687:
 15870  001BAC  0012               	return		;funcret
 15871  001BAE                     __end_ofi1_printf:
 15872                           	opt stack 0
 15873                           pclatu	equ	0xFFB
 15874                           pclath	equ	0xFFA
 15875                           tblptru	equ	0xFF8
 15876                           tblptrh	equ	0xFF7
 15877                           tblptrl	equ	0xFF6
 15878                           tablat	equ	0xFF5
 15879                           prodh	equ	0xFF4
 15880                           prodl	equ	0xFF3
 15881                           intcon	equ	0xFF2
 15882                           intcon2	equ	0xFF1
 15883                           indf0	equ	0xFEF
 15884                           postinc0	equ	0xFEE
 15885                           fsr0h	equ	0xFEA
 15886                           fsr0l	equ	0xFE9
 15887                           wreg	equ	0xFE8
 15888                           postinc1	equ	0xFE6
 15889                           postdec1	equ	0xFE5
 15890                           plusw1	equ	0xFE3
 15891                           fsr1h	equ	0xFE2
 15892                           fsr1l	equ	0xFE1
 15893                           bsr	equ	0xFE0
 15894                           indf2	equ	0xFDF
 15895                           postinc2	equ	0xFDE
 15896                           postdec2	equ	0xFDD
 15897                           plusw2	equ	0xFDB
 15898                           fsr2h	equ	0xFDA
 15899                           fsr2l	equ	0xFD9
 15900                           status	equ	0xFD8
 15901                           
 15902 ;; *************** function i1_putch *****************
 15903 ;; Defined at:
 15904 ;;		line 77 in file "SerialFuncs.c"
 15905 ;; Parameters:    Size  Location     Type
 15906 ;;  c               1    wreg     unsigned char 
 15907 ;; Auto vars:     Size  Location     Type
 15908 ;;  c               1   21[COMRAM] unsigned char 
 15909 ;; Return value:  Size  Location     Type
 15910 ;;		None               void
 15911 ;; Registers used:
 15912 ;;		wreg
 15913 ;; Tracked objects:
 15914 ;;		On entry : 0/0
 15915 ;;		On exit  : 0/0
 15916 ;;		Unchanged: 0/0
 15917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15918 ;;      Params:         0       0       0       0       0       0       0
 15919 ;;      Locals:         1       0       0       0       0       0       0
 15920 ;;      Temps:          0       0       0       0       0       0       0
 15921 ;;      Totals:         1       0       0       0       0       0       0
 15922 ;;Total ram usage:        1 bytes
 15923 ;; Hardware stack levels used:    1
 15924 ;; Hardware stack levels required when called:    2
 15925 ;; This function calls:
 15926 ;;		Nothing
 15927 ;; This function is called by:
 15928 ;;		i1_printf
 15929 ;; This function uses a non-reentrant model
 15930 ;;
 15931                           
 15932                           	psect	text52
 15933  00451E                     __ptext52:
 15934                           	opt stack 0
 15935  00451E                     i1_putch:
 15936                           	opt stack 20
 15937                           
 15938                           ;incstack = 0
 15939                           ;i1putch@c stored from wreg
 15940  00451E  6E16               	movwf	i1putch@c,c
 15941                           
 15942                           ;SerialFuncs.c: 79: while (!TXIF);
 15943  004520  D000               	goto	i1l331
 15944  004522                     i1l331:
 15945  004522  A89E               	btfss	3998,4,c	;volatile
 15946  004524  D7FE               	goto	i1l331
 15947                           
 15948                           ;SerialFuncs.c: 80: TXREG = c;
 15949  004526  C016  FFAD         	movff	i1putch@c,4013	;volatile
 15950  00452A  0012               	return		;funcret
 15951  00452C                     __end_ofi1_putch:
 15952                           	opt stack 0
 15953                           pclatu	equ	0xFFB
 15954                           pclath	equ	0xFFA
 15955                           tblptru	equ	0xFF8
 15956                           tblptrh	equ	0xFF7
 15957                           tblptrl	equ	0xFF6
 15958                           tablat	equ	0xFF5
 15959                           prodh	equ	0xFF4
 15960                           prodl	equ	0xFF3
 15961                           intcon	equ	0xFF2
 15962                           intcon2	equ	0xFF1
 15963                           indf0	equ	0xFEF
 15964                           postinc0	equ	0xFEE
 15965                           fsr0h	equ	0xFEA
 15966                           fsr0l	equ	0xFE9
 15967                           wreg	equ	0xFE8
 15968                           postinc1	equ	0xFE6
 15969                           postdec1	equ	0xFE5
 15970                           plusw1	equ	0xFE3
 15971                           fsr1h	equ	0xFE2
 15972                           fsr1l	equ	0xFE1
 15973                           bsr	equ	0xFE0
 15974                           indf2	equ	0xFDF
 15975                           postinc2	equ	0xFDE
 15976                           postdec2	equ	0xFDD
 15977                           plusw2	equ	0xFDB
 15978                           fsr2h	equ	0xFDA
 15979                           fsr2l	equ	0xFD9
 15980                           status	equ	0xFD8
 15981                           
 15982 ;; *************** function i1_isdigit *****************
 15983 ;; Defined at:
 15984 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 15985 ;; Parameters:    Size  Location     Type
 15986 ;;  c               1    wreg     unsigned char 
 15987 ;; Auto vars:     Size  Location     Type
 15988 ;;  c               1   23[COMRAM] unsigned char 
 15989 ;; Return value:  Size  Location     Type
 15990 ;;		None               void
 15991 ;; Registers used:
 15992 ;;		wreg, status,2, status,0
 15993 ;; Tracked objects:
 15994 ;;		On entry : 0/0
 15995 ;;		On exit  : 0/0
 15996 ;;		Unchanged: 0/0
 15997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15998 ;;      Params:         0       0       0       0       0       0       0
 15999 ;;      Locals:         2       0       0       0       0       0       0
 16000 ;;      Temps:          1       0       0       0       0       0       0
 16001 ;;      Totals:         3       0       0       0       0       0       0
 16002 ;;Total ram usage:        3 bytes
 16003 ;; Hardware stack levels used:    1
 16004 ;; Hardware stack levels required when called:    2
 16005 ;; This function calls:
 16006 ;;		Nothing
 16007 ;; This function is called by:
 16008 ;;		i1_printf
 16009 ;; This function uses a non-reentrant model
 16010 ;;
 16011                           
 16012                           	psect	text53
 16013  004418                     __ptext53:
 16014                           	opt stack 0
 16015  004418                     i1_isdigit:
 16016                           	opt stack 20
 16017                           
 16018                           ;incstack = 0
 16019                           ;i1isdigit@c stored from wreg
 16020  004418  6E18               	movwf	i1isdigit@c,c
 16021  00441A  0E00               	movlw	0
 16022  00441C  6E17               	movwf	i1_isdigit$2250,c
 16023  00441E  0E3A               	movlw	58
 16024  004420  6018               	cpfslt	i1isdigit@c,c
 16025  004422  D006               	goto	i1l5740
 16026  004424  0E2F               	movlw	47
 16027  004426  6418               	cpfsgt	i1isdigit@c,c
 16028  004428  D003               	goto	i1l5740
 16029  00442A  0E01               	movlw	1
 16030  00442C  6E17               	movwf	i1_isdigit$2250,c
 16031  00442E  D000               	goto	i1l5740
 16032  004430                     i1l5740:
 16033  004430  C017  F016         	movff	i1_isdigit$2250,??i1_isdigit
 16034  004434  3016               	rrcf	??i1_isdigit,w,c
 16035  004436  D000               	goto	i1l1265
 16036  004438                     i1l1265:
 16037  004438  0012               	return		;funcret
 16038  00443A                     __end_ofi1_isdigit:
 16039                           	opt stack 0
 16040                           pclatu	equ	0xFFB
 16041                           pclath	equ	0xFFA
 16042                           tblptru	equ	0xFF8
 16043                           tblptrh	equ	0xFF7
 16044                           tblptrl	equ	0xFF6
 16045                           tablat	equ	0xFF5
 16046                           prodh	equ	0xFF4
 16047                           prodl	equ	0xFF3
 16048                           intcon	equ	0xFF2
 16049                           intcon2	equ	0xFF1
 16050                           indf0	equ	0xFEF
 16051                           postinc0	equ	0xFEE
 16052                           fsr0h	equ	0xFEA
 16053                           fsr0l	equ	0xFE9
 16054                           wreg	equ	0xFE8
 16055                           postinc1	equ	0xFE6
 16056                           postdec1	equ	0xFE5
 16057                           plusw1	equ	0xFE3
 16058                           fsr1h	equ	0xFE2
 16059                           fsr1l	equ	0xFE1
 16060                           bsr	equ	0xFE0
 16061                           indf2	equ	0xFDF
 16062                           postinc2	equ	0xFDE
 16063                           postdec2	equ	0xFDD
 16064                           plusw2	equ	0xFDB
 16065                           fsr2h	equ	0xFDA
 16066                           fsr2l	equ	0xFD9
 16067                           status	equ	0xFD8
 16068                           
 16069 ;; *************** function i1___wmul *****************
 16070 ;; Defined at:
 16071 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 16072 ;; Parameters:    Size  Location     Type
 16073 ;;  multiplier      2   21[COMRAM] unsigned int 
 16074 ;;  multiplicand    2   23[COMRAM] unsigned int 
 16075 ;; Auto vars:     Size  Location     Type
 16076 ;;  __wmul          2   25[COMRAM] unsigned int 
 16077 ;; Return value:  Size  Location     Type
 16078 ;;                  2   21[COMRAM] unsigned int 
 16079 ;; Registers used:
 16080 ;;		wreg, status,2, status,0, prodl, prodh
 16081 ;; Tracked objects:
 16082 ;;		On entry : 0/0
 16083 ;;		On exit  : 0/0
 16084 ;;		Unchanged: 0/0
 16085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16086 ;;      Params:         4       0       0       0       0       0       0
 16087 ;;      Locals:         2       0       0       0       0       0       0
 16088 ;;      Temps:          0       0       0       0       0       0       0
 16089 ;;      Totals:         6       0       0       0       0       0       0
 16090 ;;Total ram usage:        6 bytes
 16091 ;; Hardware stack levels used:    1
 16092 ;; Hardware stack levels required when called:    2
 16093 ;; This function calls:
 16094 ;;		Nothing
 16095 ;; This function is called by:
 16096 ;;		i1_printf
 16097 ;; This function uses a non-reentrant model
 16098 ;;
 16099                           
 16100                           	psect	text54
 16101  0043A6                     __ptext54:
 16102                           	opt stack 0
 16103  0043A6                     i1___wmul:
 16104                           	opt stack 20
 16105                           
 16106                           ;incstack = 0
 16107  0043A6  5016               	movf	i1___wmul@multiplier,w,c
 16108  0043A8  0218               	mulwf	i1___wmul@multiplicand,c
 16109  0043AA  CFF3 F01A          	movff	prodl,i1___wmul@product
 16110  0043AE  CFF4 F01B          	movff	prodh,i1___wmul@product+1
 16111  0043B2  5016               	movf	i1___wmul@multiplier,w,c
 16112  0043B4  0219               	mulwf	i1___wmul@multiplicand+1,c
 16113  0043B6  50F3               	movf	prodl,w,c
 16114  0043B8  261B               	addwf	i1___wmul@product+1,f,c
 16115  0043BA  5017               	movf	i1___wmul@multiplier+1,w,c
 16116  0043BC  0218               	mulwf	i1___wmul@multiplicand,c
 16117  0043BE  50F3               	movf	prodl,w,c
 16118  0043C0  261B               	addwf	i1___wmul@product+1,f,c
 16119  0043C2  C01A  F016         	movff	i1___wmul@product,?i1___wmul
 16120  0043C6  C01B  F017         	movff	i1___wmul@product+1,?i1___wmul+1
 16121  0043CA  D000               	goto	i1l794
 16122  0043CC                     i1l794:
 16123  0043CC  0012               	return		;funcret
 16124  0043CE                     __end_ofi1___wmul:
 16125                           	opt stack 0
 16126                           pclatu	equ	0xFFB
 16127                           pclath	equ	0xFFA
 16128                           tblptru	equ	0xFF8
 16129                           tblptrh	equ	0xFF7
 16130                           tblptrl	equ	0xFF6
 16131                           tablat	equ	0xFF5
 16132                           prodh	equ	0xFF4
 16133                           prodl	equ	0xFF3
 16134                           intcon	equ	0xFF2
 16135                           intcon2	equ	0xFF1
 16136                           indf0	equ	0xFEF
 16137                           postinc0	equ	0xFEE
 16138                           fsr0h	equ	0xFEA
 16139                           fsr0l	equ	0xFE9
 16140                           wreg	equ	0xFE8
 16141                           postinc1	equ	0xFE6
 16142                           postdec1	equ	0xFE5
 16143                           plusw1	equ	0xFE3
 16144                           fsr1h	equ	0xFE2
 16145                           fsr1l	equ	0xFE1
 16146                           bsr	equ	0xFE0
 16147                           indf2	equ	0xFDF
 16148                           postinc2	equ	0xFDE
 16149                           postdec2	equ	0xFDD
 16150                           plusw2	equ	0xFDB
 16151                           fsr2h	equ	0xFDA
 16152                           fsr2l	equ	0xFD9
 16153                           status	equ	0xFD8
 16154                           
 16155 ;; *************** function i1___lwmod *****************
 16156 ;; Defined at:
 16157 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 16158 ;; Parameters:    Size  Location     Type
 16159 ;;  dividend        2   28[COMRAM] unsigned int 
 16160 ;;  divisor         2   30[COMRAM] unsigned int 
 16161 ;; Auto vars:     Size  Location     Type
 16162 ;;  __lwmod         1   32[COMRAM] unsigned char 
 16163 ;; Return value:  Size  Location     Type
 16164 ;;                  2   28[COMRAM] unsigned int 
 16165 ;; Registers used:
 16166 ;;		wreg, status,2, status,0
 16167 ;; Tracked objects:
 16168 ;;		On entry : 0/0
 16169 ;;		On exit  : 0/0
 16170 ;;		Unchanged: 0/0
 16171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16172 ;;      Params:         4       0       0       0       0       0       0
 16173 ;;      Locals:         1       0       0       0       0       0       0
 16174 ;;      Temps:          0       0       0       0       0       0       0
 16175 ;;      Totals:         5       0       0       0       0       0       0
 16176 ;;Total ram usage:        5 bytes
 16177 ;; Hardware stack levels used:    1
 16178 ;; Hardware stack levels required when called:    2
 16179 ;; This function calls:
 16180 ;;		Nothing
 16181 ;; This function is called by:
 16182 ;;		i1_printf
 16183 ;; This function uses a non-reentrant model
 16184 ;;
 16185                           
 16186                           	psect	text55
 16187  004174                     __ptext55:
 16188                           	opt stack 0
 16189  004174                     i1___lwmod:
 16190                           	opt stack 20
 16191                           
 16192                           ;incstack = 0
 16193  004174  501F               	movf	i1___lwmod@divisor,w,c
 16194  004176  1020               	iorwf	i1___lwmod@divisor+1,w,c
 16195  004178  B4D8               	btfsc	status,2,c
 16196  00417A  D01D               	goto	i1l1383
 16197  00417C  0E01               	movlw	1
 16198  00417E  6E21               	movwf	i1___lwmod@counter,c
 16199  004180  D005               	goto	i1l5772
 16200  004182                     i1l5770:
 16201  004182  90D8               	bcf	status,0,c
 16202  004184  361F               	rlcf	i1___lwmod@divisor,f,c
 16203  004186  3620               	rlcf	i1___lwmod@divisor+1,f,c
 16204  004188  2A21               	incf	i1___lwmod@counter,f,c
 16205  00418A  D000               	goto	i1l5772
 16206  00418C                     i1l5772:
 16207  00418C  BE20               	btfsc	i1___lwmod@divisor+1,7,c
 16208  00418E  D002               	goto	i1l5774
 16209  004190  D7F8               	goto	i1l5770
 16210  004192  D000               	goto	i1l5774
 16211  004194                     i1l5774:
 16212  004194  501F               	movf	i1___lwmod@divisor,w,c
 16213  004196  5C1D               	subwf	i1___lwmod@dividend,w,c
 16214  004198  5020               	movf	i1___lwmod@divisor+1,w,c
 16215  00419A  581E               	subwfb	i1___lwmod@dividend+1,w,c
 16216  00419C  A0D8               	btfss	status,0,c
 16217  00419E  D005               	goto	i1l5778
 16218  0041A0  501F               	movf	i1___lwmod@divisor,w,c
 16219  0041A2  5E1D               	subwf	i1___lwmod@dividend,f,c
 16220  0041A4  5020               	movf	i1___lwmod@divisor+1,w,c
 16221  0041A6  5A1E               	subwfb	i1___lwmod@dividend+1,f,c
 16222  0041A8  D000               	goto	i1l5778
 16223  0041AA                     i1l5778:
 16224  0041AA  90D8               	bcf	status,0,c
 16225  0041AC  3220               	rrcf	i1___lwmod@divisor+1,f,c
 16226  0041AE  321F               	rrcf	i1___lwmod@divisor,f,c
 16227  0041B0  2E21               	decfsz	i1___lwmod@counter,f,c
 16228  0041B2  D7F0               	goto	i1l5774
 16229  0041B4  D000               	goto	i1l1383
 16230  0041B6                     i1l1383:
 16231  0041B6  C01D  F01D         	movff	i1___lwmod@dividend,?i1___lwmod
 16232  0041BA  C01E  F01E         	movff	i1___lwmod@dividend+1,?i1___lwmod+1
 16233  0041BE  0012               	return		;funcret
 16234  0041C0                     __end_ofi1___lwmod:
 16235                           	opt stack 0
 16236                           pclatu	equ	0xFFB
 16237                           pclath	equ	0xFFA
 16238                           tblptru	equ	0xFF8
 16239                           tblptrh	equ	0xFF7
 16240                           tblptrl	equ	0xFF6
 16241                           tablat	equ	0xFF5
 16242                           prodh	equ	0xFF4
 16243                           prodl	equ	0xFF3
 16244                           intcon	equ	0xFF2
 16245                           intcon2	equ	0xFF1
 16246                           indf0	equ	0xFEF
 16247                           postinc0	equ	0xFEE
 16248                           fsr0h	equ	0xFEA
 16249                           fsr0l	equ	0xFE9
 16250                           wreg	equ	0xFE8
 16251                           postinc1	equ	0xFE6
 16252                           postdec1	equ	0xFE5
 16253                           plusw1	equ	0xFE3
 16254                           fsr1h	equ	0xFE2
 16255                           fsr1l	equ	0xFE1
 16256                           bsr	equ	0xFE0
 16257                           indf2	equ	0xFDF
 16258                           postinc2	equ	0xFDE
 16259                           postdec2	equ	0xFDD
 16260                           plusw2	equ	0xFDB
 16261                           fsr2h	equ	0xFDA
 16262                           fsr2l	equ	0xFD9
 16263                           status	equ	0xFD8
 16264                           
 16265 ;; *************** function i1___lwdiv *****************
 16266 ;; Defined at:
 16267 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 16268 ;; Parameters:    Size  Location     Type
 16269 ;;  dividend        2   21[COMRAM] unsigned int 
 16270 ;;  divisor         2   23[COMRAM] unsigned int 
 16271 ;; Auto vars:     Size  Location     Type
 16272 ;;  __lwdiv         2   26[COMRAM] unsigned int 
 16273 ;;  __lwdiv         1   25[COMRAM] unsigned char 
 16274 ;; Return value:  Size  Location     Type
 16275 ;;                  2   21[COMRAM] unsigned int 
 16276 ;; Registers used:
 16277 ;;		wreg, status,2, status,0
 16278 ;; Tracked objects:
 16279 ;;		On entry : 0/0
 16280 ;;		On exit  : 0/0
 16281 ;;		Unchanged: 0/0
 16282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16283 ;;      Params:         4       0       0       0       0       0       0
 16284 ;;      Locals:         3       0       0       0       0       0       0
 16285 ;;      Temps:          0       0       0       0       0       0       0
 16286 ;;      Totals:         7       0       0       0       0       0       0
 16287 ;;Total ram usage:        7 bytes
 16288 ;; Hardware stack levels used:    1
 16289 ;; Hardware stack levels required when called:    2
 16290 ;; This function calls:
 16291 ;;		Nothing
 16292 ;; This function is called by:
 16293 ;;		i1_printf
 16294 ;; This function uses a non-reentrant model
 16295 ;;
 16296                           
 16297                           	psect	text56
 16298  0040C2                     __ptext56:
 16299                           	opt stack 0
 16300  0040C2                     i1___lwdiv:
 16301                           	opt stack 20
 16302                           
 16303                           ;incstack = 0
 16304  0040C2  0E00               	movlw	0
 16305  0040C4  6E1C               	movwf	i1___lwdiv@quotient+1,c
 16306  0040C6  0E00               	movlw	0
 16307  0040C8  6E1B               	movwf	i1___lwdiv@quotient,c
 16308  0040CA  5018               	movf	i1___lwdiv@divisor,w,c
 16309  0040CC  1019               	iorwf	i1___lwdiv@divisor+1,w,c
 16310  0040CE  B4D8               	btfsc	status,2,c
 16311  0040D0  D021               	goto	i1l1373
 16312  0040D2  0E01               	movlw	1
 16313  0040D4  6E1A               	movwf	i1___lwdiv@counter,c
 16314  0040D6  D005               	goto	i1l5752
 16315  0040D8                     i1l5750:
 16316  0040D8  90D8               	bcf	status,0,c
 16317  0040DA  3618               	rlcf	i1___lwdiv@divisor,f,c
 16318  0040DC  3619               	rlcf	i1___lwdiv@divisor+1,f,c
 16319  0040DE  2A1A               	incf	i1___lwdiv@counter,f,c
 16320  0040E0  D000               	goto	i1l5752
 16321  0040E2                     i1l5752:
 16322  0040E2  BE19               	btfsc	i1___lwdiv@divisor+1,7,c
 16323  0040E4  D002               	goto	i1l5754
 16324  0040E6  D7F8               	goto	i1l5750
 16325  0040E8  D000               	goto	i1l5754
 16326  0040EA                     i1l5754:
 16327  0040EA  90D8               	bcf	status,0,c
 16328  0040EC  361B               	rlcf	i1___lwdiv@quotient,f,c
 16329  0040EE  361C               	rlcf	i1___lwdiv@quotient+1,f,c
 16330  0040F0  5018               	movf	i1___lwdiv@divisor,w,c
 16331  0040F2  5C16               	subwf	i1___lwdiv@dividend,w,c
 16332  0040F4  5019               	movf	i1___lwdiv@divisor+1,w,c
 16333  0040F6  5817               	subwfb	i1___lwdiv@dividend+1,w,c
 16334  0040F8  A0D8               	btfss	status,0,c
 16335  0040FA  D006               	goto	i1l5762
 16336  0040FC  5018               	movf	i1___lwdiv@divisor,w,c
 16337  0040FE  5E16               	subwf	i1___lwdiv@dividend,f,c
 16338  004100  5019               	movf	i1___lwdiv@divisor+1,w,c
 16339  004102  5A17               	subwfb	i1___lwdiv@dividend+1,f,c
 16340  004104  801B               	bsf	i1___lwdiv@quotient,0,c
 16341  004106  D000               	goto	i1l5762
 16342  004108                     i1l5762:
 16343  004108  90D8               	bcf	status,0,c
 16344  00410A  3219               	rrcf	i1___lwdiv@divisor+1,f,c
 16345  00410C  3218               	rrcf	i1___lwdiv@divisor,f,c
 16346  00410E  2E1A               	decfsz	i1___lwdiv@counter,f,c
 16347  004110  D7EC               	goto	i1l5754
 16348  004112  D000               	goto	i1l1373
 16349  004114                     i1l1373:
 16350  004114  C01B  F016         	movff	i1___lwdiv@quotient,?i1___lwdiv
 16351  004118  C01C  F017         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
 16352  00411C  0012               	return		;funcret
 16353  00411E                     __end_ofi1___lwdiv:
 16354                           	opt stack 0
 16355                           pclatu	equ	0xFFB
 16356                           pclath	equ	0xFFA
 16357                           tblptru	equ	0xFF8
 16358                           tblptrh	equ	0xFF7
 16359                           tblptrl	equ	0xFF6
 16360                           tablat	equ	0xFF5
 16361                           prodh	equ	0xFF4
 16362                           prodl	equ	0xFF3
 16363                           intcon	equ	0xFF2
 16364                           intcon2	equ	0xFF1
 16365                           indf0	equ	0xFEF
 16366                           postinc0	equ	0xFEE
 16367                           fsr0h	equ	0xFEA
 16368                           fsr0l	equ	0xFE9
 16369                           wreg	equ	0xFE8
 16370                           postinc1	equ	0xFE6
 16371                           postdec1	equ	0xFE5
 16372                           plusw1	equ	0xFE3
 16373                           fsr1h	equ	0xFE2
 16374                           fsr1l	equ	0xFE1
 16375                           bsr	equ	0xFE0
 16376                           indf2	equ	0xFDF
 16377                           postinc2	equ	0xFDE
 16378                           postdec2	equ	0xFDD
 16379                           plusw2	equ	0xFDB
 16380                           fsr2h	equ	0xFDA
 16381                           fsr2l	equ	0xFD9
 16382                           status	equ	0xFD8
 16383                           
 16384 ;; *************** function _ReadUSART *****************
 16385 ;; Defined at:
 16386 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uread.c"
 16387 ;; Parameters:    Size  Location     Type
 16388 ;;		None
 16389 ;; Auto vars:     Size  Location     Type
 16390 ;;  data            1   21[COMRAM] unsigned char 
 16391 ;; Return value:  Size  Location     Type
 16392 ;;                  1    wreg      unsigned char 
 16393 ;; Registers used:
 16394 ;;		wreg, status,2, status,0
 16395 ;; Tracked objects:
 16396 ;;		On entry : 0/0
 16397 ;;		On exit  : 0/0
 16398 ;;		Unchanged: 0/0
 16399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16400 ;;      Params:         0       0       0       0       0       0       0
 16401 ;;      Locals:         1       0       0       0       0       0       0
 16402 ;;      Temps:          0       0       0       0       0       0       0
 16403 ;;      Totals:         1       0       0       0       0       0       0
 16404 ;;Total ram usage:        1 bytes
 16405 ;; Hardware stack levels used:    1
 16406 ;; Hardware stack levels required when called:    2
 16407 ;; This function calls:
 16408 ;;		Nothing
 16409 ;; This function is called by:
 16410 ;;		_SerialRxPinInterrupt
 16411 ;; This function uses a non-reentrant model
 16412 ;;
 16413                           
 16414                           	psect	text57
 16415  0043F4                     __ptext57:
 16416                           	opt stack 0
 16417  0043F4                     _ReadUSART:
 16418                           	opt stack 21
 16419                           
 16420                           ;incstack = 0
 16421  0043F4  0EF2               	movlw	242
 16422  0043F6  1648               	andwf	_USART_Status,f,c
 16423  0043F8  ACAB               	btfss	4011,6,c	;volatile
 16424  0043FA  D005               	goto	i1l787
 16425  0043FC  9048               	bcf	_USART_Status,0,c
 16426  0043FE  A0AB               	btfss	4011,0,c	;volatile
 16427  004400  D002               	goto	i1l787
 16428  004402  8048               	bsf	_USART_Status,0,c
 16429  004404  D000               	goto	i1l787
 16430  004406                     i1l787:
 16431  004406  B4AB               	btfsc	4011,2,c	;volatile
 16432  004408  8448               	bsf	_USART_Status,2,c
 16433  00440A  B2AB               	btfsc	4011,1,c	;volatile
 16434  00440C  8648               	bsf	_USART_Status,3,c
 16435  00440E  CFAE F016          	movff	4014,ReadUSART@data	;volatile
 16436  004412  5016               	movf	ReadUSART@data,w,c
 16437  004414  D000               	goto	i1l791
 16438  004416                     i1l791:
 16439  004416  0012               	return		;funcret
 16440  004418                     __end_of_ReadUSART:
 16441                           	opt stack 0
 16442                           pclatu	equ	0xFFB
 16443                           pclath	equ	0xFFA
 16444                           tblptru	equ	0xFF8
 16445                           tblptrh	equ	0xFF7
 16446                           tblptrl	equ	0xFF6
 16447                           tablat	equ	0xFF5
 16448                           prodh	equ	0xFF4
 16449                           prodl	equ	0xFF3
 16450                           intcon	equ	0xFF2
 16451                           intcon2	equ	0xFF1
 16452                           indf0	equ	0xFEF
 16453                           postinc0	equ	0xFEE
 16454                           fsr0h	equ	0xFEA
 16455                           fsr0l	equ	0xFE9
 16456                           wreg	equ	0xFE8
 16457                           postinc1	equ	0xFE6
 16458                           postdec1	equ	0xFE5
 16459                           plusw1	equ	0xFE3
 16460                           fsr1h	equ	0xFE2
 16461                           fsr1l	equ	0xFE1
 16462                           bsr	equ	0xFE0
 16463                           indf2	equ	0xFDF
 16464                           postinc2	equ	0xFDE
 16465                           postdec2	equ	0xFDD
 16466                           plusw2	equ	0xFDB
 16467                           fsr2h	equ	0xFDA
 16468                           fsr2l	equ	0xFD9
 16469                           status	equ	0xFD8
 16470                           
 16471 ;; *************** function _TimingISR *****************
 16472 ;; Defined at:
 16473 ;;		line 26 in file "InterruptFuncs.c"
 16474 ;; Parameters:    Size  Location     Type
 16475 ;;		None
 16476 ;; Auto vars:     Size  Location     Type
 16477 ;;		None
 16478 ;; Return value:  Size  Location     Type
 16479 ;;		None               void
 16480 ;; Registers used:
 16481 ;;		wreg, status,2, status,0, cstack
 16482 ;; Tracked objects:
 16483 ;;		On entry : 0/0
 16484 ;;		On exit  : 0/0
 16485 ;;		Unchanged: 0/0
 16486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16487 ;;      Params:         0       0       0       0       0       0       0
 16488 ;;      Locals:         0       0       0       0       0       0       0
 16489 ;;      Temps:         16       0       0       0       0       0       0
 16490 ;;      Totals:        16       0       0       0       0       0       0
 16491 ;;Total ram usage:       16 bytes
 16492 ;; Hardware stack levels used:    1
 16493 ;; Hardware stack levels required when called:    1
 16494 ;; This function calls:
 16495 ;;		i2___lwmod
 16496 ;; This function is called by:
 16497 ;;		Interrupt level 2
 16498 ;; This function uses a non-reentrant model
 16499 ;;
 16500                           
 16501                           	psect	intcode
 16502  000008                     __pintcode:
 16503                           	opt stack 0
 16504  000008                     _TimingISR:
 16505                           	opt stack 20
 16506                           
 16507                           ;incstack = 0
 16508  000008  CFFA F008          	movff	pclath,??_TimingISR+2
 16509  00000C  CFFB F009          	movff	pclatu,??_TimingISR+3
 16510  000010  CFE9 F00A          	movff	fsr0l,??_TimingISR+4
 16511  000014  ED4C  F015         	call	int_func,f	;refresh shadow registers
 16512                           pclatu	equ	0xFFB
 16513                           pclath	equ	0xFFA
 16514                           tblptru	equ	0xFF8
 16515                           tblptrh	equ	0xFF7
 16516                           tblptrl	equ	0xFF6
 16517                           tablat	equ	0xFF5
 16518                           prodh	equ	0xFF4
 16519                           prodl	equ	0xFF3
 16520                           intcon	equ	0xFF2
 16521                           intcon2	equ	0xFF1
 16522                           indf0	equ	0xFEF
 16523                           postinc0	equ	0xFEE
 16524                           fsr0h	equ	0xFEA
 16525                           fsr0l	equ	0xFE9
 16526                           wreg	equ	0xFE8
 16527                           postinc1	equ	0xFE6
 16528                           postdec1	equ	0xFE5
 16529                           plusw1	equ	0xFE3
 16530                           fsr1h	equ	0xFE2
 16531                           fsr1l	equ	0xFE1
 16532                           bsr	equ	0xFE0
 16533                           indf2	equ	0xFDF
 16534                           postinc2	equ	0xFDE
 16535                           postdec2	equ	0xFDD
 16536                           plusw2	equ	0xFDB
 16537                           fsr2h	equ	0xFDA
 16538                           fsr2l	equ	0xFD9
 16539                           status	equ	0xFD8
 16540                           
 16541                           	psect	intcode_body
 16542  002A98                     __pintcode_body:
 16543                           	opt stack 20
 16544  002A98                     int_func:
 16545                           	opt stack 20
 16546  002A98  0006               	pop		; remove dummy address from shadow register refresh
 16547  002A9A  CFEA F00B          	movff	fsr0h,??_TimingISR+5
 16548  002A9E  CFE1 F00C          	movff	fsr1l,??_TimingISR+6
 16549  002AA2  CFE2 F00D          	movff	fsr1h,??_TimingISR+7
 16550  002AA6  CFD9 F00E          	movff	fsr2l,??_TimingISR+8
 16551  002AAA  CFDA F00F          	movff	fsr2h,??_TimingISR+9
 16552  002AAE  CFF3 F010          	movff	prodl,??_TimingISR+10
 16553  002AB2  CFF4 F011          	movff	prodh,??_TimingISR+11
 16554  002AB6  CFF6 F012          	movff	tblptrl,??_TimingISR+12
 16555  002ABA  CFF7 F013          	movff	tblptrh,??_TimingISR+13
 16556  002ABE  CFF8 F014          	movff	tblptru,??_TimingISR+14
 16557  002AC2  CFF5 F015          	movff	tablat,??_TimingISR+15
 16558                           
 16559                           ;InterruptFuncs.c: 29: TMR0H = 0x03;
 16560  002AC6  0E03               	movlw	3
 16561  002AC8  6ED7               	movwf	4055,c	;volatile
 16562                           
 16563                           ;InterruptFuncs.c: 30: TMR0L = 0xF9;
 16564  002ACA  0EF9               	movlw	249
 16565  002ACC  6ED6               	movwf	4054,c	;volatile
 16566                           
 16567                           ;InterruptFuncs.c: 33: counter++;
 16568  002ACE  4A30               	infsnz	_counter,f,c
 16569  002AD0  2A31               	incf	_counter+1,f,c
 16570                           
 16571                           ;InterruptFuncs.c: 36: if(counter==62)
 16572  002AD2  0E3E               	movlw	62
 16573  002AD4  1830               	xorwf	_counter,w,c
 16574  002AD6  1031               	iorwf	_counter+1,w,c
 16575  002AD8  A4D8               	btfss	status,2,c
 16576  002ADA  D0D5               	goto	i2l448
 16577                           
 16578                           ;InterruptFuncs.c: 39: seconds=seconds++;
 16579  002ADC  0E00               	movlw	0
 16580  002ADE  6E31               	movwf	_counter+1,c
 16581  002AE0  0E00               	movlw	0
 16582  002AE2  6E30               	movwf	_counter,c
 16583  002AE4  4A38               	infsnz	_seconds,f,c
 16584  002AE6  2A39               	incf	_seconds+1,f,c
 16585                           
 16586                           ;InterruptFuncs.c: 40: if (seconds>59){
 16587  002AE8  5039               	movf	_seconds+1,w,c
 16588  002AEA  E104               	bnz	i2u499_40
 16589  002AEC  0E3C               	movlw	60
 16590  002AEE  5C38               	subwf	_seconds,w,c
 16591  002AF0  A0D8               	btfss	status,0,c
 16592  002AF2  D0C9               	goto	i2l448
 16593  002AF4                     i2u499_40:
 16594                           
 16595                           ;InterruptFuncs.c: 42: minutes = minutes++;
 16596  002AF4  0E00               	movlw	0
 16597  002AF6  6E39               	movwf	_seconds+1,c
 16598  002AF8  0E00               	movlw	0
 16599  002AFA  6E38               	movwf	_seconds,c
 16600  002AFC  4A36               	infsnz	_minutes,f,c
 16601  002AFE  2A37               	incf	_minutes+1,f,c
 16602                           
 16603                           ;InterruptFuncs.c: 43: if (BTcountdown==1)
 16604  002B00  0101               	movlb	1	; () banked
 16605  002B02  05CA               	decf	_BTcountdown& (0+255),w,b
 16606  002B04  0101               	movlb	1	; () banked
 16607  002B06  11CB               	iorwf	(_BTcountdown+1)& (0+255),w,b
 16608  002B08  A4D8               	btfss	status,2,c
 16609  002B0A  D015               	goto	i2l4780
 16610                           
 16611                           ; BSR set to: 1
 16612                           ;InterruptFuncs.c: 44: {
 16613                           ;InterruptFuncs.c: 45: BTcount=BTcount-1;
 16614  002B0C  0EFF               	movlw	255
 16615  002B0E  2428               	addwf	_BTcount,w,c
 16616  002B10  6E28               	movwf	_BTcount,c
 16617  002B12  0EFF               	movlw	255
 16618  002B14  2029               	addwfc	_BTcount+1,w,c
 16619  002B16  6E29               	movwf	_BTcount+1,c
 16620                           
 16621                           ;InterruptFuncs.c: 46: if (BTcount==0)
 16622  002B18  5028               	movf	_BTcount,w,c
 16623  002B1A  1029               	iorwf	_BTcount+1,w,c
 16624  002B1C  A4D8               	btfss	status,2,c
 16625  002B1E  D00B               	goto	i2l4780
 16626                           
 16627                           ; BSR set to: 1
 16628                           ;InterruptFuncs.c: 47: {
 16629                           ;InterruptFuncs.c: 48: BTcountdown=0;
 16630  002B20  0E00               	movlw	0
 16631  002B22  0101               	movlb	1	; () banked
 16632  002B24  6FCB               	movwf	(_BTcountdown+1)& (0+255),b
 16633  002B26  0E00               	movlw	0
 16634  002B28  6FCA               	movwf	_BTcountdown& (0+255),b
 16635                           
 16636                           ;InterruptFuncs.c: 49: BTpower=0;
 16637  002B2A  0E00               	movlw	0
 16638  002B2C  0101               	movlb	1	; () banked
 16639  002B2E  6FCD               	movwf	(_BTpower+1)& (0+255),b
 16640  002B30  0E00               	movlw	0
 16641  002B32  6FCC               	movwf	_BTpower& (0+255),b
 16642                           
 16643                           ; BSR set to: 1
 16644  002B34  D000               	goto	i2l4780
 16645  002B36                     i2l4780:
 16646                           
 16647                           ; BSR set to: 1
 16648                           ;InterruptFuncs.c: 50: }
 16649                           ;InterruptFuncs.c: 51: }
 16650                           ;InterruptFuncs.c: 52: if (minutes>59){
 16651  002B36  5037               	movf	_minutes+1,w,c
 16652  002B38  E104               	bnz	i2u502_40
 16653  002B3A  0E3C               	movlw	60
 16654  002B3C  5C36               	subwf	_minutes,w,c
 16655  002B3E  A0D8               	btfss	status,0,c
 16656  002B40  D0A2               	goto	i2l448
 16657  002B42                     i2u502_40:
 16658                           
 16659                           ; BSR set to: 1
 16660                           ;InterruptFuncs.c: 54: hours = hours++;
 16661  002B42  0E00               	movlw	0
 16662  002B44  6E37               	movwf	_minutes+1,c
 16663  002B46  0E00               	movlw	0
 16664  002B48  6E36               	movwf	_minutes,c
 16665                           
 16666                           ; BSR set to: 1
 16667  002B4A  4A32               	infsnz	_hours,f,c
 16668  002B4C  2A33               	incf	_hours+1,f,c
 16669                           
 16670                           ; BSR set to: 1
 16671                           ;InterruptFuncs.c: 55: if (hours>23){
 16672  002B4E  5033               	movf	_hours+1,w,c
 16673  002B50  E104               	bnz	i2u503_40
 16674  002B52  0E18               	movlw	24
 16675  002B54  5C32               	subwf	_hours,w,c
 16676  002B56  A0D8               	btfss	status,0,c
 16677  002B58  D096               	goto	i2l448
 16678  002B5A                     i2u503_40:
 16679                           
 16680                           ; BSR set to: 1
 16681                           ;InterruptFuncs.c: 57: day=day++;
 16682  002B5A  0E00               	movlw	0
 16683  002B5C  6E33               	movwf	_hours+1,c
 16684  002B5E  0E00               	movlw	0
 16685  002B60  6E32               	movwf	_hours,c
 16686                           
 16687                           ; BSR set to: 1
 16688  002B62  0100               	movlb	0	; () banked
 16689  002B64  4BDF               	infsnz	_day& (0+255),f,b
 16690  002B66  2BE0               	incf	(_day+1)& (0+255),f,b
 16691                           
 16692                           ; BSR set to: 0
 16693                           ;InterruptFuncs.c: 58: NewDay=1;
 16694  002B68  0E00               	movlw	0
 16695  002B6A  6E51               	movwf	_NewDay+1,c
 16696  002B6C  0E01               	movlw	1
 16697  002B6E  6E50               	movwf	_NewDay,c
 16698                           
 16699                           ;InterruptFuncs.c: 59: switch(month){
 16700  002B70  D05C               	goto	i2l4840
 16701                           
 16702                           ; BSR set to: 0
 16703                           
 16704                           ; BSR set to: 0
 16705                           
 16706                           ; BSR set to: 0
 16707                           
 16708                           ; BSR set to: 0
 16709                           
 16710                           ;InterruptFuncs.c: 60: case 1: case 3: case 5: case 7 ... 8: case 10:
 16711  002B72  D000               	goto	i2l4794
 16712  002B74                     i2l4794:
 16713                           
 16714                           ; BSR set to: 0
 16715                           ;InterruptFuncs.c: 61: if (day==32){
 16716  002B74  0E20               	movlw	32
 16717  002B76                     L6:
 16718  002B76  0100               	movlb	0	; () banked
 16719  002B78  19DF               	xorwf	_day& (0+255),w,b
 16720  002B7A  0100               	movlb	0	; () banked
 16721  002B7C  11E0               	iorwf	(_day+1)& (0+255),w,b
 16722  002B7E  A4D8               	btfss	status,2,c
 16723  002B80  D082               	goto	i2l448
 16724                           
 16725                           ; BSR set to: 0
 16726                           ;InterruptFuncs.c: 63: month=month++;
 16727  002B82  0E00               	movlw	0
 16728  002B84  0100               	movlb	0	; () banked
 16729  002B86  6FE0               	movwf	(_day+1)& (0+255),b
 16730  002B88  0E01               	movlw	1
 16731  002B8A  6FDF               	movwf	_day& (0+255),b
 16732  002B8C  D009               	goto	i2l4806
 16733  002B8E                     i2l4800:
 16734                           
 16735                           ; BSR set to: 0
 16736                           ;InterruptFuncs.c: 64: NewMonth=1;
 16737  002B8E  0E00               	movlw	0
 16738  002B90  0101               	movlb	1	; () banked
 16739  002B92  6F6F               	movwf	(_NewMonth+1)& (0+255),b
 16740  002B94  0E01               	movlw	1
 16741  002B96  6F6E               	movwf	_NewMonth& (0+255),b
 16742                           
 16743                           ; BSR set to: 1
 16744                           ;InterruptFuncs.c: 65: }
 16745                           ;InterruptFuncs.c: 66: break;
 16746  002B98  D076               	goto	i2l448
 16747                           
 16748                           ; BSR set to: 1
 16749                           
 16750                           ; BSR set to: 1
 16751                           
 16752                           ; BSR set to: 1
 16753                           
 16754                           ;InterruptFuncs.c: 67: case 4: case 6: case 9: case 11:
 16755  002B9A  D000               	goto	i2l4802
 16756  002B9C                     i2l4802:
 16757                           
 16758                           ;InterruptFuncs.c: 68: if (day==31){
 16759  002B9C  0E1F               	movlw	31
 16760  002B9E  D7EB               	goto	L6
 16761  002BA0                     i2l4806:
 16762                           
 16763                           ; BSR set to: 0
 16764  002BA0  4A58               	infsnz	_month,f,c
 16765  002BA2  2A59               	incf	_month+1,f,c
 16766  002BA4  D7F4               	goto	i2l4800
 16767                           
 16768                           ; BSR set to: 1
 16769                           ;InterruptFuncs.c: 72: }
 16770                           ;InterruptFuncs.c: 73: break;
 16771                           
 16772                           ; BSR set to: 0
 16773                           ;InterruptFuncs.c: 71: NewMonth=1;
 16774  002BA6  D06F               	goto	i2l448
 16775  002BA8                     i2l4810:
 16776                           
 16777                           ;InterruptFuncs.c: 75: if ((year & 3) == 0 && ((year % 25) != 0 || (year & 15) == 0)){
 16778  002BA8  0E03               	movlw	3
 16779  002BAA  145E               	andwf	_year,w,c
 16780  002BAC  6E06               	movwf	??_TimingISR& (0+255),c
 16781  002BAE  0E00               	movlw	0
 16782  002BB0  145F               	andwf	_year+1,w,c
 16783  002BB2  6E07               	movwf	(??_TimingISR+1)& (0+255),c
 16784  002BB4  5006               	movf	??_TimingISR,w,c
 16785  002BB6  1007               	iorwf	??_TimingISR+1,w,c
 16786  002BB8  A4D8               	btfss	status,2,c
 16787  002BBA  D01E               	goto	i2l4824
 16788  002BBC  C05E  F001         	movff	_year,i2___lwmod@dividend
 16789  002BC0  C05F  F002         	movff	_year+1,i2___lwmod@dividend+1
 16790  002BC4  0E00               	movlw	0
 16791  002BC6  6E04               	movwf	i2___lwmod@divisor+1,c
 16792  002BC8  0E19               	movlw	25
 16793  002BCA  6E03               	movwf	i2___lwmod@divisor,c
 16794  002BCC  ECE0  F020         	call	i2___lwmod	;wreg free
 16795  002BD0  5001               	movf	?i2___lwmod,w,c
 16796  002BD2  1002               	iorwf	?i2___lwmod+1,w,c
 16797  002BD4  A4D8               	btfss	status,2,c
 16798  002BD6  D00A               	goto	i2l4816
 16799  002BD8  0E0F               	movlw	15
 16800  002BDA  145E               	andwf	_year,w,c
 16801  002BDC  6E06               	movwf	??_TimingISR& (0+255),c
 16802  002BDE  0E00               	movlw	0
 16803  002BE0  145F               	andwf	_year+1,w,c
 16804  002BE2  6E07               	movwf	(??_TimingISR+1)& (0+255),c
 16805  002BE4  5006               	movf	??_TimingISR,w,c
 16806  002BE6  1007               	iorwf	??_TimingISR+1,w,c
 16807  002BE8  A4D8               	btfss	status,2,c
 16808  002BEA  D006               	goto	i2l4824
 16809  002BEC                     i2l4816:
 16810                           
 16811                           ;InterruptFuncs.c: 76: if (day==30){
 16812  002BEC  0E1E               	movlw	30
 16813  002BEE  D7C3               	goto	L6
 16814                           
 16815                           ; BSR set to: 0
 16816                           
 16817                           ; BSR set to: 0
 16818                           ;InterruptFuncs.c: 78: month=month++;
 16819  002BF0  4A58               	infsnz	_month,f,c
 16820  002BF2  2A59               	incf	_month+1,f,c
 16821  002BF4  D7CC               	goto	i2l4800
 16822                           
 16823                           ; BSR set to: 1
 16824                           ;InterruptFuncs.c: 80: }
 16825                           ;InterruptFuncs.c: 81: }
 16826                           
 16827                           ; BSR set to: 0
 16828                           ;InterruptFuncs.c: 79: NewMonth=1;
 16829  002BF6  D047               	goto	i2l448
 16830  002BF8                     i2l4824:
 16831                           
 16832                           ;InterruptFuncs.c: 82: else {
 16833                           ;InterruptFuncs.c: 83: if (day==29){
 16834  002BF8  0E1D               	movlw	29
 16835  002BFA  D7BD               	goto	L6
 16836                           
 16837                           ; BSR set to: 0
 16838                           
 16839                           ; BSR set to: 0
 16840                           ;InterruptFuncs.c: 85: month=month++;
 16841  002BFC  4A58               	infsnz	_month,f,c
 16842  002BFE  2A59               	incf	_month+1,f,c
 16843  002C00  D7C6               	goto	i2l4800
 16844                           
 16845                           ; BSR set to: 1
 16846                           ;InterruptFuncs.c: 87: }
 16847                           ;InterruptFuncs.c: 88: }
 16848                           ;InterruptFuncs.c: 89: break;
 16849                           
 16850                           ; BSR set to: 1
 16851                           
 16852                           ; BSR set to: 0
 16853                           ;InterruptFuncs.c: 86: NewMonth=1;
 16854  002C02  D041               	goto	i2l448
 16855  002C04                     i2l4832:
 16856                           
 16857                           ;InterruptFuncs.c: 91: if (day==32){
 16858  002C04  0E20               	movlw	32
 16859  002C06  0100               	movlb	0	; () banked
 16860  002C08  19DF               	xorwf	_day& (0+255),w,b
 16861  002C0A  0100               	movlb	0	; () banked
 16862  002C0C  11E0               	iorwf	(_day+1)& (0+255),w,b
 16863  002C0E  A4D8               	btfss	status,2,c
 16864  002C10  D03A               	goto	i2l448
 16865                           
 16866                           ; BSR set to: 0
 16867                           ;InterruptFuncs.c: 92: day=1;
 16868  002C12  0E00               	movlw	0
 16869  002C14  0100               	movlb	0	; () banked
 16870  002C16  6FE0               	movwf	(_day+1)& (0+255),b
 16871  002C18  0E01               	movlw	1
 16872  002C1A  6FDF               	movwf	_day& (0+255),b
 16873                           
 16874                           ;InterruptFuncs.c: 94: year=year++;
 16875  002C1C  0E00               	movlw	0
 16876  002C1E  6E59               	movwf	_month+1,c
 16877  002C20  0E01               	movlw	1
 16878  002C22  6E58               	movwf	_month,c
 16879                           
 16880                           ; BSR set to: 0
 16881  002C24  4A5E               	infsnz	_year,f,c
 16882  002C26  2A5F               	incf	_year+1,f,c
 16883                           
 16884                           ; BSR set to: 0
 16885                           ;InterruptFuncs.c: 100: }
 16886                           ;InterruptFuncs.c: 102: }
 16887                           
 16888                           ; BSR set to: 0
 16889                           ;InterruptFuncs.c: 98: {
 16890                           ;InterruptFuncs.c: 99: break;
 16891                           
 16892                           ;InterruptFuncs.c: 97: default:
 16893                           
 16894                           ; BSR set to: 0
 16895                           ;InterruptFuncs.c: 95: }
 16896                           ;InterruptFuncs.c: 96: break;
 16897  002C28  D02E               	goto	i2l448
 16898  002C2A                     i2l4840:
 16899                           
 16900                           ; BSR set to: 0
 16901  002C2A  C058  F006         	movff	_month,??_TimingISR
 16902  002C2E  C059  F007         	movff	_month+1,??_TimingISR+1
 16903                           
 16904                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16905                           ; Switch size 1, requested type "space"
 16906                           ; Number of cases is 1, Range of values is 0 to 0
 16907                           ; switch strategies available:
 16908                           ; Name         Instructions Cycles
 16909                           ; simple_byte            4     3 (average)
 16910                           ;	Chosen strategy is simple_byte
 16911  002C32  5007               	movf	??_TimingISR+1,w,c
 16912  002C34  0A00               	xorlw	0	; case 0
 16913  002C36  A4D8               	btfss	status,2,c
 16914  002C38  D026               	goto	i2l448
 16915                           
 16916                           ; BSR set to: 0
 16917                           ; Switch size 1, requested type "space"
 16918                           ; Number of cases is 12, Range of values is 1 to 12
 16919                           ; switch strategies available:
 16920                           ; Name         Instructions Cycles
 16921                           ; simple_byte           37    19 (average)
 16922                           ;	Chosen strategy is simple_byte
 16923  002C3A  5006               	movf	??_TimingISR,w,c
 16924  002C3C  0A01               	xorlw	1	; case 1
 16925  002C3E  B4D8               	btfsc	status,2,c
 16926  002C40  D799               	goto	i2l4794
 16927  002C42  0A03               	xorlw	3	; case 2
 16928  002C44  B4D8               	btfsc	status,2,c
 16929  002C46  D7B0               	goto	i2l4810
 16930  002C48  0A01               	xorlw	1	; case 3
 16931  002C4A  B4D8               	btfsc	status,2,c
 16932  002C4C  D793               	goto	i2l4794
 16933  002C4E  0A07               	xorlw	7	; case 4
 16934  002C50  B4D8               	btfsc	status,2,c
 16935  002C52  D7A4               	goto	i2l4802
 16936  002C54  0A01               	xorlw	1	; case 5
 16937  002C56  B4D8               	btfsc	status,2,c
 16938  002C58  D78D               	goto	i2l4794
 16939  002C5A  0A03               	xorlw	3	; case 6
 16940  002C5C  B4D8               	btfsc	status,2,c
 16941  002C5E  D79E               	goto	i2l4802
 16942  002C60  0A01               	xorlw	1	; case 7
 16943  002C62  B4D8               	btfsc	status,2,c
 16944  002C64  D787               	goto	i2l4794
 16945  002C66  0A0F               	xorlw	15	; case 8
 16946  002C68  B4D8               	btfsc	status,2,c
 16947  002C6A  D784               	goto	i2l4794
 16948  002C6C  0A01               	xorlw	1	; case 9
 16949  002C6E  B4D8               	btfsc	status,2,c
 16950  002C70  D795               	goto	i2l4802
 16951  002C72  0A03               	xorlw	3	; case 10
 16952  002C74  B4D8               	btfsc	status,2,c
 16953  002C76  D77E               	goto	i2l4794
 16954  002C78  0A01               	xorlw	1	; case 11
 16955  002C7A  B4D8               	btfsc	status,2,c
 16956  002C7C  D78F               	goto	i2l4802
 16957  002C7E  0A07               	xorlw	7	; case 12
 16958  002C80  B4D8               	btfsc	status,2,c
 16959  002C82  D7C0               	goto	i2l4832
 16960                           
 16961                           ; BSR set to: 0
 16962                           
 16963                           ; BSR set to: 0
 16964                           
 16965                           ; BSR set to: 0
 16966  002C84  D000               	goto	i2l448
 16967  002C86                     i2l448:
 16968                           
 16969                           ;InterruptFuncs.c: 103: }
 16970                           ;InterruptFuncs.c: 104: }
 16971                           ;InterruptFuncs.c: 105: }
 16972                           ;InterruptFuncs.c: 106: }
 16973                           ;InterruptFuncs.c: 108: TMR0IF=0;
 16974  002C86  94F2               	bcf	intcon,2,c	;volatile
 16975  002C88  C015  FFF5         	movff	??_TimingISR+15,tablat
 16976  002C8C  C014  FFF8         	movff	??_TimingISR+14,tblptru
 16977  002C90  C013  FFF7         	movff	??_TimingISR+13,tblptrh
 16978  002C94  C012  FFF6         	movff	??_TimingISR+12,tblptrl
 16979  002C98  C011  FFF4         	movff	??_TimingISR+11,prodh
 16980  002C9C  C010  FFF3         	movff	??_TimingISR+10,prodl
 16981  002CA0  C00F  FFDA         	movff	??_TimingISR+9,fsr2h
 16982  002CA4  C00E  FFD9         	movff	??_TimingISR+8,fsr2l
 16983  002CA8  C00D  FFE2         	movff	??_TimingISR+7,fsr1h
 16984  002CAC  C00C  FFE1         	movff	??_TimingISR+6,fsr1l
 16985  002CB0  C00B  FFEA         	movff	??_TimingISR+5,fsr0h
 16986  002CB4  C00A  FFE9         	movff	??_TimingISR+4,fsr0l
 16987  002CB8  C009  FFFB         	movff	??_TimingISR+3,pclatu
 16988  002CBC  C008  FFFA         	movff	??_TimingISR+2,pclath
 16989  002CC0  0011               	retfie		f
 16990  002CC2                     __end_of_TimingISR:
 16991                           	opt stack 0
 16992                           pclatu	equ	0xFFB
 16993                           pclath	equ	0xFFA
 16994                           tblptru	equ	0xFF8
 16995                           tblptrh	equ	0xFF7
 16996                           tblptrl	equ	0xFF6
 16997                           tablat	equ	0xFF5
 16998                           prodh	equ	0xFF4
 16999                           prodl	equ	0xFF3
 17000                           intcon	equ	0xFF2
 17001                           intcon2	equ	0xFF1
 17002                           indf0	equ	0xFEF
 17003                           postinc0	equ	0xFEE
 17004                           fsr0h	equ	0xFEA
 17005                           fsr0l	equ	0xFE9
 17006                           wreg	equ	0xFE8
 17007                           postinc1	equ	0xFE6
 17008                           postdec1	equ	0xFE5
 17009                           plusw1	equ	0xFE3
 17010                           fsr1h	equ	0xFE2
 17011                           fsr1l	equ	0xFE1
 17012                           bsr	equ	0xFE0
 17013                           indf2	equ	0xFDF
 17014                           postinc2	equ	0xFDE
 17015                           postdec2	equ	0xFDD
 17016                           plusw2	equ	0xFDB
 17017                           fsr2h	equ	0xFDA
 17018                           fsr2l	equ	0xFD9
 17019                           status	equ	0xFD8
 17020                           
 17021 ;; *************** function i2___lwmod *****************
 17022 ;; Defined at:
 17023 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 17024 ;; Parameters:    Size  Location     Type
 17025 ;;  dividend        2    0[COMRAM] unsigned int 
 17026 ;;  divisor         2    2[COMRAM] unsigned int 
 17027 ;; Auto vars:     Size  Location     Type
 17028 ;;  __lwmod         1    4[COMRAM] unsigned char 
 17029 ;; Return value:  Size  Location     Type
 17030 ;;                  2    0[COMRAM] unsigned int 
 17031 ;; Registers used:
 17032 ;;		wreg, status,2, status,0
 17033 ;; Tracked objects:
 17034 ;;		On entry : 0/0
 17035 ;;		On exit  : 0/0
 17036 ;;		Unchanged: 0/0
 17037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17038 ;;      Params:         4       0       0       0       0       0       0
 17039 ;;      Locals:         1       0       0       0       0       0       0
 17040 ;;      Temps:          0       0       0       0       0       0       0
 17041 ;;      Totals:         5       0       0       0       0       0       0
 17042 ;;Total ram usage:        5 bytes
 17043 ;; Hardware stack levels used:    1
 17044 ;; This function calls:
 17045 ;;		Nothing
 17046 ;; This function is called by:
 17047 ;;		_TimingISR
 17048 ;; This function uses a non-reentrant model
 17049 ;;
 17050                           
 17051                           	psect	text59
 17052  0041C0                     __ptext59:
 17053                           	opt stack 0
 17054  0041C0                     i2___lwmod:
 17055                           	opt stack 20
 17056                           
 17057                           ;incstack = 0
 17058  0041C0  5003               	movf	i2___lwmod@divisor,w,c
 17059  0041C2  1004               	iorwf	i2___lwmod@divisor+1,w,c
 17060  0041C4  B4D8               	btfsc	status,2,c
 17061  0041C6  D01D               	goto	i2l1383
 17062  0041C8  0E01               	movlw	1
 17063  0041CA  6E05               	movwf	i2___lwmod@counter,c
 17064  0041CC  D005               	goto	i2l4562
 17065  0041CE                     i2l4560:
 17066  0041CE  90D8               	bcf	status,0,c
 17067  0041D0  3603               	rlcf	i2___lwmod@divisor,f,c
 17068  0041D2  3604               	rlcf	i2___lwmod@divisor+1,f,c
 17069  0041D4  2A05               	incf	i2___lwmod@counter,f,c
 17070  0041D6  D000               	goto	i2l4562
 17071  0041D8                     i2l4562:
 17072  0041D8  BE04               	btfsc	i2___lwmod@divisor+1,7,c
 17073  0041DA  D002               	goto	i2l4564
 17074  0041DC  D7F8               	goto	i2l4560
 17075  0041DE  D000               	goto	i2l4564
 17076  0041E0                     i2l4564:
 17077  0041E0  5003               	movf	i2___lwmod@divisor,w,c
 17078  0041E2  5C01               	subwf	i2___lwmod@dividend,w,c
 17079  0041E4  5004               	movf	i2___lwmod@divisor+1,w,c
 17080  0041E6  5802               	subwfb	i2___lwmod@dividend+1,w,c
 17081  0041E8  A0D8               	btfss	status,0,c
 17082  0041EA  D005               	goto	i2l4568
 17083  0041EC  5003               	movf	i2___lwmod@divisor,w,c
 17084  0041EE  5E01               	subwf	i2___lwmod@dividend,f,c
 17085  0041F0  5004               	movf	i2___lwmod@divisor+1,w,c
 17086  0041F2  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 17087  0041F4  D000               	goto	i2l4568
 17088  0041F6                     i2l4568:
 17089  0041F6  90D8               	bcf	status,0,c
 17090  0041F8  3204               	rrcf	i2___lwmod@divisor+1,f,c
 17091  0041FA  3203               	rrcf	i2___lwmod@divisor,f,c
 17092  0041FC  2E05               	decfsz	i2___lwmod@counter,f,c
 17093  0041FE  D7F0               	goto	i2l4564
 17094  004200  D000               	goto	i2l1383
 17095  004202                     i2l1383:
 17096  004202  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 17097  004206  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 17098  00420A  0012               	return		;funcret
 17099  00420C                     __end_ofi2___lwmod:
 17100                           	opt stack 0
 17101                           pclatu	equ	0xFFB
 17102                           pclath	equ	0xFFA
 17103                           tblptru	equ	0xFF8
 17104                           tblptrh	equ	0xFF7
 17105                           tblptrl	equ	0xFF6
 17106                           tablat	equ	0xFF5
 17107                           prodh	equ	0xFF4
 17108                           prodl	equ	0xFF3
 17109                           intcon	equ	0xFF2
 17110                           intcon2	equ	0xFF1
 17111                           indf0	equ	0xFEF
 17112                           postinc0	equ	0xFEE
 17113                           fsr0h	equ	0xFEA
 17114                           fsr0l	equ	0xFE9
 17115                           wreg	equ	0xFE8
 17116                           postinc1	equ	0xFE6
 17117                           postdec1	equ	0xFE5
 17118                           plusw1	equ	0xFE3
 17119                           fsr1h	equ	0xFE2
 17120                           fsr1l	equ	0xFE1
 17121                           bsr	equ	0xFE0
 17122                           indf2	equ	0xFDF
 17123                           postinc2	equ	0xFDE
 17124                           postdec2	equ	0xFDD
 17125                           plusw2	equ	0xFDB
 17126                           fsr2h	equ	0xFDA
 17127                           fsr2l	equ	0xFD9
 17128                           status	equ	0xFD8
 17129                           pclatu	equ	0xFFB
 17130                           pclath	equ	0xFFA
 17131                           tblptru	equ	0xFF8
 17132                           tblptrh	equ	0xFF7
 17133                           tblptrl	equ	0xFF6
 17134                           tablat	equ	0xFF5
 17135                           prodh	equ	0xFF4
 17136                           prodl	equ	0xFF3
 17137                           intcon	equ	0xFF2
 17138                           intcon2	equ	0xFF1
 17139                           indf0	equ	0xFEF
 17140                           postinc0	equ	0xFEE
 17141                           fsr0h	equ	0xFEA
 17142                           fsr0l	equ	0xFE9
 17143                           wreg	equ	0xFE8
 17144                           postinc1	equ	0xFE6
 17145                           postdec1	equ	0xFE5
 17146                           plusw1	equ	0xFE3
 17147                           fsr1h	equ	0xFE2
 17148                           fsr1l	equ	0xFE1
 17149                           bsr	equ	0xFE0
 17150                           indf2	equ	0xFDF
 17151                           postinc2	equ	0xFDE
 17152                           postdec2	equ	0xFDD
 17153                           plusw2	equ	0xFDB
 17154                           fsr2h	equ	0xFDA
 17155                           fsr2l	equ	0xFD9
 17156                           status	equ	0xFD8
 17157                           
 17158                           	psect	rparam
 17159  0000                     pclatu	equ	0xFFB
 17160                           pclath	equ	0xFFA
 17161                           tblptru	equ	0xFF8
 17162                           tblptrh	equ	0xFF7
 17163                           tblptrl	equ	0xFF6
 17164                           tablat	equ	0xFF5
 17165                           prodh	equ	0xFF4
 17166                           prodl	equ	0xFF3
 17167                           intcon	equ	0xFF2
 17168                           intcon2	equ	0xFF1
 17169                           indf0	equ	0xFEF
 17170                           postinc0	equ	0xFEE
 17171                           fsr0h	equ	0xFEA
 17172                           fsr0l	equ	0xFE9
 17173                           wreg	equ	0xFE8
 17174                           postinc1	equ	0xFE6
 17175                           postdec1	equ	0xFE5
 17176                           plusw1	equ	0xFE3
 17177                           fsr1h	equ	0xFE2
 17178                           fsr1l	equ	0xFE1
 17179                           bsr	equ	0xFE0
 17180                           indf2	equ	0xFDF
 17181                           postinc2	equ	0xFDE
 17182                           postdec2	equ	0xFDD
 17183                           plusw2	equ	0xFDB
 17184                           fsr2h	equ	0xFDA
 17185                           fsr2l	equ	0xFD9
 17186                           status	equ	0xFD8


Data Sizes:
    Strings     772
    Constant    1573
    Data        110
    BSS         624
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     39      96
    BANK0           128     93      97
    BANK1           256     88     251
    BANK2           256      0     256
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_56(CODE[5]), STR_53(CODE[7]), STR_50(CODE[7]), STR_39(CODE[5]), 
		 -> ConfigWord(BANK1[20]), LastMessage(BANK1[20]), MessageBuffer(BANK1[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 20
		 -> MessageRoutine@str2(BANK1[20]), MessageRoutine@str1(BANK1[20]), LastMessage(BANK1[20]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 20
		 -> MessageRoutine@str2(BANK1[20]), MessageRoutine@str1(BANK1[20]), LastMessage(BANK1[20]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 20
		 -> MessageRoutine@str2(BANK1[20]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 20
		 -> MessageRoutine@str1(BANK1[20]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> LastMessage(BANK1[20]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 140
		 -> STR_57(CODE[140]), STR_55(CODE[20]), STR_54(CODE[3]), STR_52(CODE[20]), 
		 -> STR_51(CODE[3]), STR_49(CODE[20]), STR_48(CODE[3]), STR_47(CODE[31]), 
		 -> STR_46(CODE[3]), STR_45(CODE[27]), STR_44(CODE[3]), STR_43(CODE[26]), 
		 -> STR_42(CODE[3]), STR_41(CODE[34]), STR_40(CODE[3]), STR_38(CODE[20]), 
		 -> STR_37(CODE[20]), STR_36(CODE[21]), STR_35(CODE[3]), STR_34(CODE[14]), 
		 -> STR_33(CODE[3]), STR_32(CODE[12]), STR_31(CODE[3]), STR_30(CODE[10]), 
		 -> STR_29(CODE[3]), STR_28(CODE[12]), STR_27(CODE[3]), STR_26(CODE[11]), 
		 -> MessageBuffer(BANK1[20]), STR_25(CODE[21]), STR_24(CODE[11]), STR_23(CODE[11]), 
		 -> STR_22(CODE[24]), STR_21(CODE[9]), STR_20(CODE[19]), STR_19(CODE[9]), 
		 -> STR_18(CODE[19]), STR_17(CODE[13]), STR_16(CODE[17]), STR_15(CODE[26]), 
		 -> STR_14(CODE[18]), STR_13(CODE[4]), STR_12(CODE[15]), STR_11(CODE[14]), 
		 -> STR_10(CODE[19]), STR_9(CODE[15]), STR_8(CODE[14]), STR_7(CODE[18]), 
		 -> STR_6(CODE[21]), STR_5(CODE[18]), STR_4(CODE[21]), STR_3(CODE[18]), 
		 -> STR_2(CODE[21]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    fix_fft@fi	PTR short  size(2) Largest target is 256
		 -> cmYimag(BANK3[256]), 

    fix_fft@fr	PTR short  size(2) Largest target is 256
		 -> cmYreal(BANK2[256]), 

    sp__memset	PTR void  size(2) Largest target is 20
		 -> MessageBuffer(BANK1[20]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> MessageRoutine@str2(BANK1[20]), MessageRoutine@str1(BANK1[20]), LastMessage(BANK1[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _SerialRxPinInterrupt in COMRAM

    _SerialRxPinInterrupt->i1_printf
    i1_printf->i1___lwmod
    i1___lwmod->i1___lwdiv

Critical Paths under _TimingISR in COMRAM

    _TimingISR->i2___lwmod

Critical Paths under _main in BANK0

    _cmFilterHighPassUsingLowPass->___wmul
    _cmFftFun->___ftdiv
    _log->_eval_poly
    _eval_poly->___ftadd
    _fix_fft->___lmul
    ___ftdiv->_log
    _approxRollingAverage->___aldiv
    _TimeLoop->_ReadTimer0
    ___fttol->___ftdiv
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    _PumpDetect->_abs
    _MessageRoutine->_printf
    _SetDateTime->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    _atoi->___wmul
    _InitUSART->_OpenUSART
    _InitTimer0->_OpenTimer0

Critical Paths under _SerialRxPinInterrupt in BANK0

    _SerialRxPinInterrupt->i1_printf

Critical Paths under _TimingISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_cmStuffsWrapperFun
    _cmStuffsWrapperFun->_cmFftFun
    _cmFftFun->_fix_fft
    _ReadAndTime->_Read_X
    _ReadAndTime->_Read_Y
    _ReadAndTime->_Read_Z
    _Read_Z->___fttol
    _Read_Y->___fttol
    _Read_X->___fttol
    ___fttol->___ftdiv

Critical Paths under _SerialRxPinInterrupt in BANK1

    None.

Critical Paths under _TimingISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _SerialRxPinInterrupt in BANK2

    None.

Critical Paths under _TimingISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _SerialRxPinInterrupt in BANK3

    None.

Critical Paths under _TimingISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _SerialRxPinInterrupt in BANK4

    None.

Critical Paths under _TimingISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _SerialRxPinInterrupt in BANK5

    None.

Critical Paths under _TimingISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5  111571
                                             83 BANK1      5     0      5
                          _ConfigADC
                       _Delay10KTCYx
                     _InitInterrupts
                         _InitTimer0
                          _InitUSART
                     _MessageRoutine
                         _PumpDetect
                        _ReadAndTime
                 _cmStuffsWrapperFun
                             _printf
 ---------------------------------------------------------------------------------
 (1) _cmStuffsWrapperFun                                  10    10      0   43322
                                             73 BANK1     10    10      0
                             ___wmul
                           _cmFftFun
       _cmFilterHighPassUsingLowPass
                             _printf
 ---------------------------------------------------------------------------------
 (2) _cmFilterHighPassUsingLowPass                        34    34      0    2327
                                             37 BANK0     34    34      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _cmFftFun                                            23    23      0   31114
                                             50 BANK1     23    23      0
                            ___ftdiv
                            ___fttol
                             ___wmul
                            _fix_fft
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   21513
                                             82 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     452
                                             31 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   10016
                                             70 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _fix_fft                                             68    62      6    4083
                                             43 BANK0     14     8      6
                                              0 BANK1     50    50      0
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     746
                                             31 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    2708
                                             87 BANK0      6     0      6
                                              0 BANK1      9     9      0
                           ___ftpack
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (1) _ReadAndTime                                          0     0      0   36902
                             _Read_X
                             _Read_Y
                             _Read_Z
                           _TimeLoop
               _approxRollingAverage
 ---------------------------------------------------------------------------------
 (2) _approxRollingAverage                                14     4     10    1449
                                             45 BANK0     14     4     10
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     406
                                             31 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _TimeLoop                                             4     4      0      47
                                             35 BANK0      4     4      0
                         _ReadTimer0
 ---------------------------------------------------------------------------------
 (3) _ReadTimer0                                           4     2      2      47
                                             31 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _Read_Z                                              11     5      6   11802
                                             24 BANK1     11     5      6
                            _BusyADC
                         _ConvertADC
                        _Delay10TCYx
                            _ReadADC
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _Read_Y                                              11     5      6   11802
                                             24 BANK1     11     5      6
                            _BusyADC
                         _ConvertADC
                        _Delay10TCYx
                            _ReadADC
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _Read_X                                              11     5      6   11802
                                             24 BANK1     11     5      6
                            _BusyADC
                         _ConvertADC
                        _Delay10TCYx
                            _ReadADC
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     631
                                              9 BANK1     15    11      4
                            _ReadADC (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     260
                                             31 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    3906
                                             43 BANK0     15     9      6
                            _ReadADC (ARG)
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4253
                                             58 BANK0     12     6      6
                            _ReadADC (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2461
                                             39 BANK0      4     1      3
                            _ReadADC (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2068
                                             31 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _ReadADC                                              4     2      2       0
                                             31 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _Delay10TCYx                                          1     1      0      31
                                             31 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PumpDetect                                           6     4      2     225
                                             35 BANK0      6     4      2
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     225
                                             31 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _MessageRoutine                                      42    42      0   22960
                                              0 BANK1     42    42      0
                        _Delay1KTCYx
                        _SetDateTime
                               _atoi
                             _printf
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     949
                                             31 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4     783
                                             31 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _SetDateTime                                          0     0      0   10249
                               _atoi
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              33    21     12    7823
                                             43 BANK0     29    17     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             31 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     422
                                             38 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     371
                                             31 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2    2426
                                             37 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             31 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1408
                                             31 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _Delay1KTCYx                                          1     1      0      31
                                             31 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitUSART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                             31 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitTimer0                                           0     0      0      44
                         _OpenTimer0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             31 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay10KTCYx                                         2     2      0      22
                                             31 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ConfigADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _SerialRxPinInterrupt                                18    18      0    2507
                                             13 BANK0     18    18      0
                          _ReadUSART
                           i1_printf
                           i1_strcpy
 ---------------------------------------------------------------------------------
 (8) i1_strcpy                                             6     2      4     179
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i1_printf                                            23    21      2    2305
                                             33 COMRAM     6     4      2
                                              0 BANK0     13    13      0
                          i1___lwdiv
                          i1___lwmod
                           i1___wmul
                          i1_isdigit
                            i1_putch
 ---------------------------------------------------------------------------------
 (9) i1_putch                                              1     1      0      31
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1_isdigit                                            3     3      0      99
                                             21 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) i1___wmul                                             6     2      4     296
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) i1___lwmod                                            5     1      4     302
                                             28 COMRAM     5     1      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i1___lwdiv                                            7     3      4     311
                                             21 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (8) _ReadUSART                                            1     1      0      23
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _TimingISR                                          16    16      0     211
                                              5 COMRAM    16    16      0
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     211
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigADC
   _Delay10KTCYx
   _InitInterrupts
   _InitTimer0
     _OpenTimer0
   _InitUSART
     _OpenUSART
   _MessageRoutine
     _Delay1KTCYx
     _SetDateTime
       _atoi
         ___wmul
         _isdigit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _atoi
       ___wmul
       _isdigit
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
     _strcmp
     _strcpy
   _PumpDetect
     _abs
   _ReadAndTime
     _Read_X
       _BusyADC
       _ConvertADC
       _Delay10TCYx
       _ReadADC
       ___awtoft
         _ReadADC (ARG)
         ___ftpack (ARG)
       ___ftadd
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftadd (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           _log (ARG)
             ___awtoft
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         _log (ARG)
           ___awtoft
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftadd
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
     _Read_Y
       _BusyADC
       _ConvertADC
       _Delay10TCYx
       _ReadADC
       ___awtoft
         _ReadADC (ARG)
         ___ftpack (ARG)
       ___ftadd
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftadd (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           _log (ARG)
             ___awtoft
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         _log (ARG)
           ___awtoft
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftadd
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
     _Read_Z
       _BusyADC
       _ConvertADC
       _Delay10TCYx
       _ReadADC
       ___awtoft
         _ReadADC (ARG)
         ___ftpack (ARG)
       ___ftadd
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftadd (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           _log (ARG)
             ___awtoft
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         _log (ARG)
           ___awtoft
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftadd
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
     _TimeLoop
       _ReadTimer0
     _approxRollingAverage
       ___aldiv
   _cmStuffsWrapperFun
     ___wmul
     _cmFftFun
       ___ftdiv
         ___ftpack
         _log (ARG)
           ___awtoft
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftadd
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       ___fttol
         _ReadADC (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftadd (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           _log (ARG)
             ___awtoft
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         _log (ARG)
           ___awtoft
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftadd
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       ___wmul
       _fix_fft
         ___lmul
       _log
         ___awtoft
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftadd
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           _ReadADC (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _frexp
     _cmFilterHighPassUsingLowPass
       ___wmul
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _SerialRxPinInterrupt (ROOT)
   _ReadUSART
   i1_printf
     i1___lwdiv
     i1___lwmod
       i1___lwdiv (ARG)
     i1___wmul
     i1_isdigit
     i1_putch
   i1_strcpy

 _TimingISR (ROOT)
   i2___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     58      FB       7       98.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5D      61       5       75.8%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     27      60       1       75.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3BC      15        0.0%
DATA                 0      0     3BC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Nov 29 16:03:52 2016

                                        _i 0034                                          _x 0040  
                                        _y 0042                                          _z 0044  
                                       _tl 003A                                         _tr 003C  
                                       _rx 0049                                         _tt 003E  
                                       bsr 000FE0                        ___wmul@multiplicand 00A1  
                         i1___wmul@product 001A              cmFilterHighPassUsingLowPass@i 00C5  
            cmFilterHighPassUsingLowPass@j 00BD              cmFilterHighPassUsingLowPass@k 00B9  
                             ___ftadd@exp1 00C5                               ___ftadd@exp2 00C4  
                             ___ftadd@sign 00C3                                        l206 13F2  
                                      l146 2306                                        l331 44F8  
                                      l177 22C8                                        l372 0FDE  
                                      l704 44CC                                        l552 3BFC  
                                      l625 0B98                                        l570 3DF2  
                                      l619 020A                                        l564 3A6C  
                                      l717 43EE                                        l718 43F0  
                                      l558 3B34                                        l841 439C  
                                      l577 3062                                        l658 15FA  
                                      l842 43A4                                        l692 450E  
                                      l773 3ECE                                        l774 3ED0  
                                      l775 3EDC                                        l687 17EA  
                                      l776 3EDE                                        l769 3EAE  
                                      l778 3EFA                                        l794 431A  
                                      l867 369E                                        l980 38AE  
                                      l981 38B6                                        _abs 437A  
                                      _day 00DF                                        _log 3302  
                       MessageRoutine@str1 0100                         MessageRoutine@str2 0114  
                                      wreg 000FE8                            ReadTimer0@timer 00A1  
                             __CFG_LVP$OFF 000000                               ___ftdiv@cntr 0103  
                             ___ftdiv@sign 0108                               __CFG_WDT$OFF 000000  
                                     l1031 429C                                       ?_abs 009F  
                                     l1052 44B8                                       l1045 44A2  
                                     l1038 4476                                       l1142 37BE  
                                     l1206 2798                                       l1214 3300  
                                     l1153 3786                                       l1217 32C8  
                                     l1250 3572                                       l1229 31BE  
                                     l1414 40C0                                       l1182 2626  
                                     l1183 283A                                       l1239 433E  
                                     l1336 3440                                       l1265 4378  
                                     l1186 2660                                       l1188 268A  
                                     l1436 3CAA                                       l1373 3F74  
                                     l1197 276E                                       l1383 405A  
                                     l5002 30C8                                       l4130 3E4A  
                                     l5020 3138                                       l4132 3E6E  
                                     l5100 398C                                       l5110 3F28  
                                     l5030 317C                                       l5120 3F64  
                                     l5112 3F32                                       l5200 164E  
                                     l4232 2F10                                       l5024 3154  
                                     l5016 3118                                       l5050 436E  
                                     l5130 401A                                       l5210 168C  
                                     l5202 1654                                       l5034 3198  
                                     l5026 315C                                       l5108 3F1A  
                                     l5132 4024                                       l5220 16B6  
                                     l4252 3048                                       l4244 3004  
                                     l5060 3FBA                                       l5300 04FA  
                                     l5214 1692                                       l5206 1662  
                                     l5142 1402                                       l4254 3056  
                                     l4238 2FEE                                       l5136 404A  
                                     l5128 400C                                       l5232 1724  
                                     l5224 16EE                                       l5160 1500  
                                     l5152 145A                                       l5072 4274  
                                     l3720 35BA                                       l5056 3F92  
                                     l6120 2396                                       l4258 445E  
                                     l5242 1794                                       l5226 16FA  
                                     l5170 1554                                       l5146 1416  
                                     l3730 3604                                       l3714 359A  
                                     l5410 31EA                                       l5236 173A  
                                     l5228 1706                                       l5180 159C  
                                     l5164 1526                                       l5244 17A4  
                                     l5412 3210                                       l5308 05CE  
                                     l5084 3C32                                       l5252 3314  
                                     l6140 2406                                       l6108 235C  
                                     l5238 1740                                       l5174 156A  
                                     l5166 1532                                       l3726 35E8  
                                     l3742 366E                                       l6126 23BC  
                                     l5176 1584                                       l5168 153A  
                                     l5184 15A2                                       l5600 4224  
                                     l3728 35FA                                       l5416 3224  
                                     l5352 0AFA                                       l5280 0358  
                                     l5520 1C30                                       l5512 1C14  
                                     l6160 2476                                       l6128 23CC  
                                     l3746 368C                                       l3738 365A  
                                     l5290 045A                                       l5274 021C  
                                     l5098 3902                                       l5258 3342  
                                     l5530 1CA4                                       l6146 242C  
                                     l6090 22FE                                       l5380 3824  
                                     l5364 37C2                                       l5196 1632  
                                     l5604 284E                                       l5460 346C  
                                     l5700 3A82                                       l5436 3286  
                                     l5356 0B32                                       l5292 0462  
                                     l5516 1C26                                       l5508 1BE0  
                                     l6172 24FE                                       l6148 243C  
                                     l5382 386E                                       l5366 37CA  
                                     l5614 28AE                                       l5390 4492  
                                     l4910 37B0                                       l5446 32DA  
                                     l5534 1CBE                                       l5542 1D88  
                                     l5550 1E6A                                       l6166 249C  
                                     l5384 3876                                       l5376 3810  
                                     l5624 290E                                       l4904 3792  
                                     l5296 04CC                                       l5528 1C9A  
                                     l5800 2006                                       l6192 25A8  
                                     l6096 231C                                       l6088 22EC  
                                     l3962 3EA4                                       l3954 3E8E  
                                     l5634 296E                                       l5490 3534  
                                     l5482 3504                                       l5714 39BA  
                                     l5546 1E5A                                       l5538 1D7E  
                                     l6178 2514                                       l5644 29CE  
                                     l4940 2680                                       l5484 350C  
                                     l5492 3542                                       l5564 1088  
                                     l5812 2082                                       ?_log 00D2  
                                     l3974 3EC4                                       l3966 3EB2  
                                     l3958 3E9A                                       l4950 26C2  
                                     l4934 266E                                       l5478 34F0  
                                     l5574 1182                                       l5590 13BE  
                                     l5822 20DC                                       l5806 2064  
                                     l5672 40B0                                       l5904 0D80  
                                     l4960 2712                                       l4928 2634  
                                     l5496 3560                                       l5488 3522  
                                     l5584 1338                                       l5576 11C4  
                                     l5832 2114                                       l5816 209C  
                                     l5666 4066                                       l5914 0DE0  
                                     l4890 3712                                       l4882 36BA  
                                     l4970 275E                                       l4962 271E  
                                     l5578 122A                                       l5850 21C4  
                                     l5676 44A8                                       l5668 4074  
                                     l5940 0F6C                                       l5932 0ED6  
                                     l5924 0E40                                       l4956 26F2  
                                     l5588 13A6                                       l5860 2286  
                                     l5828 20FA                                       l5598 4216  
                                     l4894 3734                                       l4886 36D0  
                                     l4958 2702                                       l5686 3B4A  
                                     l5846 21AA                                       l5838 2154  
                                     l4896 3766                                       l4888 36E0  
                                     l4976 27C4                                       l4968 274E  
                                     l5792 1FC2                                       l4898 3776  
                                     l4986 2814                                       l5786 1F6A  
                                     l5884 0CC0                                       l5876 0C42  
                                     l4996 308E                                       l5796 1FEC  
                                     l5894 0D20                                       l4998 30B4  
                                     STR_1 7F1E                                       STR_2 7E58  
                                     STR_3 7F30                                       STR_4 7E6D  
                                     STR_5 7F42                                       STR_6 7E82  
                                     STR_7 7F0C                                       STR_8 7EB1  
                                     STR_9 7F77                                       u5201 25D4  
                                     u5211 25F2                                       u5411 307A  
                                     u6131 3458                                       u6211 1BB8  
                                     u6060 450A                                       u6300 1086  
                                     u6150 3492                                       u5431 30A4  
                                     u6071 31D6                                       u7050 2316  
                                     u6155 3488                                       u6091 3200  
                                     u5540 3C64                                       u6325 1198  
                                     u5710 15D8                                       u5630 1446  
                                     u6326 11A0                                       u6327 11B2  
                                     u6280 1D9E                                       u5650 14A4  
                                     u7227 4494                                       u6355 137A  
                                     u5660 14F0                                       u6380 424C  
                                     u5548 3C68                                       u6356 1382  
                                     u7237 44AA                                       u5717 15CE  
                                     u5637 143C                                       u6357 1394  
                                     u7247 4466                                       u5840 17DA  
                                     u5657 149A                                       u5667 14E6  
                                     u6387 4242                                       u5924 0514  
                                     u5925 050C                                       u5847 17D0  
                                     u5935 066A                                       u5936 0672  
                                     u5945 0742                                       u5937 0684  
                                     u5946 074A                                       u5955 0834  
                                     u5947 075C                                       u5956 083C  
                                     u5884 01BC                                       u5965 090C  
                                     u5957 084E                                       u5885 01B4  
                                     u5966 0914                                       u5967 0926  
                                     _TXIF 007CF4                                       abs@a 009F  
                                     _baud 01FA                                       _atoi 37C0  
                                     _main 22CA                               ___ftpack@arg 009F  
                             ___ftpack@exp 00A2                                       _year 005E  
                                     fsr0h 000FEA                                       fsr1h 000FE2  
                                     indf0 000FEF                                       fsr0l 000FE9  
                                     fsr2h 000FDA                                       fsr1l 000FE1  
                                     indf2 000FDF                                       fsr2l 000FD9  
                                     log@x 00D2                                       pclat 000FFA  
                            ??_ReadAndTime 00DD                                       prodh 000FF4  
                                     prodl 000FF3                              i1printf@width 008A  
                                     start 0188                            __end_ofi1_putch 452C  
                             ___ftmul@cntr 00B8                               ___param_bank 000010  
                             ___ftmul@sign 00B9                            __end_of_BusyADC 4510  
                          __end_of_ReadADC 44CE                                _Delay10TCYx 448E  
                             ___fttol@exp1 0117                                      ??_abs 00A1  
                                    ??_log 00D5                               ___fttol@lval 0113  
                              _Delay1KTCYx 44A4                            __end_of___aldiv 36A0  
                                    ?_atoi 00A5                                      ?_main 0153  
                          __end_of___ftadd 283C                                      STR_10 7ED3  
                                    STR_11 7EB1                                      STR_12 7F77  
                                    STR_20 7EF9                                      STR_21 7FD9  
                                    STR_13 7FFA                                      STR_30 7FCF  
                                    STR_14 7F54                                      STR_22 7E16  
                                    STR_31 7F1B                                      STR_23 7FC4  
                                    STR_15 7DFC                                      STR_40 7F1B  
                                    STR_24 7FC4                                      STR_32 7FAD  
                                    STR_16 7F66                                      STR_33 7F1B  
                                    STR_17 7F94                                      STR_25 7E43  
                                    STR_41 7D86                                      STR_42 7F1B  
                                    STR_50 7FE2                                      STR_26 7FB9  
                                    STR_34 7F86                                      STR_18 7EE6  
                                    STR_51 7F1B                                      STR_35 7F1B  
                                    STR_27 7F1B                                      STR_19 7FD9  
                                    STR_43 7DE2                                      STR_44 7F1B  
                                    STR_52 7EAB                                      STR_28 7FA1  
                                    STR_36 7E2E                                      STR_29 7F1B  
                                    STR_53 7FE9                                      STR_37 7EBF  
                                    STR_45 7DC7                                      STR_54 7F1B  
                                    STR_46 7F1B                                      STR_38 7EAB  
                                    STR_55 7EBF                                      STR_39 7FF5  
                                    STR_47 7DA8                                      STR_48 7F1B  
                                    STR_56 7FF0                                      STR_49 7E97  
                                    STR_57 7CFA                            __end_of___ftdiv 3302  
                          __end_of___ftneg 434C                            __end_of___ftmul 31C0  
                                    _T0CON 000FD5                            __end_of___fttol 3574  
                          __end_of___lwdiv 3F7E                                      i1l331 4522  
                                    i1l319 0142                            __end_of___lwmod 4064  
                                    i1l658 19D2                                      i1l791 4416  
                                    i1l687 1BAC                                      i2l448 2C86  
                                    i1l794 43CC                                      i1l787 4406  
                                    _RCREG 000FAE                                      _RCSTA 000FAB  
                                    _TMR0H 000FD7                                      _TMR0L 000FD6  
                                    _SPBRG 000FAF                                      _TRISA 000F92  
                               _ConfigWord 019A                                      _TXREG 000FAD  
                    __size_of_Delay10KTCYx 001E                                      _TXSTA 000FAC  
                               i1isdigit@c 0018           cmFilterHighPassUsingLowPass@xLPF 00BF  
                      ___lmul@multiplicand 00A3                                      _Nlong 0052  
                       i1___lwmod@dividend 001D                            __end_of_fix_fft 0BCA  
                            ___awtoft@sign 00AA                            __end_of_dpowers 7CDF  
                                    _frexp 3BFE                                      _errno 01CE  
                          __end_of_isdigit 437A                                      _hours 0032  
                                    _month 0058                              ___ftpack@sign 00A3  
                                    atoi@a 00AA                                      atoi@s 00A5  
                                    _putch 44F2                                 _ConvertADC 4538  
                           __CFG_BOREN$OFF 000000                                      tablat 000FF5  
                         __end_ofi1___wmul 43CE                                      plusw1 000FE3  
                                    plusw2 000FDB                                      status 000FD8  
                      i1___wmul@multiplier 0016                              ??_SetDateTime 00C8  
                       __size_ofi1___lwdiv 005C                         __size_ofi1___lwmod 004C  
                         __end_ofi1_printf 1BAE                           __end_ofi1_strcpy 42E4  
                       __size_ofi2___lwmod 004C                                 i1printf@ap 0083  
                               i1printf@cp 0080                            __initialization 3CAC  
                              log@exponent 00D5                                 _InitTimer0 452C  
                             __end_of_atoi 38B8                               __end_of_main 25BE  
                           _InitInterrupts 44E0                                 _ReadTimer0 44CE  
                               _NewMessage 00DD                        __end_of_ReadAndTime 2EB4  
                       __size_ofi1_isdigit 0022                               _Delay10KTCYx 445A  
                           __CFG_OSC$HSPLL 000000                                     ??_atoi 00A7  
                                   ??_main 00DD                                 _MsgFromPIC 0158  
                            ___fttol@sign1 0112                                 i1strcpy@cp 001A  
                               i1strcpy@to 0016                              __activetblptr 000002  
                             fix_fft@istep 0108                           __end_of_TimeLoop 3E78  
               __end_of_cmStuffsWrapperFun 22CA                         __size_of_ConfigADC 000E  
                         __end_of_Sinewave 7CD5             approxRollingAverage@new_sample 00B1  
                                   _ADCON0 000FC2                                     _ADCON1 000FC1  
                                   _ADCON2 000FC0                                     ?_frexp 009F  
                                   _ADRESH 000FC4                                     _ADRESL 000FC3  
                         __end_of___awtoft 429E                                     ?_putch 0001  
                         __end_of___ftpack 37C0                           __end_of_cmFftFun 13F4  
                                   i1l1265 4438                                     i1l1373 4114  
                                   i1l1383 41B6                                     i1l6000 1984  
                                   i1l6012 1A0A                                     i1l6030 1A6A  
                                   i1l6022 1A3A                                     i1l6040 1AC0  
                                   i1l6016 1A26                                     i1l6200 0070  
                                   i1l6042 1ACC                                     i1l6026 1A64  
                                   i1l6018 1A2C                                     i1l6210 00C2  
                                   i1l6052 1B0A                                     i1l6044 1AD8  
                                   i1l6036 1A8C                                     i1l6060 1B70  
                                   i1l6220 00F2                                     i1l6054 1B10  
                                   i1l6230 011E                                     i1l6214 00DA  
                                   i1l6048 1AF6                                     i1l6064 42A8  
                                   i1l6216 00E8                                     i1l6224 00FA  
                                   i1l6058 1B60                                     i1l6066 42B2  
                                   i1l6226 010C                                     i2l1383 4202  
                               _OpenTimer0 43CE                                     i1l5740 4430  
                                   i1l5750 40D8                                     i1l5752 40E2  
                                   i1l5762 4108                                     i1l5754 40EA  
                                   i1l5770 4182                                     i1l5772 418C  
                       __size_of_InitUSART 0020                                     i1l5774 4194  
                                   i1l5778 41AA                                     i1l5962 180E  
                                   i1l5980 1908                                     i1l5990 194C  
                                   i1l5982 1914                                     i1l5958 17FA  
                                   i2l4560 41CE                                     i2l4800 2B8E  
                                   i1l5992 1966                                     i1l5984 191C  
                                   i1l5976 18E2                                     i1l5968 1852  
                                   i2l4562 41D8                                     i2l4810 2BA8  
                                   i2l4802 2B9C                                     i1l5986 1936  
                                   i2l4564 41E0                                     i1l5996 197E  
                                   i2l4806 2BA0                                     i2l4568 41F6  
                                   i2l4832 2C04                                     i2l4816 2BEC  
                                   i2l4824 2BF8                                     i2l4840 2C2A  
                                   i2l4780 2B36                                     i2l4794 2B74  
                       __size_of_ReadUSART 0024                                  ??i1_putch 0016  
                                   _TMR0IF 007F92                                     _SPBRGH 000FB0  
                                ??_BusyADC 009F                                  ??_ReadADC 00A1  
                                   _NewDay 0050                                     _Read_X 3B36  
                                   _Read_Y 3A6E                                     _Read_Z 39A6  
                   __end_of_InitInterrupts 44F2                                     _Nshort 0054  
                       __size_of_OpenUSART 0084                                     ___lmul 3F7E  
                                ??___aldiv 00A7                                     ___wmul 42E4  
                                ??___ftadd 00C0                                  ??___ftdiv 0100  
                                ??___ftneg 00A2                                     _cmYout 002E  
                                ??___ftmul 00B1                       cmStuffsWrapperFun@iW 014F  
                                ??___fttol 010D                        __end_of_SetDateTime 2A98  
                         OpenTimer0@config 009F                                  ??___lwdiv 00A3  
                                ??___lwmod 00AA                                     _gscale 004D  
                                   clear_0 3CB4                                     clear_1 3CC8  
                                   clear_2 3CDA                                     clear_3 3CEC  
                                   _printf 13F4                                     _strcmp 4064  
                                   _strcpy 420C                                 _PumpDetect 2EB4  
                                ??_fix_fft 00B1                      ___ftmul@f3_as_product 00B5  
                       __size_of_TimingISR 2CBA                          __end_ofi1___lwdiv 411E  
                             __pdataCOMRAM 004A                          __end_ofi1___lwmod 41C0  
                                ??_isdigit 009F                               __mediumconst 76D4  
                        __end_ofi2___lwmod 420C                                     tblptrh 000FF7  
                                   tblptrl 000FF6                                     tblptru 000FF8  
                                   putch@c 009F                                ?_ConvertADC 0001  
                        __end_ofi1_isdigit 443A                              _MessageBuffer 01E6  
              cmStuffsWrapperFun@iTemp_420 014B                cmStuffsWrapperFun@iTemp_423 014D  
              cmStuffsWrapperFun@iTemp_428 0149                           __end_oflog@coeff 7CFA  
                              _LastMessage 01D2               __end_of_approxRollingAverage 3DF4  
                               __accesstop 0080                    __end_of__initialization 3D4A  
                              _Read_X$2571 011E                            __CFG_PBADEN$OFF 000000  
                              _Read_Y$2572 011E                                _Read_Z$2573 011E  
                               ___ftadd@f1 00BA                                 ___ftadd@f2 00BD  
                             eval_poly@res 00CF                              ___rparam_used 000001  
                               ___ftdiv@f1 00D7                                 ___ftdiv@f2 00DA  
                               ___ftdiv@f3 0104                                _ReadAndTime 2CC2  
            __size_of_SerialRxPinInterrupt 0170                                 ___ftneg@f1 009F  
                               ___awtoft@c 00A7                                i1printf@len 0085  
                        __end_of_ConfigADC 451E                                i1printf@val 0088  
                          ?_InitInterrupts 0001                                 ___ftmul@f1 00AB  
                               ___ftmul@f2 00AE                                 ___fttol@f1 0109  
                       i2___lwmod@dividend 0001                             __pcstackCOMRAM 0001  
                              ?_InitTimer0 0001                               __pidataBANK0 453C  
                             __pidataBANK1 411E                                ?_ReadTimer0 009F  
                            __end_of_frexp 3CAC                              __end_of_putch 4502  
                        __end_of_InitUSART 445A                          __end_of_ReadUSART 4418  
                                ?i1___wmul 0016       __end_of_cmFilterHighPassUsingLowPass 1F5A  
    __size_of_cmFilterHighPassUsingLowPass 03AC               _cmFilterHighPassUsingLowPass 1BAE  
                                ?i1_printf 0022                                  ?i1_strcpy 0016  
                            ReadUSART@data 0016                          __end_of_OpenUSART 3EFC  
                                  ??_frexp 00A4                    approxRollingAverage@avg 00AD  
                             cmFftFun@root 013F                                    ??_putch 009F  
                               __pbssBANK0 00DD                                 __pbssBANK1 01AE  
                               __pbssBANK2 0200                                 __pbssBANK3 0300  
                              ?_OpenTimer0 0001                         __size_of_eval_poly 00EE  
                  __size_of_MessageRoutine 0416                                 __pnvCOMRAM 0060  
                        __end_of_TimingISR 2CC2                                _SetDateTime 283C  
                                  ?_Read_X 0118                                    ?_Read_Y 0118  
                                  ?_Read_Z 0118                                  ?_TimeLoop 0001  
                                  ?___lmul 009F                               ?_Delay10TCYx 0001  
                                  ?___wmul 009F                               ?_Delay1KTCYx 0001  
                           ___lmul@product 00A7                        __size_of_ConvertADC 0004  
                                ?___awtoft 00A7                                  ?___ftpack 009F  
                                ?_cmFftFun 0001                                    ?_printf 00AB  
                               ??i1___wmul 001A                                ?_PumpDetect 00A3  
                                  ?_strcmp 009F                                    ?_strcpy 009F  
                               ??i1_printf 0024                                 ??i1_strcpy 001A  
                                  _BTcount 0028                        __size_of_InitTimer0 000C  
                                  _BTpower 01CC                        __size_of_ReadTimer0 0012  
                                  Read_X@c 011B                                    Read_Y@c 011B  
                                  Read_Z@c 011B                                    Read_X@m 0118  
                                  Read_Y@m 0118                                    Read_Z@m 0118  
                                  Read_X@x 0121                                    Read_Y@y 0121  
                                  Read_Z@z 0121                                    i1_putch 451E  
                                  _BusyADC 4502                                    _ReadADC 44BA  
                                  __Hparam 0000                                    __Lparam 0000  
                          __size_of_Read_X 00C8                            __size_of_Read_Y 00C8  
                          __size_of_Read_Z 00C8                                 ??_TimeLoop 00A3  
                                  _Pumping 0056                                    ___aldiv 3574  
                          __size_of___lmul 007A                                    ___ftadd 25BE  
                                  ___ftdiv 31C0                                    ___ftneg 431C  
                          __size_of___wmul 0038                                    ___ftmul 3064  
                                  ___fttol 3442                                    ___lwdiv 3EFC  
                                  ___lwmod 3FF8                                    _cmYimag 0300  
                                  __pcinit 3CAC                                    _cmYreal 0200  
                               ??___awtoft 00AA                                 ??___ftpack 00A4  
                        __end_of_eval_poly 39A6                            Delay10TCYx@unit 009F  
                                  __ramtop 0600                                 ??_cmFftFun 0132  
                      __size_of_OpenTimer0 0026                                    __ptext0 22CA  
                                  __ptext1 1F5A                                    __ptext2 1BAE  
                                  __ptext3 0FE0                                    __ptext4 3302  
                                  __ptext5 3BFE                                    __ptext6 38B8  
                                  __ptext7 018C                                    __ptext8 3F7E  
                                  __ptext9 31C0                            __size_of_printf 03F8  
                                _T0CONbits 000FD5                       _approxRollingAverage 3D54  
                                  _fix_fft 018C                            __size_of_strcmp 005E  
                          __size_of_strcpy 004A                                    _goffset 004A  
                                _T1CONbits 000FCD                                    _counter 0030  
                                  _dpowers 7CD5                          i1___lwdiv@divisor 0018  
                             __size_of_abs 002C                               __size_of_log 0140  
                                  _isdigit 434C                          i1___lwdiv@counter 001A  
                         ___aldiv@dividend 009F                                    _minutes 0036  
                                  _seconds 0038                             __pintcode_body 2A98  
                     end_of_initialization 3D4A                              __Lmediumconst 76D4  
                                  int_func 2A98                         _cmStuffsWrapperFun 1F5A  
                      __size_of_PumpDetect 01B0                                  _RCSTAbits 000FAB  
                                  printf@c 00C7                                    printf@f 00AB  
                         ___aldiv@quotient 00A9                        ?_cmStuffsWrapperFun 0001  
                                  postdec1 000FE5                                    postdec2 000FDD  
                                  postinc0 000FEE                                    postinc1 000FE6  
                                  postinc2 000FDE                      i1___wmul@multiplicand 0018  
                                  strcmp@r 00A4                      ?_approxRollingAverage 00AD  
                                _TRISBbits 000F93                                  _TRISCbits 000F94  
                     ??_cmStuffsWrapperFun 00DD                                  i1___lwdiv 40C2  
                                i1___lwmod 4174                               ??_ConvertADC 009F  
                                i2___lwmod 41C0                             _MessageRoutine 0BCA  
                        MessageRoutine@ret 0128                           ??_InitInterrupts 009F  
                              ___ftdiv@exp 0107                                printf@width 00C5  
                                _TXSTAbits 000FAC                                  i1_isdigit 4418  
                             ?_ReadAndTime 0001                               i1printf@flag 0087  
                             i1printf@prec 0082                                ___ftmul@exp 00B4  
                             ??_InitTimer0 00A0                             __end_of_Read_X 3BFE  
                           __end_of_Read_Y 3B36                             __end_of_Read_Z 3A6E  
                             ??_ReadTimer0 00A1                                  _ConfigADC 4510  
                           __end_of___lmul 3FF8                             __end_of___wmul 431C  
                              _BAUDCONbits 000FB8                       __size_of_Delay10TCYx 0016  
                            __pidataCOMRAM 4478                         __end_of_ConvertADC 453C  
                        i1___lwmod@divisor 001F                          i1___lwmod@counter 0021  
                     __size_of_Delay1KTCYx 0016               __end_of_SerialRxPinInterrupt 0188  
                           __end_of_printf 17EC                             __end_of_strcmp 40C2  
                           __end_of_strcpy 4256                                  _InitUSART 443A  
                      start_initialization 3CAC                          __size_ofi1___wmul 0028  
                                _ReadUSART 43F4                                 eval_poly@d 00C9  
                               eval_poly@n 00CB                                 eval_poly@x 00C6  
                                i1printf@c 008C                                  i1printf@f 0022  
                              __end_of_abs 43A6                                __end_of_log 3442  
                   __end_of_MessageRoutine 0FE0                                 ?i1___lwdiv 0016  
                               ?i1___lwmod 001D                          __size_ofi1_printf 03C2  
                               ?i2___lwmod 0001                         __end_of_InitTimer0 4538  
                        __size_ofi1_strcpy 0046                               ??_OpenTimer0 009F  
                       __end_of_ReadTimer0 44E0                                 frexp@value 009F  
                                _OpenUSART 3E78                                 ?i1_isdigit 0001  
                             ?_SetDateTime 0001                                   ??_Read_X 00DD  
                                 ??_Read_Y 00DD                                   ??_Read_Z 00DD  
                                 ??___lmul 00A7                                  _TimingISR 0008  
                                 ??___wmul 00A3                          __size_of_TimeLoop 0084  
                               ?_ConfigADC 0001                                __pdataBANK0 00DF  
                              __pdataBANK1 0158                     ??_approxRollingAverage 00B7  
                            cmFftFun@place 0143                               i1strcpy@from 0018  
                                 ??_printf 00B7                               ??_PumpDetect 00A5  
                                 ??_strcmp 00A3                                   ??_strcpy 00A3  
                       __end_of_OpenTimer0 43F4                          __size_of___awtoft 0048  
                        __size_of___ftpack 0120                          __size_of_cmFftFun 0414  
                               ?_InitUSART 0001                                __pbssCOMRAM 0028  
                               ?_ReadUSART 0001                              __pcstackBANK0 0080  
                            __pcstackBANK1 0100                          i2___lwmod@divisor 0003  
                        i2___lwmod@counter 0005                            ?_MessageRoutine 0001  
                             _isdigit$2250 00A0                            Delay1KTCYx@unit 009F  
                                 ?i1_putch 0001                                 ?_OpenUSART 009F  
                                 ?_BusyADC 0001                                   ?_ReadADC 009F  
                                __pnvBANK1 01FA                         __end_of_PumpDetect 3064  
                                cmFftFun@k 0147                           ___lwdiv@dividend 009F  
                  cmStuffsWrapperFun@iTemp 0151                                  __pintcode 0008  
                            __pmediumconst 76D4                                   ?___aldiv 009F  
                               ?_TimingISR 0001                                   ?___ftadd 00BA  
                                 ?___ftdiv 00D7                                   ?___ftneg 009F  
                                 ?___ftmul 00AB                                   ?___fttol 0109  
                            ?_Delay10KTCYx 0001                                   ?___lwdiv 009F  
                                 ?___lwmod 00A6                                __pintcodelo 0018  
                                 ?_fix_fft 00AB                                   ?_isdigit 0001  
                                _eval_poly 38B8                           ___lwdiv@quotient 00A4  
                              ??i1___lwdiv 001A                                ??i1___lwmod 0021  
                           __size_of_frexp 00AE                                ??i2___lwmod 0005  
                           __size_of_putch 0010        cmFilterHighPassUsingLowPass@Nsignal 00C1  
                           i1_isdigit$2250 0017                            ___aldiv@divisor 00A3  
                          ___aldiv@counter 00A7                             ___wmul@product 00A3  
                                 _LATBbits 000F8A                                   _LATCbits 000F8B  
                              ??i1_isdigit 0016                                   _IPR1bits 000F9F  
                                 _PIE1bits 000F9D                       _SerialRxPinInterrupt 0018  
                                 i1u701_20 42DA                                   i1u701_27 42D0  
                                 i2u502_40 2B42                                   i2u503_40 2B5A  
                                 i1u680_20 1896                                   i1u680_27 188C  
                                 i1u681_20 18D2                                   i1u681_27 18C8  
                                 _PIR1bits 000F9E                                   i1u686_20 19B0  
                                 i1u678_20 183E                                   i1u686_27 19A6  
                                 i1u678_27 1834        cmFilterHighPassUsingLowPass@xBuffer 00BB  
                                 i1u699_20 1B9C                                   i1u699_27 1B92  
                                 i2u499_40 2AF4                       __size_of_ReadAndTime 01F2  
                                 _RCONbits 000FD0                             ??_Delay10KTCYx 009F  
                              ??_ConfigADC 009F                                 _ADCON0bits 000FC2  
                        ___wmul@multiplier 009F                                   i1___wmul 43A6  
                               printf@flag 00C2                                   _DayCount 002A  
                               printf@prec 00BD                                ??_InitUSART 00A2  
                               ?_eval_poly 00C6                                ??_ReadUSART 0016  
        cmFilterHighPassUsingLowPass@F4485 0166                           Delay10KTCYx@unit 00A0  
                                 i1_printf 17EC                                   i1_strcpy 429E  
                                fix_fft@fi 00AD                                  fix_fft@fr 00AB  
                                fix_fft@nn 0104                                  fix_fft@qi 010E  
                                fix_fft@mr 0122                                  fix_fft@ti 011A  
                                fix_fft@qr 010C                                  fix_fft@wi 0112  
                                fix_fft@tr 0118                                  fix_fft@wr 0110  
                        ___lmul@multiplier 009F                                _INTCON2bits 000FF1  
            ?_cmFilterHighPassUsingLowPass 0001                                  copy_data0 3D06  
                                copy_data1 3D3E          cmFilterHighPassUsingLowPass@j_440 00C3  
                                _xshortavg 01B6                                ??_OpenUSART 00A1  
                                 i1putch@c 0016                                   _NewMonth 016E  
                                _yshortavg 01BE                            OpenUSART@config 00A1  
                         __size_ofi1_putch 000E                               _Timer0Config 0046  
                             _Timer1Config 0047                                  frexp@eptr 00A2  
                                _zshortavg 01C6                      ?_SerialRxPinInterrupt 0001  
                         __size_of_BusyADC 000E                           __size_of_ReadADC 0014  
                                 __Hrparam 0000                                   _TimeLoop 3DF4  
                                 __Lrparam 0000                       __size_of_SetDateTime 025C  
                                 _Sinewave 76D5                                ??_TimingISR 0006  
                         __size_of___aldiv 012C                           __size_of___ftadd 027E  
                         __size_of___ftdiv 0142                           __size_of___ftneg 0030  
                         __size_of___ftmul 015C                           __size_of___fttol 0132  
                         __size_of___lwdiv 0082                           __size_of___lwmod 006C  
                                 ___awtoft 4256                                   ___ftpack 36A0  
                                 _cmFftFun 0FE0                      approxRollingAverage@N 00B5  
                                 _cmWinLen 002C                           __size_of_fix_fft 0A3E  
                         __size_of_isdigit 002E                            ___lwdiv@divisor 00A1  
                          ___lwdiv@counter 00A3                                   __ptext10 2CC2  
                                 __ptext11 3D54                                   __ptext20 3064  
                                 __ptext12 3574                                   __ptext21 25BE  
                                 __ptext13 3DF4                                   __ptext30 0BCA  
                                 __ptext22 4256                                   __ptext14 44CE  
                                 __ptext31 420C                                   __ptext23 36A0  
                                 __ptext15 39A6                                   __ptext40 42E4  
                                 __ptext32 4064                                   __ptext24 44BA  
                                 __ptext16 3A6E                                   __ptext41 44A4  
                                 __ptext33 283C                                   __ptext25 448E  
                                 __ptext17 3B36                                   __ptext50 429E  
                                 __ptext42 443A                                   __ptext34 13F4  
                                 __ptext26 4538                                   __ptext18 3442  
                                 __ptext51 17EC                                   __ptext43 3E78  
                                 __ptext35 44F2                                   __ptext27 4502  
                                 __ptext19 431C                                   __ptext52 451E  
                                 __ptext44 452C                                   __ptext36 3FF8  
                                 __ptext28 2EB4                                   __ptext53 4418  
                                 __ptext45 43CE                                   __ptext37 3EFC  
                                 __ptext29 437A                                   __ptext54 43A6  
                                 __ptext46 44E0                                   __ptext38 37C0  
                                 __ptext55 4174                                   __ptext47 445A  
                                 __ptext39 434C                                   __ptext56 40C2  
                                 __ptext48 4510                                _offcountmax 005A  
                                 __ptext57 43F4                                   __ptext59 41C0  
              __size_of_cmStuffsWrapperFun 0370                         i1___lwdiv@dividend 0016  
                               strcpy@from 00A1                              __size_of_atoi 00F8  
                            __size_of_main 02F4                                   _offcount 01AE  
                            ??_Delay10TCYx 009F                                   _onthresh 005C  
                                 _overflow 01D0                                _UART1Config 0060  
                                 atoi@sign 00A9                              ??_Delay1KTCYx 009F  
                                printf@len 00C0                                   main@argc 0153  
                                 main@argv 0155                                  printf@val 00C3  
                                 fix_fft@b 011C                                   fix_fft@c 012E  
                                 fix_fft@i 011E                                   fix_fft@j 012A  
                                 fix_fft@k 0100                                   fix_fft@l 0126  
                                 fix_fft@m 00AF                                   fix_fft@n 0114  
                                 _xlongavg 01B2                                   _ylongavg 01BA  
cmFilterHighPassUsingLowPass@cmFilterCoeff 00B1                         i1___lwdiv@quotient 001B  
                                 log@coeff 7CDF                                   _zlongavg 01C2  
                         ??_MessageRoutine 00C8                                 _INTCONbits 000FF2  
                              ??_eval_poly 00CD                             OpenUSART@spbrg 009F  
                                 isdigit@c 00A1                       __end_of_Delay10KTCYx 4478  
                                 intlevel1 0000                                   intlevel2 0000  
                         ___lwmod@dividend 00A6                     ??_SerialRxPinInterrupt 008D  
           ??_cmFilterHighPassUsingLowPass 00A5                                _BTcountdown 01CA  
                                 printf@ap 00BE                             _cmWeightVector 0170  
                                 printf@cp 00BB                    __size_of_InitInterrupts 0012  
                         cmFftFun@sizeData 013D              __size_of_approxRollingAverage 00A0  
                      __end_of_Delay10TCYx 44A4                                   strcmp@s1 009F  
                                 strcmp@s2 00A1                            ___lwmod@divisor 00A8  
                                 strcpy@cp 00A3                                   strcpy@to 009F  
                      __end_of_Delay1KTCYx 44BA                            ___lwmod@counter 00AA  
                             ___aldiv@sign 00A8                               _USART_Status 0048  
